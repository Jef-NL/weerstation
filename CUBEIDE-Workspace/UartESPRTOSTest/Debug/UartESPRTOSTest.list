
UartESPRTOSTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b27c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  0800b340  0800b340  0001b340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9f8  0800b9f8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b9f8  0800b9f8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b9f8  0800b9f8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9f8  0800b9f8  0001b9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9fc  0800b9fc  0001b9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ba00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016fc  200001e0  0800bbe0  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200018dc  0800bbe0  000218dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c4c9  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b0b  00000000  00000000  0003c6d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001670  00000000  00000000  000401e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001488  00000000  00000000  00041850  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001183e  00000000  00000000  00042cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013cf3  00000000  00000000  00054516  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005d182  00000000  00000000  00068209  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c538b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a14  00000000  00000000  000c5408  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b324 	.word	0x0800b324

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800b324 	.word	0x0800b324

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 fef1 	bl	8001210 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fe49 	bl	80010d0 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fee3 	bl	8001210 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fed9 	bl	8001210 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fe6b 	bl	8001148 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe61 	bl	8001148 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dadd>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	464f      	mov	r7, r9
 8000498:	4646      	mov	r6, r8
 800049a:	46d6      	mov	lr, sl
 800049c:	000c      	movs	r4, r1
 800049e:	0309      	lsls	r1, r1, #12
 80004a0:	b5c0      	push	{r6, r7, lr}
 80004a2:	0a49      	lsrs	r1, r1, #9
 80004a4:	0f47      	lsrs	r7, r0, #29
 80004a6:	005e      	lsls	r6, r3, #1
 80004a8:	4339      	orrs	r1, r7
 80004aa:	031f      	lsls	r7, r3, #12
 80004ac:	0fdb      	lsrs	r3, r3, #31
 80004ae:	469c      	mov	ip, r3
 80004b0:	0065      	lsls	r5, r4, #1
 80004b2:	0a7b      	lsrs	r3, r7, #9
 80004b4:	0f57      	lsrs	r7, r2, #29
 80004b6:	431f      	orrs	r7, r3
 80004b8:	0d6d      	lsrs	r5, r5, #21
 80004ba:	0fe4      	lsrs	r4, r4, #31
 80004bc:	0d76      	lsrs	r6, r6, #21
 80004be:	46a1      	mov	r9, r4
 80004c0:	00c0      	lsls	r0, r0, #3
 80004c2:	46b8      	mov	r8, r7
 80004c4:	00d2      	lsls	r2, r2, #3
 80004c6:	1bab      	subs	r3, r5, r6
 80004c8:	4564      	cmp	r4, ip
 80004ca:	d07b      	beq.n	80005c4 <__aeabi_dadd+0x130>
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	dd5f      	ble.n	8000590 <__aeabi_dadd+0xfc>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d000      	beq.n	80004d6 <__aeabi_dadd+0x42>
 80004d4:	e0a4      	b.n	8000620 <__aeabi_dadd+0x18c>
 80004d6:	003e      	movs	r6, r7
 80004d8:	4316      	orrs	r6, r2
 80004da:	d100      	bne.n	80004de <__aeabi_dadd+0x4a>
 80004dc:	e112      	b.n	8000704 <__aeabi_dadd+0x270>
 80004de:	1e5e      	subs	r6, r3, #1
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d000      	beq.n	80004e6 <__aeabi_dadd+0x52>
 80004e4:	e19e      	b.n	8000824 <__aeabi_dadd+0x390>
 80004e6:	1a87      	subs	r7, r0, r2
 80004e8:	4643      	mov	r3, r8
 80004ea:	42b8      	cmp	r0, r7
 80004ec:	4180      	sbcs	r0, r0
 80004ee:	2501      	movs	r5, #1
 80004f0:	1ac9      	subs	r1, r1, r3
 80004f2:	4240      	negs	r0, r0
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	020b      	lsls	r3, r1, #8
 80004f8:	d400      	bmi.n	80004fc <__aeabi_dadd+0x68>
 80004fa:	e131      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80004fc:	0249      	lsls	r1, r1, #9
 80004fe:	0a4e      	lsrs	r6, r1, #9
 8000500:	2e00      	cmp	r6, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x72>
 8000504:	e16e      	b.n	80007e4 <__aeabi_dadd+0x350>
 8000506:	0030      	movs	r0, r6
 8000508:	f001 fe38 	bl	800217c <__clzsi2>
 800050c:	0003      	movs	r3, r0
 800050e:	3b08      	subs	r3, #8
 8000510:	2b1f      	cmp	r3, #31
 8000512:	dd00      	ble.n	8000516 <__aeabi_dadd+0x82>
 8000514:	e161      	b.n	80007da <__aeabi_dadd+0x346>
 8000516:	2220      	movs	r2, #32
 8000518:	0039      	movs	r1, r7
 800051a:	1ad2      	subs	r2, r2, r3
 800051c:	409e      	lsls	r6, r3
 800051e:	40d1      	lsrs	r1, r2
 8000520:	409f      	lsls	r7, r3
 8000522:	430e      	orrs	r6, r1
 8000524:	429d      	cmp	r5, r3
 8000526:	dd00      	ble.n	800052a <__aeabi_dadd+0x96>
 8000528:	e151      	b.n	80007ce <__aeabi_dadd+0x33a>
 800052a:	1b5d      	subs	r5, r3, r5
 800052c:	1c6b      	adds	r3, r5, #1
 800052e:	2b1f      	cmp	r3, #31
 8000530:	dd00      	ble.n	8000534 <__aeabi_dadd+0xa0>
 8000532:	e17c      	b.n	800082e <__aeabi_dadd+0x39a>
 8000534:	2120      	movs	r1, #32
 8000536:	1ac9      	subs	r1, r1, r3
 8000538:	003d      	movs	r5, r7
 800053a:	0030      	movs	r0, r6
 800053c:	408f      	lsls	r7, r1
 800053e:	4088      	lsls	r0, r1
 8000540:	40dd      	lsrs	r5, r3
 8000542:	1e79      	subs	r1, r7, #1
 8000544:	418f      	sbcs	r7, r1
 8000546:	0031      	movs	r1, r6
 8000548:	2207      	movs	r2, #7
 800054a:	4328      	orrs	r0, r5
 800054c:	40d9      	lsrs	r1, r3
 800054e:	2500      	movs	r5, #0
 8000550:	4307      	orrs	r7, r0
 8000552:	403a      	ands	r2, r7
 8000554:	2a00      	cmp	r2, #0
 8000556:	d009      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000558:	230f      	movs	r3, #15
 800055a:	403b      	ands	r3, r7
 800055c:	2b04      	cmp	r3, #4
 800055e:	d005      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	42bb      	cmp	r3, r7
 8000564:	41bf      	sbcs	r7, r7
 8000566:	427f      	negs	r7, r7
 8000568:	19c9      	adds	r1, r1, r7
 800056a:	001f      	movs	r7, r3
 800056c:	020b      	lsls	r3, r1, #8
 800056e:	d400      	bmi.n	8000572 <__aeabi_dadd+0xde>
 8000570:	e226      	b.n	80009c0 <__aeabi_dadd+0x52c>
 8000572:	1c6a      	adds	r2, r5, #1
 8000574:	4bc6      	ldr	r3, [pc, #792]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000576:	0555      	lsls	r5, r2, #21
 8000578:	0d6d      	lsrs	r5, r5, #21
 800057a:	429a      	cmp	r2, r3
 800057c:	d100      	bne.n	8000580 <__aeabi_dadd+0xec>
 800057e:	e106      	b.n	800078e <__aeabi_dadd+0x2fa>
 8000580:	4ac4      	ldr	r2, [pc, #784]	; (8000894 <__aeabi_dadd+0x400>)
 8000582:	08ff      	lsrs	r7, r7, #3
 8000584:	400a      	ands	r2, r1
 8000586:	0753      	lsls	r3, r2, #29
 8000588:	0252      	lsls	r2, r2, #9
 800058a:	433b      	orrs	r3, r7
 800058c:	0b12      	lsrs	r2, r2, #12
 800058e:	e08e      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000590:	2b00      	cmp	r3, #0
 8000592:	d000      	beq.n	8000596 <__aeabi_dadd+0x102>
 8000594:	e0b8      	b.n	8000708 <__aeabi_dadd+0x274>
 8000596:	1c6b      	adds	r3, r5, #1
 8000598:	055b      	lsls	r3, r3, #21
 800059a:	0d5b      	lsrs	r3, r3, #21
 800059c:	2b01      	cmp	r3, #1
 800059e:	dc00      	bgt.n	80005a2 <__aeabi_dadd+0x10e>
 80005a0:	e130      	b.n	8000804 <__aeabi_dadd+0x370>
 80005a2:	1a87      	subs	r7, r0, r2
 80005a4:	4643      	mov	r3, r8
 80005a6:	42b8      	cmp	r0, r7
 80005a8:	41b6      	sbcs	r6, r6
 80005aa:	1acb      	subs	r3, r1, r3
 80005ac:	4276      	negs	r6, r6
 80005ae:	1b9e      	subs	r6, r3, r6
 80005b0:	0233      	lsls	r3, r6, #8
 80005b2:	d500      	bpl.n	80005b6 <__aeabi_dadd+0x122>
 80005b4:	e14c      	b.n	8000850 <__aeabi_dadd+0x3bc>
 80005b6:	003b      	movs	r3, r7
 80005b8:	4333      	orrs	r3, r6
 80005ba:	d1a1      	bne.n	8000500 <__aeabi_dadd+0x6c>
 80005bc:	2200      	movs	r2, #0
 80005be:	2400      	movs	r4, #0
 80005c0:	2500      	movs	r5, #0
 80005c2:	e070      	b.n	80006a6 <__aeabi_dadd+0x212>
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dc00      	bgt.n	80005ca <__aeabi_dadd+0x136>
 80005c8:	e0e5      	b.n	8000796 <__aeabi_dadd+0x302>
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d100      	bne.n	80005d0 <__aeabi_dadd+0x13c>
 80005ce:	e083      	b.n	80006d8 <__aeabi_dadd+0x244>
 80005d0:	4eaf      	ldr	r6, [pc, #700]	; (8000890 <__aeabi_dadd+0x3fc>)
 80005d2:	42b5      	cmp	r5, r6
 80005d4:	d060      	beq.n	8000698 <__aeabi_dadd+0x204>
 80005d6:	2680      	movs	r6, #128	; 0x80
 80005d8:	0436      	lsls	r6, r6, #16
 80005da:	4337      	orrs	r7, r6
 80005dc:	46b8      	mov	r8, r7
 80005de:	2b38      	cmp	r3, #56	; 0x38
 80005e0:	dc00      	bgt.n	80005e4 <__aeabi_dadd+0x150>
 80005e2:	e13e      	b.n	8000862 <__aeabi_dadd+0x3ce>
 80005e4:	4643      	mov	r3, r8
 80005e6:	4313      	orrs	r3, r2
 80005e8:	001f      	movs	r7, r3
 80005ea:	1e7a      	subs	r2, r7, #1
 80005ec:	4197      	sbcs	r7, r2
 80005ee:	183f      	adds	r7, r7, r0
 80005f0:	4287      	cmp	r7, r0
 80005f2:	4180      	sbcs	r0, r0
 80005f4:	4240      	negs	r0, r0
 80005f6:	1809      	adds	r1, r1, r0
 80005f8:	020b      	lsls	r3, r1, #8
 80005fa:	d400      	bmi.n	80005fe <__aeabi_dadd+0x16a>
 80005fc:	e0b0      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80005fe:	4ba4      	ldr	r3, [pc, #656]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000600:	3501      	adds	r5, #1
 8000602:	429d      	cmp	r5, r3
 8000604:	d100      	bne.n	8000608 <__aeabi_dadd+0x174>
 8000606:	e0c3      	b.n	8000790 <__aeabi_dadd+0x2fc>
 8000608:	4aa2      	ldr	r2, [pc, #648]	; (8000894 <__aeabi_dadd+0x400>)
 800060a:	087b      	lsrs	r3, r7, #1
 800060c:	400a      	ands	r2, r1
 800060e:	2101      	movs	r1, #1
 8000610:	400f      	ands	r7, r1
 8000612:	431f      	orrs	r7, r3
 8000614:	0851      	lsrs	r1, r2, #1
 8000616:	07d3      	lsls	r3, r2, #31
 8000618:	2207      	movs	r2, #7
 800061a:	431f      	orrs	r7, r3
 800061c:	403a      	ands	r2, r7
 800061e:	e799      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000620:	4e9b      	ldr	r6, [pc, #620]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000622:	42b5      	cmp	r5, r6
 8000624:	d038      	beq.n	8000698 <__aeabi_dadd+0x204>
 8000626:	2680      	movs	r6, #128	; 0x80
 8000628:	0436      	lsls	r6, r6, #16
 800062a:	4337      	orrs	r7, r6
 800062c:	46b8      	mov	r8, r7
 800062e:	2b38      	cmp	r3, #56	; 0x38
 8000630:	dd00      	ble.n	8000634 <__aeabi_dadd+0x1a0>
 8000632:	e0dc      	b.n	80007ee <__aeabi_dadd+0x35a>
 8000634:	2b1f      	cmp	r3, #31
 8000636:	dc00      	bgt.n	800063a <__aeabi_dadd+0x1a6>
 8000638:	e130      	b.n	800089c <__aeabi_dadd+0x408>
 800063a:	001e      	movs	r6, r3
 800063c:	4647      	mov	r7, r8
 800063e:	3e20      	subs	r6, #32
 8000640:	40f7      	lsrs	r7, r6
 8000642:	46bc      	mov	ip, r7
 8000644:	2b20      	cmp	r3, #32
 8000646:	d004      	beq.n	8000652 <__aeabi_dadd+0x1be>
 8000648:	2640      	movs	r6, #64	; 0x40
 800064a:	1af3      	subs	r3, r6, r3
 800064c:	4646      	mov	r6, r8
 800064e:	409e      	lsls	r6, r3
 8000650:	4332      	orrs	r2, r6
 8000652:	0017      	movs	r7, r2
 8000654:	4663      	mov	r3, ip
 8000656:	1e7a      	subs	r2, r7, #1
 8000658:	4197      	sbcs	r7, r2
 800065a:	431f      	orrs	r7, r3
 800065c:	e0cc      	b.n	80007f8 <__aeabi_dadd+0x364>
 800065e:	2b00      	cmp	r3, #0
 8000660:	d100      	bne.n	8000664 <__aeabi_dadd+0x1d0>
 8000662:	e204      	b.n	8000a6e <__aeabi_dadd+0x5da>
 8000664:	4643      	mov	r3, r8
 8000666:	4313      	orrs	r3, r2
 8000668:	d100      	bne.n	800066c <__aeabi_dadd+0x1d8>
 800066a:	e159      	b.n	8000920 <__aeabi_dadd+0x48c>
 800066c:	074b      	lsls	r3, r1, #29
 800066e:	08c0      	lsrs	r0, r0, #3
 8000670:	4318      	orrs	r0, r3
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	08c9      	lsrs	r1, r1, #3
 8000676:	031b      	lsls	r3, r3, #12
 8000678:	4219      	tst	r1, r3
 800067a:	d008      	beq.n	800068e <__aeabi_dadd+0x1fa>
 800067c:	4645      	mov	r5, r8
 800067e:	08ed      	lsrs	r5, r5, #3
 8000680:	421d      	tst	r5, r3
 8000682:	d104      	bne.n	800068e <__aeabi_dadd+0x1fa>
 8000684:	4643      	mov	r3, r8
 8000686:	08d0      	lsrs	r0, r2, #3
 8000688:	0759      	lsls	r1, r3, #29
 800068a:	4308      	orrs	r0, r1
 800068c:	0029      	movs	r1, r5
 800068e:	0f42      	lsrs	r2, r0, #29
 8000690:	00c9      	lsls	r1, r1, #3
 8000692:	4d7f      	ldr	r5, [pc, #508]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000694:	4311      	orrs	r1, r2
 8000696:	00c0      	lsls	r0, r0, #3
 8000698:	074b      	lsls	r3, r1, #29
 800069a:	08ca      	lsrs	r2, r1, #3
 800069c:	497c      	ldr	r1, [pc, #496]	; (8000890 <__aeabi_dadd+0x3fc>)
 800069e:	08c0      	lsrs	r0, r0, #3
 80006a0:	4303      	orrs	r3, r0
 80006a2:	428d      	cmp	r5, r1
 80006a4:	d068      	beq.n	8000778 <__aeabi_dadd+0x2e4>
 80006a6:	0312      	lsls	r2, r2, #12
 80006a8:	056d      	lsls	r5, r5, #21
 80006aa:	0b12      	lsrs	r2, r2, #12
 80006ac:	0d6d      	lsrs	r5, r5, #21
 80006ae:	2100      	movs	r1, #0
 80006b0:	0312      	lsls	r2, r2, #12
 80006b2:	0018      	movs	r0, r3
 80006b4:	0b13      	lsrs	r3, r2, #12
 80006b6:	0d0a      	lsrs	r2, r1, #20
 80006b8:	0512      	lsls	r2, r2, #20
 80006ba:	431a      	orrs	r2, r3
 80006bc:	4b76      	ldr	r3, [pc, #472]	; (8000898 <__aeabi_dadd+0x404>)
 80006be:	052d      	lsls	r5, r5, #20
 80006c0:	4013      	ands	r3, r2
 80006c2:	432b      	orrs	r3, r5
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	07e4      	lsls	r4, r4, #31
 80006c8:	085b      	lsrs	r3, r3, #1
 80006ca:	4323      	orrs	r3, r4
 80006cc:	0019      	movs	r1, r3
 80006ce:	bc1c      	pop	{r2, r3, r4}
 80006d0:	4690      	mov	r8, r2
 80006d2:	4699      	mov	r9, r3
 80006d4:	46a2      	mov	sl, r4
 80006d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d8:	003e      	movs	r6, r7
 80006da:	4316      	orrs	r6, r2
 80006dc:	d012      	beq.n	8000704 <__aeabi_dadd+0x270>
 80006de:	1e5e      	subs	r6, r3, #1
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x252>
 80006e4:	e100      	b.n	80008e8 <__aeabi_dadd+0x454>
 80006e6:	1887      	adds	r7, r0, r2
 80006e8:	4287      	cmp	r7, r0
 80006ea:	4180      	sbcs	r0, r0
 80006ec:	4441      	add	r1, r8
 80006ee:	4240      	negs	r0, r0
 80006f0:	1809      	adds	r1, r1, r0
 80006f2:	2501      	movs	r5, #1
 80006f4:	020b      	lsls	r3, r1, #8
 80006f6:	d533      	bpl.n	8000760 <__aeabi_dadd+0x2cc>
 80006f8:	2502      	movs	r5, #2
 80006fa:	e785      	b.n	8000608 <__aeabi_dadd+0x174>
 80006fc:	4664      	mov	r4, ip
 80006fe:	0033      	movs	r3, r6
 8000700:	4641      	mov	r1, r8
 8000702:	0010      	movs	r0, r2
 8000704:	001d      	movs	r5, r3
 8000706:	e7c7      	b.n	8000698 <__aeabi_dadd+0x204>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d000      	beq.n	800070e <__aeabi_dadd+0x27a>
 800070c:	e0da      	b.n	80008c4 <__aeabi_dadd+0x430>
 800070e:	000c      	movs	r4, r1
 8000710:	4304      	orrs	r4, r0
 8000712:	d0f3      	beq.n	80006fc <__aeabi_dadd+0x268>
 8000714:	1c5c      	adds	r4, r3, #1
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x286>
 8000718:	e19f      	b.n	8000a5a <__aeabi_dadd+0x5c6>
 800071a:	4c5d      	ldr	r4, [pc, #372]	; (8000890 <__aeabi_dadd+0x3fc>)
 800071c:	42a6      	cmp	r6, r4
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x28e>
 8000720:	e12f      	b.n	8000982 <__aeabi_dadd+0x4ee>
 8000722:	43db      	mvns	r3, r3
 8000724:	2b38      	cmp	r3, #56	; 0x38
 8000726:	dd00      	ble.n	800072a <__aeabi_dadd+0x296>
 8000728:	e166      	b.n	80009f8 <__aeabi_dadd+0x564>
 800072a:	2b1f      	cmp	r3, #31
 800072c:	dd00      	ble.n	8000730 <__aeabi_dadd+0x29c>
 800072e:	e183      	b.n	8000a38 <__aeabi_dadd+0x5a4>
 8000730:	2420      	movs	r4, #32
 8000732:	0005      	movs	r5, r0
 8000734:	1ae4      	subs	r4, r4, r3
 8000736:	000f      	movs	r7, r1
 8000738:	40dd      	lsrs	r5, r3
 800073a:	40d9      	lsrs	r1, r3
 800073c:	40a0      	lsls	r0, r4
 800073e:	4643      	mov	r3, r8
 8000740:	40a7      	lsls	r7, r4
 8000742:	1a5b      	subs	r3, r3, r1
 8000744:	1e44      	subs	r4, r0, #1
 8000746:	41a0      	sbcs	r0, r4
 8000748:	4698      	mov	r8, r3
 800074a:	432f      	orrs	r7, r5
 800074c:	4338      	orrs	r0, r7
 800074e:	1a17      	subs	r7, r2, r0
 8000750:	42ba      	cmp	r2, r7
 8000752:	4192      	sbcs	r2, r2
 8000754:	4643      	mov	r3, r8
 8000756:	4252      	negs	r2, r2
 8000758:	1a99      	subs	r1, r3, r2
 800075a:	4664      	mov	r4, ip
 800075c:	0035      	movs	r5, r6
 800075e:	e6ca      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000760:	2207      	movs	r2, #7
 8000762:	403a      	ands	r2, r7
 8000764:	2a00      	cmp	r2, #0
 8000766:	d000      	beq.n	800076a <__aeabi_dadd+0x2d6>
 8000768:	e6f6      	b.n	8000558 <__aeabi_dadd+0xc4>
 800076a:	074b      	lsls	r3, r1, #29
 800076c:	08ca      	lsrs	r2, r1, #3
 800076e:	4948      	ldr	r1, [pc, #288]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000770:	08ff      	lsrs	r7, r7, #3
 8000772:	433b      	orrs	r3, r7
 8000774:	428d      	cmp	r5, r1
 8000776:	d196      	bne.n	80006a6 <__aeabi_dadd+0x212>
 8000778:	0019      	movs	r1, r3
 800077a:	4311      	orrs	r1, r2
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0x2ec>
 800077e:	e19e      	b.n	8000abe <__aeabi_dadd+0x62a>
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	0309      	lsls	r1, r1, #12
 8000784:	430a      	orrs	r2, r1
 8000786:	0312      	lsls	r2, r2, #12
 8000788:	0b12      	lsrs	r2, r2, #12
 800078a:	4d41      	ldr	r5, [pc, #260]	; (8000890 <__aeabi_dadd+0x3fc>)
 800078c:	e78f      	b.n	80006ae <__aeabi_dadd+0x21a>
 800078e:	0015      	movs	r5, r2
 8000790:	2200      	movs	r2, #0
 8000792:	2300      	movs	r3, #0
 8000794:	e78b      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000796:	2b00      	cmp	r3, #0
 8000798:	d000      	beq.n	800079c <__aeabi_dadd+0x308>
 800079a:	e0c7      	b.n	800092c <__aeabi_dadd+0x498>
 800079c:	1c6b      	adds	r3, r5, #1
 800079e:	055f      	lsls	r7, r3, #21
 80007a0:	0d7f      	lsrs	r7, r7, #21
 80007a2:	2f01      	cmp	r7, #1
 80007a4:	dc00      	bgt.n	80007a8 <__aeabi_dadd+0x314>
 80007a6:	e0f1      	b.n	800098c <__aeabi_dadd+0x4f8>
 80007a8:	4d39      	ldr	r5, [pc, #228]	; (8000890 <__aeabi_dadd+0x3fc>)
 80007aa:	42ab      	cmp	r3, r5
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x31c>
 80007ae:	e0b9      	b.n	8000924 <__aeabi_dadd+0x490>
 80007b0:	1885      	adds	r5, r0, r2
 80007b2:	000a      	movs	r2, r1
 80007b4:	4285      	cmp	r5, r0
 80007b6:	4189      	sbcs	r1, r1
 80007b8:	4442      	add	r2, r8
 80007ba:	4249      	negs	r1, r1
 80007bc:	1851      	adds	r1, r2, r1
 80007be:	2207      	movs	r2, #7
 80007c0:	07cf      	lsls	r7, r1, #31
 80007c2:	086d      	lsrs	r5, r5, #1
 80007c4:	432f      	orrs	r7, r5
 80007c6:	0849      	lsrs	r1, r1, #1
 80007c8:	403a      	ands	r2, r7
 80007ca:	001d      	movs	r5, r3
 80007cc:	e6c2      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007ce:	2207      	movs	r2, #7
 80007d0:	4930      	ldr	r1, [pc, #192]	; (8000894 <__aeabi_dadd+0x400>)
 80007d2:	1aed      	subs	r5, r5, r3
 80007d4:	4031      	ands	r1, r6
 80007d6:	403a      	ands	r2, r7
 80007d8:	e6bc      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007da:	003e      	movs	r6, r7
 80007dc:	3828      	subs	r0, #40	; 0x28
 80007de:	4086      	lsls	r6, r0
 80007e0:	2700      	movs	r7, #0
 80007e2:	e69f      	b.n	8000524 <__aeabi_dadd+0x90>
 80007e4:	0038      	movs	r0, r7
 80007e6:	f001 fcc9 	bl	800217c <__clzsi2>
 80007ea:	3020      	adds	r0, #32
 80007ec:	e68e      	b.n	800050c <__aeabi_dadd+0x78>
 80007ee:	4643      	mov	r3, r8
 80007f0:	4313      	orrs	r3, r2
 80007f2:	001f      	movs	r7, r3
 80007f4:	1e7a      	subs	r2, r7, #1
 80007f6:	4197      	sbcs	r7, r2
 80007f8:	1bc7      	subs	r7, r0, r7
 80007fa:	42b8      	cmp	r0, r7
 80007fc:	4180      	sbcs	r0, r0
 80007fe:	4240      	negs	r0, r0
 8000800:	1a09      	subs	r1, r1, r0
 8000802:	e678      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000804:	000e      	movs	r6, r1
 8000806:	003b      	movs	r3, r7
 8000808:	4306      	orrs	r6, r0
 800080a:	4313      	orrs	r3, r2
 800080c:	2d00      	cmp	r5, #0
 800080e:	d161      	bne.n	80008d4 <__aeabi_dadd+0x440>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_dadd+0x382>
 8000814:	e0f4      	b.n	8000a00 <__aeabi_dadd+0x56c>
 8000816:	2b00      	cmp	r3, #0
 8000818:	d100      	bne.n	800081c <__aeabi_dadd+0x388>
 800081a:	e11b      	b.n	8000a54 <__aeabi_dadd+0x5c0>
 800081c:	4664      	mov	r4, ip
 800081e:	0039      	movs	r1, r7
 8000820:	0010      	movs	r0, r2
 8000822:	e739      	b.n	8000698 <__aeabi_dadd+0x204>
 8000824:	4f1a      	ldr	r7, [pc, #104]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000826:	42bb      	cmp	r3, r7
 8000828:	d07a      	beq.n	8000920 <__aeabi_dadd+0x48c>
 800082a:	0033      	movs	r3, r6
 800082c:	e6ff      	b.n	800062e <__aeabi_dadd+0x19a>
 800082e:	0030      	movs	r0, r6
 8000830:	3d1f      	subs	r5, #31
 8000832:	40e8      	lsrs	r0, r5
 8000834:	2b20      	cmp	r3, #32
 8000836:	d003      	beq.n	8000840 <__aeabi_dadd+0x3ac>
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	1acb      	subs	r3, r1, r3
 800083c:	409e      	lsls	r6, r3
 800083e:	4337      	orrs	r7, r6
 8000840:	1e7b      	subs	r3, r7, #1
 8000842:	419f      	sbcs	r7, r3
 8000844:	2207      	movs	r2, #7
 8000846:	4307      	orrs	r7, r0
 8000848:	403a      	ands	r2, r7
 800084a:	2100      	movs	r1, #0
 800084c:	2500      	movs	r5, #0
 800084e:	e789      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000850:	1a17      	subs	r7, r2, r0
 8000852:	4643      	mov	r3, r8
 8000854:	42ba      	cmp	r2, r7
 8000856:	41b6      	sbcs	r6, r6
 8000858:	1a59      	subs	r1, r3, r1
 800085a:	4276      	negs	r6, r6
 800085c:	1b8e      	subs	r6, r1, r6
 800085e:	4664      	mov	r4, ip
 8000860:	e64e      	b.n	8000500 <__aeabi_dadd+0x6c>
 8000862:	2b1f      	cmp	r3, #31
 8000864:	dd00      	ble.n	8000868 <__aeabi_dadd+0x3d4>
 8000866:	e0ad      	b.n	80009c4 <__aeabi_dadd+0x530>
 8000868:	2620      	movs	r6, #32
 800086a:	4647      	mov	r7, r8
 800086c:	1af6      	subs	r6, r6, r3
 800086e:	40b7      	lsls	r7, r6
 8000870:	46b9      	mov	r9, r7
 8000872:	0017      	movs	r7, r2
 8000874:	46b2      	mov	sl, r6
 8000876:	40df      	lsrs	r7, r3
 8000878:	464e      	mov	r6, r9
 800087a:	433e      	orrs	r6, r7
 800087c:	0037      	movs	r7, r6
 800087e:	4656      	mov	r6, sl
 8000880:	40b2      	lsls	r2, r6
 8000882:	1e56      	subs	r6, r2, #1
 8000884:	41b2      	sbcs	r2, r6
 8000886:	4317      	orrs	r7, r2
 8000888:	4642      	mov	r2, r8
 800088a:	40da      	lsrs	r2, r3
 800088c:	1889      	adds	r1, r1, r2
 800088e:	e6ae      	b.n	80005ee <__aeabi_dadd+0x15a>
 8000890:	000007ff 	.word	0x000007ff
 8000894:	ff7fffff 	.word	0xff7fffff
 8000898:	800fffff 	.word	0x800fffff
 800089c:	2620      	movs	r6, #32
 800089e:	4647      	mov	r7, r8
 80008a0:	1af6      	subs	r6, r6, r3
 80008a2:	40b7      	lsls	r7, r6
 80008a4:	46b9      	mov	r9, r7
 80008a6:	0017      	movs	r7, r2
 80008a8:	46b2      	mov	sl, r6
 80008aa:	40df      	lsrs	r7, r3
 80008ac:	464e      	mov	r6, r9
 80008ae:	433e      	orrs	r6, r7
 80008b0:	0037      	movs	r7, r6
 80008b2:	4656      	mov	r6, sl
 80008b4:	40b2      	lsls	r2, r6
 80008b6:	1e56      	subs	r6, r2, #1
 80008b8:	41b2      	sbcs	r2, r6
 80008ba:	4317      	orrs	r7, r2
 80008bc:	4642      	mov	r2, r8
 80008be:	40da      	lsrs	r2, r3
 80008c0:	1a89      	subs	r1, r1, r2
 80008c2:	e799      	b.n	80007f8 <__aeabi_dadd+0x364>
 80008c4:	4c7f      	ldr	r4, [pc, #508]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008c6:	42a6      	cmp	r6, r4
 80008c8:	d05b      	beq.n	8000982 <__aeabi_dadd+0x4ee>
 80008ca:	2480      	movs	r4, #128	; 0x80
 80008cc:	0424      	lsls	r4, r4, #16
 80008ce:	425b      	negs	r3, r3
 80008d0:	4321      	orrs	r1, r4
 80008d2:	e727      	b.n	8000724 <__aeabi_dadd+0x290>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d10c      	bne.n	80008f2 <__aeabi_dadd+0x45e>
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x44a>
 80008dc:	e0cb      	b.n	8000a76 <__aeabi_dadd+0x5e2>
 80008de:	4664      	mov	r4, ip
 80008e0:	0039      	movs	r1, r7
 80008e2:	0010      	movs	r0, r2
 80008e4:	4d77      	ldr	r5, [pc, #476]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008e6:	e6d7      	b.n	8000698 <__aeabi_dadd+0x204>
 80008e8:	4f76      	ldr	r7, [pc, #472]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008ea:	42bb      	cmp	r3, r7
 80008ec:	d018      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008ee:	0033      	movs	r3, r6
 80008f0:	e675      	b.n	80005de <__aeabi_dadd+0x14a>
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d014      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008f6:	074b      	lsls	r3, r1, #29
 80008f8:	08c0      	lsrs	r0, r0, #3
 80008fa:	4318      	orrs	r0, r3
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	08c9      	lsrs	r1, r1, #3
 8000900:	031b      	lsls	r3, r3, #12
 8000902:	4219      	tst	r1, r3
 8000904:	d007      	beq.n	8000916 <__aeabi_dadd+0x482>
 8000906:	08fc      	lsrs	r4, r7, #3
 8000908:	421c      	tst	r4, r3
 800090a:	d104      	bne.n	8000916 <__aeabi_dadd+0x482>
 800090c:	0779      	lsls	r1, r7, #29
 800090e:	08d0      	lsrs	r0, r2, #3
 8000910:	4308      	orrs	r0, r1
 8000912:	46e1      	mov	r9, ip
 8000914:	0021      	movs	r1, r4
 8000916:	464c      	mov	r4, r9
 8000918:	0f42      	lsrs	r2, r0, #29
 800091a:	00c9      	lsls	r1, r1, #3
 800091c:	4311      	orrs	r1, r2
 800091e:	00c0      	lsls	r0, r0, #3
 8000920:	4d68      	ldr	r5, [pc, #416]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000922:	e6b9      	b.n	8000698 <__aeabi_dadd+0x204>
 8000924:	001d      	movs	r5, r3
 8000926:	2200      	movs	r2, #0
 8000928:	2300      	movs	r3, #0
 800092a:	e6c0      	b.n	80006ae <__aeabi_dadd+0x21a>
 800092c:	2d00      	cmp	r5, #0
 800092e:	d15b      	bne.n	80009e8 <__aeabi_dadd+0x554>
 8000930:	000d      	movs	r5, r1
 8000932:	4305      	orrs	r5, r0
 8000934:	d100      	bne.n	8000938 <__aeabi_dadd+0x4a4>
 8000936:	e6e2      	b.n	80006fe <__aeabi_dadd+0x26a>
 8000938:	1c5d      	adds	r5, r3, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x4aa>
 800093c:	e0b0      	b.n	8000aa0 <__aeabi_dadd+0x60c>
 800093e:	4d61      	ldr	r5, [pc, #388]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000940:	42ae      	cmp	r6, r5
 8000942:	d01f      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 8000944:	43db      	mvns	r3, r3
 8000946:	2b38      	cmp	r3, #56	; 0x38
 8000948:	dc71      	bgt.n	8000a2e <__aeabi_dadd+0x59a>
 800094a:	2b1f      	cmp	r3, #31
 800094c:	dd00      	ble.n	8000950 <__aeabi_dadd+0x4bc>
 800094e:	e096      	b.n	8000a7e <__aeabi_dadd+0x5ea>
 8000950:	2520      	movs	r5, #32
 8000952:	000f      	movs	r7, r1
 8000954:	1aed      	subs	r5, r5, r3
 8000956:	40af      	lsls	r7, r5
 8000958:	46b9      	mov	r9, r7
 800095a:	0007      	movs	r7, r0
 800095c:	46aa      	mov	sl, r5
 800095e:	40df      	lsrs	r7, r3
 8000960:	464d      	mov	r5, r9
 8000962:	433d      	orrs	r5, r7
 8000964:	002f      	movs	r7, r5
 8000966:	4655      	mov	r5, sl
 8000968:	40a8      	lsls	r0, r5
 800096a:	40d9      	lsrs	r1, r3
 800096c:	1e45      	subs	r5, r0, #1
 800096e:	41a8      	sbcs	r0, r5
 8000970:	4488      	add	r8, r1
 8000972:	4307      	orrs	r7, r0
 8000974:	18bf      	adds	r7, r7, r2
 8000976:	4297      	cmp	r7, r2
 8000978:	4192      	sbcs	r2, r2
 800097a:	4251      	negs	r1, r2
 800097c:	4441      	add	r1, r8
 800097e:	0035      	movs	r5, r6
 8000980:	e63a      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000982:	4664      	mov	r4, ip
 8000984:	0035      	movs	r5, r6
 8000986:	4641      	mov	r1, r8
 8000988:	0010      	movs	r0, r2
 800098a:	e685      	b.n	8000698 <__aeabi_dadd+0x204>
 800098c:	000b      	movs	r3, r1
 800098e:	4303      	orrs	r3, r0
 8000990:	2d00      	cmp	r5, #0
 8000992:	d000      	beq.n	8000996 <__aeabi_dadd+0x502>
 8000994:	e663      	b.n	800065e <__aeabi_dadd+0x1ca>
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0f5      	beq.n	8000986 <__aeabi_dadd+0x4f2>
 800099a:	4643      	mov	r3, r8
 800099c:	4313      	orrs	r3, r2
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0x50e>
 80009a0:	e67a      	b.n	8000698 <__aeabi_dadd+0x204>
 80009a2:	1887      	adds	r7, r0, r2
 80009a4:	4287      	cmp	r7, r0
 80009a6:	4180      	sbcs	r0, r0
 80009a8:	2207      	movs	r2, #7
 80009aa:	4441      	add	r1, r8
 80009ac:	4240      	negs	r0, r0
 80009ae:	1809      	adds	r1, r1, r0
 80009b0:	403a      	ands	r2, r7
 80009b2:	020b      	lsls	r3, r1, #8
 80009b4:	d400      	bmi.n	80009b8 <__aeabi_dadd+0x524>
 80009b6:	e6d5      	b.n	8000764 <__aeabi_dadd+0x2d0>
 80009b8:	4b43      	ldr	r3, [pc, #268]	; (8000ac8 <__aeabi_dadd+0x634>)
 80009ba:	3501      	adds	r5, #1
 80009bc:	4019      	ands	r1, r3
 80009be:	e5c9      	b.n	8000554 <__aeabi_dadd+0xc0>
 80009c0:	0038      	movs	r0, r7
 80009c2:	e669      	b.n	8000698 <__aeabi_dadd+0x204>
 80009c4:	001e      	movs	r6, r3
 80009c6:	4647      	mov	r7, r8
 80009c8:	3e20      	subs	r6, #32
 80009ca:	40f7      	lsrs	r7, r6
 80009cc:	46bc      	mov	ip, r7
 80009ce:	2b20      	cmp	r3, #32
 80009d0:	d004      	beq.n	80009dc <__aeabi_dadd+0x548>
 80009d2:	2640      	movs	r6, #64	; 0x40
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	4646      	mov	r6, r8
 80009d8:	409e      	lsls	r6, r3
 80009da:	4332      	orrs	r2, r6
 80009dc:	0017      	movs	r7, r2
 80009de:	4663      	mov	r3, ip
 80009e0:	1e7a      	subs	r2, r7, #1
 80009e2:	4197      	sbcs	r7, r2
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e602      	b.n	80005ee <__aeabi_dadd+0x15a>
 80009e8:	4d36      	ldr	r5, [pc, #216]	; (8000ac4 <__aeabi_dadd+0x630>)
 80009ea:	42ae      	cmp	r6, r5
 80009ec:	d0ca      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 80009ee:	2580      	movs	r5, #128	; 0x80
 80009f0:	042d      	lsls	r5, r5, #16
 80009f2:	425b      	negs	r3, r3
 80009f4:	4329      	orrs	r1, r5
 80009f6:	e7a6      	b.n	8000946 <__aeabi_dadd+0x4b2>
 80009f8:	4308      	orrs	r0, r1
 80009fa:	1e41      	subs	r1, r0, #1
 80009fc:	4188      	sbcs	r0, r1
 80009fe:	e6a6      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d100      	bne.n	8000a06 <__aeabi_dadd+0x572>
 8000a04:	e648      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a06:	1a87      	subs	r7, r0, r2
 8000a08:	4643      	mov	r3, r8
 8000a0a:	42b8      	cmp	r0, r7
 8000a0c:	41b6      	sbcs	r6, r6
 8000a0e:	1acb      	subs	r3, r1, r3
 8000a10:	4276      	negs	r6, r6
 8000a12:	1b9e      	subs	r6, r3, r6
 8000a14:	0233      	lsls	r3, r6, #8
 8000a16:	d54b      	bpl.n	8000ab0 <__aeabi_dadd+0x61c>
 8000a18:	1a17      	subs	r7, r2, r0
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	42ba      	cmp	r2, r7
 8000a1e:	4192      	sbcs	r2, r2
 8000a20:	1a59      	subs	r1, r3, r1
 8000a22:	4252      	negs	r2, r2
 8000a24:	1a89      	subs	r1, r1, r2
 8000a26:	2207      	movs	r2, #7
 8000a28:	4664      	mov	r4, ip
 8000a2a:	403a      	ands	r2, r7
 8000a2c:	e592      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000a2e:	4301      	orrs	r1, r0
 8000a30:	000f      	movs	r7, r1
 8000a32:	1e79      	subs	r1, r7, #1
 8000a34:	418f      	sbcs	r7, r1
 8000a36:	e79d      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000a38:	001c      	movs	r4, r3
 8000a3a:	000f      	movs	r7, r1
 8000a3c:	3c20      	subs	r4, #32
 8000a3e:	40e7      	lsrs	r7, r4
 8000a40:	2b20      	cmp	r3, #32
 8000a42:	d003      	beq.n	8000a4c <__aeabi_dadd+0x5b8>
 8000a44:	2440      	movs	r4, #64	; 0x40
 8000a46:	1ae3      	subs	r3, r4, r3
 8000a48:	4099      	lsls	r1, r3
 8000a4a:	4308      	orrs	r0, r1
 8000a4c:	1e41      	subs	r1, r0, #1
 8000a4e:	4188      	sbcs	r0, r1
 8000a50:	4338      	orrs	r0, r7
 8000a52:	e67c      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a54:	2200      	movs	r2, #0
 8000a56:	2400      	movs	r4, #0
 8000a58:	e625      	b.n	80006a6 <__aeabi_dadd+0x212>
 8000a5a:	1a17      	subs	r7, r2, r0
 8000a5c:	4643      	mov	r3, r8
 8000a5e:	42ba      	cmp	r2, r7
 8000a60:	4192      	sbcs	r2, r2
 8000a62:	1a59      	subs	r1, r3, r1
 8000a64:	4252      	negs	r2, r2
 8000a66:	1a89      	subs	r1, r1, r2
 8000a68:	4664      	mov	r4, ip
 8000a6a:	0035      	movs	r5, r6
 8000a6c:	e543      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000a6e:	4641      	mov	r1, r8
 8000a70:	0010      	movs	r0, r2
 8000a72:	4d14      	ldr	r5, [pc, #80]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000a74:	e610      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	2400      	movs	r4, #0
 8000a7a:	0312      	lsls	r2, r2, #12
 8000a7c:	e680      	b.n	8000780 <__aeabi_dadd+0x2ec>
 8000a7e:	001d      	movs	r5, r3
 8000a80:	000f      	movs	r7, r1
 8000a82:	3d20      	subs	r5, #32
 8000a84:	40ef      	lsrs	r7, r5
 8000a86:	46bc      	mov	ip, r7
 8000a88:	2b20      	cmp	r3, #32
 8000a8a:	d003      	beq.n	8000a94 <__aeabi_dadd+0x600>
 8000a8c:	2540      	movs	r5, #64	; 0x40
 8000a8e:	1aeb      	subs	r3, r5, r3
 8000a90:	4099      	lsls	r1, r3
 8000a92:	4308      	orrs	r0, r1
 8000a94:	0007      	movs	r7, r0
 8000a96:	4663      	mov	r3, ip
 8000a98:	1e78      	subs	r0, r7, #1
 8000a9a:	4187      	sbcs	r7, r0
 8000a9c:	431f      	orrs	r7, r3
 8000a9e:	e769      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000aa0:	1887      	adds	r7, r0, r2
 8000aa2:	4297      	cmp	r7, r2
 8000aa4:	419b      	sbcs	r3, r3
 8000aa6:	4441      	add	r1, r8
 8000aa8:	425b      	negs	r3, r3
 8000aaa:	18c9      	adds	r1, r1, r3
 8000aac:	0035      	movs	r5, r6
 8000aae:	e5a3      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	4333      	orrs	r3, r6
 8000ab4:	d0ce      	beq.n	8000a54 <__aeabi_dadd+0x5c0>
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	0031      	movs	r1, r6
 8000aba:	403a      	ands	r2, r7
 8000abc:	e652      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	e5f4      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000ac4:	000007ff 	.word	0x000007ff
 8000ac8:	ff7fffff 	.word	0xff7fffff

08000acc <__aeabi_ddiv>:
 8000acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ace:	4657      	mov	r7, sl
 8000ad0:	46de      	mov	lr, fp
 8000ad2:	464e      	mov	r6, r9
 8000ad4:	4645      	mov	r5, r8
 8000ad6:	b5e0      	push	{r5, r6, r7, lr}
 8000ad8:	4683      	mov	fp, r0
 8000ada:	0007      	movs	r7, r0
 8000adc:	030e      	lsls	r6, r1, #12
 8000ade:	0048      	lsls	r0, r1, #1
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	4692      	mov	sl, r2
 8000ae4:	001c      	movs	r4, r3
 8000ae6:	0b36      	lsrs	r6, r6, #12
 8000ae8:	0d40      	lsrs	r0, r0, #21
 8000aea:	0fcd      	lsrs	r5, r1, #31
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d100      	bne.n	8000af2 <__aeabi_ddiv+0x26>
 8000af0:	e09d      	b.n	8000c2e <__aeabi_ddiv+0x162>
 8000af2:	4b95      	ldr	r3, [pc, #596]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000af4:	4298      	cmp	r0, r3
 8000af6:	d039      	beq.n	8000b6c <__aeabi_ddiv+0xa0>
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	00f6      	lsls	r6, r6, #3
 8000afc:	041b      	lsls	r3, r3, #16
 8000afe:	431e      	orrs	r6, r3
 8000b00:	4a92      	ldr	r2, [pc, #584]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b02:	0f7b      	lsrs	r3, r7, #29
 8000b04:	4333      	orrs	r3, r6
 8000b06:	4699      	mov	r9, r3
 8000b08:	4694      	mov	ip, r2
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	4463      	add	r3, ip
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	2600      	movs	r6, #0
 8000b14:	00ff      	lsls	r7, r7, #3
 8000b16:	9302      	str	r3, [sp, #8]
 8000b18:	0323      	lsls	r3, r4, #12
 8000b1a:	0b1b      	lsrs	r3, r3, #12
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	0063      	lsls	r3, r4, #1
 8000b20:	0fe4      	lsrs	r4, r4, #31
 8000b22:	4652      	mov	r2, sl
 8000b24:	0d5b      	lsrs	r3, r3, #21
 8000b26:	9401      	str	r4, [sp, #4]
 8000b28:	d100      	bne.n	8000b2c <__aeabi_ddiv+0x60>
 8000b2a:	e0b3      	b.n	8000c94 <__aeabi_ddiv+0x1c8>
 8000b2c:	4986      	ldr	r1, [pc, #536]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_ddiv+0x68>
 8000b32:	e09e      	b.n	8000c72 <__aeabi_ddiv+0x1a6>
 8000b34:	4642      	mov	r2, r8
 8000b36:	00d1      	lsls	r1, r2, #3
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	0412      	lsls	r2, r2, #16
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	4651      	mov	r1, sl
 8000b40:	0f49      	lsrs	r1, r1, #29
 8000b42:	4311      	orrs	r1, r2
 8000b44:	468b      	mov	fp, r1
 8000b46:	4981      	ldr	r1, [pc, #516]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b48:	4652      	mov	r2, sl
 8000b4a:	468c      	mov	ip, r1
 8000b4c:	9900      	ldr	r1, [sp, #0]
 8000b4e:	4463      	add	r3, ip
 8000b50:	1acb      	subs	r3, r1, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	00d2      	lsls	r2, r2, #3
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	002b      	movs	r3, r5
 8000b5a:	4063      	eors	r3, r4
 8000b5c:	469a      	mov	sl, r3
 8000b5e:	2e0f      	cmp	r6, #15
 8000b60:	d900      	bls.n	8000b64 <__aeabi_ddiv+0x98>
 8000b62:	e105      	b.n	8000d70 <__aeabi_ddiv+0x2a4>
 8000b64:	4b7a      	ldr	r3, [pc, #488]	; (8000d50 <__aeabi_ddiv+0x284>)
 8000b66:	00b6      	lsls	r6, r6, #2
 8000b68:	599b      	ldr	r3, [r3, r6]
 8000b6a:	469f      	mov	pc, r3
 8000b6c:	465b      	mov	r3, fp
 8000b6e:	4333      	orrs	r3, r6
 8000b70:	4699      	mov	r9, r3
 8000b72:	d000      	beq.n	8000b76 <__aeabi_ddiv+0xaa>
 8000b74:	e0b8      	b.n	8000ce8 <__aeabi_ddiv+0x21c>
 8000b76:	2302      	movs	r3, #2
 8000b78:	2608      	movs	r6, #8
 8000b7a:	2700      	movs	r7, #0
 8000b7c:	9000      	str	r0, [sp, #0]
 8000b7e:	9302      	str	r3, [sp, #8]
 8000b80:	e7ca      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000b82:	46cb      	mov	fp, r9
 8000b84:	003a      	movs	r2, r7
 8000b86:	9902      	ldr	r1, [sp, #8]
 8000b88:	9501      	str	r5, [sp, #4]
 8000b8a:	9b01      	ldr	r3, [sp, #4]
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	2902      	cmp	r1, #2
 8000b90:	d027      	beq.n	8000be2 <__aeabi_ddiv+0x116>
 8000b92:	2903      	cmp	r1, #3
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0xcc>
 8000b96:	e280      	b.n	800109a <__aeabi_ddiv+0x5ce>
 8000b98:	2901      	cmp	r1, #1
 8000b9a:	d044      	beq.n	8000c26 <__aeabi_ddiv+0x15a>
 8000b9c:	496d      	ldr	r1, [pc, #436]	; (8000d54 <__aeabi_ddiv+0x288>)
 8000b9e:	9b00      	ldr	r3, [sp, #0]
 8000ba0:	468c      	mov	ip, r1
 8000ba2:	4463      	add	r3, ip
 8000ba4:	001c      	movs	r4, r3
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	dd38      	ble.n	8000c1c <__aeabi_ddiv+0x150>
 8000baa:	0753      	lsls	r3, r2, #29
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000bae:	e213      	b.n	8000fd8 <__aeabi_ddiv+0x50c>
 8000bb0:	08d2      	lsrs	r2, r2, #3
 8000bb2:	465b      	mov	r3, fp
 8000bb4:	01db      	lsls	r3, r3, #7
 8000bb6:	d509      	bpl.n	8000bcc <__aeabi_ddiv+0x100>
 8000bb8:	4659      	mov	r1, fp
 8000bba:	4b67      	ldr	r3, [pc, #412]	; (8000d58 <__aeabi_ddiv+0x28c>)
 8000bbc:	4019      	ands	r1, r3
 8000bbe:	468b      	mov	fp, r1
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	00c9      	lsls	r1, r1, #3
 8000bc4:	468c      	mov	ip, r1
 8000bc6:	9b00      	ldr	r3, [sp, #0]
 8000bc8:	4463      	add	r3, ip
 8000bca:	001c      	movs	r4, r3
 8000bcc:	4b63      	ldr	r3, [pc, #396]	; (8000d5c <__aeabi_ddiv+0x290>)
 8000bce:	429c      	cmp	r4, r3
 8000bd0:	dc07      	bgt.n	8000be2 <__aeabi_ddiv+0x116>
 8000bd2:	465b      	mov	r3, fp
 8000bd4:	0564      	lsls	r4, r4, #21
 8000bd6:	075f      	lsls	r7, r3, #29
 8000bd8:	025b      	lsls	r3, r3, #9
 8000bda:	4317      	orrs	r7, r2
 8000bdc:	0b1b      	lsrs	r3, r3, #12
 8000bde:	0d62      	lsrs	r2, r4, #21
 8000be0:	e002      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000be2:	2300      	movs	r3, #0
 8000be4:	2700      	movs	r7, #0
 8000be6:	4a58      	ldr	r2, [pc, #352]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	031b      	lsls	r3, r3, #12
 8000bec:	0b1c      	lsrs	r4, r3, #12
 8000bee:	0d0b      	lsrs	r3, r1, #20
 8000bf0:	051b      	lsls	r3, r3, #20
 8000bf2:	4323      	orrs	r3, r4
 8000bf4:	0514      	lsls	r4, r2, #20
 8000bf6:	4a5a      	ldr	r2, [pc, #360]	; (8000d60 <__aeabi_ddiv+0x294>)
 8000bf8:	0038      	movs	r0, r7
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	431c      	orrs	r4, r3
 8000bfe:	4653      	mov	r3, sl
 8000c00:	0064      	lsls	r4, r4, #1
 8000c02:	07db      	lsls	r3, r3, #31
 8000c04:	0864      	lsrs	r4, r4, #1
 8000c06:	431c      	orrs	r4, r3
 8000c08:	0021      	movs	r1, r4
 8000c0a:	b005      	add	sp, #20
 8000c0c:	bc3c      	pop	{r2, r3, r4, r5}
 8000c0e:	4690      	mov	r8, r2
 8000c10:	4699      	mov	r9, r3
 8000c12:	46a2      	mov	sl, r4
 8000c14:	46ab      	mov	fp, r5
 8000c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4252      	negs	r2, r2
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	1b1b      	subs	r3, r3, r4
 8000c20:	2b38      	cmp	r3, #56	; 0x38
 8000c22:	dc00      	bgt.n	8000c26 <__aeabi_ddiv+0x15a>
 8000c24:	e1ad      	b.n	8000f82 <__aeabi_ddiv+0x4b6>
 8000c26:	2200      	movs	r2, #0
 8000c28:	2300      	movs	r3, #0
 8000c2a:	2700      	movs	r7, #0
 8000c2c:	e7dc      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000c2e:	465b      	mov	r3, fp
 8000c30:	4333      	orrs	r3, r6
 8000c32:	4699      	mov	r9, r3
 8000c34:	d05e      	beq.n	8000cf4 <__aeabi_ddiv+0x228>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_ddiv+0x170>
 8000c3a:	e18a      	b.n	8000f52 <__aeabi_ddiv+0x486>
 8000c3c:	0030      	movs	r0, r6
 8000c3e:	f001 fa9d 	bl	800217c <__clzsi2>
 8000c42:	0003      	movs	r3, r0
 8000c44:	3b0b      	subs	r3, #11
 8000c46:	2b1c      	cmp	r3, #28
 8000c48:	dd00      	ble.n	8000c4c <__aeabi_ddiv+0x180>
 8000c4a:	e17b      	b.n	8000f44 <__aeabi_ddiv+0x478>
 8000c4c:	221d      	movs	r2, #29
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	465a      	mov	r2, fp
 8000c52:	0001      	movs	r1, r0
 8000c54:	40da      	lsrs	r2, r3
 8000c56:	3908      	subs	r1, #8
 8000c58:	408e      	lsls	r6, r1
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	465f      	mov	r7, fp
 8000c5e:	4333      	orrs	r3, r6
 8000c60:	4699      	mov	r9, r3
 8000c62:	408f      	lsls	r7, r1
 8000c64:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <__aeabi_ddiv+0x298>)
 8000c66:	2600      	movs	r6, #0
 8000c68:	1a1b      	subs	r3, r3, r0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9302      	str	r3, [sp, #8]
 8000c70:	e752      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000c72:	4641      	mov	r1, r8
 8000c74:	4653      	mov	r3, sl
 8000c76:	430b      	orrs	r3, r1
 8000c78:	493b      	ldr	r1, [pc, #236]	; (8000d68 <__aeabi_ddiv+0x29c>)
 8000c7a:	469b      	mov	fp, r3
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	9b00      	ldr	r3, [sp, #0]
 8000c80:	4463      	add	r3, ip
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	465b      	mov	r3, fp
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d13b      	bne.n	8000d02 <__aeabi_ddiv+0x236>
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	431e      	orrs	r6, r3
 8000c90:	2102      	movs	r1, #2
 8000c92:	e761      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000c94:	4643      	mov	r3, r8
 8000c96:	4313      	orrs	r3, r2
 8000c98:	469b      	mov	fp, r3
 8000c9a:	d037      	beq.n	8000d0c <__aeabi_ddiv+0x240>
 8000c9c:	4643      	mov	r3, r8
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_ddiv+0x1d8>
 8000ca2:	e162      	b.n	8000f6a <__aeabi_ddiv+0x49e>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	f001 fa69 	bl	800217c <__clzsi2>
 8000caa:	0003      	movs	r3, r0
 8000cac:	3b0b      	subs	r3, #11
 8000cae:	2b1c      	cmp	r3, #28
 8000cb0:	dd00      	ble.n	8000cb4 <__aeabi_ddiv+0x1e8>
 8000cb2:	e153      	b.n	8000f5c <__aeabi_ddiv+0x490>
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	4641      	mov	r1, r8
 8000cb8:	3a08      	subs	r2, #8
 8000cba:	4091      	lsls	r1, r2
 8000cbc:	4688      	mov	r8, r1
 8000cbe:	211d      	movs	r1, #29
 8000cc0:	1acb      	subs	r3, r1, r3
 8000cc2:	4651      	mov	r1, sl
 8000cc4:	40d9      	lsrs	r1, r3
 8000cc6:	000b      	movs	r3, r1
 8000cc8:	4641      	mov	r1, r8
 8000cca:	430b      	orrs	r3, r1
 8000ccc:	469b      	mov	fp, r3
 8000cce:	4653      	mov	r3, sl
 8000cd0:	4093      	lsls	r3, r2
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	9b00      	ldr	r3, [sp, #0]
 8000cd6:	4925      	ldr	r1, [pc, #148]	; (8000d6c <__aeabi_ddiv+0x2a0>)
 8000cd8:	469c      	mov	ip, r3
 8000cda:	4460      	add	r0, ip
 8000cdc:	0003      	movs	r3, r0
 8000cde:	468c      	mov	ip, r1
 8000ce0:	4463      	add	r3, ip
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	e737      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	46b1      	mov	r9, r6
 8000cec:	9000      	str	r0, [sp, #0]
 8000cee:	260c      	movs	r6, #12
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	e711      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	2604      	movs	r6, #4
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	e70a      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000d02:	2303      	movs	r3, #3
 8000d04:	46c3      	mov	fp, r8
 8000d06:	431e      	orrs	r6, r3
 8000d08:	2103      	movs	r1, #3
 8000d0a:	e725      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	431e      	orrs	r6, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	2101      	movs	r1, #1
 8000d14:	e720      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d16:	2300      	movs	r3, #0
 8000d18:	469a      	mov	sl, r3
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	031b      	lsls	r3, r3, #12
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d22:	e761      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	4649      	mov	r1, r9
 8000d28:	031b      	lsls	r3, r3, #12
 8000d2a:	4219      	tst	r1, r3
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x264>
 8000d2e:	e0e2      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d30:	4659      	mov	r1, fp
 8000d32:	4219      	tst	r1, r3
 8000d34:	d000      	beq.n	8000d38 <__aeabi_ddiv+0x26c>
 8000d36:	e0de      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d38:	430b      	orrs	r3, r1
 8000d3a:	031b      	lsls	r3, r3, #12
 8000d3c:	0017      	movs	r7, r2
 8000d3e:	0b1b      	lsrs	r3, r3, #12
 8000d40:	46a2      	mov	sl, r4
 8000d42:	4a01      	ldr	r2, [pc, #4]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d44:	e750      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	000007ff 	.word	0x000007ff
 8000d4c:	fffffc01 	.word	0xfffffc01
 8000d50:	0800b6dc 	.word	0x0800b6dc
 8000d54:	000003ff 	.word	0x000003ff
 8000d58:	feffffff 	.word	0xfeffffff
 8000d5c:	000007fe 	.word	0x000007fe
 8000d60:	800fffff 	.word	0x800fffff
 8000d64:	fffffc0d 	.word	0xfffffc0d
 8000d68:	fffff801 	.word	0xfffff801
 8000d6c:	000003f3 	.word	0x000003f3
 8000d70:	45d9      	cmp	r9, fp
 8000d72:	d900      	bls.n	8000d76 <__aeabi_ddiv+0x2aa>
 8000d74:	e0cb      	b.n	8000f0e <__aeabi_ddiv+0x442>
 8000d76:	d100      	bne.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000d78:	e0c6      	b.n	8000f08 <__aeabi_ddiv+0x43c>
 8000d7a:	003c      	movs	r4, r7
 8000d7c:	4648      	mov	r0, r9
 8000d7e:	2700      	movs	r7, #0
 8000d80:	9b00      	ldr	r3, [sp, #0]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	465b      	mov	r3, fp
 8000d88:	0e16      	lsrs	r6, r2, #24
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	0213      	lsls	r3, r2, #8
 8000d90:	4698      	mov	r8, r3
 8000d92:	0433      	lsls	r3, r6, #16
 8000d94:	0c1b      	lsrs	r3, r3, #16
 8000d96:	4699      	mov	r9, r3
 8000d98:	0c31      	lsrs	r1, r6, #16
 8000d9a:	9101      	str	r1, [sp, #4]
 8000d9c:	f7ff fa4c 	bl	8000238 <__aeabi_uidivmod>
 8000da0:	464a      	mov	r2, r9
 8000da2:	4342      	muls	r2, r0
 8000da4:	040b      	lsls	r3, r1, #16
 8000da6:	0c21      	lsrs	r1, r4, #16
 8000da8:	0005      	movs	r5, r0
 8000daa:	4319      	orrs	r1, r3
 8000dac:	428a      	cmp	r2, r1
 8000dae:	d907      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db0:	1989      	adds	r1, r1, r6
 8000db2:	3d01      	subs	r5, #1
 8000db4:	428e      	cmp	r6, r1
 8000db6:	d803      	bhi.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db8:	428a      	cmp	r2, r1
 8000dba:	d901      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000dbc:	1e85      	subs	r5, r0, #2
 8000dbe:	1989      	adds	r1, r1, r6
 8000dc0:	1a88      	subs	r0, r1, r2
 8000dc2:	9901      	ldr	r1, [sp, #4]
 8000dc4:	f7ff fa38 	bl	8000238 <__aeabi_uidivmod>
 8000dc8:	0409      	lsls	r1, r1, #16
 8000dca:	468c      	mov	ip, r1
 8000dcc:	464a      	mov	r2, r9
 8000dce:	0421      	lsls	r1, r4, #16
 8000dd0:	4664      	mov	r4, ip
 8000dd2:	4342      	muls	r2, r0
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	4321      	orrs	r1, r4
 8000dda:	428a      	cmp	r2, r1
 8000ddc:	d904      	bls.n	8000de8 <__aeabi_ddiv+0x31c>
 8000dde:	1989      	adds	r1, r1, r6
 8000de0:	3b01      	subs	r3, #1
 8000de2:	428e      	cmp	r6, r1
 8000de4:	d800      	bhi.n	8000de8 <__aeabi_ddiv+0x31c>
 8000de6:	e0f1      	b.n	8000fcc <__aeabi_ddiv+0x500>
 8000de8:	042d      	lsls	r5, r5, #16
 8000dea:	431d      	orrs	r5, r3
 8000dec:	46ab      	mov	fp, r5
 8000dee:	4643      	mov	r3, r8
 8000df0:	1a89      	subs	r1, r1, r2
 8000df2:	4642      	mov	r2, r8
 8000df4:	0c28      	lsrs	r0, r5, #16
 8000df6:	0412      	lsls	r2, r2, #16
 8000df8:	0c1d      	lsrs	r5, r3, #16
 8000dfa:	465b      	mov	r3, fp
 8000dfc:	0c14      	lsrs	r4, r2, #16
 8000dfe:	0022      	movs	r2, r4
 8000e00:	041b      	lsls	r3, r3, #16
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	435a      	muls	r2, r3
 8000e06:	9403      	str	r4, [sp, #12]
 8000e08:	436b      	muls	r3, r5
 8000e0a:	4344      	muls	r4, r0
 8000e0c:	9502      	str	r5, [sp, #8]
 8000e0e:	4368      	muls	r0, r5
 8000e10:	191b      	adds	r3, r3, r4
 8000e12:	0c15      	lsrs	r5, r2, #16
 8000e14:	18eb      	adds	r3, r5, r3
 8000e16:	429c      	cmp	r4, r3
 8000e18:	d903      	bls.n	8000e22 <__aeabi_ddiv+0x356>
 8000e1a:	2480      	movs	r4, #128	; 0x80
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	46a4      	mov	ip, r4
 8000e20:	4460      	add	r0, ip
 8000e22:	0c1c      	lsrs	r4, r3, #16
 8000e24:	0415      	lsls	r5, r2, #16
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	0c2d      	lsrs	r5, r5, #16
 8000e2a:	1820      	adds	r0, r4, r0
 8000e2c:	195d      	adds	r5, r3, r5
 8000e2e:	4281      	cmp	r1, r0
 8000e30:	d377      	bcc.n	8000f22 <__aeabi_ddiv+0x456>
 8000e32:	d073      	beq.n	8000f1c <__aeabi_ddiv+0x450>
 8000e34:	1a0c      	subs	r4, r1, r0
 8000e36:	4aa2      	ldr	r2, [pc, #648]	; (80010c0 <__aeabi_ddiv+0x5f4>)
 8000e38:	1b7d      	subs	r5, r7, r5
 8000e3a:	42af      	cmp	r7, r5
 8000e3c:	41bf      	sbcs	r7, r7
 8000e3e:	4694      	mov	ip, r2
 8000e40:	9b00      	ldr	r3, [sp, #0]
 8000e42:	427f      	negs	r7, r7
 8000e44:	4463      	add	r3, ip
 8000e46:	1be0      	subs	r0, r4, r7
 8000e48:	001c      	movs	r4, r3
 8000e4a:	4286      	cmp	r6, r0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_ddiv+0x384>
 8000e4e:	e0db      	b.n	8001008 <__aeabi_ddiv+0x53c>
 8000e50:	9901      	ldr	r1, [sp, #4]
 8000e52:	f7ff f9f1 	bl	8000238 <__aeabi_uidivmod>
 8000e56:	464a      	mov	r2, r9
 8000e58:	4342      	muls	r2, r0
 8000e5a:	040b      	lsls	r3, r1, #16
 8000e5c:	0c29      	lsrs	r1, r5, #16
 8000e5e:	0007      	movs	r7, r0
 8000e60:	4319      	orrs	r1, r3
 8000e62:	428a      	cmp	r2, r1
 8000e64:	d907      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e66:	1989      	adds	r1, r1, r6
 8000e68:	3f01      	subs	r7, #1
 8000e6a:	428e      	cmp	r6, r1
 8000e6c:	d803      	bhi.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d901      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e72:	1e87      	subs	r7, r0, #2
 8000e74:	1989      	adds	r1, r1, r6
 8000e76:	1a88      	subs	r0, r1, r2
 8000e78:	9901      	ldr	r1, [sp, #4]
 8000e7a:	f7ff f9dd 	bl	8000238 <__aeabi_uidivmod>
 8000e7e:	0409      	lsls	r1, r1, #16
 8000e80:	464a      	mov	r2, r9
 8000e82:	4689      	mov	r9, r1
 8000e84:	0429      	lsls	r1, r5, #16
 8000e86:	464d      	mov	r5, r9
 8000e88:	4342      	muls	r2, r0
 8000e8a:	0c09      	lsrs	r1, r1, #16
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	4329      	orrs	r1, r5
 8000e90:	428a      	cmp	r2, r1
 8000e92:	d907      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e94:	1989      	adds	r1, r1, r6
 8000e96:	3b01      	subs	r3, #1
 8000e98:	428e      	cmp	r6, r1
 8000e9a:	d803      	bhi.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d901      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000ea0:	1e83      	subs	r3, r0, #2
 8000ea2:	1989      	adds	r1, r1, r6
 8000ea4:	043f      	lsls	r7, r7, #16
 8000ea6:	1a89      	subs	r1, r1, r2
 8000ea8:	003a      	movs	r2, r7
 8000eaa:	9f03      	ldr	r7, [sp, #12]
 8000eac:	431a      	orrs	r2, r3
 8000eae:	0038      	movs	r0, r7
 8000eb0:	0413      	lsls	r3, r2, #16
 8000eb2:	0c1b      	lsrs	r3, r3, #16
 8000eb4:	4358      	muls	r0, r3
 8000eb6:	4681      	mov	r9, r0
 8000eb8:	9802      	ldr	r0, [sp, #8]
 8000eba:	0c15      	lsrs	r5, r2, #16
 8000ebc:	436f      	muls	r7, r5
 8000ebe:	4343      	muls	r3, r0
 8000ec0:	4345      	muls	r5, r0
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	0c00      	lsrs	r0, r0, #16
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	19db      	adds	r3, r3, r7
 8000eca:	4463      	add	r3, ip
 8000ecc:	429f      	cmp	r7, r3
 8000ece:	d903      	bls.n	8000ed8 <__aeabi_ddiv+0x40c>
 8000ed0:	2080      	movs	r0, #128	; 0x80
 8000ed2:	0240      	lsls	r0, r0, #9
 8000ed4:	4684      	mov	ip, r0
 8000ed6:	4465      	add	r5, ip
 8000ed8:	4648      	mov	r0, r9
 8000eda:	0c1f      	lsrs	r7, r3, #16
 8000edc:	0400      	lsls	r0, r0, #16
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	0c00      	lsrs	r0, r0, #16
 8000ee2:	197d      	adds	r5, r7, r5
 8000ee4:	1818      	adds	r0, r3, r0
 8000ee6:	42a9      	cmp	r1, r5
 8000ee8:	d200      	bcs.n	8000eec <__aeabi_ddiv+0x420>
 8000eea:	e084      	b.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_ddiv+0x424>
 8000eee:	e07f      	b.n	8000ff0 <__aeabi_ddiv+0x524>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	e657      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	464a      	mov	r2, r9
 8000efa:	031b      	lsls	r3, r3, #12
 8000efc:	4313      	orrs	r3, r2
 8000efe:	031b      	lsls	r3, r3, #12
 8000f00:	0b1b      	lsrs	r3, r3, #12
 8000f02:	46aa      	mov	sl, r5
 8000f04:	4a6f      	ldr	r2, [pc, #444]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 8000f06:	e66f      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000f08:	42ba      	cmp	r2, r7
 8000f0a:	d900      	bls.n	8000f0e <__aeabi_ddiv+0x442>
 8000f0c:	e735      	b.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000f0e:	464b      	mov	r3, r9
 8000f10:	07dc      	lsls	r4, r3, #31
 8000f12:	0858      	lsrs	r0, r3, #1
 8000f14:	087b      	lsrs	r3, r7, #1
 8000f16:	431c      	orrs	r4, r3
 8000f18:	07ff      	lsls	r7, r7, #31
 8000f1a:	e734      	b.n	8000d86 <__aeabi_ddiv+0x2ba>
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	42af      	cmp	r7, r5
 8000f20:	d289      	bcs.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f22:	4447      	add	r7, r8
 8000f24:	4547      	cmp	r7, r8
 8000f26:	41a4      	sbcs	r4, r4
 8000f28:	465b      	mov	r3, fp
 8000f2a:	4264      	negs	r4, r4
 8000f2c:	19a4      	adds	r4, r4, r6
 8000f2e:	1864      	adds	r4, r4, r1
 8000f30:	3b01      	subs	r3, #1
 8000f32:	42a6      	cmp	r6, r4
 8000f34:	d21e      	bcs.n	8000f74 <__aeabi_ddiv+0x4a8>
 8000f36:	42a0      	cmp	r0, r4
 8000f38:	d86d      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f3c:	e0b6      	b.n	80010ac <__aeabi_ddiv+0x5e0>
 8000f3e:	1a24      	subs	r4, r4, r0
 8000f40:	469b      	mov	fp, r3
 8000f42:	e778      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f44:	0003      	movs	r3, r0
 8000f46:	465a      	mov	r2, fp
 8000f48:	3b28      	subs	r3, #40	; 0x28
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	2700      	movs	r7, #0
 8000f4e:	4691      	mov	r9, r2
 8000f50:	e688      	b.n	8000c64 <__aeabi_ddiv+0x198>
 8000f52:	4658      	mov	r0, fp
 8000f54:	f001 f912 	bl	800217c <__clzsi2>
 8000f58:	3020      	adds	r0, #32
 8000f5a:	e672      	b.n	8000c42 <__aeabi_ddiv+0x176>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	4652      	mov	r2, sl
 8000f60:	3b28      	subs	r3, #40	; 0x28
 8000f62:	409a      	lsls	r2, r3
 8000f64:	4693      	mov	fp, r2
 8000f66:	2200      	movs	r2, #0
 8000f68:	e6b4      	b.n	8000cd4 <__aeabi_ddiv+0x208>
 8000f6a:	4650      	mov	r0, sl
 8000f6c:	f001 f906 	bl	800217c <__clzsi2>
 8000f70:	3020      	adds	r0, #32
 8000f72:	e69a      	b.n	8000caa <__aeabi_ddiv+0x1de>
 8000f74:	42a6      	cmp	r6, r4
 8000f76:	d1e2      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f78:	45b8      	cmp	r8, r7
 8000f7a:	d9dc      	bls.n	8000f36 <__aeabi_ddiv+0x46a>
 8000f7c:	1a34      	subs	r4, r6, r0
 8000f7e:	469b      	mov	fp, r3
 8000f80:	e759      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f82:	2b1f      	cmp	r3, #31
 8000f84:	dc65      	bgt.n	8001052 <__aeabi_ddiv+0x586>
 8000f86:	4c50      	ldr	r4, [pc, #320]	; (80010c8 <__aeabi_ddiv+0x5fc>)
 8000f88:	9900      	ldr	r1, [sp, #0]
 8000f8a:	46a4      	mov	ip, r4
 8000f8c:	465c      	mov	r4, fp
 8000f8e:	4461      	add	r1, ip
 8000f90:	0008      	movs	r0, r1
 8000f92:	408c      	lsls	r4, r1
 8000f94:	0011      	movs	r1, r2
 8000f96:	4082      	lsls	r2, r0
 8000f98:	40d9      	lsrs	r1, r3
 8000f9a:	1e50      	subs	r0, r2, #1
 8000f9c:	4182      	sbcs	r2, r0
 8000f9e:	430c      	orrs	r4, r1
 8000fa0:	4314      	orrs	r4, r2
 8000fa2:	465a      	mov	r2, fp
 8000fa4:	40da      	lsrs	r2, r3
 8000fa6:	0013      	movs	r3, r2
 8000fa8:	0762      	lsls	r2, r4, #29
 8000faa:	d009      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fac:	220f      	movs	r2, #15
 8000fae:	4022      	ands	r2, r4
 8000fb0:	2a04      	cmp	r2, #4
 8000fb2:	d005      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fb4:	0022      	movs	r2, r4
 8000fb6:	1d14      	adds	r4, r2, #4
 8000fb8:	4294      	cmp	r4, r2
 8000fba:	4189      	sbcs	r1, r1
 8000fbc:	4249      	negs	r1, r1
 8000fbe:	185b      	adds	r3, r3, r1
 8000fc0:	021a      	lsls	r2, r3, #8
 8000fc2:	d562      	bpl.n	800108a <__aeabi_ddiv+0x5be>
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	2700      	movs	r7, #0
 8000fca:	e60d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000fcc:	428a      	cmp	r2, r1
 8000fce:	d800      	bhi.n	8000fd2 <__aeabi_ddiv+0x506>
 8000fd0:	e70a      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd2:	1e83      	subs	r3, r0, #2
 8000fd4:	1989      	adds	r1, r1, r6
 8000fd6:	e707      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd8:	230f      	movs	r3, #15
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_ddiv+0x516>
 8000fe0:	e5e6      	b.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000fe2:	1d17      	adds	r7, r2, #4
 8000fe4:	4297      	cmp	r7, r2
 8000fe6:	4192      	sbcs	r2, r2
 8000fe8:	4253      	negs	r3, r2
 8000fea:	449b      	add	fp, r3
 8000fec:	08fa      	lsrs	r2, r7, #3
 8000fee:	e5e0      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000ff4:	e5d7      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ff6:	1871      	adds	r1, r6, r1
 8000ff8:	1e53      	subs	r3, r2, #1
 8000ffa:	42b1      	cmp	r1, r6
 8000ffc:	d327      	bcc.n	800104e <__aeabi_ddiv+0x582>
 8000ffe:	42a9      	cmp	r1, r5
 8001000:	d315      	bcc.n	800102e <__aeabi_ddiv+0x562>
 8001002:	d058      	beq.n	80010b6 <__aeabi_ddiv+0x5ea>
 8001004:	001a      	movs	r2, r3
 8001006:	e773      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001008:	2b00      	cmp	r3, #0
 800100a:	dc00      	bgt.n	800100e <__aeabi_ddiv+0x542>
 800100c:	e604      	b.n	8000c18 <__aeabi_ddiv+0x14c>
 800100e:	2301      	movs	r3, #1
 8001010:	2200      	movs	r2, #0
 8001012:	449b      	add	fp, r3
 8001014:	e5cd      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8001016:	2302      	movs	r3, #2
 8001018:	4447      	add	r7, r8
 800101a:	4547      	cmp	r7, r8
 800101c:	4189      	sbcs	r1, r1
 800101e:	425b      	negs	r3, r3
 8001020:	469c      	mov	ip, r3
 8001022:	4249      	negs	r1, r1
 8001024:	1989      	adds	r1, r1, r6
 8001026:	190c      	adds	r4, r1, r4
 8001028:	44e3      	add	fp, ip
 800102a:	1a24      	subs	r4, r4, r0
 800102c:	e703      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 800102e:	4643      	mov	r3, r8
 8001030:	005f      	lsls	r7, r3, #1
 8001032:	4547      	cmp	r7, r8
 8001034:	419b      	sbcs	r3, r3
 8001036:	46b8      	mov	r8, r7
 8001038:	425b      	negs	r3, r3
 800103a:	199e      	adds	r6, r3, r6
 800103c:	3a02      	subs	r2, #2
 800103e:	1989      	adds	r1, r1, r6
 8001040:	42a9      	cmp	r1, r5
 8001042:	d000      	beq.n	8001046 <__aeabi_ddiv+0x57a>
 8001044:	e754      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001046:	4540      	cmp	r0, r8
 8001048:	d000      	beq.n	800104c <__aeabi_ddiv+0x580>
 800104a:	e751      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 800104c:	e5ab      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 800104e:	001a      	movs	r2, r3
 8001050:	e7f6      	b.n	8001040 <__aeabi_ddiv+0x574>
 8001052:	211f      	movs	r1, #31
 8001054:	465f      	mov	r7, fp
 8001056:	4249      	negs	r1, r1
 8001058:	1b0c      	subs	r4, r1, r4
 800105a:	40e7      	lsrs	r7, r4
 800105c:	2b20      	cmp	r3, #32
 800105e:	d007      	beq.n	8001070 <__aeabi_ddiv+0x5a4>
 8001060:	491a      	ldr	r1, [pc, #104]	; (80010cc <__aeabi_ddiv+0x600>)
 8001062:	9b00      	ldr	r3, [sp, #0]
 8001064:	468c      	mov	ip, r1
 8001066:	4463      	add	r3, ip
 8001068:	0018      	movs	r0, r3
 800106a:	465b      	mov	r3, fp
 800106c:	4083      	lsls	r3, r0
 800106e:	431a      	orrs	r2, r3
 8001070:	1e50      	subs	r0, r2, #1
 8001072:	4182      	sbcs	r2, r0
 8001074:	433a      	orrs	r2, r7
 8001076:	2707      	movs	r7, #7
 8001078:	2300      	movs	r3, #0
 800107a:	4017      	ands	r7, r2
 800107c:	d009      	beq.n	8001092 <__aeabi_ddiv+0x5c6>
 800107e:	210f      	movs	r1, #15
 8001080:	2300      	movs	r3, #0
 8001082:	4011      	ands	r1, r2
 8001084:	0014      	movs	r4, r2
 8001086:	2904      	cmp	r1, #4
 8001088:	d195      	bne.n	8000fb6 <__aeabi_ddiv+0x4ea>
 800108a:	0022      	movs	r2, r4
 800108c:	075f      	lsls	r7, r3, #29
 800108e:	025b      	lsls	r3, r3, #9
 8001090:	0b1b      	lsrs	r3, r3, #12
 8001092:	08d2      	lsrs	r2, r2, #3
 8001094:	4317      	orrs	r7, r2
 8001096:	2200      	movs	r2, #0
 8001098:	e5a6      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	4659      	mov	r1, fp
 800109e:	031b      	lsls	r3, r3, #12
 80010a0:	430b      	orrs	r3, r1
 80010a2:	031b      	lsls	r3, r3, #12
 80010a4:	0017      	movs	r7, r2
 80010a6:	0b1b      	lsrs	r3, r3, #12
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 80010aa:	e59d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 80010ac:	42bd      	cmp	r5, r7
 80010ae:	d8b2      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 80010b0:	469b      	mov	fp, r3
 80010b2:	2400      	movs	r4, #0
 80010b4:	e6bf      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 80010b6:	4580      	cmp	r8, r0
 80010b8:	d3b9      	bcc.n	800102e <__aeabi_ddiv+0x562>
 80010ba:	001a      	movs	r2, r3
 80010bc:	e7c3      	b.n	8001046 <__aeabi_ddiv+0x57a>
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	000003ff 	.word	0x000003ff
 80010c4:	000007ff 	.word	0x000007ff
 80010c8:	0000041e 	.word	0x0000041e
 80010cc:	0000043e 	.word	0x0000043e

080010d0 <__eqdf2>:
 80010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d2:	464f      	mov	r7, r9
 80010d4:	4646      	mov	r6, r8
 80010d6:	46d6      	mov	lr, sl
 80010d8:	4684      	mov	ip, r0
 80010da:	b5c0      	push	{r6, r7, lr}
 80010dc:	4680      	mov	r8, r0
 80010de:	4e19      	ldr	r6, [pc, #100]	; (8001144 <__eqdf2+0x74>)
 80010e0:	0318      	lsls	r0, r3, #12
 80010e2:	030f      	lsls	r7, r1, #12
 80010e4:	004d      	lsls	r5, r1, #1
 80010e6:	0b00      	lsrs	r0, r0, #12
 80010e8:	005c      	lsls	r4, r3, #1
 80010ea:	4682      	mov	sl, r0
 80010ec:	0b3f      	lsrs	r7, r7, #12
 80010ee:	0d6d      	lsrs	r5, r5, #21
 80010f0:	0fc9      	lsrs	r1, r1, #31
 80010f2:	4691      	mov	r9, r2
 80010f4:	0d64      	lsrs	r4, r4, #21
 80010f6:	0fdb      	lsrs	r3, r3, #31
 80010f8:	2001      	movs	r0, #1
 80010fa:	42b5      	cmp	r5, r6
 80010fc:	d00a      	beq.n	8001114 <__eqdf2+0x44>
 80010fe:	42b4      	cmp	r4, r6
 8001100:	d003      	beq.n	800110a <__eqdf2+0x3a>
 8001102:	42a5      	cmp	r5, r4
 8001104:	d101      	bne.n	800110a <__eqdf2+0x3a>
 8001106:	4557      	cmp	r7, sl
 8001108:	d00c      	beq.n	8001124 <__eqdf2+0x54>
 800110a:	bc1c      	pop	{r2, r3, r4}
 800110c:	4690      	mov	r8, r2
 800110e:	4699      	mov	r9, r3
 8001110:	46a2      	mov	sl, r4
 8001112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001114:	4666      	mov	r6, ip
 8001116:	433e      	orrs	r6, r7
 8001118:	d1f7      	bne.n	800110a <__eqdf2+0x3a>
 800111a:	42ac      	cmp	r4, r5
 800111c:	d1f5      	bne.n	800110a <__eqdf2+0x3a>
 800111e:	4654      	mov	r4, sl
 8001120:	4314      	orrs	r4, r2
 8001122:	d1f2      	bne.n	800110a <__eqdf2+0x3a>
 8001124:	2001      	movs	r0, #1
 8001126:	45c8      	cmp	r8, r9
 8001128:	d1ef      	bne.n	800110a <__eqdf2+0x3a>
 800112a:	4299      	cmp	r1, r3
 800112c:	d007      	beq.n	800113e <__eqdf2+0x6e>
 800112e:	2d00      	cmp	r5, #0
 8001130:	d1eb      	bne.n	800110a <__eqdf2+0x3a>
 8001132:	4663      	mov	r3, ip
 8001134:	431f      	orrs	r7, r3
 8001136:	0038      	movs	r0, r7
 8001138:	1e47      	subs	r7, r0, #1
 800113a:	41b8      	sbcs	r0, r7
 800113c:	e7e5      	b.n	800110a <__eqdf2+0x3a>
 800113e:	2000      	movs	r0, #0
 8001140:	e7e3      	b.n	800110a <__eqdf2+0x3a>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	000007ff 	.word	0x000007ff

08001148 <__gedf2>:
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	464f      	mov	r7, r9
 800114c:	4646      	mov	r6, r8
 800114e:	46d6      	mov	lr, sl
 8001150:	004d      	lsls	r5, r1, #1
 8001152:	b5c0      	push	{r6, r7, lr}
 8001154:	030e      	lsls	r6, r1, #12
 8001156:	0fc9      	lsrs	r1, r1, #31
 8001158:	468a      	mov	sl, r1
 800115a:	492c      	ldr	r1, [pc, #176]	; (800120c <__gedf2+0xc4>)
 800115c:	031f      	lsls	r7, r3, #12
 800115e:	005c      	lsls	r4, r3, #1
 8001160:	4680      	mov	r8, r0
 8001162:	0b36      	lsrs	r6, r6, #12
 8001164:	0d6d      	lsrs	r5, r5, #21
 8001166:	4691      	mov	r9, r2
 8001168:	0b3f      	lsrs	r7, r7, #12
 800116a:	0d64      	lsrs	r4, r4, #21
 800116c:	0fdb      	lsrs	r3, r3, #31
 800116e:	428d      	cmp	r5, r1
 8001170:	d01e      	beq.n	80011b0 <__gedf2+0x68>
 8001172:	428c      	cmp	r4, r1
 8001174:	d016      	beq.n	80011a4 <__gedf2+0x5c>
 8001176:	2d00      	cmp	r5, #0
 8001178:	d11e      	bne.n	80011b8 <__gedf2+0x70>
 800117a:	4330      	orrs	r0, r6
 800117c:	4684      	mov	ip, r0
 800117e:	2c00      	cmp	r4, #0
 8001180:	d101      	bne.n	8001186 <__gedf2+0x3e>
 8001182:	433a      	orrs	r2, r7
 8001184:	d023      	beq.n	80011ce <__gedf2+0x86>
 8001186:	4662      	mov	r2, ip
 8001188:	2a00      	cmp	r2, #0
 800118a:	d01a      	beq.n	80011c2 <__gedf2+0x7a>
 800118c:	459a      	cmp	sl, r3
 800118e:	d029      	beq.n	80011e4 <__gedf2+0x9c>
 8001190:	4651      	mov	r1, sl
 8001192:	2002      	movs	r0, #2
 8001194:	3901      	subs	r1, #1
 8001196:	4008      	ands	r0, r1
 8001198:	3801      	subs	r0, #1
 800119a:	bc1c      	pop	{r2, r3, r4}
 800119c:	4690      	mov	r8, r2
 800119e:	4699      	mov	r9, r3
 80011a0:	46a2      	mov	sl, r4
 80011a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a4:	0039      	movs	r1, r7
 80011a6:	4311      	orrs	r1, r2
 80011a8:	d0e5      	beq.n	8001176 <__gedf2+0x2e>
 80011aa:	2002      	movs	r0, #2
 80011ac:	4240      	negs	r0, r0
 80011ae:	e7f4      	b.n	800119a <__gedf2+0x52>
 80011b0:	4330      	orrs	r0, r6
 80011b2:	d1fa      	bne.n	80011aa <__gedf2+0x62>
 80011b4:	42ac      	cmp	r4, r5
 80011b6:	d00f      	beq.n	80011d8 <__gedf2+0x90>
 80011b8:	2c00      	cmp	r4, #0
 80011ba:	d10f      	bne.n	80011dc <__gedf2+0x94>
 80011bc:	433a      	orrs	r2, r7
 80011be:	d0e7      	beq.n	8001190 <__gedf2+0x48>
 80011c0:	e00c      	b.n	80011dc <__gedf2+0x94>
 80011c2:	2201      	movs	r2, #1
 80011c4:	3b01      	subs	r3, #1
 80011c6:	4393      	bics	r3, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	3001      	adds	r0, #1
 80011cc:	e7e5      	b.n	800119a <__gedf2+0x52>
 80011ce:	4663      	mov	r3, ip
 80011d0:	2000      	movs	r0, #0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0e1      	beq.n	800119a <__gedf2+0x52>
 80011d6:	e7db      	b.n	8001190 <__gedf2+0x48>
 80011d8:	433a      	orrs	r2, r7
 80011da:	d1e6      	bne.n	80011aa <__gedf2+0x62>
 80011dc:	459a      	cmp	sl, r3
 80011de:	d1d7      	bne.n	8001190 <__gedf2+0x48>
 80011e0:	42a5      	cmp	r5, r4
 80011e2:	dcd5      	bgt.n	8001190 <__gedf2+0x48>
 80011e4:	42a5      	cmp	r5, r4
 80011e6:	db05      	blt.n	80011f4 <__gedf2+0xac>
 80011e8:	42be      	cmp	r6, r7
 80011ea:	d8d1      	bhi.n	8001190 <__gedf2+0x48>
 80011ec:	d008      	beq.n	8001200 <__gedf2+0xb8>
 80011ee:	2000      	movs	r0, #0
 80011f0:	42be      	cmp	r6, r7
 80011f2:	d2d2      	bcs.n	800119a <__gedf2+0x52>
 80011f4:	4650      	mov	r0, sl
 80011f6:	2301      	movs	r3, #1
 80011f8:	3801      	subs	r0, #1
 80011fa:	4398      	bics	r0, r3
 80011fc:	3001      	adds	r0, #1
 80011fe:	e7cc      	b.n	800119a <__gedf2+0x52>
 8001200:	45c8      	cmp	r8, r9
 8001202:	d8c5      	bhi.n	8001190 <__gedf2+0x48>
 8001204:	2000      	movs	r0, #0
 8001206:	45c8      	cmp	r8, r9
 8001208:	d3f4      	bcc.n	80011f4 <__gedf2+0xac>
 800120a:	e7c6      	b.n	800119a <__gedf2+0x52>
 800120c:	000007ff 	.word	0x000007ff

08001210 <__ledf2>:
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	464f      	mov	r7, r9
 8001214:	4646      	mov	r6, r8
 8001216:	46d6      	mov	lr, sl
 8001218:	004d      	lsls	r5, r1, #1
 800121a:	b5c0      	push	{r6, r7, lr}
 800121c:	030e      	lsls	r6, r1, #12
 800121e:	0fc9      	lsrs	r1, r1, #31
 8001220:	468a      	mov	sl, r1
 8001222:	492e      	ldr	r1, [pc, #184]	; (80012dc <__ledf2+0xcc>)
 8001224:	031f      	lsls	r7, r3, #12
 8001226:	005c      	lsls	r4, r3, #1
 8001228:	4680      	mov	r8, r0
 800122a:	0b36      	lsrs	r6, r6, #12
 800122c:	0d6d      	lsrs	r5, r5, #21
 800122e:	4691      	mov	r9, r2
 8001230:	0b3f      	lsrs	r7, r7, #12
 8001232:	0d64      	lsrs	r4, r4, #21
 8001234:	0fdb      	lsrs	r3, r3, #31
 8001236:	428d      	cmp	r5, r1
 8001238:	d018      	beq.n	800126c <__ledf2+0x5c>
 800123a:	428c      	cmp	r4, r1
 800123c:	d011      	beq.n	8001262 <__ledf2+0x52>
 800123e:	2d00      	cmp	r5, #0
 8001240:	d118      	bne.n	8001274 <__ledf2+0x64>
 8001242:	4330      	orrs	r0, r6
 8001244:	4684      	mov	ip, r0
 8001246:	2c00      	cmp	r4, #0
 8001248:	d11e      	bne.n	8001288 <__ledf2+0x78>
 800124a:	433a      	orrs	r2, r7
 800124c:	d11c      	bne.n	8001288 <__ledf2+0x78>
 800124e:	4663      	mov	r3, ip
 8001250:	2000      	movs	r0, #0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d030      	beq.n	80012b8 <__ledf2+0xa8>
 8001256:	4651      	mov	r1, sl
 8001258:	2002      	movs	r0, #2
 800125a:	3901      	subs	r1, #1
 800125c:	4008      	ands	r0, r1
 800125e:	3801      	subs	r0, #1
 8001260:	e02a      	b.n	80012b8 <__ledf2+0xa8>
 8001262:	0039      	movs	r1, r7
 8001264:	4311      	orrs	r1, r2
 8001266:	d0ea      	beq.n	800123e <__ledf2+0x2e>
 8001268:	2002      	movs	r0, #2
 800126a:	e025      	b.n	80012b8 <__ledf2+0xa8>
 800126c:	4330      	orrs	r0, r6
 800126e:	d1fb      	bne.n	8001268 <__ledf2+0x58>
 8001270:	42ac      	cmp	r4, r5
 8001272:	d026      	beq.n	80012c2 <__ledf2+0xb2>
 8001274:	2c00      	cmp	r4, #0
 8001276:	d126      	bne.n	80012c6 <__ledf2+0xb6>
 8001278:	433a      	orrs	r2, r7
 800127a:	d124      	bne.n	80012c6 <__ledf2+0xb6>
 800127c:	4651      	mov	r1, sl
 800127e:	2002      	movs	r0, #2
 8001280:	3901      	subs	r1, #1
 8001282:	4008      	ands	r0, r1
 8001284:	3801      	subs	r0, #1
 8001286:	e017      	b.n	80012b8 <__ledf2+0xa8>
 8001288:	4662      	mov	r2, ip
 800128a:	2a00      	cmp	r2, #0
 800128c:	d00f      	beq.n	80012ae <__ledf2+0x9e>
 800128e:	459a      	cmp	sl, r3
 8001290:	d1e1      	bne.n	8001256 <__ledf2+0x46>
 8001292:	42a5      	cmp	r5, r4
 8001294:	db05      	blt.n	80012a2 <__ledf2+0x92>
 8001296:	42be      	cmp	r6, r7
 8001298:	d8dd      	bhi.n	8001256 <__ledf2+0x46>
 800129a:	d019      	beq.n	80012d0 <__ledf2+0xc0>
 800129c:	2000      	movs	r0, #0
 800129e:	42be      	cmp	r6, r7
 80012a0:	d20a      	bcs.n	80012b8 <__ledf2+0xa8>
 80012a2:	4650      	mov	r0, sl
 80012a4:	2301      	movs	r3, #1
 80012a6:	3801      	subs	r0, #1
 80012a8:	4398      	bics	r0, r3
 80012aa:	3001      	adds	r0, #1
 80012ac:	e004      	b.n	80012b8 <__ledf2+0xa8>
 80012ae:	2201      	movs	r2, #1
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4393      	bics	r3, r2
 80012b4:	0018      	movs	r0, r3
 80012b6:	3001      	adds	r0, #1
 80012b8:	bc1c      	pop	{r2, r3, r4}
 80012ba:	4690      	mov	r8, r2
 80012bc:	4699      	mov	r9, r3
 80012be:	46a2      	mov	sl, r4
 80012c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c2:	433a      	orrs	r2, r7
 80012c4:	d1d0      	bne.n	8001268 <__ledf2+0x58>
 80012c6:	459a      	cmp	sl, r3
 80012c8:	d1c5      	bne.n	8001256 <__ledf2+0x46>
 80012ca:	42a5      	cmp	r5, r4
 80012cc:	dcc3      	bgt.n	8001256 <__ledf2+0x46>
 80012ce:	e7e0      	b.n	8001292 <__ledf2+0x82>
 80012d0:	45c8      	cmp	r8, r9
 80012d2:	d8c0      	bhi.n	8001256 <__ledf2+0x46>
 80012d4:	2000      	movs	r0, #0
 80012d6:	45c8      	cmp	r8, r9
 80012d8:	d3e3      	bcc.n	80012a2 <__ledf2+0x92>
 80012da:	e7ed      	b.n	80012b8 <__ledf2+0xa8>
 80012dc:	000007ff 	.word	0x000007ff

080012e0 <__aeabi_dmul>:
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	4657      	mov	r7, sl
 80012e4:	46de      	mov	lr, fp
 80012e6:	464e      	mov	r6, r9
 80012e8:	4645      	mov	r5, r8
 80012ea:	b5e0      	push	{r5, r6, r7, lr}
 80012ec:	4683      	mov	fp, r0
 80012ee:	0006      	movs	r6, r0
 80012f0:	030f      	lsls	r7, r1, #12
 80012f2:	0048      	lsls	r0, r1, #1
 80012f4:	b087      	sub	sp, #28
 80012f6:	4692      	mov	sl, r2
 80012f8:	001d      	movs	r5, r3
 80012fa:	0b3f      	lsrs	r7, r7, #12
 80012fc:	0d40      	lsrs	r0, r0, #21
 80012fe:	0fcc      	lsrs	r4, r1, #31
 8001300:	2800      	cmp	r0, #0
 8001302:	d100      	bne.n	8001306 <__aeabi_dmul+0x26>
 8001304:	e06f      	b.n	80013e6 <__aeabi_dmul+0x106>
 8001306:	4bde      	ldr	r3, [pc, #888]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001308:	4298      	cmp	r0, r3
 800130a:	d038      	beq.n	800137e <__aeabi_dmul+0x9e>
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	00ff      	lsls	r7, r7, #3
 8001310:	041b      	lsls	r3, r3, #16
 8001312:	431f      	orrs	r7, r3
 8001314:	0f73      	lsrs	r3, r6, #29
 8001316:	433b      	orrs	r3, r7
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	4bda      	ldr	r3, [pc, #872]	; (8001684 <__aeabi_dmul+0x3a4>)
 800131c:	2700      	movs	r7, #0
 800131e:	4699      	mov	r9, r3
 8001320:	2300      	movs	r3, #0
 8001322:	469b      	mov	fp, r3
 8001324:	00f6      	lsls	r6, r6, #3
 8001326:	4481      	add	r9, r0
 8001328:	032b      	lsls	r3, r5, #12
 800132a:	0069      	lsls	r1, r5, #1
 800132c:	0b1b      	lsrs	r3, r3, #12
 800132e:	4652      	mov	r2, sl
 8001330:	4698      	mov	r8, r3
 8001332:	0d49      	lsrs	r1, r1, #21
 8001334:	0fed      	lsrs	r5, r5, #31
 8001336:	2900      	cmp	r1, #0
 8001338:	d100      	bne.n	800133c <__aeabi_dmul+0x5c>
 800133a:	e085      	b.n	8001448 <__aeabi_dmul+0x168>
 800133c:	4bd0      	ldr	r3, [pc, #832]	; (8001680 <__aeabi_dmul+0x3a0>)
 800133e:	4299      	cmp	r1, r3
 8001340:	d100      	bne.n	8001344 <__aeabi_dmul+0x64>
 8001342:	e073      	b.n	800142c <__aeabi_dmul+0x14c>
 8001344:	4643      	mov	r3, r8
 8001346:	00da      	lsls	r2, r3, #3
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	4313      	orrs	r3, r2
 800134e:	4652      	mov	r2, sl
 8001350:	48cc      	ldr	r0, [pc, #816]	; (8001684 <__aeabi_dmul+0x3a4>)
 8001352:	0f52      	lsrs	r2, r2, #29
 8001354:	4684      	mov	ip, r0
 8001356:	4313      	orrs	r3, r2
 8001358:	4652      	mov	r2, sl
 800135a:	2000      	movs	r0, #0
 800135c:	4461      	add	r1, ip
 800135e:	00d2      	lsls	r2, r2, #3
 8001360:	4489      	add	r9, r1
 8001362:	0021      	movs	r1, r4
 8001364:	4069      	eors	r1, r5
 8001366:	9100      	str	r1, [sp, #0]
 8001368:	468c      	mov	ip, r1
 800136a:	2101      	movs	r1, #1
 800136c:	4449      	add	r1, r9
 800136e:	468a      	mov	sl, r1
 8001370:	2f0f      	cmp	r7, #15
 8001372:	d900      	bls.n	8001376 <__aeabi_dmul+0x96>
 8001374:	e090      	b.n	8001498 <__aeabi_dmul+0x1b8>
 8001376:	49c4      	ldr	r1, [pc, #784]	; (8001688 <__aeabi_dmul+0x3a8>)
 8001378:	00bf      	lsls	r7, r7, #2
 800137a:	59cf      	ldr	r7, [r1, r7]
 800137c:	46bf      	mov	pc, r7
 800137e:	465b      	mov	r3, fp
 8001380:	433b      	orrs	r3, r7
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	d000      	beq.n	8001388 <__aeabi_dmul+0xa8>
 8001386:	e16a      	b.n	800165e <__aeabi_dmul+0x37e>
 8001388:	2302      	movs	r3, #2
 800138a:	2708      	movs	r7, #8
 800138c:	2600      	movs	r6, #0
 800138e:	4681      	mov	r9, r0
 8001390:	469b      	mov	fp, r3
 8001392:	e7c9      	b.n	8001328 <__aeabi_dmul+0x48>
 8001394:	0032      	movs	r2, r6
 8001396:	4658      	mov	r0, fp
 8001398:	9b01      	ldr	r3, [sp, #4]
 800139a:	4661      	mov	r1, ip
 800139c:	9100      	str	r1, [sp, #0]
 800139e:	2802      	cmp	r0, #2
 80013a0:	d100      	bne.n	80013a4 <__aeabi_dmul+0xc4>
 80013a2:	e075      	b.n	8001490 <__aeabi_dmul+0x1b0>
 80013a4:	2803      	cmp	r0, #3
 80013a6:	d100      	bne.n	80013aa <__aeabi_dmul+0xca>
 80013a8:	e1fe      	b.n	80017a8 <__aeabi_dmul+0x4c8>
 80013aa:	2801      	cmp	r0, #1
 80013ac:	d000      	beq.n	80013b0 <__aeabi_dmul+0xd0>
 80013ae:	e12c      	b.n	800160a <__aeabi_dmul+0x32a>
 80013b0:	2300      	movs	r3, #0
 80013b2:	2700      	movs	r7, #0
 80013b4:	2600      	movs	r6, #0
 80013b6:	2500      	movs	r5, #0
 80013b8:	033f      	lsls	r7, r7, #12
 80013ba:	0d2a      	lsrs	r2, r5, #20
 80013bc:	0b3f      	lsrs	r7, r7, #12
 80013be:	48b3      	ldr	r0, [pc, #716]	; (800168c <__aeabi_dmul+0x3ac>)
 80013c0:	0512      	lsls	r2, r2, #20
 80013c2:	433a      	orrs	r2, r7
 80013c4:	4002      	ands	r2, r0
 80013c6:	051b      	lsls	r3, r3, #20
 80013c8:	4313      	orrs	r3, r2
 80013ca:	9a00      	ldr	r2, [sp, #0]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	07d1      	lsls	r1, r2, #31
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	430b      	orrs	r3, r1
 80013d4:	0030      	movs	r0, r6
 80013d6:	0019      	movs	r1, r3
 80013d8:	b007      	add	sp, #28
 80013da:	bc3c      	pop	{r2, r3, r4, r5}
 80013dc:	4690      	mov	r8, r2
 80013de:	4699      	mov	r9, r3
 80013e0:	46a2      	mov	sl, r4
 80013e2:	46ab      	mov	fp, r5
 80013e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e6:	465b      	mov	r3, fp
 80013e8:	433b      	orrs	r3, r7
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dmul+0x110>
 80013ee:	e12f      	b.n	8001650 <__aeabi_dmul+0x370>
 80013f0:	2f00      	cmp	r7, #0
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dmul+0x116>
 80013f4:	e1a5      	b.n	8001742 <__aeabi_dmul+0x462>
 80013f6:	0038      	movs	r0, r7
 80013f8:	f000 fec0 	bl	800217c <__clzsi2>
 80013fc:	0003      	movs	r3, r0
 80013fe:	3b0b      	subs	r3, #11
 8001400:	2b1c      	cmp	r3, #28
 8001402:	dd00      	ble.n	8001406 <__aeabi_dmul+0x126>
 8001404:	e196      	b.n	8001734 <__aeabi_dmul+0x454>
 8001406:	221d      	movs	r2, #29
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	465a      	mov	r2, fp
 800140c:	0001      	movs	r1, r0
 800140e:	40da      	lsrs	r2, r3
 8001410:	465e      	mov	r6, fp
 8001412:	3908      	subs	r1, #8
 8001414:	408f      	lsls	r7, r1
 8001416:	0013      	movs	r3, r2
 8001418:	408e      	lsls	r6, r1
 800141a:	433b      	orrs	r3, r7
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	4b9c      	ldr	r3, [pc, #624]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001420:	2700      	movs	r7, #0
 8001422:	1a1b      	subs	r3, r3, r0
 8001424:	4699      	mov	r9, r3
 8001426:	2300      	movs	r3, #0
 8001428:	469b      	mov	fp, r3
 800142a:	e77d      	b.n	8001328 <__aeabi_dmul+0x48>
 800142c:	4641      	mov	r1, r8
 800142e:	4653      	mov	r3, sl
 8001430:	430b      	orrs	r3, r1
 8001432:	4993      	ldr	r1, [pc, #588]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001434:	468c      	mov	ip, r1
 8001436:	44e1      	add	r9, ip
 8001438:	2b00      	cmp	r3, #0
 800143a:	d000      	beq.n	800143e <__aeabi_dmul+0x15e>
 800143c:	e11a      	b.n	8001674 <__aeabi_dmul+0x394>
 800143e:	2202      	movs	r2, #2
 8001440:	2002      	movs	r0, #2
 8001442:	4317      	orrs	r7, r2
 8001444:	2200      	movs	r2, #0
 8001446:	e78c      	b.n	8001362 <__aeabi_dmul+0x82>
 8001448:	4313      	orrs	r3, r2
 800144a:	d100      	bne.n	800144e <__aeabi_dmul+0x16e>
 800144c:	e10d      	b.n	800166a <__aeabi_dmul+0x38a>
 800144e:	4643      	mov	r3, r8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x176>
 8001454:	e181      	b.n	800175a <__aeabi_dmul+0x47a>
 8001456:	4640      	mov	r0, r8
 8001458:	f000 fe90 	bl	800217c <__clzsi2>
 800145c:	0002      	movs	r2, r0
 800145e:	3a0b      	subs	r2, #11
 8001460:	2a1c      	cmp	r2, #28
 8001462:	dd00      	ble.n	8001466 <__aeabi_dmul+0x186>
 8001464:	e172      	b.n	800174c <__aeabi_dmul+0x46c>
 8001466:	0001      	movs	r1, r0
 8001468:	4643      	mov	r3, r8
 800146a:	3908      	subs	r1, #8
 800146c:	408b      	lsls	r3, r1
 800146e:	4698      	mov	r8, r3
 8001470:	231d      	movs	r3, #29
 8001472:	1a9a      	subs	r2, r3, r2
 8001474:	4653      	mov	r3, sl
 8001476:	40d3      	lsrs	r3, r2
 8001478:	001a      	movs	r2, r3
 800147a:	4643      	mov	r3, r8
 800147c:	4313      	orrs	r3, r2
 800147e:	4652      	mov	r2, sl
 8001480:	408a      	lsls	r2, r1
 8001482:	4649      	mov	r1, r9
 8001484:	1a08      	subs	r0, r1, r0
 8001486:	4982      	ldr	r1, [pc, #520]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001488:	4689      	mov	r9, r1
 800148a:	4481      	add	r9, r0
 800148c:	2000      	movs	r0, #0
 800148e:	e768      	b.n	8001362 <__aeabi_dmul+0x82>
 8001490:	4b7b      	ldr	r3, [pc, #492]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001492:	2700      	movs	r7, #0
 8001494:	2600      	movs	r6, #0
 8001496:	e78e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001498:	0c14      	lsrs	r4, r2, #16
 800149a:	0412      	lsls	r2, r2, #16
 800149c:	0c12      	lsrs	r2, r2, #16
 800149e:	0011      	movs	r1, r2
 80014a0:	0c37      	lsrs	r7, r6, #16
 80014a2:	0436      	lsls	r6, r6, #16
 80014a4:	0c35      	lsrs	r5, r6, #16
 80014a6:	4379      	muls	r1, r7
 80014a8:	0028      	movs	r0, r5
 80014aa:	468c      	mov	ip, r1
 80014ac:	002e      	movs	r6, r5
 80014ae:	4360      	muls	r0, r4
 80014b0:	4460      	add	r0, ip
 80014b2:	4683      	mov	fp, r0
 80014b4:	4356      	muls	r6, r2
 80014b6:	0021      	movs	r1, r4
 80014b8:	0c30      	lsrs	r0, r6, #16
 80014ba:	4680      	mov	r8, r0
 80014bc:	4658      	mov	r0, fp
 80014be:	4379      	muls	r1, r7
 80014c0:	4440      	add	r0, r8
 80014c2:	9102      	str	r1, [sp, #8]
 80014c4:	4584      	cmp	ip, r0
 80014c6:	d906      	bls.n	80014d6 <__aeabi_dmul+0x1f6>
 80014c8:	4688      	mov	r8, r1
 80014ca:	2180      	movs	r1, #128	; 0x80
 80014cc:	0249      	lsls	r1, r1, #9
 80014ce:	468c      	mov	ip, r1
 80014d0:	44e0      	add	r8, ip
 80014d2:	4641      	mov	r1, r8
 80014d4:	9102      	str	r1, [sp, #8]
 80014d6:	0436      	lsls	r6, r6, #16
 80014d8:	0c01      	lsrs	r1, r0, #16
 80014da:	0c36      	lsrs	r6, r6, #16
 80014dc:	0400      	lsls	r0, r0, #16
 80014de:	468b      	mov	fp, r1
 80014e0:	1981      	adds	r1, r0, r6
 80014e2:	0c1e      	lsrs	r6, r3, #16
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	9103      	str	r1, [sp, #12]
 80014ea:	0019      	movs	r1, r3
 80014ec:	4379      	muls	r1, r7
 80014ee:	468c      	mov	ip, r1
 80014f0:	0028      	movs	r0, r5
 80014f2:	4375      	muls	r5, r6
 80014f4:	4465      	add	r5, ip
 80014f6:	46a8      	mov	r8, r5
 80014f8:	4358      	muls	r0, r3
 80014fa:	0c05      	lsrs	r5, r0, #16
 80014fc:	4445      	add	r5, r8
 80014fe:	4377      	muls	r7, r6
 8001500:	42a9      	cmp	r1, r5
 8001502:	d903      	bls.n	800150c <__aeabi_dmul+0x22c>
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	0249      	lsls	r1, r1, #9
 8001508:	468c      	mov	ip, r1
 800150a:	4467      	add	r7, ip
 800150c:	0c29      	lsrs	r1, r5, #16
 800150e:	468c      	mov	ip, r1
 8001510:	0039      	movs	r1, r7
 8001512:	0400      	lsls	r0, r0, #16
 8001514:	0c00      	lsrs	r0, r0, #16
 8001516:	042d      	lsls	r5, r5, #16
 8001518:	182d      	adds	r5, r5, r0
 800151a:	4461      	add	r1, ip
 800151c:	44ab      	add	fp, r5
 800151e:	9105      	str	r1, [sp, #20]
 8001520:	4659      	mov	r1, fp
 8001522:	9104      	str	r1, [sp, #16]
 8001524:	9901      	ldr	r1, [sp, #4]
 8001526:	040f      	lsls	r7, r1, #16
 8001528:	0c3f      	lsrs	r7, r7, #16
 800152a:	0c08      	lsrs	r0, r1, #16
 800152c:	0039      	movs	r1, r7
 800152e:	4351      	muls	r1, r2
 8001530:	4342      	muls	r2, r0
 8001532:	4690      	mov	r8, r2
 8001534:	0002      	movs	r2, r0
 8001536:	468c      	mov	ip, r1
 8001538:	0c09      	lsrs	r1, r1, #16
 800153a:	468b      	mov	fp, r1
 800153c:	4362      	muls	r2, r4
 800153e:	437c      	muls	r4, r7
 8001540:	4444      	add	r4, r8
 8001542:	445c      	add	r4, fp
 8001544:	45a0      	cmp	r8, r4
 8001546:	d903      	bls.n	8001550 <__aeabi_dmul+0x270>
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	0249      	lsls	r1, r1, #9
 800154c:	4688      	mov	r8, r1
 800154e:	4442      	add	r2, r8
 8001550:	0c21      	lsrs	r1, r4, #16
 8001552:	4688      	mov	r8, r1
 8001554:	4661      	mov	r1, ip
 8001556:	0409      	lsls	r1, r1, #16
 8001558:	0c09      	lsrs	r1, r1, #16
 800155a:	468c      	mov	ip, r1
 800155c:	0039      	movs	r1, r7
 800155e:	4359      	muls	r1, r3
 8001560:	4343      	muls	r3, r0
 8001562:	4370      	muls	r0, r6
 8001564:	437e      	muls	r6, r7
 8001566:	0c0f      	lsrs	r7, r1, #16
 8001568:	18f6      	adds	r6, r6, r3
 800156a:	0424      	lsls	r4, r4, #16
 800156c:	19be      	adds	r6, r7, r6
 800156e:	4464      	add	r4, ip
 8001570:	4442      	add	r2, r8
 8001572:	468c      	mov	ip, r1
 8001574:	42b3      	cmp	r3, r6
 8001576:	d903      	bls.n	8001580 <__aeabi_dmul+0x2a0>
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	4698      	mov	r8, r3
 800157e:	4440      	add	r0, r8
 8001580:	9b02      	ldr	r3, [sp, #8]
 8001582:	4661      	mov	r1, ip
 8001584:	4698      	mov	r8, r3
 8001586:	9b04      	ldr	r3, [sp, #16]
 8001588:	0437      	lsls	r7, r6, #16
 800158a:	4443      	add	r3, r8
 800158c:	469b      	mov	fp, r3
 800158e:	45ab      	cmp	fp, r5
 8001590:	41ad      	sbcs	r5, r5
 8001592:	426b      	negs	r3, r5
 8001594:	040d      	lsls	r5, r1, #16
 8001596:	9905      	ldr	r1, [sp, #20]
 8001598:	0c2d      	lsrs	r5, r5, #16
 800159a:	468c      	mov	ip, r1
 800159c:	197f      	adds	r7, r7, r5
 800159e:	4467      	add	r7, ip
 80015a0:	18fd      	adds	r5, r7, r3
 80015a2:	46a8      	mov	r8, r5
 80015a4:	465d      	mov	r5, fp
 80015a6:	192d      	adds	r5, r5, r4
 80015a8:	42a5      	cmp	r5, r4
 80015aa:	41a4      	sbcs	r4, r4
 80015ac:	4693      	mov	fp, r2
 80015ae:	4264      	negs	r4, r4
 80015b0:	46a4      	mov	ip, r4
 80015b2:	44c3      	add	fp, r8
 80015b4:	44dc      	add	ip, fp
 80015b6:	428f      	cmp	r7, r1
 80015b8:	41bf      	sbcs	r7, r7
 80015ba:	4598      	cmp	r8, r3
 80015bc:	419b      	sbcs	r3, r3
 80015be:	4593      	cmp	fp, r2
 80015c0:	4192      	sbcs	r2, r2
 80015c2:	45a4      	cmp	ip, r4
 80015c4:	41a4      	sbcs	r4, r4
 80015c6:	425b      	negs	r3, r3
 80015c8:	427f      	negs	r7, r7
 80015ca:	431f      	orrs	r7, r3
 80015cc:	0c36      	lsrs	r6, r6, #16
 80015ce:	4252      	negs	r2, r2
 80015d0:	4264      	negs	r4, r4
 80015d2:	19bf      	adds	r7, r7, r6
 80015d4:	4322      	orrs	r2, r4
 80015d6:	18bf      	adds	r7, r7, r2
 80015d8:	4662      	mov	r2, ip
 80015da:	1838      	adds	r0, r7, r0
 80015dc:	0243      	lsls	r3, r0, #9
 80015de:	0dd2      	lsrs	r2, r2, #23
 80015e0:	9903      	ldr	r1, [sp, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	026a      	lsls	r2, r5, #9
 80015e6:	430a      	orrs	r2, r1
 80015e8:	1e50      	subs	r0, r2, #1
 80015ea:	4182      	sbcs	r2, r0
 80015ec:	4661      	mov	r1, ip
 80015ee:	0ded      	lsrs	r5, r5, #23
 80015f0:	432a      	orrs	r2, r5
 80015f2:	024e      	lsls	r6, r1, #9
 80015f4:	4332      	orrs	r2, r6
 80015f6:	01d9      	lsls	r1, r3, #7
 80015f8:	d400      	bmi.n	80015fc <__aeabi_dmul+0x31c>
 80015fa:	e0b3      	b.n	8001764 <__aeabi_dmul+0x484>
 80015fc:	2601      	movs	r6, #1
 80015fe:	0850      	lsrs	r0, r2, #1
 8001600:	4032      	ands	r2, r6
 8001602:	4302      	orrs	r2, r0
 8001604:	07de      	lsls	r6, r3, #31
 8001606:	4332      	orrs	r2, r6
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	4c22      	ldr	r4, [pc, #136]	; (8001694 <__aeabi_dmul+0x3b4>)
 800160c:	4454      	add	r4, sl
 800160e:	2c00      	cmp	r4, #0
 8001610:	dd62      	ble.n	80016d8 <__aeabi_dmul+0x3f8>
 8001612:	0751      	lsls	r1, r2, #29
 8001614:	d009      	beq.n	800162a <__aeabi_dmul+0x34a>
 8001616:	200f      	movs	r0, #15
 8001618:	4010      	ands	r0, r2
 800161a:	2804      	cmp	r0, #4
 800161c:	d005      	beq.n	800162a <__aeabi_dmul+0x34a>
 800161e:	1d10      	adds	r0, r2, #4
 8001620:	4290      	cmp	r0, r2
 8001622:	4192      	sbcs	r2, r2
 8001624:	4252      	negs	r2, r2
 8001626:	189b      	adds	r3, r3, r2
 8001628:	0002      	movs	r2, r0
 800162a:	01d9      	lsls	r1, r3, #7
 800162c:	d504      	bpl.n	8001638 <__aeabi_dmul+0x358>
 800162e:	2480      	movs	r4, #128	; 0x80
 8001630:	4819      	ldr	r0, [pc, #100]	; (8001698 <__aeabi_dmul+0x3b8>)
 8001632:	00e4      	lsls	r4, r4, #3
 8001634:	4003      	ands	r3, r0
 8001636:	4454      	add	r4, sl
 8001638:	4818      	ldr	r0, [pc, #96]	; (800169c <__aeabi_dmul+0x3bc>)
 800163a:	4284      	cmp	r4, r0
 800163c:	dd00      	ble.n	8001640 <__aeabi_dmul+0x360>
 800163e:	e727      	b.n	8001490 <__aeabi_dmul+0x1b0>
 8001640:	075e      	lsls	r6, r3, #29
 8001642:	025b      	lsls	r3, r3, #9
 8001644:	08d2      	lsrs	r2, r2, #3
 8001646:	0b1f      	lsrs	r7, r3, #12
 8001648:	0563      	lsls	r3, r4, #21
 800164a:	4316      	orrs	r6, r2
 800164c:	0d5b      	lsrs	r3, r3, #21
 800164e:	e6b2      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001650:	2300      	movs	r3, #0
 8001652:	4699      	mov	r9, r3
 8001654:	3301      	adds	r3, #1
 8001656:	2704      	movs	r7, #4
 8001658:	2600      	movs	r6, #0
 800165a:	469b      	mov	fp, r3
 800165c:	e664      	b.n	8001328 <__aeabi_dmul+0x48>
 800165e:	2303      	movs	r3, #3
 8001660:	9701      	str	r7, [sp, #4]
 8001662:	4681      	mov	r9, r0
 8001664:	270c      	movs	r7, #12
 8001666:	469b      	mov	fp, r3
 8001668:	e65e      	b.n	8001328 <__aeabi_dmul+0x48>
 800166a:	2201      	movs	r2, #1
 800166c:	2001      	movs	r0, #1
 800166e:	4317      	orrs	r7, r2
 8001670:	2200      	movs	r2, #0
 8001672:	e676      	b.n	8001362 <__aeabi_dmul+0x82>
 8001674:	2303      	movs	r3, #3
 8001676:	2003      	movs	r0, #3
 8001678:	431f      	orrs	r7, r3
 800167a:	4643      	mov	r3, r8
 800167c:	e671      	b.n	8001362 <__aeabi_dmul+0x82>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	000007ff 	.word	0x000007ff
 8001684:	fffffc01 	.word	0xfffffc01
 8001688:	0800b71c 	.word	0x0800b71c
 800168c:	800fffff 	.word	0x800fffff
 8001690:	fffffc0d 	.word	0xfffffc0d
 8001694:	000003ff 	.word	0x000003ff
 8001698:	feffffff 	.word	0xfeffffff
 800169c:	000007fe 	.word	0x000007fe
 80016a0:	2300      	movs	r3, #0
 80016a2:	2780      	movs	r7, #128	; 0x80
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	033f      	lsls	r7, r7, #12
 80016a8:	2600      	movs	r6, #0
 80016aa:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016ac:	e683      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016ae:	9b01      	ldr	r3, [sp, #4]
 80016b0:	0032      	movs	r2, r6
 80016b2:	46a4      	mov	ip, r4
 80016b4:	4658      	mov	r0, fp
 80016b6:	e670      	b.n	800139a <__aeabi_dmul+0xba>
 80016b8:	46ac      	mov	ip, r5
 80016ba:	e66e      	b.n	800139a <__aeabi_dmul+0xba>
 80016bc:	2780      	movs	r7, #128	; 0x80
 80016be:	9901      	ldr	r1, [sp, #4]
 80016c0:	033f      	lsls	r7, r7, #12
 80016c2:	4239      	tst	r1, r7
 80016c4:	d02d      	beq.n	8001722 <__aeabi_dmul+0x442>
 80016c6:	423b      	tst	r3, r7
 80016c8:	d12b      	bne.n	8001722 <__aeabi_dmul+0x442>
 80016ca:	431f      	orrs	r7, r3
 80016cc:	033f      	lsls	r7, r7, #12
 80016ce:	0b3f      	lsrs	r7, r7, #12
 80016d0:	9500      	str	r5, [sp, #0]
 80016d2:	0016      	movs	r6, r2
 80016d4:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016d6:	e66e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016d8:	2501      	movs	r5, #1
 80016da:	1b2d      	subs	r5, r5, r4
 80016dc:	2d38      	cmp	r5, #56	; 0x38
 80016de:	dd00      	ble.n	80016e2 <__aeabi_dmul+0x402>
 80016e0:	e666      	b.n	80013b0 <__aeabi_dmul+0xd0>
 80016e2:	2d1f      	cmp	r5, #31
 80016e4:	dc40      	bgt.n	8001768 <__aeabi_dmul+0x488>
 80016e6:	4835      	ldr	r0, [pc, #212]	; (80017bc <__aeabi_dmul+0x4dc>)
 80016e8:	001c      	movs	r4, r3
 80016ea:	4450      	add	r0, sl
 80016ec:	0016      	movs	r6, r2
 80016ee:	4082      	lsls	r2, r0
 80016f0:	4084      	lsls	r4, r0
 80016f2:	40ee      	lsrs	r6, r5
 80016f4:	1e50      	subs	r0, r2, #1
 80016f6:	4182      	sbcs	r2, r0
 80016f8:	4334      	orrs	r4, r6
 80016fa:	4314      	orrs	r4, r2
 80016fc:	40eb      	lsrs	r3, r5
 80016fe:	0762      	lsls	r2, r4, #29
 8001700:	d009      	beq.n	8001716 <__aeabi_dmul+0x436>
 8001702:	220f      	movs	r2, #15
 8001704:	4022      	ands	r2, r4
 8001706:	2a04      	cmp	r2, #4
 8001708:	d005      	beq.n	8001716 <__aeabi_dmul+0x436>
 800170a:	0022      	movs	r2, r4
 800170c:	1d14      	adds	r4, r2, #4
 800170e:	4294      	cmp	r4, r2
 8001710:	4180      	sbcs	r0, r0
 8001712:	4240      	negs	r0, r0
 8001714:	181b      	adds	r3, r3, r0
 8001716:	021a      	lsls	r2, r3, #8
 8001718:	d53e      	bpl.n	8001798 <__aeabi_dmul+0x4b8>
 800171a:	2301      	movs	r3, #1
 800171c:	2700      	movs	r7, #0
 800171e:	2600      	movs	r6, #0
 8001720:	e649      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001722:	2780      	movs	r7, #128	; 0x80
 8001724:	9b01      	ldr	r3, [sp, #4]
 8001726:	033f      	lsls	r7, r7, #12
 8001728:	431f      	orrs	r7, r3
 800172a:	033f      	lsls	r7, r7, #12
 800172c:	0b3f      	lsrs	r7, r7, #12
 800172e:	9400      	str	r4, [sp, #0]
 8001730:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <__aeabi_dmul+0x4d8>)
 8001732:	e640      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001734:	0003      	movs	r3, r0
 8001736:	465a      	mov	r2, fp
 8001738:	3b28      	subs	r3, #40	; 0x28
 800173a:	409a      	lsls	r2, r3
 800173c:	2600      	movs	r6, #0
 800173e:	9201      	str	r2, [sp, #4]
 8001740:	e66d      	b.n	800141e <__aeabi_dmul+0x13e>
 8001742:	4658      	mov	r0, fp
 8001744:	f000 fd1a 	bl	800217c <__clzsi2>
 8001748:	3020      	adds	r0, #32
 800174a:	e657      	b.n	80013fc <__aeabi_dmul+0x11c>
 800174c:	0003      	movs	r3, r0
 800174e:	4652      	mov	r2, sl
 8001750:	3b28      	subs	r3, #40	; 0x28
 8001752:	409a      	lsls	r2, r3
 8001754:	0013      	movs	r3, r2
 8001756:	2200      	movs	r2, #0
 8001758:	e693      	b.n	8001482 <__aeabi_dmul+0x1a2>
 800175a:	4650      	mov	r0, sl
 800175c:	f000 fd0e 	bl	800217c <__clzsi2>
 8001760:	3020      	adds	r0, #32
 8001762:	e67b      	b.n	800145c <__aeabi_dmul+0x17c>
 8001764:	46ca      	mov	sl, r9
 8001766:	e750      	b.n	800160a <__aeabi_dmul+0x32a>
 8001768:	201f      	movs	r0, #31
 800176a:	001e      	movs	r6, r3
 800176c:	4240      	negs	r0, r0
 800176e:	1b04      	subs	r4, r0, r4
 8001770:	40e6      	lsrs	r6, r4
 8001772:	2d20      	cmp	r5, #32
 8001774:	d003      	beq.n	800177e <__aeabi_dmul+0x49e>
 8001776:	4c12      	ldr	r4, [pc, #72]	; (80017c0 <__aeabi_dmul+0x4e0>)
 8001778:	4454      	add	r4, sl
 800177a:	40a3      	lsls	r3, r4
 800177c:	431a      	orrs	r2, r3
 800177e:	1e50      	subs	r0, r2, #1
 8001780:	4182      	sbcs	r2, r0
 8001782:	4332      	orrs	r2, r6
 8001784:	2607      	movs	r6, #7
 8001786:	2700      	movs	r7, #0
 8001788:	4016      	ands	r6, r2
 800178a:	d009      	beq.n	80017a0 <__aeabi_dmul+0x4c0>
 800178c:	200f      	movs	r0, #15
 800178e:	2300      	movs	r3, #0
 8001790:	4010      	ands	r0, r2
 8001792:	0014      	movs	r4, r2
 8001794:	2804      	cmp	r0, #4
 8001796:	d1b9      	bne.n	800170c <__aeabi_dmul+0x42c>
 8001798:	0022      	movs	r2, r4
 800179a:	075e      	lsls	r6, r3, #29
 800179c:	025b      	lsls	r3, r3, #9
 800179e:	0b1f      	lsrs	r7, r3, #12
 80017a0:	08d2      	lsrs	r2, r2, #3
 80017a2:	4316      	orrs	r6, r2
 80017a4:	2300      	movs	r3, #0
 80017a6:	e606      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017a8:	2780      	movs	r7, #128	; 0x80
 80017aa:	033f      	lsls	r7, r7, #12
 80017ac:	431f      	orrs	r7, r3
 80017ae:	033f      	lsls	r7, r7, #12
 80017b0:	0b3f      	lsrs	r7, r7, #12
 80017b2:	0016      	movs	r6, r2
 80017b4:	4b00      	ldr	r3, [pc, #0]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80017b6:	e5fe      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017b8:	000007ff 	.word	0x000007ff
 80017bc:	0000041e 	.word	0x0000041e
 80017c0:	0000043e 	.word	0x0000043e

080017c4 <__aeabi_dsub>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	4657      	mov	r7, sl
 80017c8:	464e      	mov	r6, r9
 80017ca:	4645      	mov	r5, r8
 80017cc:	46de      	mov	lr, fp
 80017ce:	000c      	movs	r4, r1
 80017d0:	0309      	lsls	r1, r1, #12
 80017d2:	b5e0      	push	{r5, r6, r7, lr}
 80017d4:	0a49      	lsrs	r1, r1, #9
 80017d6:	0f46      	lsrs	r6, r0, #29
 80017d8:	005f      	lsls	r7, r3, #1
 80017da:	4331      	orrs	r1, r6
 80017dc:	031e      	lsls	r6, r3, #12
 80017de:	0fdb      	lsrs	r3, r3, #31
 80017e0:	0a76      	lsrs	r6, r6, #9
 80017e2:	469b      	mov	fp, r3
 80017e4:	0f53      	lsrs	r3, r2, #29
 80017e6:	4333      	orrs	r3, r6
 80017e8:	4ec8      	ldr	r6, [pc, #800]	; (8001b0c <__aeabi_dsub+0x348>)
 80017ea:	0065      	lsls	r5, r4, #1
 80017ec:	00c0      	lsls	r0, r0, #3
 80017ee:	0fe4      	lsrs	r4, r4, #31
 80017f0:	00d2      	lsls	r2, r2, #3
 80017f2:	0d6d      	lsrs	r5, r5, #21
 80017f4:	46a2      	mov	sl, r4
 80017f6:	4681      	mov	r9, r0
 80017f8:	0d7f      	lsrs	r7, r7, #21
 80017fa:	469c      	mov	ip, r3
 80017fc:	4690      	mov	r8, r2
 80017fe:	42b7      	cmp	r7, r6
 8001800:	d100      	bne.n	8001804 <__aeabi_dsub+0x40>
 8001802:	e0b9      	b.n	8001978 <__aeabi_dsub+0x1b4>
 8001804:	465b      	mov	r3, fp
 8001806:	2601      	movs	r6, #1
 8001808:	4073      	eors	r3, r6
 800180a:	469b      	mov	fp, r3
 800180c:	1bee      	subs	r6, r5, r7
 800180e:	45a3      	cmp	fp, r4
 8001810:	d100      	bne.n	8001814 <__aeabi_dsub+0x50>
 8001812:	e083      	b.n	800191c <__aeabi_dsub+0x158>
 8001814:	2e00      	cmp	r6, #0
 8001816:	dd63      	ble.n	80018e0 <__aeabi_dsub+0x11c>
 8001818:	2f00      	cmp	r7, #0
 800181a:	d000      	beq.n	800181e <__aeabi_dsub+0x5a>
 800181c:	e0b1      	b.n	8001982 <__aeabi_dsub+0x1be>
 800181e:	4663      	mov	r3, ip
 8001820:	4313      	orrs	r3, r2
 8001822:	d100      	bne.n	8001826 <__aeabi_dsub+0x62>
 8001824:	e123      	b.n	8001a6e <__aeabi_dsub+0x2aa>
 8001826:	1e73      	subs	r3, r6, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d000      	beq.n	800182e <__aeabi_dsub+0x6a>
 800182c:	e1ba      	b.n	8001ba4 <__aeabi_dsub+0x3e0>
 800182e:	1a86      	subs	r6, r0, r2
 8001830:	4663      	mov	r3, ip
 8001832:	42b0      	cmp	r0, r6
 8001834:	4180      	sbcs	r0, r0
 8001836:	2501      	movs	r5, #1
 8001838:	1ac9      	subs	r1, r1, r3
 800183a:	4240      	negs	r0, r0
 800183c:	1a09      	subs	r1, r1, r0
 800183e:	020b      	lsls	r3, r1, #8
 8001840:	d400      	bmi.n	8001844 <__aeabi_dsub+0x80>
 8001842:	e147      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001844:	0249      	lsls	r1, r1, #9
 8001846:	0a4b      	lsrs	r3, r1, #9
 8001848:	4698      	mov	r8, r3
 800184a:	4643      	mov	r3, r8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d100      	bne.n	8001852 <__aeabi_dsub+0x8e>
 8001850:	e189      	b.n	8001b66 <__aeabi_dsub+0x3a2>
 8001852:	4640      	mov	r0, r8
 8001854:	f000 fc92 	bl	800217c <__clzsi2>
 8001858:	0003      	movs	r3, r0
 800185a:	3b08      	subs	r3, #8
 800185c:	2b1f      	cmp	r3, #31
 800185e:	dd00      	ble.n	8001862 <__aeabi_dsub+0x9e>
 8001860:	e17c      	b.n	8001b5c <__aeabi_dsub+0x398>
 8001862:	2220      	movs	r2, #32
 8001864:	0030      	movs	r0, r6
 8001866:	1ad2      	subs	r2, r2, r3
 8001868:	4641      	mov	r1, r8
 800186a:	40d0      	lsrs	r0, r2
 800186c:	4099      	lsls	r1, r3
 800186e:	0002      	movs	r2, r0
 8001870:	409e      	lsls	r6, r3
 8001872:	430a      	orrs	r2, r1
 8001874:	429d      	cmp	r5, r3
 8001876:	dd00      	ble.n	800187a <__aeabi_dsub+0xb6>
 8001878:	e16a      	b.n	8001b50 <__aeabi_dsub+0x38c>
 800187a:	1b5d      	subs	r5, r3, r5
 800187c:	1c6b      	adds	r3, r5, #1
 800187e:	2b1f      	cmp	r3, #31
 8001880:	dd00      	ble.n	8001884 <__aeabi_dsub+0xc0>
 8001882:	e194      	b.n	8001bae <__aeabi_dsub+0x3ea>
 8001884:	2120      	movs	r1, #32
 8001886:	0010      	movs	r0, r2
 8001888:	0035      	movs	r5, r6
 800188a:	1ac9      	subs	r1, r1, r3
 800188c:	408e      	lsls	r6, r1
 800188e:	40da      	lsrs	r2, r3
 8001890:	4088      	lsls	r0, r1
 8001892:	40dd      	lsrs	r5, r3
 8001894:	1e71      	subs	r1, r6, #1
 8001896:	418e      	sbcs	r6, r1
 8001898:	0011      	movs	r1, r2
 800189a:	2207      	movs	r2, #7
 800189c:	4328      	orrs	r0, r5
 800189e:	2500      	movs	r5, #0
 80018a0:	4306      	orrs	r6, r0
 80018a2:	4032      	ands	r2, r6
 80018a4:	2a00      	cmp	r2, #0
 80018a6:	d009      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018a8:	230f      	movs	r3, #15
 80018aa:	4033      	ands	r3, r6
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d005      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018b0:	1d33      	adds	r3, r6, #4
 80018b2:	42b3      	cmp	r3, r6
 80018b4:	41b6      	sbcs	r6, r6
 80018b6:	4276      	negs	r6, r6
 80018b8:	1989      	adds	r1, r1, r6
 80018ba:	001e      	movs	r6, r3
 80018bc:	020b      	lsls	r3, r1, #8
 80018be:	d400      	bmi.n	80018c2 <__aeabi_dsub+0xfe>
 80018c0:	e23d      	b.n	8001d3e <__aeabi_dsub+0x57a>
 80018c2:	1c6a      	adds	r2, r5, #1
 80018c4:	4b91      	ldr	r3, [pc, #580]	; (8001b0c <__aeabi_dsub+0x348>)
 80018c6:	0555      	lsls	r5, r2, #21
 80018c8:	0d6d      	lsrs	r5, r5, #21
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dsub+0x10c>
 80018ce:	e119      	b.n	8001b04 <__aeabi_dsub+0x340>
 80018d0:	4a8f      	ldr	r2, [pc, #572]	; (8001b10 <__aeabi_dsub+0x34c>)
 80018d2:	08f6      	lsrs	r6, r6, #3
 80018d4:	400a      	ands	r2, r1
 80018d6:	0757      	lsls	r7, r2, #29
 80018d8:	0252      	lsls	r2, r2, #9
 80018da:	4337      	orrs	r7, r6
 80018dc:	0b12      	lsrs	r2, r2, #12
 80018de:	e09b      	b.n	8001a18 <__aeabi_dsub+0x254>
 80018e0:	2e00      	cmp	r6, #0
 80018e2:	d000      	beq.n	80018e6 <__aeabi_dsub+0x122>
 80018e4:	e0c5      	b.n	8001a72 <__aeabi_dsub+0x2ae>
 80018e6:	1c6e      	adds	r6, r5, #1
 80018e8:	0576      	lsls	r6, r6, #21
 80018ea:	0d76      	lsrs	r6, r6, #21
 80018ec:	2e01      	cmp	r6, #1
 80018ee:	dc00      	bgt.n	80018f2 <__aeabi_dsub+0x12e>
 80018f0:	e148      	b.n	8001b84 <__aeabi_dsub+0x3c0>
 80018f2:	4667      	mov	r7, ip
 80018f4:	1a86      	subs	r6, r0, r2
 80018f6:	1bcb      	subs	r3, r1, r7
 80018f8:	42b0      	cmp	r0, r6
 80018fa:	41bf      	sbcs	r7, r7
 80018fc:	427f      	negs	r7, r7
 80018fe:	46b8      	mov	r8, r7
 8001900:	001f      	movs	r7, r3
 8001902:	4643      	mov	r3, r8
 8001904:	1aff      	subs	r7, r7, r3
 8001906:	003b      	movs	r3, r7
 8001908:	46b8      	mov	r8, r7
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	d500      	bpl.n	8001910 <__aeabi_dsub+0x14c>
 800190e:	e15f      	b.n	8001bd0 <__aeabi_dsub+0x40c>
 8001910:	4337      	orrs	r7, r6
 8001912:	d19a      	bne.n	800184a <__aeabi_dsub+0x86>
 8001914:	2200      	movs	r2, #0
 8001916:	2400      	movs	r4, #0
 8001918:	2500      	movs	r5, #0
 800191a:	e079      	b.n	8001a10 <__aeabi_dsub+0x24c>
 800191c:	2e00      	cmp	r6, #0
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dsub+0x15e>
 8001920:	e0fa      	b.n	8001b18 <__aeabi_dsub+0x354>
 8001922:	2f00      	cmp	r7, #0
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x164>
 8001926:	e08d      	b.n	8001a44 <__aeabi_dsub+0x280>
 8001928:	4b78      	ldr	r3, [pc, #480]	; (8001b0c <__aeabi_dsub+0x348>)
 800192a:	429d      	cmp	r5, r3
 800192c:	d067      	beq.n	80019fe <__aeabi_dsub+0x23a>
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	4667      	mov	r7, ip
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	431f      	orrs	r7, r3
 8001936:	46bc      	mov	ip, r7
 8001938:	2e38      	cmp	r6, #56	; 0x38
 800193a:	dc00      	bgt.n	800193e <__aeabi_dsub+0x17a>
 800193c:	e152      	b.n	8001be4 <__aeabi_dsub+0x420>
 800193e:	4663      	mov	r3, ip
 8001940:	4313      	orrs	r3, r2
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	4193      	sbcs	r3, r2
 8001946:	181e      	adds	r6, r3, r0
 8001948:	4286      	cmp	r6, r0
 800194a:	4180      	sbcs	r0, r0
 800194c:	4240      	negs	r0, r0
 800194e:	1809      	adds	r1, r1, r0
 8001950:	020b      	lsls	r3, r1, #8
 8001952:	d400      	bmi.n	8001956 <__aeabi_dsub+0x192>
 8001954:	e0be      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001956:	4b6d      	ldr	r3, [pc, #436]	; (8001b0c <__aeabi_dsub+0x348>)
 8001958:	3501      	adds	r5, #1
 800195a:	429d      	cmp	r5, r3
 800195c:	d100      	bne.n	8001960 <__aeabi_dsub+0x19c>
 800195e:	e0d2      	b.n	8001b06 <__aeabi_dsub+0x342>
 8001960:	4a6b      	ldr	r2, [pc, #428]	; (8001b10 <__aeabi_dsub+0x34c>)
 8001962:	0873      	lsrs	r3, r6, #1
 8001964:	400a      	ands	r2, r1
 8001966:	2101      	movs	r1, #1
 8001968:	400e      	ands	r6, r1
 800196a:	431e      	orrs	r6, r3
 800196c:	0851      	lsrs	r1, r2, #1
 800196e:	07d3      	lsls	r3, r2, #31
 8001970:	2207      	movs	r2, #7
 8001972:	431e      	orrs	r6, r3
 8001974:	4032      	ands	r2, r6
 8001976:	e795      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001978:	001e      	movs	r6, r3
 800197a:	4316      	orrs	r6, r2
 800197c:	d000      	beq.n	8001980 <__aeabi_dsub+0x1bc>
 800197e:	e745      	b.n	800180c <__aeabi_dsub+0x48>
 8001980:	e740      	b.n	8001804 <__aeabi_dsub+0x40>
 8001982:	4b62      	ldr	r3, [pc, #392]	; (8001b0c <__aeabi_dsub+0x348>)
 8001984:	429d      	cmp	r5, r3
 8001986:	d03a      	beq.n	80019fe <__aeabi_dsub+0x23a>
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	4667      	mov	r7, ip
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	431f      	orrs	r7, r3
 8001990:	46bc      	mov	ip, r7
 8001992:	2e38      	cmp	r6, #56	; 0x38
 8001994:	dd00      	ble.n	8001998 <__aeabi_dsub+0x1d4>
 8001996:	e0eb      	b.n	8001b70 <__aeabi_dsub+0x3ac>
 8001998:	2e1f      	cmp	r6, #31
 800199a:	dc00      	bgt.n	800199e <__aeabi_dsub+0x1da>
 800199c:	e13a      	b.n	8001c14 <__aeabi_dsub+0x450>
 800199e:	0033      	movs	r3, r6
 80019a0:	4667      	mov	r7, ip
 80019a2:	3b20      	subs	r3, #32
 80019a4:	40df      	lsrs	r7, r3
 80019a6:	003b      	movs	r3, r7
 80019a8:	2e20      	cmp	r6, #32
 80019aa:	d005      	beq.n	80019b8 <__aeabi_dsub+0x1f4>
 80019ac:	2740      	movs	r7, #64	; 0x40
 80019ae:	1bbf      	subs	r7, r7, r6
 80019b0:	4666      	mov	r6, ip
 80019b2:	40be      	lsls	r6, r7
 80019b4:	4332      	orrs	r2, r6
 80019b6:	4690      	mov	r8, r2
 80019b8:	4646      	mov	r6, r8
 80019ba:	1e72      	subs	r2, r6, #1
 80019bc:	4196      	sbcs	r6, r2
 80019be:	4333      	orrs	r3, r6
 80019c0:	e0da      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x204>
 80019c6:	e214      	b.n	8001df2 <__aeabi_dsub+0x62e>
 80019c8:	4663      	mov	r3, ip
 80019ca:	4313      	orrs	r3, r2
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x20c>
 80019ce:	e168      	b.n	8001ca2 <__aeabi_dsub+0x4de>
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	074e      	lsls	r6, r1, #29
 80019d4:	08c0      	lsrs	r0, r0, #3
 80019d6:	08c9      	lsrs	r1, r1, #3
 80019d8:	031b      	lsls	r3, r3, #12
 80019da:	4306      	orrs	r6, r0
 80019dc:	4219      	tst	r1, r3
 80019de:	d008      	beq.n	80019f2 <__aeabi_dsub+0x22e>
 80019e0:	4660      	mov	r0, ip
 80019e2:	08c0      	lsrs	r0, r0, #3
 80019e4:	4218      	tst	r0, r3
 80019e6:	d104      	bne.n	80019f2 <__aeabi_dsub+0x22e>
 80019e8:	4663      	mov	r3, ip
 80019ea:	0001      	movs	r1, r0
 80019ec:	08d2      	lsrs	r2, r2, #3
 80019ee:	075e      	lsls	r6, r3, #29
 80019f0:	4316      	orrs	r6, r2
 80019f2:	00f3      	lsls	r3, r6, #3
 80019f4:	4699      	mov	r9, r3
 80019f6:	00c9      	lsls	r1, r1, #3
 80019f8:	0f72      	lsrs	r2, r6, #29
 80019fa:	4d44      	ldr	r5, [pc, #272]	; (8001b0c <__aeabi_dsub+0x348>)
 80019fc:	4311      	orrs	r1, r2
 80019fe:	464b      	mov	r3, r9
 8001a00:	08de      	lsrs	r6, r3, #3
 8001a02:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a04:	074f      	lsls	r7, r1, #29
 8001a06:	4337      	orrs	r7, r6
 8001a08:	08ca      	lsrs	r2, r1, #3
 8001a0a:	429d      	cmp	r5, r3
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x24c>
 8001a0e:	e06e      	b.n	8001aee <__aeabi_dsub+0x32a>
 8001a10:	0312      	lsls	r2, r2, #12
 8001a12:	056d      	lsls	r5, r5, #21
 8001a14:	0b12      	lsrs	r2, r2, #12
 8001a16:	0d6d      	lsrs	r5, r5, #21
 8001a18:	2100      	movs	r1, #0
 8001a1a:	0312      	lsls	r2, r2, #12
 8001a1c:	0b13      	lsrs	r3, r2, #12
 8001a1e:	0d0a      	lsrs	r2, r1, #20
 8001a20:	0512      	lsls	r2, r2, #20
 8001a22:	431a      	orrs	r2, r3
 8001a24:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <__aeabi_dsub+0x350>)
 8001a26:	052d      	lsls	r5, r5, #20
 8001a28:	4013      	ands	r3, r2
 8001a2a:	432b      	orrs	r3, r5
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	07e4      	lsls	r4, r4, #31
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	4323      	orrs	r3, r4
 8001a34:	0038      	movs	r0, r7
 8001a36:	0019      	movs	r1, r3
 8001a38:	bc3c      	pop	{r2, r3, r4, r5}
 8001a3a:	4690      	mov	r8, r2
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	46a2      	mov	sl, r4
 8001a40:	46ab      	mov	fp, r5
 8001a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a44:	4663      	mov	r3, ip
 8001a46:	4313      	orrs	r3, r2
 8001a48:	d011      	beq.n	8001a6e <__aeabi_dsub+0x2aa>
 8001a4a:	1e73      	subs	r3, r6, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d000      	beq.n	8001a52 <__aeabi_dsub+0x28e>
 8001a50:	e107      	b.n	8001c62 <__aeabi_dsub+0x49e>
 8001a52:	1886      	adds	r6, r0, r2
 8001a54:	4286      	cmp	r6, r0
 8001a56:	4180      	sbcs	r0, r0
 8001a58:	4461      	add	r1, ip
 8001a5a:	4240      	negs	r0, r0
 8001a5c:	1809      	adds	r1, r1, r0
 8001a5e:	2501      	movs	r5, #1
 8001a60:	020b      	lsls	r3, r1, #8
 8001a62:	d537      	bpl.n	8001ad4 <__aeabi_dsub+0x310>
 8001a64:	2502      	movs	r5, #2
 8001a66:	e77b      	b.n	8001960 <__aeabi_dsub+0x19c>
 8001a68:	003e      	movs	r6, r7
 8001a6a:	4661      	mov	r1, ip
 8001a6c:	4691      	mov	r9, r2
 8001a6e:	0035      	movs	r5, r6
 8001a70:	e7c5      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001a72:	465c      	mov	r4, fp
 8001a74:	2d00      	cmp	r5, #0
 8001a76:	d000      	beq.n	8001a7a <__aeabi_dsub+0x2b6>
 8001a78:	e0e1      	b.n	8001c3e <__aeabi_dsub+0x47a>
 8001a7a:	000b      	movs	r3, r1
 8001a7c:	4303      	orrs	r3, r0
 8001a7e:	d0f3      	beq.n	8001a68 <__aeabi_dsub+0x2a4>
 8001a80:	1c73      	adds	r3, r6, #1
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0x2c2>
 8001a84:	e1ac      	b.n	8001de0 <__aeabi_dsub+0x61c>
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a88:	429f      	cmp	r7, r3
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dsub+0x2ca>
 8001a8c:	e13a      	b.n	8001d04 <__aeabi_dsub+0x540>
 8001a8e:	43f3      	mvns	r3, r6
 8001a90:	2b38      	cmp	r3, #56	; 0x38
 8001a92:	dd00      	ble.n	8001a96 <__aeabi_dsub+0x2d2>
 8001a94:	e16f      	b.n	8001d76 <__aeabi_dsub+0x5b2>
 8001a96:	2b1f      	cmp	r3, #31
 8001a98:	dd00      	ble.n	8001a9c <__aeabi_dsub+0x2d8>
 8001a9a:	e18c      	b.n	8001db6 <__aeabi_dsub+0x5f2>
 8001a9c:	2520      	movs	r5, #32
 8001a9e:	000e      	movs	r6, r1
 8001aa0:	1aed      	subs	r5, r5, r3
 8001aa2:	40ae      	lsls	r6, r5
 8001aa4:	46b0      	mov	r8, r6
 8001aa6:	0006      	movs	r6, r0
 8001aa8:	46aa      	mov	sl, r5
 8001aaa:	40de      	lsrs	r6, r3
 8001aac:	4645      	mov	r5, r8
 8001aae:	4335      	orrs	r5, r6
 8001ab0:	002e      	movs	r6, r5
 8001ab2:	4655      	mov	r5, sl
 8001ab4:	40d9      	lsrs	r1, r3
 8001ab6:	40a8      	lsls	r0, r5
 8001ab8:	4663      	mov	r3, ip
 8001aba:	1e45      	subs	r5, r0, #1
 8001abc:	41a8      	sbcs	r0, r5
 8001abe:	1a5b      	subs	r3, r3, r1
 8001ac0:	469c      	mov	ip, r3
 8001ac2:	4330      	orrs	r0, r6
 8001ac4:	1a16      	subs	r6, r2, r0
 8001ac6:	42b2      	cmp	r2, r6
 8001ac8:	4192      	sbcs	r2, r2
 8001aca:	4663      	mov	r3, ip
 8001acc:	4252      	negs	r2, r2
 8001ace:	1a99      	subs	r1, r3, r2
 8001ad0:	003d      	movs	r5, r7
 8001ad2:	e6b4      	b.n	800183e <__aeabi_dsub+0x7a>
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	4032      	ands	r2, r6
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	d000      	beq.n	8001ade <__aeabi_dsub+0x31a>
 8001adc:	e6e4      	b.n	80018a8 <__aeabi_dsub+0xe4>
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <__aeabi_dsub+0x348>)
 8001ae0:	08f6      	lsrs	r6, r6, #3
 8001ae2:	074f      	lsls	r7, r1, #29
 8001ae4:	4337      	orrs	r7, r6
 8001ae6:	08ca      	lsrs	r2, r1, #3
 8001ae8:	429d      	cmp	r5, r3
 8001aea:	d000      	beq.n	8001aee <__aeabi_dsub+0x32a>
 8001aec:	e790      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001aee:	003b      	movs	r3, r7
 8001af0:	4313      	orrs	r3, r2
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x332>
 8001af4:	e1a6      	b.n	8001e44 <__aeabi_dsub+0x680>
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	031b      	lsls	r3, r3, #12
 8001afa:	431a      	orrs	r2, r3
 8001afc:	0312      	lsls	r2, r2, #12
 8001afe:	0b12      	lsrs	r2, r2, #12
 8001b00:	4d02      	ldr	r5, [pc, #8]	; (8001b0c <__aeabi_dsub+0x348>)
 8001b02:	e789      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b04:	0015      	movs	r5, r2
 8001b06:	2200      	movs	r2, #0
 8001b08:	2700      	movs	r7, #0
 8001b0a:	e785      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b0c:	000007ff 	.word	0x000007ff
 8001b10:	ff7fffff 	.word	0xff7fffff
 8001b14:	800fffff 	.word	0x800fffff
 8001b18:	2e00      	cmp	r6, #0
 8001b1a:	d000      	beq.n	8001b1e <__aeabi_dsub+0x35a>
 8001b1c:	e0c7      	b.n	8001cae <__aeabi_dsub+0x4ea>
 8001b1e:	1c6b      	adds	r3, r5, #1
 8001b20:	055e      	lsls	r6, r3, #21
 8001b22:	0d76      	lsrs	r6, r6, #21
 8001b24:	2e01      	cmp	r6, #1
 8001b26:	dc00      	bgt.n	8001b2a <__aeabi_dsub+0x366>
 8001b28:	e0f0      	b.n	8001d0c <__aeabi_dsub+0x548>
 8001b2a:	4dc8      	ldr	r5, [pc, #800]	; (8001e4c <__aeabi_dsub+0x688>)
 8001b2c:	42ab      	cmp	r3, r5
 8001b2e:	d100      	bne.n	8001b32 <__aeabi_dsub+0x36e>
 8001b30:	e0b9      	b.n	8001ca6 <__aeabi_dsub+0x4e2>
 8001b32:	1885      	adds	r5, r0, r2
 8001b34:	000a      	movs	r2, r1
 8001b36:	4285      	cmp	r5, r0
 8001b38:	4189      	sbcs	r1, r1
 8001b3a:	4462      	add	r2, ip
 8001b3c:	4249      	negs	r1, r1
 8001b3e:	1851      	adds	r1, r2, r1
 8001b40:	2207      	movs	r2, #7
 8001b42:	07ce      	lsls	r6, r1, #31
 8001b44:	086d      	lsrs	r5, r5, #1
 8001b46:	432e      	orrs	r6, r5
 8001b48:	0849      	lsrs	r1, r1, #1
 8001b4a:	4032      	ands	r2, r6
 8001b4c:	001d      	movs	r5, r3
 8001b4e:	e6a9      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b50:	49bf      	ldr	r1, [pc, #764]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001b52:	1aed      	subs	r5, r5, r3
 8001b54:	4011      	ands	r1, r2
 8001b56:	2207      	movs	r2, #7
 8001b58:	4032      	ands	r2, r6
 8001b5a:	e6a3      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b5c:	0032      	movs	r2, r6
 8001b5e:	3828      	subs	r0, #40	; 0x28
 8001b60:	4082      	lsls	r2, r0
 8001b62:	2600      	movs	r6, #0
 8001b64:	e686      	b.n	8001874 <__aeabi_dsub+0xb0>
 8001b66:	0030      	movs	r0, r6
 8001b68:	f000 fb08 	bl	800217c <__clzsi2>
 8001b6c:	3020      	adds	r0, #32
 8001b6e:	e673      	b.n	8001858 <__aeabi_dsub+0x94>
 8001b70:	4663      	mov	r3, ip
 8001b72:	4313      	orrs	r3, r2
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	4193      	sbcs	r3, r2
 8001b78:	1ac6      	subs	r6, r0, r3
 8001b7a:	42b0      	cmp	r0, r6
 8001b7c:	4180      	sbcs	r0, r0
 8001b7e:	4240      	negs	r0, r0
 8001b80:	1a09      	subs	r1, r1, r0
 8001b82:	e65c      	b.n	800183e <__aeabi_dsub+0x7a>
 8001b84:	000e      	movs	r6, r1
 8001b86:	4667      	mov	r7, ip
 8001b88:	4306      	orrs	r6, r0
 8001b8a:	4317      	orrs	r7, r2
 8001b8c:	2d00      	cmp	r5, #0
 8001b8e:	d15e      	bne.n	8001c4e <__aeabi_dsub+0x48a>
 8001b90:	2e00      	cmp	r6, #0
 8001b92:	d000      	beq.n	8001b96 <__aeabi_dsub+0x3d2>
 8001b94:	e0f3      	b.n	8001d7e <__aeabi_dsub+0x5ba>
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x3d8>
 8001b9a:	e11e      	b.n	8001dda <__aeabi_dsub+0x616>
 8001b9c:	465c      	mov	r4, fp
 8001b9e:	4661      	mov	r1, ip
 8001ba0:	4691      	mov	r9, r2
 8001ba2:	e72c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ba4:	4fa9      	ldr	r7, [pc, #676]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ba6:	42be      	cmp	r6, r7
 8001ba8:	d07b      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001baa:	001e      	movs	r6, r3
 8001bac:	e6f1      	b.n	8001992 <__aeabi_dsub+0x1ce>
 8001bae:	0010      	movs	r0, r2
 8001bb0:	3d1f      	subs	r5, #31
 8001bb2:	40e8      	lsrs	r0, r5
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d003      	beq.n	8001bc0 <__aeabi_dsub+0x3fc>
 8001bb8:	2140      	movs	r1, #64	; 0x40
 8001bba:	1acb      	subs	r3, r1, r3
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	4316      	orrs	r6, r2
 8001bc0:	1e73      	subs	r3, r6, #1
 8001bc2:	419e      	sbcs	r6, r3
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	4306      	orrs	r6, r0
 8001bc8:	4032      	ands	r2, r6
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2500      	movs	r5, #0
 8001bce:	e783      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001bd0:	1a16      	subs	r6, r2, r0
 8001bd2:	4663      	mov	r3, ip
 8001bd4:	42b2      	cmp	r2, r6
 8001bd6:	4180      	sbcs	r0, r0
 8001bd8:	1a59      	subs	r1, r3, r1
 8001bda:	4240      	negs	r0, r0
 8001bdc:	1a0b      	subs	r3, r1, r0
 8001bde:	4698      	mov	r8, r3
 8001be0:	465c      	mov	r4, fp
 8001be2:	e632      	b.n	800184a <__aeabi_dsub+0x86>
 8001be4:	2e1f      	cmp	r6, #31
 8001be6:	dd00      	ble.n	8001bea <__aeabi_dsub+0x426>
 8001be8:	e0ab      	b.n	8001d42 <__aeabi_dsub+0x57e>
 8001bea:	2720      	movs	r7, #32
 8001bec:	1bbb      	subs	r3, r7, r6
 8001bee:	469a      	mov	sl, r3
 8001bf0:	4663      	mov	r3, ip
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	40bb      	lsls	r3, r7
 8001bf6:	4699      	mov	r9, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	464f      	mov	r7, r9
 8001bfc:	40f3      	lsrs	r3, r6
 8001bfe:	431f      	orrs	r7, r3
 8001c00:	003b      	movs	r3, r7
 8001c02:	4657      	mov	r7, sl
 8001c04:	40ba      	lsls	r2, r7
 8001c06:	1e57      	subs	r7, r2, #1
 8001c08:	41ba      	sbcs	r2, r7
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	4662      	mov	r2, ip
 8001c0e:	40f2      	lsrs	r2, r6
 8001c10:	1889      	adds	r1, r1, r2
 8001c12:	e698      	b.n	8001946 <__aeabi_dsub+0x182>
 8001c14:	2720      	movs	r7, #32
 8001c16:	1bbb      	subs	r3, r7, r6
 8001c18:	469a      	mov	sl, r3
 8001c1a:	4663      	mov	r3, ip
 8001c1c:	4657      	mov	r7, sl
 8001c1e:	40bb      	lsls	r3, r7
 8001c20:	4699      	mov	r9, r3
 8001c22:	0013      	movs	r3, r2
 8001c24:	464f      	mov	r7, r9
 8001c26:	40f3      	lsrs	r3, r6
 8001c28:	431f      	orrs	r7, r3
 8001c2a:	003b      	movs	r3, r7
 8001c2c:	4657      	mov	r7, sl
 8001c2e:	40ba      	lsls	r2, r7
 8001c30:	1e57      	subs	r7, r2, #1
 8001c32:	41ba      	sbcs	r2, r7
 8001c34:	4313      	orrs	r3, r2
 8001c36:	4662      	mov	r2, ip
 8001c38:	40f2      	lsrs	r2, r6
 8001c3a:	1a89      	subs	r1, r1, r2
 8001c3c:	e79c      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 8001c3e:	4b83      	ldr	r3, [pc, #524]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c40:	429f      	cmp	r7, r3
 8001c42:	d05f      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001c44:	2580      	movs	r5, #128	; 0x80
 8001c46:	042d      	lsls	r5, r5, #16
 8001c48:	4273      	negs	r3, r6
 8001c4a:	4329      	orrs	r1, r5
 8001c4c:	e720      	b.n	8001a90 <__aeabi_dsub+0x2cc>
 8001c4e:	2e00      	cmp	r6, #0
 8001c50:	d10c      	bne.n	8001c6c <__aeabi_dsub+0x4a8>
 8001c52:	2f00      	cmp	r7, #0
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x494>
 8001c56:	e0d0      	b.n	8001dfa <__aeabi_dsub+0x636>
 8001c58:	465c      	mov	r4, fp
 8001c5a:	4661      	mov	r1, ip
 8001c5c:	4691      	mov	r9, r2
 8001c5e:	4d7b      	ldr	r5, [pc, #492]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c60:	e6cd      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001c62:	4f7a      	ldr	r7, [pc, #488]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c64:	42be      	cmp	r6, r7
 8001c66:	d01c      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c68:	001e      	movs	r6, r3
 8001c6a:	e665      	b.n	8001938 <__aeabi_dsub+0x174>
 8001c6c:	2f00      	cmp	r7, #0
 8001c6e:	d018      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c70:	08c0      	lsrs	r0, r0, #3
 8001c72:	074e      	lsls	r6, r1, #29
 8001c74:	4306      	orrs	r6, r0
 8001c76:	2080      	movs	r0, #128	; 0x80
 8001c78:	08c9      	lsrs	r1, r1, #3
 8001c7a:	0300      	lsls	r0, r0, #12
 8001c7c:	4201      	tst	r1, r0
 8001c7e:	d008      	beq.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c80:	4663      	mov	r3, ip
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	4204      	tst	r4, r0
 8001c86:	d104      	bne.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c88:	0021      	movs	r1, r4
 8001c8a:	46da      	mov	sl, fp
 8001c8c:	08d2      	lsrs	r2, r2, #3
 8001c8e:	075e      	lsls	r6, r3, #29
 8001c90:	4316      	orrs	r6, r2
 8001c92:	00f3      	lsls	r3, r6, #3
 8001c94:	4699      	mov	r9, r3
 8001c96:	2401      	movs	r4, #1
 8001c98:	4653      	mov	r3, sl
 8001c9a:	00c9      	lsls	r1, r1, #3
 8001c9c:	0f72      	lsrs	r2, r6, #29
 8001c9e:	4311      	orrs	r1, r2
 8001ca0:	401c      	ands	r4, r3
 8001ca2:	4d6a      	ldr	r5, [pc, #424]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ca4:	e6ab      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ca6:	001d      	movs	r5, r3
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2700      	movs	r7, #0
 8001cac:	e6b4      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001cae:	2d00      	cmp	r5, #0
 8001cb0:	d159      	bne.n	8001d66 <__aeabi_dsub+0x5a2>
 8001cb2:	000b      	movs	r3, r1
 8001cb4:	4303      	orrs	r3, r0
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x4f6>
 8001cb8:	e6d6      	b.n	8001a68 <__aeabi_dsub+0x2a4>
 8001cba:	1c73      	adds	r3, r6, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x4fc>
 8001cbe:	e0b2      	b.n	8001e26 <__aeabi_dsub+0x662>
 8001cc0:	4b62      	ldr	r3, [pc, #392]	; (8001e4c <__aeabi_dsub+0x688>)
 8001cc2:	429f      	cmp	r7, r3
 8001cc4:	d01e      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001cc6:	43f3      	mvns	r3, r6
 8001cc8:	2b38      	cmp	r3, #56	; 0x38
 8001cca:	dc6f      	bgt.n	8001dac <__aeabi_dsub+0x5e8>
 8001ccc:	2b1f      	cmp	r3, #31
 8001cce:	dd00      	ble.n	8001cd2 <__aeabi_dsub+0x50e>
 8001cd0:	e097      	b.n	8001e02 <__aeabi_dsub+0x63e>
 8001cd2:	2520      	movs	r5, #32
 8001cd4:	000e      	movs	r6, r1
 8001cd6:	1aed      	subs	r5, r5, r3
 8001cd8:	40ae      	lsls	r6, r5
 8001cda:	46b0      	mov	r8, r6
 8001cdc:	0006      	movs	r6, r0
 8001cde:	46aa      	mov	sl, r5
 8001ce0:	40de      	lsrs	r6, r3
 8001ce2:	4645      	mov	r5, r8
 8001ce4:	4335      	orrs	r5, r6
 8001ce6:	002e      	movs	r6, r5
 8001ce8:	4655      	mov	r5, sl
 8001cea:	40a8      	lsls	r0, r5
 8001cec:	40d9      	lsrs	r1, r3
 8001cee:	1e45      	subs	r5, r0, #1
 8001cf0:	41a8      	sbcs	r0, r5
 8001cf2:	448c      	add	ip, r1
 8001cf4:	4306      	orrs	r6, r0
 8001cf6:	18b6      	adds	r6, r6, r2
 8001cf8:	4296      	cmp	r6, r2
 8001cfa:	4192      	sbcs	r2, r2
 8001cfc:	4251      	negs	r1, r2
 8001cfe:	4461      	add	r1, ip
 8001d00:	003d      	movs	r5, r7
 8001d02:	e625      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001d04:	003d      	movs	r5, r7
 8001d06:	4661      	mov	r1, ip
 8001d08:	4691      	mov	r9, r2
 8001d0a:	e678      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d0c:	000b      	movs	r3, r1
 8001d0e:	4303      	orrs	r3, r0
 8001d10:	2d00      	cmp	r5, #0
 8001d12:	d000      	beq.n	8001d16 <__aeabi_dsub+0x552>
 8001d14:	e655      	b.n	80019c2 <__aeabi_dsub+0x1fe>
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f5      	beq.n	8001d06 <__aeabi_dsub+0x542>
 8001d1a:	4663      	mov	r3, ip
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x55e>
 8001d20:	e66d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d22:	1886      	adds	r6, r0, r2
 8001d24:	4286      	cmp	r6, r0
 8001d26:	4180      	sbcs	r0, r0
 8001d28:	4461      	add	r1, ip
 8001d2a:	4240      	negs	r0, r0
 8001d2c:	1809      	adds	r1, r1, r0
 8001d2e:	2200      	movs	r2, #0
 8001d30:	020b      	lsls	r3, r1, #8
 8001d32:	d400      	bmi.n	8001d36 <__aeabi_dsub+0x572>
 8001d34:	e6d0      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001d38:	3501      	adds	r5, #1
 8001d3a:	4019      	ands	r1, r3
 8001d3c:	e5b2      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001d3e:	46b1      	mov	r9, r6
 8001d40:	e65d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d42:	0033      	movs	r3, r6
 8001d44:	4667      	mov	r7, ip
 8001d46:	3b20      	subs	r3, #32
 8001d48:	40df      	lsrs	r7, r3
 8001d4a:	003b      	movs	r3, r7
 8001d4c:	2e20      	cmp	r6, #32
 8001d4e:	d005      	beq.n	8001d5c <__aeabi_dsub+0x598>
 8001d50:	2740      	movs	r7, #64	; 0x40
 8001d52:	1bbf      	subs	r7, r7, r6
 8001d54:	4666      	mov	r6, ip
 8001d56:	40be      	lsls	r6, r7
 8001d58:	4332      	orrs	r2, r6
 8001d5a:	4690      	mov	r8, r2
 8001d5c:	4646      	mov	r6, r8
 8001d5e:	1e72      	subs	r2, r6, #1
 8001d60:	4196      	sbcs	r6, r2
 8001d62:	4333      	orrs	r3, r6
 8001d64:	e5ef      	b.n	8001946 <__aeabi_dsub+0x182>
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <__aeabi_dsub+0x688>)
 8001d68:	429f      	cmp	r7, r3
 8001d6a:	d0cb      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001d6c:	2580      	movs	r5, #128	; 0x80
 8001d6e:	042d      	lsls	r5, r5, #16
 8001d70:	4273      	negs	r3, r6
 8001d72:	4329      	orrs	r1, r5
 8001d74:	e7a8      	b.n	8001cc8 <__aeabi_dsub+0x504>
 8001d76:	4308      	orrs	r0, r1
 8001d78:	1e41      	subs	r1, r0, #1
 8001d7a:	4188      	sbcs	r0, r1
 8001d7c:	e6a2      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001d7e:	2f00      	cmp	r7, #0
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x5c0>
 8001d82:	e63c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d84:	4663      	mov	r3, ip
 8001d86:	1a86      	subs	r6, r0, r2
 8001d88:	1acf      	subs	r7, r1, r3
 8001d8a:	42b0      	cmp	r0, r6
 8001d8c:	419b      	sbcs	r3, r3
 8001d8e:	425b      	negs	r3, r3
 8001d90:	1afb      	subs	r3, r7, r3
 8001d92:	4698      	mov	r8, r3
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	d54e      	bpl.n	8001e36 <__aeabi_dsub+0x672>
 8001d98:	1a16      	subs	r6, r2, r0
 8001d9a:	4663      	mov	r3, ip
 8001d9c:	42b2      	cmp	r2, r6
 8001d9e:	4192      	sbcs	r2, r2
 8001da0:	1a59      	subs	r1, r3, r1
 8001da2:	4252      	negs	r2, r2
 8001da4:	1a89      	subs	r1, r1, r2
 8001da6:	465c      	mov	r4, fp
 8001da8:	2200      	movs	r2, #0
 8001daa:	e57b      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001dac:	4301      	orrs	r1, r0
 8001dae:	000e      	movs	r6, r1
 8001db0:	1e71      	subs	r1, r6, #1
 8001db2:	418e      	sbcs	r6, r1
 8001db4:	e79f      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001db6:	001d      	movs	r5, r3
 8001db8:	000e      	movs	r6, r1
 8001dba:	3d20      	subs	r5, #32
 8001dbc:	40ee      	lsrs	r6, r5
 8001dbe:	46b0      	mov	r8, r6
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d004      	beq.n	8001dce <__aeabi_dsub+0x60a>
 8001dc4:	2540      	movs	r5, #64	; 0x40
 8001dc6:	1aeb      	subs	r3, r5, r3
 8001dc8:	4099      	lsls	r1, r3
 8001dca:	4308      	orrs	r0, r1
 8001dcc:	4681      	mov	r9, r0
 8001dce:	4648      	mov	r0, r9
 8001dd0:	4643      	mov	r3, r8
 8001dd2:	1e41      	subs	r1, r0, #1
 8001dd4:	4188      	sbcs	r0, r1
 8001dd6:	4318      	orrs	r0, r3
 8001dd8:	e674      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2400      	movs	r4, #0
 8001dde:	e617      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001de0:	1a16      	subs	r6, r2, r0
 8001de2:	4663      	mov	r3, ip
 8001de4:	42b2      	cmp	r2, r6
 8001de6:	4192      	sbcs	r2, r2
 8001de8:	1a59      	subs	r1, r3, r1
 8001dea:	4252      	negs	r2, r2
 8001dec:	1a89      	subs	r1, r1, r2
 8001dee:	003d      	movs	r5, r7
 8001df0:	e525      	b.n	800183e <__aeabi_dsub+0x7a>
 8001df2:	4661      	mov	r1, ip
 8001df4:	4691      	mov	r9, r2
 8001df6:	4d15      	ldr	r5, [pc, #84]	; (8001e4c <__aeabi_dsub+0x688>)
 8001df8:	e601      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	0312      	lsls	r2, r2, #12
 8001e00:	e679      	b.n	8001af6 <__aeabi_dsub+0x332>
 8001e02:	001d      	movs	r5, r3
 8001e04:	000e      	movs	r6, r1
 8001e06:	3d20      	subs	r5, #32
 8001e08:	40ee      	lsrs	r6, r5
 8001e0a:	46b0      	mov	r8, r6
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d004      	beq.n	8001e1a <__aeabi_dsub+0x656>
 8001e10:	2540      	movs	r5, #64	; 0x40
 8001e12:	1aeb      	subs	r3, r5, r3
 8001e14:	4099      	lsls	r1, r3
 8001e16:	4308      	orrs	r0, r1
 8001e18:	4681      	mov	r9, r0
 8001e1a:	464e      	mov	r6, r9
 8001e1c:	4643      	mov	r3, r8
 8001e1e:	1e71      	subs	r1, r6, #1
 8001e20:	418e      	sbcs	r6, r1
 8001e22:	431e      	orrs	r6, r3
 8001e24:	e767      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001e26:	1886      	adds	r6, r0, r2
 8001e28:	4296      	cmp	r6, r2
 8001e2a:	419b      	sbcs	r3, r3
 8001e2c:	4461      	add	r1, ip
 8001e2e:	425b      	negs	r3, r3
 8001e30:	18c9      	adds	r1, r1, r3
 8001e32:	003d      	movs	r5, r7
 8001e34:	e58c      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001e36:	4647      	mov	r7, r8
 8001e38:	4337      	orrs	r7, r6
 8001e3a:	d0ce      	beq.n	8001dda <__aeabi_dsub+0x616>
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	4641      	mov	r1, r8
 8001e40:	4032      	ands	r2, r6
 8001e42:	e649      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001e44:	2700      	movs	r7, #0
 8001e46:	003a      	movs	r2, r7
 8001e48:	e5e6      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	000007ff 	.word	0x000007ff
 8001e50:	ff7fffff 	.word	0xff7fffff

08001e54 <__aeabi_dcmpun>:
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	4e0c      	ldr	r6, [pc, #48]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e58:	030d      	lsls	r5, r1, #12
 8001e5a:	031c      	lsls	r4, r3, #12
 8001e5c:	0049      	lsls	r1, r1, #1
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	0b2d      	lsrs	r5, r5, #12
 8001e62:	0d49      	lsrs	r1, r1, #21
 8001e64:	0b24      	lsrs	r4, r4, #12
 8001e66:	0d5b      	lsrs	r3, r3, #21
 8001e68:	42b1      	cmp	r1, r6
 8001e6a:	d008      	beq.n	8001e7e <__aeabi_dcmpun+0x2a>
 8001e6c:	4906      	ldr	r1, [pc, #24]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e6e:	2000      	movs	r0, #0
 8001e70:	428b      	cmp	r3, r1
 8001e72:	d103      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e74:	4314      	orrs	r4, r2
 8001e76:	0020      	movs	r0, r4
 8001e78:	1e44      	subs	r4, r0, #1
 8001e7a:	41a0      	sbcs	r0, r4
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
 8001e7e:	4305      	orrs	r5, r0
 8001e80:	2001      	movs	r0, #1
 8001e82:	2d00      	cmp	r5, #0
 8001e84:	d1fa      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e86:	e7f1      	b.n	8001e6c <__aeabi_dcmpun+0x18>
 8001e88:	000007ff 	.word	0x000007ff

08001e8c <__aeabi_d2iz>:
 8001e8c:	b530      	push	{r4, r5, lr}
 8001e8e:	4d14      	ldr	r5, [pc, #80]	; (8001ee0 <__aeabi_d2iz+0x54>)
 8001e90:	030a      	lsls	r2, r1, #12
 8001e92:	004b      	lsls	r3, r1, #1
 8001e94:	0b12      	lsrs	r2, r2, #12
 8001e96:	0d5b      	lsrs	r3, r3, #21
 8001e98:	0fc9      	lsrs	r1, r1, #31
 8001e9a:	2400      	movs	r4, #0
 8001e9c:	42ab      	cmp	r3, r5
 8001e9e:	dd11      	ble.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ea0:	4c10      	ldr	r4, [pc, #64]	; (8001ee4 <__aeabi_d2iz+0x58>)
 8001ea2:	42a3      	cmp	r3, r4
 8001ea4:	dc10      	bgt.n	8001ec8 <__aeabi_d2iz+0x3c>
 8001ea6:	2480      	movs	r4, #128	; 0x80
 8001ea8:	0364      	lsls	r4, r4, #13
 8001eaa:	4322      	orrs	r2, r4
 8001eac:	4c0e      	ldr	r4, [pc, #56]	; (8001ee8 <__aeabi_d2iz+0x5c>)
 8001eae:	1ae4      	subs	r4, r4, r3
 8001eb0:	2c1f      	cmp	r4, #31
 8001eb2:	dd0c      	ble.n	8001ece <__aeabi_d2iz+0x42>
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <__aeabi_d2iz+0x60>)
 8001eb6:	1ac3      	subs	r3, r0, r3
 8001eb8:	40da      	lsrs	r2, r3
 8001eba:	0013      	movs	r3, r2
 8001ebc:	425c      	negs	r4, r3
 8001ebe:	2900      	cmp	r1, #0
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ec2:	001c      	movs	r4, r3
 8001ec4:	0020      	movs	r0, r4
 8001ec6:	bd30      	pop	{r4, r5, pc}
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <__aeabi_d2iz+0x64>)
 8001eca:	18cc      	adds	r4, r1, r3
 8001ecc:	e7fa      	b.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ece:	4d09      	ldr	r5, [pc, #36]	; (8001ef4 <__aeabi_d2iz+0x68>)
 8001ed0:	40e0      	lsrs	r0, r4
 8001ed2:	46ac      	mov	ip, r5
 8001ed4:	4463      	add	r3, ip
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	0013      	movs	r3, r2
 8001eda:	4303      	orrs	r3, r0
 8001edc:	e7ee      	b.n	8001ebc <__aeabi_d2iz+0x30>
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	000003fe 	.word	0x000003fe
 8001ee4:	0000041d 	.word	0x0000041d
 8001ee8:	00000433 	.word	0x00000433
 8001eec:	00000413 	.word	0x00000413
 8001ef0:	7fffffff 	.word	0x7fffffff
 8001ef4:	fffffbed 	.word	0xfffffbed

08001ef8 <__aeabi_i2d>:
 8001ef8:	b570      	push	{r4, r5, r6, lr}
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d02d      	beq.n	8001f5a <__aeabi_i2d+0x62>
 8001efe:	17c3      	asrs	r3, r0, #31
 8001f00:	18c5      	adds	r5, r0, r3
 8001f02:	405d      	eors	r5, r3
 8001f04:	0fc4      	lsrs	r4, r0, #31
 8001f06:	0028      	movs	r0, r5
 8001f08:	f000 f938 	bl	800217c <__clzsi2>
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <__aeabi_i2d+0x6c>)
 8001f0e:	1a1b      	subs	r3, r3, r0
 8001f10:	055b      	lsls	r3, r3, #21
 8001f12:	0d5b      	lsrs	r3, r3, #21
 8001f14:	280a      	cmp	r0, #10
 8001f16:	dd15      	ble.n	8001f44 <__aeabi_i2d+0x4c>
 8001f18:	380b      	subs	r0, #11
 8001f1a:	4085      	lsls	r5, r0
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	032d      	lsls	r5, r5, #12
 8001f20:	0b2d      	lsrs	r5, r5, #12
 8001f22:	2100      	movs	r1, #0
 8001f24:	0010      	movs	r0, r2
 8001f26:	032d      	lsls	r5, r5, #12
 8001f28:	0d0a      	lsrs	r2, r1, #20
 8001f2a:	0b2d      	lsrs	r5, r5, #12
 8001f2c:	0512      	lsls	r2, r2, #20
 8001f2e:	432a      	orrs	r2, r5
 8001f30:	4d0d      	ldr	r5, [pc, #52]	; (8001f68 <__aeabi_i2d+0x70>)
 8001f32:	051b      	lsls	r3, r3, #20
 8001f34:	402a      	ands	r2, r5
 8001f36:	4313      	orrs	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	07e4      	lsls	r4, r4, #31
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	4323      	orrs	r3, r4
 8001f40:	0019      	movs	r1, r3
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
 8001f44:	0002      	movs	r2, r0
 8001f46:	0029      	movs	r1, r5
 8001f48:	3215      	adds	r2, #21
 8001f4a:	4091      	lsls	r1, r2
 8001f4c:	000a      	movs	r2, r1
 8001f4e:	210b      	movs	r1, #11
 8001f50:	1a08      	subs	r0, r1, r0
 8001f52:	40c5      	lsrs	r5, r0
 8001f54:	032d      	lsls	r5, r5, #12
 8001f56:	0b2d      	lsrs	r5, r5, #12
 8001f58:	e7e3      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f5a:	2400      	movs	r4, #0
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2500      	movs	r5, #0
 8001f60:	2200      	movs	r2, #0
 8001f62:	e7de      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f64:	0000041e 	.word	0x0000041e
 8001f68:	800fffff 	.word	0x800fffff

08001f6c <__aeabi_ui2d>:
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	1e04      	subs	r4, r0, #0
 8001f70:	d025      	beq.n	8001fbe <__aeabi_ui2d+0x52>
 8001f72:	f000 f903 	bl	800217c <__clzsi2>
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <__aeabi_ui2d+0x5c>)
 8001f78:	1a1b      	subs	r3, r3, r0
 8001f7a:	055b      	lsls	r3, r3, #21
 8001f7c:	0d5b      	lsrs	r3, r3, #21
 8001f7e:	280a      	cmp	r0, #10
 8001f80:	dd12      	ble.n	8001fa8 <__aeabi_ui2d+0x3c>
 8001f82:	380b      	subs	r0, #11
 8001f84:	4084      	lsls	r4, r0
 8001f86:	2200      	movs	r2, #0
 8001f88:	0324      	lsls	r4, r4, #12
 8001f8a:	0b24      	lsrs	r4, r4, #12
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	0010      	movs	r0, r2
 8001f90:	0324      	lsls	r4, r4, #12
 8001f92:	0d0a      	lsrs	r2, r1, #20
 8001f94:	0b24      	lsrs	r4, r4, #12
 8001f96:	0512      	lsls	r2, r2, #20
 8001f98:	4322      	orrs	r2, r4
 8001f9a:	4c0c      	ldr	r4, [pc, #48]	; (8001fcc <__aeabi_ui2d+0x60>)
 8001f9c:	051b      	lsls	r3, r3, #20
 8001f9e:	4022      	ands	r2, r4
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	0859      	lsrs	r1, r3, #1
 8001fa6:	bd10      	pop	{r4, pc}
 8001fa8:	0002      	movs	r2, r0
 8001faa:	0021      	movs	r1, r4
 8001fac:	3215      	adds	r2, #21
 8001fae:	4091      	lsls	r1, r2
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	210b      	movs	r1, #11
 8001fb4:	1a08      	subs	r0, r1, r0
 8001fb6:	40c4      	lsrs	r4, r0
 8001fb8:	0324      	lsls	r4, r4, #12
 8001fba:	0b24      	lsrs	r4, r4, #12
 8001fbc:	e7e6      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	e7e2      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	0000041e 	.word	0x0000041e
 8001fcc:	800fffff 	.word	0x800fffff

08001fd0 <__aeabi_f2d>:
 8001fd0:	0041      	lsls	r1, r0, #1
 8001fd2:	0e09      	lsrs	r1, r1, #24
 8001fd4:	1c4b      	adds	r3, r1, #1
 8001fd6:	b570      	push	{r4, r5, r6, lr}
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	0246      	lsls	r6, r0, #9
 8001fdc:	0a75      	lsrs	r5, r6, #9
 8001fde:	0fc4      	lsrs	r4, r0, #31
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	dd14      	ble.n	800200e <__aeabi_f2d+0x3e>
 8001fe4:	23e0      	movs	r3, #224	; 0xe0
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	076d      	lsls	r5, r5, #29
 8001fea:	0b36      	lsrs	r6, r6, #12
 8001fec:	18cb      	adds	r3, r1, r3
 8001fee:	2100      	movs	r1, #0
 8001ff0:	0d0a      	lsrs	r2, r1, #20
 8001ff2:	0028      	movs	r0, r5
 8001ff4:	0512      	lsls	r2, r2, #20
 8001ff6:	4d1c      	ldr	r5, [pc, #112]	; (8002068 <__aeabi_f2d+0x98>)
 8001ff8:	4332      	orrs	r2, r6
 8001ffa:	055b      	lsls	r3, r3, #21
 8001ffc:	402a      	ands	r2, r5
 8001ffe:	085b      	lsrs	r3, r3, #1
 8002000:	4313      	orrs	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	07e4      	lsls	r4, r4, #31
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	4323      	orrs	r3, r4
 800200a:	0019      	movs	r1, r3
 800200c:	bd70      	pop	{r4, r5, r6, pc}
 800200e:	2900      	cmp	r1, #0
 8002010:	d114      	bne.n	800203c <__aeabi_f2d+0x6c>
 8002012:	2d00      	cmp	r5, #0
 8002014:	d01e      	beq.n	8002054 <__aeabi_f2d+0x84>
 8002016:	0028      	movs	r0, r5
 8002018:	f000 f8b0 	bl	800217c <__clzsi2>
 800201c:	280a      	cmp	r0, #10
 800201e:	dc1c      	bgt.n	800205a <__aeabi_f2d+0x8a>
 8002020:	230b      	movs	r3, #11
 8002022:	002a      	movs	r2, r5
 8002024:	1a1b      	subs	r3, r3, r0
 8002026:	40da      	lsrs	r2, r3
 8002028:	0003      	movs	r3, r0
 800202a:	3315      	adds	r3, #21
 800202c:	409d      	lsls	r5, r3
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <__aeabi_f2d+0x9c>)
 8002030:	0312      	lsls	r2, r2, #12
 8002032:	1a1b      	subs	r3, r3, r0
 8002034:	055b      	lsls	r3, r3, #21
 8002036:	0b16      	lsrs	r6, r2, #12
 8002038:	0d5b      	lsrs	r3, r3, #21
 800203a:	e7d8      	b.n	8001fee <__aeabi_f2d+0x1e>
 800203c:	2d00      	cmp	r5, #0
 800203e:	d006      	beq.n	800204e <__aeabi_f2d+0x7e>
 8002040:	0b32      	lsrs	r2, r6, #12
 8002042:	2680      	movs	r6, #128	; 0x80
 8002044:	0336      	lsls	r6, r6, #12
 8002046:	076d      	lsls	r5, r5, #29
 8002048:	4316      	orrs	r6, r2
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <__aeabi_f2d+0xa0>)
 800204c:	e7cf      	b.n	8001fee <__aeabi_f2d+0x1e>
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <__aeabi_f2d+0xa0>)
 8002050:	2600      	movs	r6, #0
 8002052:	e7cc      	b.n	8001fee <__aeabi_f2d+0x1e>
 8002054:	2300      	movs	r3, #0
 8002056:	2600      	movs	r6, #0
 8002058:	e7c9      	b.n	8001fee <__aeabi_f2d+0x1e>
 800205a:	0003      	movs	r3, r0
 800205c:	002a      	movs	r2, r5
 800205e:	3b0b      	subs	r3, #11
 8002060:	409a      	lsls	r2, r3
 8002062:	2500      	movs	r5, #0
 8002064:	e7e3      	b.n	800202e <__aeabi_f2d+0x5e>
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	800fffff 	.word	0x800fffff
 800206c:	00000389 	.word	0x00000389
 8002070:	000007ff 	.word	0x000007ff

08002074 <__aeabi_d2f>:
 8002074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002076:	004c      	lsls	r4, r1, #1
 8002078:	0d64      	lsrs	r4, r4, #21
 800207a:	030b      	lsls	r3, r1, #12
 800207c:	1c62      	adds	r2, r4, #1
 800207e:	0a5b      	lsrs	r3, r3, #9
 8002080:	0f46      	lsrs	r6, r0, #29
 8002082:	0552      	lsls	r2, r2, #21
 8002084:	0fc9      	lsrs	r1, r1, #31
 8002086:	431e      	orrs	r6, r3
 8002088:	00c5      	lsls	r5, r0, #3
 800208a:	0d52      	lsrs	r2, r2, #21
 800208c:	2a01      	cmp	r2, #1
 800208e:	dd29      	ble.n	80020e4 <__aeabi_d2f+0x70>
 8002090:	4b37      	ldr	r3, [pc, #220]	; (8002170 <__aeabi_d2f+0xfc>)
 8002092:	18e7      	adds	r7, r4, r3
 8002094:	2ffe      	cmp	r7, #254	; 0xfe
 8002096:	dc1c      	bgt.n	80020d2 <__aeabi_d2f+0x5e>
 8002098:	2f00      	cmp	r7, #0
 800209a:	dd3b      	ble.n	8002114 <__aeabi_d2f+0xa0>
 800209c:	0180      	lsls	r0, r0, #6
 800209e:	1e43      	subs	r3, r0, #1
 80020a0:	4198      	sbcs	r0, r3
 80020a2:	2207      	movs	r2, #7
 80020a4:	00f3      	lsls	r3, r6, #3
 80020a6:	0f6d      	lsrs	r5, r5, #29
 80020a8:	4303      	orrs	r3, r0
 80020aa:	432b      	orrs	r3, r5
 80020ac:	401a      	ands	r2, r3
 80020ae:	2a00      	cmp	r2, #0
 80020b0:	d004      	beq.n	80020bc <__aeabi_d2f+0x48>
 80020b2:	220f      	movs	r2, #15
 80020b4:	401a      	ands	r2, r3
 80020b6:	2a04      	cmp	r2, #4
 80020b8:	d000      	beq.n	80020bc <__aeabi_d2f+0x48>
 80020ba:	3304      	adds	r3, #4
 80020bc:	2280      	movs	r2, #128	; 0x80
 80020be:	04d2      	lsls	r2, r2, #19
 80020c0:	401a      	ands	r2, r3
 80020c2:	d024      	beq.n	800210e <__aeabi_d2f+0x9a>
 80020c4:	3701      	adds	r7, #1
 80020c6:	b2fa      	uxtb	r2, r7
 80020c8:	2fff      	cmp	r7, #255	; 0xff
 80020ca:	d002      	beq.n	80020d2 <__aeabi_d2f+0x5e>
 80020cc:	019b      	lsls	r3, r3, #6
 80020ce:	0a58      	lsrs	r0, r3, #9
 80020d0:	e001      	b.n	80020d6 <__aeabi_d2f+0x62>
 80020d2:	22ff      	movs	r2, #255	; 0xff
 80020d4:	2000      	movs	r0, #0
 80020d6:	0240      	lsls	r0, r0, #9
 80020d8:	05d2      	lsls	r2, r2, #23
 80020da:	0a40      	lsrs	r0, r0, #9
 80020dc:	07c9      	lsls	r1, r1, #31
 80020de:	4310      	orrs	r0, r2
 80020e0:	4308      	orrs	r0, r1
 80020e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e4:	4335      	orrs	r5, r6
 80020e6:	2c00      	cmp	r4, #0
 80020e8:	d104      	bne.n	80020f4 <__aeabi_d2f+0x80>
 80020ea:	2d00      	cmp	r5, #0
 80020ec:	d10a      	bne.n	8002104 <__aeabi_d2f+0x90>
 80020ee:	2200      	movs	r2, #0
 80020f0:	2000      	movs	r0, #0
 80020f2:	e7f0      	b.n	80020d6 <__aeabi_d2f+0x62>
 80020f4:	2d00      	cmp	r5, #0
 80020f6:	d0ec      	beq.n	80020d2 <__aeabi_d2f+0x5e>
 80020f8:	2080      	movs	r0, #128	; 0x80
 80020fa:	03c0      	lsls	r0, r0, #15
 80020fc:	4330      	orrs	r0, r6
 80020fe:	22ff      	movs	r2, #255	; 0xff
 8002100:	e7e9      	b.n	80020d6 <__aeabi_d2f+0x62>
 8002102:	2400      	movs	r4, #0
 8002104:	2300      	movs	r3, #0
 8002106:	025b      	lsls	r3, r3, #9
 8002108:	0a58      	lsrs	r0, r3, #9
 800210a:	b2e2      	uxtb	r2, r4
 800210c:	e7e3      	b.n	80020d6 <__aeabi_d2f+0x62>
 800210e:	08db      	lsrs	r3, r3, #3
 8002110:	003c      	movs	r4, r7
 8002112:	e7f8      	b.n	8002106 <__aeabi_d2f+0x92>
 8002114:	003b      	movs	r3, r7
 8002116:	3317      	adds	r3, #23
 8002118:	dbf3      	blt.n	8002102 <__aeabi_d2f+0x8e>
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	041b      	lsls	r3, r3, #16
 800211e:	4333      	orrs	r3, r6
 8002120:	261e      	movs	r6, #30
 8002122:	1bf6      	subs	r6, r6, r7
 8002124:	2e1f      	cmp	r6, #31
 8002126:	dd14      	ble.n	8002152 <__aeabi_d2f+0xde>
 8002128:	2202      	movs	r2, #2
 800212a:	4252      	negs	r2, r2
 800212c:	1bd7      	subs	r7, r2, r7
 800212e:	001a      	movs	r2, r3
 8002130:	40fa      	lsrs	r2, r7
 8002132:	0017      	movs	r7, r2
 8002134:	2e20      	cmp	r6, #32
 8002136:	d004      	beq.n	8002142 <__aeabi_d2f+0xce>
 8002138:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <__aeabi_d2f+0x100>)
 800213a:	4694      	mov	ip, r2
 800213c:	4464      	add	r4, ip
 800213e:	40a3      	lsls	r3, r4
 8002140:	431d      	orrs	r5, r3
 8002142:	002b      	movs	r3, r5
 8002144:	1e5d      	subs	r5, r3, #1
 8002146:	41ab      	sbcs	r3, r5
 8002148:	2207      	movs	r2, #7
 800214a:	433b      	orrs	r3, r7
 800214c:	401a      	ands	r2, r3
 800214e:	2700      	movs	r7, #0
 8002150:	e7ad      	b.n	80020ae <__aeabi_d2f+0x3a>
 8002152:	4a09      	ldr	r2, [pc, #36]	; (8002178 <__aeabi_d2f+0x104>)
 8002154:	0028      	movs	r0, r5
 8002156:	18a2      	adds	r2, r4, r2
 8002158:	4095      	lsls	r5, r2
 800215a:	4093      	lsls	r3, r2
 800215c:	1e6c      	subs	r4, r5, #1
 800215e:	41a5      	sbcs	r5, r4
 8002160:	40f0      	lsrs	r0, r6
 8002162:	2207      	movs	r2, #7
 8002164:	432b      	orrs	r3, r5
 8002166:	4303      	orrs	r3, r0
 8002168:	401a      	ands	r2, r3
 800216a:	2700      	movs	r7, #0
 800216c:	e79f      	b.n	80020ae <__aeabi_d2f+0x3a>
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	fffffc80 	.word	0xfffffc80
 8002174:	fffffca2 	.word	0xfffffca2
 8002178:	fffffc82 	.word	0xfffffc82

0800217c <__clzsi2>:
 800217c:	211c      	movs	r1, #28
 800217e:	2301      	movs	r3, #1
 8002180:	041b      	lsls	r3, r3, #16
 8002182:	4298      	cmp	r0, r3
 8002184:	d301      	bcc.n	800218a <__clzsi2+0xe>
 8002186:	0c00      	lsrs	r0, r0, #16
 8002188:	3910      	subs	r1, #16
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	4298      	cmp	r0, r3
 800218e:	d301      	bcc.n	8002194 <__clzsi2+0x18>
 8002190:	0a00      	lsrs	r0, r0, #8
 8002192:	3908      	subs	r1, #8
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	4298      	cmp	r0, r3
 8002198:	d301      	bcc.n	800219e <__clzsi2+0x22>
 800219a:	0900      	lsrs	r0, r0, #4
 800219c:	3904      	subs	r1, #4
 800219e:	a202      	add	r2, pc, #8	; (adr r2, 80021a8 <__clzsi2+0x2c>)
 80021a0:	5c10      	ldrb	r0, [r2, r0]
 80021a2:	1840      	adds	r0, r0, r1
 80021a4:	4770      	bx	lr
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	02020304 	.word	0x02020304
 80021ac:	01010101 	.word	0x01010101
	...

080021b8 <espInit>:
  *
  * Reset the ESP using the Uart connection
  * @param  argument: Not used
  * @retval None
  */
void espInit() {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
	consoleSend("Restarting ESP\n");
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <espInit+0x40>)
 80021c0:	0018      	movs	r0, r3
 80021c2:	f000 fb39 	bl	8002838 <consoleSend>
	// Create command
	const char Data[] = "AT+RST\r\n";
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	4a0c      	ldr	r2, [pc, #48]	; (80021fc <espInit+0x44>)
 80021ca:	ca03      	ldmia	r2!, {r0, r1}
 80021cc:	c303      	stmia	r3!, {r0, r1}
 80021ce:	7812      	ldrb	r2, [r2, #0]
 80021d0:	701a      	strb	r2, [r3, #0]

	// Send Uart command
	HAL_UART_Transmit(&huart1, (uint8_t*) Data, sizeof(Data), 100);
 80021d2:	1d39      	adds	r1, r7, #4
 80021d4:	480a      	ldr	r0, [pc, #40]	; (8002200 <espInit+0x48>)
 80021d6:	2364      	movs	r3, #100	; 0x64
 80021d8:	2209      	movs	r2, #9
 80021da:	f005 f83f 	bl	800725c <HAL_UART_Transmit>

	//Startup delay
	HAL_Delay(500);
 80021de:	23fa      	movs	r3, #250	; 0xfa
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	0018      	movs	r0, r3
 80021e4:	f001 ffe0 	bl	80041a8 <HAL_Delay>
	consoleSend("Done restarting ESP\n");
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <espInit+0x4c>)
 80021ea:	0018      	movs	r0, r3
 80021ec:	f000 fb24 	bl	8002838 <consoleSend>
}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b004      	add	sp, #16
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	0800b344 	.word	0x0800b344
 80021fc:	0800b36c 	.word	0x0800b36c
 8002200:	20001340 	.word	0x20001340
 8002204:	0800b354 	.word	0x0800b354

08002208 <espConnect>:
  * Connect to a wireless network using the SSID and the Password
  * @param  ssid: Network SSID name
  * @param  passw: Network Password
  * @retval bool: Connected or not connected
  */
bool espConnect(char *ssid, char *passw) {
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b087      	sub	sp, #28
 800220c:	af02      	add	r7, sp, #8
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
	// Variables
	static char sendBuffer[80];
	memcpy(sendBuffer, "", sizeof(sendBuffer));
 8002212:	4b44      	ldr	r3, [pc, #272]	; (8002324 <espConnect+0x11c>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	3304      	adds	r3, #4
 800221a:	224c      	movs	r2, #76	; 0x4c
 800221c:	2100      	movs	r1, #0
 800221e:	0018      	movs	r0, r3
 8002220:	f006 ffa3 	bl	800916a <memset>
	clearChar(receiveBuffer, sizeof(receiveBuffer));
 8002224:	4b40      	ldr	r3, [pc, #256]	; (8002328 <espConnect+0x120>)
 8002226:	21c8      	movs	r1, #200	; 0xc8
 8002228:	0018      	movs	r0, r3
 800222a:	f000 fb1d 	bl	8002868 <clearChar>

	HAL_StatusTypeDef uartRet;

	// Reset ESP
	espInit();
 800222e:	f7ff ffc3 	bl	80021b8 <espInit>

	// Create commands
	snprintf(sendBuffer, sizeof(sendBuffer), "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, passw);
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4a3d      	ldr	r2, [pc, #244]	; (800232c <espConnect+0x124>)
 8002236:	483b      	ldr	r0, [pc, #236]	; (8002324 <espConnect+0x11c>)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	000b      	movs	r3, r1
 800223e:	2150      	movs	r1, #80	; 0x50
 8002240:	f007 fbfa 	bl	8009a38 <sniprintf>

	// Update User
	consoleSend("Connecting to WiFi...\n");
 8002244:	4b3a      	ldr	r3, [pc, #232]	; (8002330 <espConnect+0x128>)
 8002246:	0018      	movs	r0, r3
 8002248:	f000 faf6 	bl	8002838 <consoleSend>

	// Reset UART1
	HAL_UART_AbortReceive(&huart1);
 800224c:	4b39      	ldr	r3, [pc, #228]	; (8002334 <espConnect+0x12c>)
 800224e:	0018      	movs	r0, r3
 8002250:	f005 f950 	bl	80074f4 <HAL_UART_AbortReceive>

	// Send commands
	HAL_UART_Transmit(&huart1, (uint8_t*) sendBuffer, strlen(sendBuffer), 10);
 8002254:	4b33      	ldr	r3, [pc, #204]	; (8002324 <espConnect+0x11c>)
 8002256:	0018      	movs	r0, r3
 8002258:	f7fd ff56 	bl	8000108 <strlen>
 800225c:	0003      	movs	r3, r0
 800225e:	b29a      	uxth	r2, r3
 8002260:	4930      	ldr	r1, [pc, #192]	; (8002324 <espConnect+0x11c>)
 8002262:	4834      	ldr	r0, [pc, #208]	; (8002334 <espConnect+0x12c>)
 8002264:	230a      	movs	r3, #10
 8002266:	f004 fff9 	bl	800725c <HAL_UART_Transmit>

	// Receive answer
	uartRet = HAL_UART_Receive_IT(&huart1, (uint8_t*) receiveBuffer, 200);
 800226a:	230f      	movs	r3, #15
 800226c:	18fc      	adds	r4, r7, r3
 800226e:	492e      	ldr	r1, [pc, #184]	; (8002328 <espConnect+0x120>)
 8002270:	4b30      	ldr	r3, [pc, #192]	; (8002334 <espConnect+0x12c>)
 8002272:	22c8      	movs	r2, #200	; 0xc8
 8002274:	0018      	movs	r0, r3
 8002276:	f005 f899 	bl	80073ac <HAL_UART_Receive_IT>
 800227a:	0003      	movs	r3, r0
 800227c:	7023      	strb	r3, [r4, #0]
	tickdelay = HAL_GetTick() + 5000;
 800227e:	f001 ff89 	bl	8004194 <HAL_GetTick>
 8002282:	0003      	movs	r3, r0
 8002284:	4a2c      	ldr	r2, [pc, #176]	; (8002338 <espConnect+0x130>)
 8002286:	189a      	adds	r2, r3, r2
 8002288:	4b2c      	ldr	r3, [pc, #176]	; (800233c <espConnect+0x134>)
 800228a:	601a      	str	r2, [r3, #0]
	while ((strstr(receiveBuffer, "OK") == 0 && strstr(receiveBuffer, "ERROR") == 0) && HAL_GetTick() <= tickdelay);		// Hold for read
 800228c:	46c0      	nop			; (mov r8, r8)
 800228e:	4a2c      	ldr	r2, [pc, #176]	; (8002340 <espConnect+0x138>)
 8002290:	4b25      	ldr	r3, [pc, #148]	; (8002328 <espConnect+0x120>)
 8002292:	0011      	movs	r1, r2
 8002294:	0018      	movs	r0, r3
 8002296:	f007 fc01 	bl	8009a9c <strstr>
 800229a:	1e03      	subs	r3, r0, #0
 800229c:	d10e      	bne.n	80022bc <espConnect+0xb4>
 800229e:	4a29      	ldr	r2, [pc, #164]	; (8002344 <espConnect+0x13c>)
 80022a0:	4b21      	ldr	r3, [pc, #132]	; (8002328 <espConnect+0x120>)
 80022a2:	0011      	movs	r1, r2
 80022a4:	0018      	movs	r0, r3
 80022a6:	f007 fbf9 	bl	8009a9c <strstr>
 80022aa:	1e03      	subs	r3, r0, #0
 80022ac:	d106      	bne.n	80022bc <espConnect+0xb4>
 80022ae:	f001 ff71 	bl	8004194 <HAL_GetTick>
 80022b2:	0002      	movs	r2, r0
 80022b4:	4b21      	ldr	r3, [pc, #132]	; (800233c <espConnect+0x134>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d9e8      	bls.n	800228e <espConnect+0x86>

	// Check answer
	if (uartRet != HAL_ERROR) {
 80022bc:	230f      	movs	r3, #15
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d029      	beq.n	800231a <espConnect+0x112>
		if (strstr(receiveBuffer, "OK")){
 80022c6:	4a1e      	ldr	r2, [pc, #120]	; (8002340 <espConnect+0x138>)
 80022c8:	4b17      	ldr	r3, [pc, #92]	; (8002328 <espConnect+0x120>)
 80022ca:	0011      	movs	r1, r2
 80022cc:	0018      	movs	r0, r3
 80022ce:	f007 fbe5 	bl	8009a9c <strstr>
 80022d2:	1e03      	subs	r3, r0, #0
 80022d4:	d005      	beq.n	80022e2 <espConnect+0xda>
			// Update User
			consoleSend("Connected to WiFi\n");
 80022d6:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <espConnect+0x140>)
 80022d8:	0018      	movs	r0, r3
 80022da:	f000 faad 	bl	8002838 <consoleSend>
			return true;
 80022de:	2301      	movs	r3, #1
 80022e0:	e01c      	b.n	800231c <espConnect+0x114>
		} else if (strstr(receiveBuffer, "FAIL")){
 80022e2:	4a1a      	ldr	r2, [pc, #104]	; (800234c <espConnect+0x144>)
 80022e4:	4b10      	ldr	r3, [pc, #64]	; (8002328 <espConnect+0x120>)
 80022e6:	0011      	movs	r1, r2
 80022e8:	0018      	movs	r0, r3
 80022ea:	f007 fbd7 	bl	8009a9c <strstr>
 80022ee:	1e03      	subs	r3, r0, #0
 80022f0:	d005      	beq.n	80022fe <espConnect+0xf6>
			// Update User
			consoleSend("Failed to connect\n");
 80022f2:	4b17      	ldr	r3, [pc, #92]	; (8002350 <espConnect+0x148>)
 80022f4:	0018      	movs	r0, r3
 80022f6:	f000 fa9f 	bl	8002838 <consoleSend>
			return false;
 80022fa:	2300      	movs	r3, #0
 80022fc:	e00e      	b.n	800231c <espConnect+0x114>
		} else if (strstr(receiveBuffer, "ERR")){
 80022fe:	4a15      	ldr	r2, [pc, #84]	; (8002354 <espConnect+0x14c>)
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <espConnect+0x120>)
 8002302:	0011      	movs	r1, r2
 8002304:	0018      	movs	r0, r3
 8002306:	f007 fbc9 	bl	8009a9c <strstr>
 800230a:	1e03      	subs	r3, r0, #0
 800230c:	d005      	beq.n	800231a <espConnect+0x112>
			// Update User
			consoleSend("Error connecting to WiFi\n");
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <espConnect+0x150>)
 8002310:	0018      	movs	r0, r3
 8002312:	f000 fa91 	bl	8002838 <consoleSend>
			return false;
 8002316:	2300      	movs	r3, #0
 8002318:	e000      	b.n	800231c <espConnect+0x114>
		}
	}

	return false;
 800231a:	2300      	movs	r3, #0
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b005      	add	sp, #20
 8002322:	bd90      	pop	{r4, r7, pc}
 8002324:	20000200 	.word	0x20000200
 8002328:	20001480 	.word	0x20001480
 800232c:	0800b378 	.word	0x0800b378
 8002330:	0800b390 	.word	0x0800b390
 8002334:	20001340 	.word	0x20001340
 8002338:	00001388 	.word	0x00001388
 800233c:	200001fc 	.word	0x200001fc
 8002340:	0800b3a8 	.word	0x0800b3a8
 8002344:	0800b3ac 	.word	0x0800b3ac
 8002348:	0800b3b4 	.word	0x0800b3b4
 800234c:	0800b3c8 	.word	0x0800b3c8
 8002350:	0800b3d0 	.word	0x0800b3d0
 8002354:	0800b3e4 	.word	0x0800b3e4
 8002358:	0800b3e8 	.word	0x0800b3e8

0800235c <tcpConnect>:
  * Connect to the TCP webserver using the IP address of the server and the port
  * @param  address: Webserver IP address
  * @param  port: Webserver port
  * @retval bool: Connected or not connected
  */
bool tcpConnect(char *address, char *port) {
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b087      	sub	sp, #28
 8002360:	af02      	add	r7, sp, #8
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
	// Variables
	static char sendBuffer[50];
	memcpy(sendBuffer, "", sizeof(sendBuffer));
 8002366:	4b4c      	ldr	r3, [pc, #304]	; (8002498 <tcpConnect+0x13c>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	3304      	adds	r3, #4
 800236e:	222e      	movs	r2, #46	; 0x2e
 8002370:	2100      	movs	r1, #0
 8002372:	0018      	movs	r0, r3
 8002374:	f006 fef9 	bl	800916a <memset>
	clearChar(receiveBuffer, sizeof(receiveBuffer));
 8002378:	4b48      	ldr	r3, [pc, #288]	; (800249c <tcpConnect+0x140>)
 800237a:	21c8      	movs	r1, #200	; 0xc8
 800237c:	0018      	movs	r0, r3
 800237e:	f000 fa73 	bl	8002868 <clearChar>
	hostIP = address;
 8002382:	4b47      	ldr	r3, [pc, #284]	; (80024a0 <tcpConnect+0x144>)
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef uartRet;

	// Create commands
	snprintf(sendBuffer, sizeof(sendBuffer), "AT+CIPSTART=\"TCP\",\"%s\",%s\r\n", address, port);
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4a46      	ldr	r2, [pc, #280]	; (80024a4 <tcpConnect+0x148>)
 800238c:	4842      	ldr	r0, [pc, #264]	; (8002498 <tcpConnect+0x13c>)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	000b      	movs	r3, r1
 8002394:	2132      	movs	r1, #50	; 0x32
 8002396:	f007 fb4f 	bl	8009a38 <sniprintf>

	// Update User
	consoleSend("Connecting to TCP server...\n");
 800239a:	4b43      	ldr	r3, [pc, #268]	; (80024a8 <tcpConnect+0x14c>)
 800239c:	0018      	movs	r0, r3
 800239e:	f000 fa4b 	bl	8002838 <consoleSend>

	// Reset UART1
	HAL_UART_AbortReceive(&huart1);
 80023a2:	4b42      	ldr	r3, [pc, #264]	; (80024ac <tcpConnect+0x150>)
 80023a4:	0018      	movs	r0, r3
 80023a6:	f005 f8a5 	bl	80074f4 <HAL_UART_AbortReceive>

	// Send commands
	HAL_UART_Transmit(&huart1, (uint8_t*) sendBuffer, strlen(sendBuffer), 10);
 80023aa:	4b3b      	ldr	r3, [pc, #236]	; (8002498 <tcpConnect+0x13c>)
 80023ac:	0018      	movs	r0, r3
 80023ae:	f7fd feab 	bl	8000108 <strlen>
 80023b2:	0003      	movs	r3, r0
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	4938      	ldr	r1, [pc, #224]	; (8002498 <tcpConnect+0x13c>)
 80023b8:	483c      	ldr	r0, [pc, #240]	; (80024ac <tcpConnect+0x150>)
 80023ba:	230a      	movs	r3, #10
 80023bc:	f004 ff4e 	bl	800725c <HAL_UART_Transmit>

	// Receive answer
	uartRet = HAL_UART_Receive_IT(&huart1, (uint8_t*) receiveBuffer, 200);
 80023c0:	230f      	movs	r3, #15
 80023c2:	18fc      	adds	r4, r7, r3
 80023c4:	4935      	ldr	r1, [pc, #212]	; (800249c <tcpConnect+0x140>)
 80023c6:	4b39      	ldr	r3, [pc, #228]	; (80024ac <tcpConnect+0x150>)
 80023c8:	22c8      	movs	r2, #200	; 0xc8
 80023ca:	0018      	movs	r0, r3
 80023cc:	f004 ffee 	bl	80073ac <HAL_UART_Receive_IT>
 80023d0:	0003      	movs	r3, r0
 80023d2:	7023      	strb	r3, [r4, #0]
	tickdelay = HAL_GetTick() + 5000;
 80023d4:	f001 fede 	bl	8004194 <HAL_GetTick>
 80023d8:	0003      	movs	r3, r0
 80023da:	4a35      	ldr	r2, [pc, #212]	; (80024b0 <tcpConnect+0x154>)
 80023dc:	189a      	adds	r2, r3, r2
 80023de:	4b35      	ldr	r3, [pc, #212]	; (80024b4 <tcpConnect+0x158>)
 80023e0:	601a      	str	r2, [r3, #0]
	while ((strstr(receiveBuffer, "OK") == 0 && strstr(receiveBuffer, "ERROR") == 0) && HAL_GetTick() <= tickdelay);		// Hold for read
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	4a34      	ldr	r2, [pc, #208]	; (80024b8 <tcpConnect+0x15c>)
 80023e6:	4b2d      	ldr	r3, [pc, #180]	; (800249c <tcpConnect+0x140>)
 80023e8:	0011      	movs	r1, r2
 80023ea:	0018      	movs	r0, r3
 80023ec:	f007 fb56 	bl	8009a9c <strstr>
 80023f0:	1e03      	subs	r3, r0, #0
 80023f2:	d10e      	bne.n	8002412 <tcpConnect+0xb6>
 80023f4:	4a31      	ldr	r2, [pc, #196]	; (80024bc <tcpConnect+0x160>)
 80023f6:	4b29      	ldr	r3, [pc, #164]	; (800249c <tcpConnect+0x140>)
 80023f8:	0011      	movs	r1, r2
 80023fa:	0018      	movs	r0, r3
 80023fc:	f007 fb4e 	bl	8009a9c <strstr>
 8002400:	1e03      	subs	r3, r0, #0
 8002402:	d106      	bne.n	8002412 <tcpConnect+0xb6>
 8002404:	f001 fec6 	bl	8004194 <HAL_GetTick>
 8002408:	0002      	movs	r2, r0
 800240a:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <tcpConnect+0x158>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d9e8      	bls.n	80023e4 <tcpConnect+0x88>

	// Check answer
	if (uartRet != HAL_ERROR) {
 8002412:	230f      	movs	r3, #15
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d037      	beq.n	800248c <tcpConnect+0x130>
		if (strstr(receiveBuffer, "busy")){
 800241c:	4a28      	ldr	r2, [pc, #160]	; (80024c0 <tcpConnect+0x164>)
 800241e:	4b1f      	ldr	r3, [pc, #124]	; (800249c <tcpConnect+0x140>)
 8002420:	0011      	movs	r1, r2
 8002422:	0018      	movs	r0, r3
 8002424:	f007 fb3a 	bl	8009a9c <strstr>
 8002428:	1e03      	subs	r3, r0, #0
 800242a:	d005      	beq.n	8002438 <tcpConnect+0xdc>
			// Update User
			consoleSend("Error connecting to TCP server Busy...\n");
 800242c:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <tcpConnect+0x168>)
 800242e:	0018      	movs	r0, r3
 8002430:	f000 fa02 	bl	8002838 <consoleSend>
			return false;
 8002434:	2300      	movs	r3, #0
 8002436:	e02a      	b.n	800248e <tcpConnect+0x132>
		} else if (strstr(receiveBuffer, "ALREADY CONN")){
 8002438:	4a23      	ldr	r2, [pc, #140]	; (80024c8 <tcpConnect+0x16c>)
 800243a:	4b18      	ldr	r3, [pc, #96]	; (800249c <tcpConnect+0x140>)
 800243c:	0011      	movs	r1, r2
 800243e:	0018      	movs	r0, r3
 8002440:	f007 fb2c 	bl	8009a9c <strstr>
 8002444:	1e03      	subs	r3, r0, #0
 8002446:	d005      	beq.n	8002454 <tcpConnect+0xf8>
			// Update User
			consoleSend("Already connected to TCP Server\n");
 8002448:	4b20      	ldr	r3, [pc, #128]	; (80024cc <tcpConnect+0x170>)
 800244a:	0018      	movs	r0, r3
 800244c:	f000 f9f4 	bl	8002838 <consoleSend>
			return true;
 8002450:	2301      	movs	r3, #1
 8002452:	e01c      	b.n	800248e <tcpConnect+0x132>
		} else if (strstr(receiveBuffer, "ERR")){
 8002454:	4a1e      	ldr	r2, [pc, #120]	; (80024d0 <tcpConnect+0x174>)
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <tcpConnect+0x140>)
 8002458:	0011      	movs	r1, r2
 800245a:	0018      	movs	r0, r3
 800245c:	f007 fb1e 	bl	8009a9c <strstr>
 8002460:	1e03      	subs	r3, r0, #0
 8002462:	d005      	beq.n	8002470 <tcpConnect+0x114>
			// Update User
			consoleSend("Error connecting to TCP server\n");
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <tcpConnect+0x178>)
 8002466:	0018      	movs	r0, r3
 8002468:	f000 f9e6 	bl	8002838 <consoleSend>
			return false;
 800246c:	2300      	movs	r3, #0
 800246e:	e00e      	b.n	800248e <tcpConnect+0x132>
		} else if (strstr(receiveBuffer, "OK")){
 8002470:	4a11      	ldr	r2, [pc, #68]	; (80024b8 <tcpConnect+0x15c>)
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <tcpConnect+0x140>)
 8002474:	0011      	movs	r1, r2
 8002476:	0018      	movs	r0, r3
 8002478:	f007 fb10 	bl	8009a9c <strstr>
 800247c:	1e03      	subs	r3, r0, #0
 800247e:	d005      	beq.n	800248c <tcpConnect+0x130>
			// Update User
			consoleSend("Connected to TCP Server\n");
 8002480:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <tcpConnect+0x17c>)
 8002482:	0018      	movs	r0, r3
 8002484:	f000 f9d8 	bl	8002838 <consoleSend>
			return true;
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <tcpConnect+0x132>
		}
	}

	return false;
 800248c:	2300      	movs	r3, #0
}
 800248e:	0018      	movs	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	b005      	add	sp, #20
 8002494:	bd90      	pop	{r4, r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	20000250 	.word	0x20000250
 800249c:	20001480 	.word	0x20001480
 80024a0:	20000000 	.word	0x20000000
 80024a4:	0800b404 	.word	0x0800b404
 80024a8:	0800b420 	.word	0x0800b420
 80024ac:	20001340 	.word	0x20001340
 80024b0:	00001388 	.word	0x00001388
 80024b4:	200001fc 	.word	0x200001fc
 80024b8:	0800b3a8 	.word	0x0800b3a8
 80024bc:	0800b3ac 	.word	0x0800b3ac
 80024c0:	0800b440 	.word	0x0800b440
 80024c4:	0800b448 	.word	0x0800b448
 80024c8:	0800b470 	.word	0x0800b470
 80024cc:	0800b480 	.word	0x0800b480
 80024d0:	0800b3e4 	.word	0x0800b3e4
 80024d4:	0800b4a4 	.word	0x0800b4a4
 80024d8:	0800b4c4 	.word	0x0800b4c4

080024dc <tcpSend>:
  * @param  pressure: Pressure value
  * @param  lux: Light level
  * @param  missedCyl: Minutes data could not be stored on the database
  * @retval bool: Data send successfully or not successfully
  */
bool tcpSend(float temp, float humid, float pressure, float lux, int missedCyl) {
 80024dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024de:	46c6      	mov	lr, r8
 80024e0:	b500      	push	{lr}
 80024e2:	b0ac      	sub	sp, #176	; 0xb0
 80024e4:	af0a      	add	r7, sp, #40	; 0x28
 80024e6:	6278      	str	r0, [r7, #36]	; 0x24
 80024e8:	6239      	str	r1, [r7, #32]
 80024ea:	61fa      	str	r2, [r7, #28]
 80024ec:	61bb      	str	r3, [r7, #24]
	// Variables
	static char sendBuffer[20];
	memcpy(sendBuffer, "", sizeof(sendBuffer));
 80024ee:	4bbf      	ldr	r3, [pc, #764]	; (80027ec <tcpSend+0x310>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	3304      	adds	r3, #4
 80024f6:	2210      	movs	r2, #16
 80024f8:	2100      	movs	r1, #0
 80024fa:	0018      	movs	r0, r3
 80024fc:	f006 fe35 	bl	800916a <memset>
	clearChar(receiveBuffer, sizeof(receiveBuffer));
 8002500:	4bbb      	ldr	r3, [pc, #748]	; (80027f0 <tcpSend+0x314>)
 8002502:	21c8      	movs	r1, #200	; 0xc8
 8002504:	0018      	movs	r0, r3
 8002506:	f000 f9af 	bl	8002868 <clearChar>

	HAL_StatusTypeDef uartRet;

	static char dataOut[100];																	// Data for post
	int dataLength = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	2284      	movs	r2, #132	; 0x84
 800250e:	18ba      	adds	r2, r7, r2
 8002510:	6013      	str	r3, [r2, #0]

	const char headerOut[] = "POST /weerstationPost.php HTTP/1.1\r\n";							// Post header
 8002512:	2544      	movs	r5, #68	; 0x44
 8002514:	2410      	movs	r4, #16
 8002516:	2308      	movs	r3, #8
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	191a      	adds	r2, r3, r4
 800251c:	1953      	adds	r3, r2, r5
 800251e:	4ab5      	ldr	r2, [pc, #724]	; (80027f4 <tcpSend+0x318>)
 8002520:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002522:	c313      	stmia	r3!, {r0, r1, r4}
 8002524:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002526:	c313      	stmia	r3!, {r0, r1, r4}
 8002528:	ca13      	ldmia	r2!, {r0, r1, r4}
 800252a:	c313      	stmia	r3!, {r0, r1, r4}
 800252c:	7812      	ldrb	r2, [r2, #0]
 800252e:	701a      	strb	r2, [r3, #0]
	static char hostOut[30];																	// Host IP for post
	const char contentOut[] = "Content-Type: application/x-www-form-urlencoded\r\n";			// Content Type for post
 8002530:	2610      	movs	r6, #16
 8002532:	2410      	movs	r4, #16
 8002534:	2308      	movs	r3, #8
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	191a      	adds	r2, r3, r4
 800253a:	1992      	adds	r2, r2, r6
 800253c:	4bae      	ldr	r3, [pc, #696]	; (80027f8 <tcpSend+0x31c>)
 800253e:	0010      	movs	r0, r2
 8002540:	0019      	movs	r1, r3
 8002542:	2332      	movs	r3, #50	; 0x32
 8002544:	001a      	movs	r2, r3
 8002546:	f006 fe07 	bl	8009158 <memcpy>
	static char dataLenOut[30] = "";															// Length of dataOut for post

	// Create commands
	memcpy(dataOut, "", sizeof(dataOut));
 800254a:	4bac      	ldr	r3, [pc, #688]	; (80027fc <tcpSend+0x320>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	3304      	adds	r3, #4
 8002552:	2260      	movs	r2, #96	; 0x60
 8002554:	2100      	movs	r1, #0
 8002556:	0018      	movs	r0, r3
 8002558:	f006 fe07 	bl	800916a <memset>
	snprintf(dataOut, sizeof(dataOut), "api_key=tPmAT5Ab3j7F9&temp=%0.2f&humid=%0.2f&pressure=%0.2f&lux=%0.2f&date=%d", temp, humid, pressure, lux, missedCyl);	// Set data
 800255c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800255e:	f7ff fd37 	bl	8001fd0 <__aeabi_f2d>
 8002562:	0004      	movs	r4, r0
 8002564:	000d      	movs	r5, r1
 8002566:	6a38      	ldr	r0, [r7, #32]
 8002568:	f7ff fd32 	bl	8001fd0 <__aeabi_f2d>
 800256c:	6138      	str	r0, [r7, #16]
 800256e:	6179      	str	r1, [r7, #20]
 8002570:	69f8      	ldr	r0, [r7, #28]
 8002572:	f7ff fd2d 	bl	8001fd0 <__aeabi_f2d>
 8002576:	60b8      	str	r0, [r7, #8]
 8002578:	60f9      	str	r1, [r7, #12]
 800257a:	69b8      	ldr	r0, [r7, #24]
 800257c:	f7ff fd28 	bl	8001fd0 <__aeabi_f2d>
 8002580:	6038      	str	r0, [r7, #0]
 8002582:	6079      	str	r1, [r7, #4]
 8002584:	4e9e      	ldr	r6, [pc, #632]	; (8002800 <tcpSend+0x324>)
 8002586:	489d      	ldr	r0, [pc, #628]	; (80027fc <tcpSend+0x320>)
 8002588:	2188      	movs	r1, #136	; 0x88
 800258a:	2210      	movs	r2, #16
 800258c:	4694      	mov	ip, r2
 800258e:	2308      	movs	r3, #8
 8002590:	4698      	mov	r8, r3
 8002592:	44b8      	add	r8, r7
 8002594:	44c4      	add	ip, r8
 8002596:	4461      	add	r1, ip
 8002598:	6809      	ldr	r1, [r1, #0]
 800259a:	9108      	str	r1, [sp, #32]
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	9206      	str	r2, [sp, #24]
 80025a2:	9307      	str	r3, [sp, #28]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	9204      	str	r2, [sp, #16]
 80025aa:	9305      	str	r3, [sp, #20]
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	9202      	str	r2, [sp, #8]
 80025b2:	9303      	str	r3, [sp, #12]
 80025b4:	9400      	str	r4, [sp, #0]
 80025b6:	9501      	str	r5, [sp, #4]
 80025b8:	0032      	movs	r2, r6
 80025ba:	2164      	movs	r1, #100	; 0x64
 80025bc:	f007 fa3c 	bl	8009a38 <sniprintf>

	memcpy(hostOut, "", sizeof(hostOut));
 80025c0:	4b90      	ldr	r3, [pc, #576]	; (8002804 <tcpSend+0x328>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	3304      	adds	r3, #4
 80025c8:	221a      	movs	r2, #26
 80025ca:	2100      	movs	r1, #0
 80025cc:	0018      	movs	r0, r3
 80025ce:	f006 fdcc 	bl	800916a <memset>
	snprintf(hostOut, sizeof(hostOut), "Host: %s\r\n", hostIP);									// Set Host IP
 80025d2:	4b8d      	ldr	r3, [pc, #564]	; (8002808 <tcpSend+0x32c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a8d      	ldr	r2, [pc, #564]	; (800280c <tcpSend+0x330>)
 80025d8:	488a      	ldr	r0, [pc, #552]	; (8002804 <tcpSend+0x328>)
 80025da:	211e      	movs	r1, #30
 80025dc:	f007 fa2c 	bl	8009a38 <sniprintf>

	memcpy(dataLenOut, "", sizeof(dataLenOut));
 80025e0:	4b8b      	ldr	r3, [pc, #556]	; (8002810 <tcpSend+0x334>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	3304      	adds	r3, #4
 80025e8:	221a      	movs	r2, #26
 80025ea:	2100      	movs	r1, #0
 80025ec:	0018      	movs	r0, r3
 80025ee:	f006 fdbc 	bl	800916a <memset>
	snprintf(dataLenOut, sizeof(dataLenOut), "Content-Length: %d\r\n\r\n", strlen(dataOut));	// Get data length
 80025f2:	4b82      	ldr	r3, [pc, #520]	; (80027fc <tcpSend+0x320>)
 80025f4:	0018      	movs	r0, r3
 80025f6:	f7fd fd87 	bl	8000108 <strlen>
 80025fa:	0003      	movs	r3, r0
 80025fc:	4a85      	ldr	r2, [pc, #532]	; (8002814 <tcpSend+0x338>)
 80025fe:	4884      	ldr	r0, [pc, #528]	; (8002810 <tcpSend+0x334>)
 8002600:	211e      	movs	r1, #30
 8002602:	f007 fa19 	bl	8009a38 <sniprintf>

	strcat(dataOut, "\r\n");																	// Add Tale
 8002606:	4b7d      	ldr	r3, [pc, #500]	; (80027fc <tcpSend+0x320>)
 8002608:	0018      	movs	r0, r3
 800260a:	f7fd fd7d 	bl	8000108 <strlen>
 800260e:	0003      	movs	r3, r0
 8002610:	001a      	movs	r2, r3
 8002612:	4b7a      	ldr	r3, [pc, #488]	; (80027fc <tcpSend+0x320>)
 8002614:	18d2      	adds	r2, r2, r3
 8002616:	4b80      	ldr	r3, [pc, #512]	; (8002818 <tcpSend+0x33c>)
 8002618:	0010      	movs	r0, r2
 800261a:	0019      	movs	r1, r3
 800261c:	2303      	movs	r3, #3
 800261e:	001a      	movs	r2, r3
 8002620:	f006 fd9a 	bl	8009158 <memcpy>

	dataLength = strlen(headerOut) + strlen(hostOut) + strlen(contentOut) + strlen(dataLenOut) + strlen(dataOut);
 8002624:	2544      	movs	r5, #68	; 0x44
 8002626:	2410      	movs	r4, #16
 8002628:	2308      	movs	r3, #8
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	191a      	adds	r2, r3, r4
 800262e:	1953      	adds	r3, r2, r5
 8002630:	0018      	movs	r0, r3
 8002632:	f7fd fd69 	bl	8000108 <strlen>
 8002636:	0004      	movs	r4, r0
 8002638:	4b72      	ldr	r3, [pc, #456]	; (8002804 <tcpSend+0x328>)
 800263a:	0018      	movs	r0, r3
 800263c:	f7fd fd64 	bl	8000108 <strlen>
 8002640:	0003      	movs	r3, r0
 8002642:	18e4      	adds	r4, r4, r3
 8002644:	2610      	movs	r6, #16
 8002646:	2310      	movs	r3, #16
 8002648:	2208      	movs	r2, #8
 800264a:	18ba      	adds	r2, r7, r2
 800264c:	18d2      	adds	r2, r2, r3
 800264e:	1993      	adds	r3, r2, r6
 8002650:	0018      	movs	r0, r3
 8002652:	f7fd fd59 	bl	8000108 <strlen>
 8002656:	0003      	movs	r3, r0
 8002658:	18e4      	adds	r4, r4, r3
 800265a:	4b6d      	ldr	r3, [pc, #436]	; (8002810 <tcpSend+0x334>)
 800265c:	0018      	movs	r0, r3
 800265e:	f7fd fd53 	bl	8000108 <strlen>
 8002662:	0003      	movs	r3, r0
 8002664:	18e4      	adds	r4, r4, r3
 8002666:	4b65      	ldr	r3, [pc, #404]	; (80027fc <tcpSend+0x320>)
 8002668:	0018      	movs	r0, r3
 800266a:	f7fd fd4d 	bl	8000108 <strlen>
 800266e:	0003      	movs	r3, r0
 8002670:	18e3      	adds	r3, r4, r3
 8002672:	2284      	movs	r2, #132	; 0x84
 8002674:	18ba      	adds	r2, r7, r2
 8002676:	6013      	str	r3, [r2, #0]

	snprintf(sendBuffer, sizeof(sendBuffer), "AT+CIPSEND=%d\r\n", dataLength);
 8002678:	2384      	movs	r3, #132	; 0x84
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a67      	ldr	r2, [pc, #412]	; (800281c <tcpSend+0x340>)
 8002680:	485a      	ldr	r0, [pc, #360]	; (80027ec <tcpSend+0x310>)
 8002682:	2114      	movs	r1, #20
 8002684:	f007 f9d8 	bl	8009a38 <sniprintf>

	// Update User
	consoleSend("Sending HTTP Post...\n");
 8002688:	4b65      	ldr	r3, [pc, #404]	; (8002820 <tcpSend+0x344>)
 800268a:	0018      	movs	r0, r3
 800268c:	f000 f8d4 	bl	8002838 <consoleSend>

	// Send commands
	HAL_UART_Transmit(&huart1, (uint8_t*) sendBuffer, strlen(sendBuffer), 10);					// Send start command
 8002690:	4b56      	ldr	r3, [pc, #344]	; (80027ec <tcpSend+0x310>)
 8002692:	0018      	movs	r0, r3
 8002694:	f7fd fd38 	bl	8000108 <strlen>
 8002698:	0003      	movs	r3, r0
 800269a:	b29a      	uxth	r2, r3
 800269c:	4953      	ldr	r1, [pc, #332]	; (80027ec <tcpSend+0x310>)
 800269e:	4861      	ldr	r0, [pc, #388]	; (8002824 <tcpSend+0x348>)
 80026a0:	230a      	movs	r3, #10
 80026a2:	f004 fddb 	bl	800725c <HAL_UART_Transmit>
	HAL_Delay(2);
 80026a6:	2002      	movs	r0, #2
 80026a8:	f001 fd7e 	bl	80041a8 <HAL_Delay>

	HAL_UART_Transmit(&huart1, (uint8_t*) headerOut, strlen(headerOut), 10);
 80026ac:	2410      	movs	r4, #16
 80026ae:	2308      	movs	r3, #8
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	191b      	adds	r3, r3, r4
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	0018      	movs	r0, r3
 80026b8:	f7fd fd26 	bl	8000108 <strlen>
 80026bc:	0003      	movs	r3, r0
 80026be:	b29a      	uxth	r2, r3
 80026c0:	2308      	movs	r3, #8
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	191b      	adds	r3, r3, r4
 80026c6:	1959      	adds	r1, r3, r5
 80026c8:	4856      	ldr	r0, [pc, #344]	; (8002824 <tcpSend+0x348>)
 80026ca:	230a      	movs	r3, #10
 80026cc:	f004 fdc6 	bl	800725c <HAL_UART_Transmit>
	HAL_Delay(2);
 80026d0:	2002      	movs	r0, #2
 80026d2:	f001 fd69 	bl	80041a8 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) hostOut, strlen(hostOut), 10);
 80026d6:	4b4b      	ldr	r3, [pc, #300]	; (8002804 <tcpSend+0x328>)
 80026d8:	0018      	movs	r0, r3
 80026da:	f7fd fd15 	bl	8000108 <strlen>
 80026de:	0003      	movs	r3, r0
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	4948      	ldr	r1, [pc, #288]	; (8002804 <tcpSend+0x328>)
 80026e4:	484f      	ldr	r0, [pc, #316]	; (8002824 <tcpSend+0x348>)
 80026e6:	230a      	movs	r3, #10
 80026e8:	f004 fdb8 	bl	800725c <HAL_UART_Transmit>
	HAL_Delay(2);
 80026ec:	2002      	movs	r0, #2
 80026ee:	f001 fd5b 	bl	80041a8 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) contentOut, strlen(contentOut), 10);
 80026f2:	2308      	movs	r3, #8
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	191b      	adds	r3, r3, r4
 80026f8:	199b      	adds	r3, r3, r6
 80026fa:	0018      	movs	r0, r3
 80026fc:	f7fd fd04 	bl	8000108 <strlen>
 8002700:	0003      	movs	r3, r0
 8002702:	b29a      	uxth	r2, r3
 8002704:	2308      	movs	r3, #8
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	191b      	adds	r3, r3, r4
 800270a:	1999      	adds	r1, r3, r6
 800270c:	4845      	ldr	r0, [pc, #276]	; (8002824 <tcpSend+0x348>)
 800270e:	230a      	movs	r3, #10
 8002710:	f004 fda4 	bl	800725c <HAL_UART_Transmit>
	HAL_Delay(2);
 8002714:	2002      	movs	r0, #2
 8002716:	f001 fd47 	bl	80041a8 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) dataLenOut, strlen(dataLenOut), 10);
 800271a:	4b3d      	ldr	r3, [pc, #244]	; (8002810 <tcpSend+0x334>)
 800271c:	0018      	movs	r0, r3
 800271e:	f7fd fcf3 	bl	8000108 <strlen>
 8002722:	0003      	movs	r3, r0
 8002724:	b29a      	uxth	r2, r3
 8002726:	493a      	ldr	r1, [pc, #232]	; (8002810 <tcpSend+0x334>)
 8002728:	483e      	ldr	r0, [pc, #248]	; (8002824 <tcpSend+0x348>)
 800272a:	230a      	movs	r3, #10
 800272c:	f004 fd96 	bl	800725c <HAL_UART_Transmit>
	HAL_Delay(2);
 8002730:	2002      	movs	r0, #2
 8002732:	f001 fd39 	bl	80041a8 <HAL_Delay>

	// Reset UART1
	HAL_UART_AbortReceive(&huart1);
 8002736:	4b3b      	ldr	r3, [pc, #236]	; (8002824 <tcpSend+0x348>)
 8002738:	0018      	movs	r0, r3
 800273a:	f004 fedb 	bl	80074f4 <HAL_UART_AbortReceive>

	// Last Send
	HAL_UART_Transmit(&huart1, (uint8_t*) dataOut, strlen(dataOut), 10);
 800273e:	4b2f      	ldr	r3, [pc, #188]	; (80027fc <tcpSend+0x320>)
 8002740:	0018      	movs	r0, r3
 8002742:	f7fd fce1 	bl	8000108 <strlen>
 8002746:	0003      	movs	r3, r0
 8002748:	b29a      	uxth	r2, r3
 800274a:	492c      	ldr	r1, [pc, #176]	; (80027fc <tcpSend+0x320>)
 800274c:	4835      	ldr	r0, [pc, #212]	; (8002824 <tcpSend+0x348>)
 800274e:	230a      	movs	r3, #10
 8002750:	f004 fd84 	bl	800725c <HAL_UART_Transmit>

	// Receive answer
	uartRet = HAL_UART_Receive_IT(&huart1, (uint8_t*) receiveBuffer, 200);
 8002754:	236b      	movs	r3, #107	; 0x6b
 8002756:	2208      	movs	r2, #8
 8002758:	18ba      	adds	r2, r7, r2
 800275a:	1912      	adds	r2, r2, r4
 800275c:	18d4      	adds	r4, r2, r3
 800275e:	4924      	ldr	r1, [pc, #144]	; (80027f0 <tcpSend+0x314>)
 8002760:	4b30      	ldr	r3, [pc, #192]	; (8002824 <tcpSend+0x348>)
 8002762:	22c8      	movs	r2, #200	; 0xc8
 8002764:	0018      	movs	r0, r3
 8002766:	f004 fe21 	bl	80073ac <HAL_UART_Receive_IT>
 800276a:	0003      	movs	r3, r0
 800276c:	7023      	strb	r3, [r4, #0]
	tickdelay = HAL_GetTick() + 2000;
 800276e:	f001 fd11 	bl	8004194 <HAL_GetTick>
 8002772:	0003      	movs	r3, r0
 8002774:	22fa      	movs	r2, #250	; 0xfa
 8002776:	00d2      	lsls	r2, r2, #3
 8002778:	189a      	adds	r2, r3, r2
 800277a:	4b2b      	ldr	r3, [pc, #172]	; (8002828 <tcpSend+0x34c>)
 800277c:	601a      	str	r2, [r3, #0]
	while (strstr(receiveBuffer, "200 OK") == 0 && HAL_GetTick() <= tickdelay);		// Hold for read
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	4a2a      	ldr	r2, [pc, #168]	; (800282c <tcpSend+0x350>)
 8002782:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <tcpSend+0x314>)
 8002784:	0011      	movs	r1, r2
 8002786:	0018      	movs	r0, r3
 8002788:	f007 f988 	bl	8009a9c <strstr>
 800278c:	1e03      	subs	r3, r0, #0
 800278e:	d106      	bne.n	800279e <tcpSend+0x2c2>
 8002790:	f001 fd00 	bl	8004194 <HAL_GetTick>
 8002794:	0002      	movs	r2, r0
 8002796:	4b24      	ldr	r3, [pc, #144]	; (8002828 <tcpSend+0x34c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d9f0      	bls.n	8002780 <tcpSend+0x2a4>

	// Check answer
	if (uartRet != HAL_ERROR) {
 800279e:	236b      	movs	r3, #107	; 0x6b
 80027a0:	2210      	movs	r2, #16
 80027a2:	4694      	mov	ip, r2
 80027a4:	2208      	movs	r2, #8
 80027a6:	4690      	mov	r8, r2
 80027a8:	44b8      	add	r8, r7
 80027aa:	44c4      	add	ip, r8
 80027ac:	4463      	add	r3, ip
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d013      	beq.n	80027dc <tcpSend+0x300>
		if (strstr(receiveBuffer, "200 OK")){
 80027b4:	4a1d      	ldr	r2, [pc, #116]	; (800282c <tcpSend+0x350>)
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <tcpSend+0x314>)
 80027b8:	0011      	movs	r1, r2
 80027ba:	0018      	movs	r0, r3
 80027bc:	f007 f96e 	bl	8009a9c <strstr>
 80027c0:	1e03      	subs	r3, r0, #0
 80027c2:	d005      	beq.n	80027d0 <tcpSend+0x2f4>
			// Update User
			consoleSend("Success\n");
 80027c4:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <tcpSend+0x354>)
 80027c6:	0018      	movs	r0, r3
 80027c8:	f000 f836 	bl	8002838 <consoleSend>
			return true;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e006      	b.n	80027de <tcpSend+0x302>
		} else {
			// Update User
			consoleSend("Failed\n");
 80027d0:	4b18      	ldr	r3, [pc, #96]	; (8002834 <tcpSend+0x358>)
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 f830 	bl	8002838 <consoleSend>
			return false;
 80027d8:	2300      	movs	r3, #0
 80027da:	e000      	b.n	80027de <tcpSend+0x302>
		}
	}

	return false;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	0018      	movs	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b022      	add	sp, #136	; 0x88
 80027e4:	bc04      	pop	{r2}
 80027e6:	4690      	mov	r8, r2
 80027e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	20000284 	.word	0x20000284
 80027f0:	20001480 	.word	0x20001480
 80027f4:	0800b59c 	.word	0x0800b59c
 80027f8:	0800b5c4 	.word	0x0800b5c4
 80027fc:	20000298 	.word	0x20000298
 8002800:	0800b4e0 	.word	0x0800b4e0
 8002804:	200002fc 	.word	0x200002fc
 8002808:	20000000 	.word	0x20000000
 800280c:	0800b530 	.word	0x0800b530
 8002810:	2000031c 	.word	0x2000031c
 8002814:	0800b53c 	.word	0x0800b53c
 8002818:	0800b554 	.word	0x0800b554
 800281c:	0800b558 	.word	0x0800b558
 8002820:	0800b568 	.word	0x0800b568
 8002824:	20001340 	.word	0x20001340
 8002828:	200001fc 	.word	0x200001fc
 800282c:	0800b580 	.word	0x0800b580
 8002830:	0800b588 	.word	0x0800b588
 8002834:	0800b594 	.word	0x0800b594

08002838 <consoleSend>:
/**
  * @brief  Function send Uart message to the USB
  * @param  message: Message to send to the Uart
  * @retval None
  */
void consoleSend(char* message) {
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) message, strlen(message), 10);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	0018      	movs	r0, r3
 8002844:	f7fd fc60 	bl	8000108 <strlen>
 8002848:	0003      	movs	r3, r0
 800284a:	b29a      	uxth	r2, r3
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	4805      	ldr	r0, [pc, #20]	; (8002864 <consoleSend+0x2c>)
 8002850:	230a      	movs	r3, #10
 8002852:	f004 fd03 	bl	800725c <HAL_UART_Transmit>
	HAL_Delay(10);
 8002856:	200a      	movs	r0, #10
 8002858:	f001 fca6 	bl	80041a8 <HAL_Delay>
}
 800285c:	46c0      	nop			; (mov r8, r8)
 800285e:	46bd      	mov	sp, r7
 8002860:	b002      	add	sp, #8
 8002862:	bd80      	pop	{r7, pc}
 8002864:	200013c0 	.word	0x200013c0

08002868 <clearChar>:
  * @brief  Function clear char array
  * @param  arr: char array to be cleared
  * @param  leng: length of the char array
  * @retval None
  */
void clearChar(char* arr, int leng){
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
	for (int i = 0; i<leng; i++){
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	e007      	b.n	8002888 <clearChar+0x20>
		arr[i] = '\0';
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	18d3      	adds	r3, r2, r3
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<leng; i++){
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	3301      	adds	r3, #1
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	dbf3      	blt.n	8002878 <clearChar+0x10>
	}
}
 8002890:	46c0      	nop			; (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	b004      	add	sp, #16
 8002896:	bd80      	pop	{r7, pc}

08002898 <Read_Sensor_16_unsigned>:
 */

#include "I2c.h"
#include "main.h"

uint16_t Read_Sensor_16_unsigned( uint8_t sensoradres, char *naam, uint16_t sensAddress ){
 8002898:	b590      	push	{r4, r7, lr}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af02      	add	r7, sp, #8
 800289e:	6039      	str	r1, [r7, #0]
 80028a0:	0011      	movs	r1, r2
 80028a2:	1dfb      	adds	r3, r7, #7
 80028a4:	1c02      	adds	r2, r0, #0
 80028a6:	701a      	strb	r2, [r3, #0]
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	1c0a      	adds	r2, r1, #0
 80028ac:	801a      	strh	r2, [r3, #0]
	uint16_t Data2;
	  if (HAL_I2C_IsDeviceReady(&hi2c1, sensAddress, 2, 1000) == HAL_ERROR) {
 80028ae:	23fa      	movs	r3, #250	; 0xfa
 80028b0:	009a      	lsls	r2, r3, #2
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	8819      	ldrh	r1, [r3, #0]
 80028b6:	483b      	ldr	r0, [pc, #236]	; (80029a4 <Read_Sensor_16_unsigned+0x10c>)
 80028b8:	0013      	movs	r3, r2
 80028ba:	2202      	movs	r2, #2
 80028bc:	f002 fda4 	bl	8005408 <HAL_I2C_IsDeviceReady>
 80028c0:	0003      	movs	r3, r0
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d114      	bne.n	80028f0 <Read_Sensor_16_unsigned+0x58>
		  strcpy(naam,"neee\n");
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	4b37      	ldr	r3, [pc, #220]	; (80029a8 <Read_Sensor_16_unsigned+0x110>)
 80028ca:	0010      	movs	r0, r2
 80028cc:	0019      	movs	r1, r3
 80028ce:	2306      	movs	r3, #6
 80028d0:	001a      	movs	r2, r3
 80028d2:	f006 fc41 	bl	8009158 <memcpy>
		  HAL_UART_Transmit(&huart2, (uint8_t*)naam, strlen(naam), 100);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	0018      	movs	r0, r3
 80028da:	f7fd fc15 	bl	8000108 <strlen>
 80028de:	0003      	movs	r3, r0
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	6839      	ldr	r1, [r7, #0]
 80028e4:	4831      	ldr	r0, [pc, #196]	; (80029ac <Read_Sensor_16_unsigned+0x114>)
 80028e6:	2364      	movs	r3, #100	; 0x64
 80028e8:	f004 fcb8 	bl	800725c <HAL_UART_Transmit>
	   itoa(Data2, naam,10);

	   	  return Data2;
	  }

	  	  return 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e055      	b.n	800299c <Read_Sensor_16_unsigned+0x104>
	  Data[0] = sensoradres;
 80028f0:	240c      	movs	r4, #12
 80028f2:	193b      	adds	r3, r7, r4
 80028f4:	1dfa      	adds	r2, r7, #7
 80028f6:	7812      	ldrb	r2, [r2, #0]
 80028f8:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, sensAddress ,(uint8_t *)&Data[0], I2C_MEMADD_SIZE_8BIT, 1000);
 80028fa:	193a      	adds	r2, r7, r4
 80028fc:	1d3b      	adds	r3, r7, #4
 80028fe:	8819      	ldrh	r1, [r3, #0]
 8002900:	4828      	ldr	r0, [pc, #160]	; (80029a4 <Read_Sensor_16_unsigned+0x10c>)
 8002902:	23fa      	movs	r3, #250	; 0xfa
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	2301      	movs	r3, #1
 800290a:	f002 fb6d 	bl	8004fe8 <HAL_I2C_Master_Transmit>
	  Data[0] = 0x00;
 800290e:	193b      	adds	r3, r7, r4
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
	  Data[1] = 0x00;
 8002914:	193b      	adds	r3, r7, r4
 8002916:	2200      	movs	r2, #0
 8002918:	705a      	strb	r2, [r3, #1]
	  while( Data[0] == 0x00 ){
 800291a:	e00a      	b.n	8002932 <Read_Sensor_16_unsigned+0x9a>
	  HAL_I2C_Master_Receive(&hi2c1, sensAddress, (uint8_t *)&Data[0], I2C_MEMADD_SIZE_8BIT, 1000);
 800291c:	230c      	movs	r3, #12
 800291e:	18fa      	adds	r2, r7, r3
 8002920:	1d3b      	adds	r3, r7, #4
 8002922:	8819      	ldrh	r1, [r3, #0]
 8002924:	481f      	ldr	r0, [pc, #124]	; (80029a4 <Read_Sensor_16_unsigned+0x10c>)
 8002926:	23fa      	movs	r3, #250	; 0xfa
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	2301      	movs	r3, #1
 800292e:	f002 fc63 	bl	80051f8 <HAL_I2C_Master_Receive>
	  while( Data[0] == 0x00 ){
 8002932:	230c      	movs	r3, #12
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0ef      	beq.n	800291c <Read_Sensor_16_unsigned+0x84>
	  while( Data[1] == 0x00 ){
 800293c:	e011      	b.n	8002962 <Read_Sensor_16_unsigned+0xca>
	  	  HAL_I2C_Master_Receive(&hi2c1, sensAddress|= 0x01, (uint8_t *)&Data[1], I2C_MEMADD_SIZE_8BIT, 1000);
 800293e:	1d3b      	adds	r3, r7, #4
 8002940:	1d3a      	adds	r2, r7, #4
 8002942:	8812      	ldrh	r2, [r2, #0]
 8002944:	2101      	movs	r1, #1
 8002946:	430a      	orrs	r2, r1
 8002948:	801a      	strh	r2, [r3, #0]
 800294a:	230c      	movs	r3, #12
 800294c:	18fb      	adds	r3, r7, r3
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	8819      	ldrh	r1, [r3, #0]
 8002954:	4813      	ldr	r0, [pc, #76]	; (80029a4 <Read_Sensor_16_unsigned+0x10c>)
 8002956:	23fa      	movs	r3, #250	; 0xfa
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	2301      	movs	r3, #1
 800295e:	f002 fc4b 	bl	80051f8 <HAL_I2C_Master_Receive>
	  while( Data[1] == 0x00 ){
 8002962:	230c      	movs	r3, #12
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	785b      	ldrb	r3, [r3, #1]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0e8      	beq.n	800293e <Read_Sensor_16_unsigned+0xa6>
	   Data2 = (Data[1] <<8)+ Data[0];
 800296c:	220c      	movs	r2, #12
 800296e:	18bb      	adds	r3, r7, r2
 8002970:	785b      	ldrb	r3, [r3, #1]
 8002972:	b29b      	uxth	r3, r3
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	b299      	uxth	r1, r3
 8002978:	18bb      	adds	r3, r7, r2
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	b29a      	uxth	r2, r3
 800297e:	2016      	movs	r0, #22
 8002980:	183b      	adds	r3, r7, r0
 8002982:	188a      	adds	r2, r1, r2
 8002984:	801a      	strh	r2, [r3, #0]
	   itoa(Data2, naam,10);
 8002986:	0004      	movs	r4, r0
 8002988:	183b      	adds	r3, r7, r0
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	6839      	ldr	r1, [r7, #0]
 800298e:	220a      	movs	r2, #10
 8002990:	0018      	movs	r0, r3
 8002992:	f006 fbdd 	bl	8009150 <itoa>
	   	  return Data2;
 8002996:	0020      	movs	r0, r4
 8002998:	183b      	adds	r3, r7, r0
 800299a:	881b      	ldrh	r3, [r3, #0]
	  	  }
 800299c:	0018      	movs	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	b007      	add	sp, #28
 80029a2:	bd90      	pop	{r4, r7, pc}
 80029a4:	200012f4 	.word	0x200012f4
 80029a8:	0800b5f8 	.word	0x0800b5f8
 80029ac:	200013c0 	.word	0x200013c0

080029b0 <Read_Sensor_16_signed>:
int16_t Read_Sensor_16_signed( uint8_t sensoradres, char *naam, uint16_t sensAddress ){
 80029b0:	b590      	push	{r4, r7, lr}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	6039      	str	r1, [r7, #0]
 80029b8:	0011      	movs	r1, r2
 80029ba:	1dfb      	adds	r3, r7, #7
 80029bc:	1c02      	adds	r2, r0, #0
 80029be:	701a      	strb	r2, [r3, #0]
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	1c0a      	adds	r2, r1, #0
 80029c4:	801a      	strh	r2, [r3, #0]
	int16_t Data2;
	  if (HAL_I2C_IsDeviceReady(&hi2c1, sensAddress, 2, 1000) == HAL_ERROR) {
 80029c6:	23fa      	movs	r3, #250	; 0xfa
 80029c8:	009a      	lsls	r2, r3, #2
 80029ca:	1d3b      	adds	r3, r7, #4
 80029cc:	8819      	ldrh	r1, [r3, #0]
 80029ce:	483c      	ldr	r0, [pc, #240]	; (8002ac0 <Read_Sensor_16_signed+0x110>)
 80029d0:	0013      	movs	r3, r2
 80029d2:	2202      	movs	r2, #2
 80029d4:	f002 fd18 	bl	8005408 <HAL_I2C_IsDeviceReady>
 80029d8:	0003      	movs	r3, r0
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d114      	bne.n	8002a08 <Read_Sensor_16_signed+0x58>
		  strcpy(naam,"neee\n");
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	4b38      	ldr	r3, [pc, #224]	; (8002ac4 <Read_Sensor_16_signed+0x114>)
 80029e2:	0010      	movs	r0, r2
 80029e4:	0019      	movs	r1, r3
 80029e6:	2306      	movs	r3, #6
 80029e8:	001a      	movs	r2, r3
 80029ea:	f006 fbb5 	bl	8009158 <memcpy>
		  HAL_UART_Transmit(&huart2, (uint8_t*)naam, strlen(naam), 100);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	0018      	movs	r0, r3
 80029f2:	f7fd fb89 	bl	8000108 <strlen>
 80029f6:	0003      	movs	r3, r0
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	6839      	ldr	r1, [r7, #0]
 80029fc:	4832      	ldr	r0, [pc, #200]	; (8002ac8 <Read_Sensor_16_signed+0x118>)
 80029fe:	2364      	movs	r3, #100	; 0x64
 8002a00:	f004 fc2c 	bl	800725c <HAL_UART_Transmit>
	   itoa(Data2, naam,10);

	   	  return Data2;
	  }

	  	  return 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	e056      	b.n	8002ab6 <Read_Sensor_16_signed+0x106>
	  Data[0] = sensoradres;
 8002a08:	240c      	movs	r4, #12
 8002a0a:	193b      	adds	r3, r7, r4
 8002a0c:	1dfa      	adds	r2, r7, #7
 8002a0e:	7812      	ldrb	r2, [r2, #0]
 8002a10:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, sensAddress ,(uint8_t *)&Data[0], I2C_MEMADD_SIZE_8BIT, 1000);
 8002a12:	193a      	adds	r2, r7, r4
 8002a14:	1d3b      	adds	r3, r7, #4
 8002a16:	8819      	ldrh	r1, [r3, #0]
 8002a18:	4829      	ldr	r0, [pc, #164]	; (8002ac0 <Read_Sensor_16_signed+0x110>)
 8002a1a:	23fa      	movs	r3, #250	; 0xfa
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	2301      	movs	r3, #1
 8002a22:	f002 fae1 	bl	8004fe8 <HAL_I2C_Master_Transmit>
	  Data[0] = 0x00;
 8002a26:	193b      	adds	r3, r7, r4
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
	  Data[1] = 0x00;
 8002a2c:	193b      	adds	r3, r7, r4
 8002a2e:	2200      	movs	r2, #0
 8002a30:	705a      	strb	r2, [r3, #1]
	  while( Data[0] == 0x00 ){
 8002a32:	e00a      	b.n	8002a4a <Read_Sensor_16_signed+0x9a>
	  HAL_I2C_Master_Receive(&hi2c1, sensAddress, (uint8_t *)&Data[0], I2C_MEMADD_SIZE_8BIT, 1000);
 8002a34:	230c      	movs	r3, #12
 8002a36:	18fa      	adds	r2, r7, r3
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	8819      	ldrh	r1, [r3, #0]
 8002a3c:	4820      	ldr	r0, [pc, #128]	; (8002ac0 <Read_Sensor_16_signed+0x110>)
 8002a3e:	23fa      	movs	r3, #250	; 0xfa
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	2301      	movs	r3, #1
 8002a46:	f002 fbd7 	bl	80051f8 <HAL_I2C_Master_Receive>
	  while( Data[0] == 0x00 ){
 8002a4a:	230c      	movs	r3, #12
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ef      	beq.n	8002a34 <Read_Sensor_16_signed+0x84>
	  while( Data[1] == 0x00 ){
 8002a54:	e011      	b.n	8002a7a <Read_Sensor_16_signed+0xca>
	  	  HAL_I2C_Master_Receive(&hi2c1, sensAddress|= 0x01, (uint8_t *)&Data[1], I2C_MEMADD_SIZE_8BIT, 1000);
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	1d3a      	adds	r2, r7, #4
 8002a5a:	8812      	ldrh	r2, [r2, #0]
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	801a      	strh	r2, [r3, #0]
 8002a62:	230c      	movs	r3, #12
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	1d3b      	adds	r3, r7, #4
 8002a6a:	8819      	ldrh	r1, [r3, #0]
 8002a6c:	4814      	ldr	r0, [pc, #80]	; (8002ac0 <Read_Sensor_16_signed+0x110>)
 8002a6e:	23fa      	movs	r3, #250	; 0xfa
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	2301      	movs	r3, #1
 8002a76:	f002 fbbf 	bl	80051f8 <HAL_I2C_Master_Receive>
	  while( Data[1] == 0x00 ){
 8002a7a:	230c      	movs	r3, #12
 8002a7c:	18fb      	adds	r3, r7, r3
 8002a7e:	785b      	ldrb	r3, [r3, #1]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0e8      	beq.n	8002a56 <Read_Sensor_16_signed+0xa6>
	   Data2 = (Data[1] <<8)+( Data[0]);
 8002a84:	210c      	movs	r1, #12
 8002a86:	187b      	adds	r3, r7, r1
 8002a88:	785b      	ldrb	r3, [r3, #1]
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	187b      	adds	r3, r7, r1
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	18d3      	adds	r3, r2, r3
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	2416      	movs	r4, #22
 8002a9c:	193b      	adds	r3, r7, r4
 8002a9e:	801a      	strh	r2, [r3, #0]
	   itoa(Data2, naam,10);
 8002aa0:	193b      	adds	r3, r7, r4
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	5e9b      	ldrsh	r3, [r3, r2]
 8002aa6:	6839      	ldr	r1, [r7, #0]
 8002aa8:	220a      	movs	r2, #10
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f006 fb50 	bl	8009150 <itoa>
	   	  return Data2;
 8002ab0:	193b      	adds	r3, r7, r4
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	5e9b      	ldrsh	r3, [r3, r2]
	  	  }
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b007      	add	sp, #28
 8002abc:	bd90      	pop	{r4, r7, pc}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	200012f4 	.word	0x200012f4
 8002ac4:	0800b5f8 	.word	0x0800b5f8
 8002ac8:	200013c0 	.word	0x200013c0

08002acc <Read_Sensor_20>:
int Read_Sensor_20( uint8_t sensoradres, char *naam, uint16_t sensAddress ){
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b089      	sub	sp, #36	; 0x24
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	6039      	str	r1, [r7, #0]
 8002ad4:	0011      	movs	r1, r2
 8002ad6:	1dfb      	adds	r3, r7, #7
 8002ad8:	1c02      	adds	r2, r0, #0
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	1d3b      	adds	r3, r7, #4
 8002ade:	1c0a      	adds	r2, r1, #0
 8002ae0:	801a      	strh	r2, [r3, #0]
	int Data2;
	  if (HAL_I2C_IsDeviceReady(&hi2c1, sensAddress, 2, 1000) == HAL_ERROR) {
 8002ae2:	23fa      	movs	r3, #250	; 0xfa
 8002ae4:	009a      	lsls	r2, r3, #2
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	8819      	ldrh	r1, [r3, #0]
 8002aea:	484d      	ldr	r0, [pc, #308]	; (8002c20 <Read_Sensor_20+0x154>)
 8002aec:	0013      	movs	r3, r2
 8002aee:	2202      	movs	r2, #2
 8002af0:	f002 fc8a 	bl	8005408 <HAL_I2C_IsDeviceReady>
 8002af4:	0003      	movs	r3, r0
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d114      	bne.n	8002b24 <Read_Sensor_20+0x58>
		  strcpy(naam,"neee\n");
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	4b49      	ldr	r3, [pc, #292]	; (8002c24 <Read_Sensor_20+0x158>)
 8002afe:	0010      	movs	r0, r2
 8002b00:	0019      	movs	r1, r3
 8002b02:	2306      	movs	r3, #6
 8002b04:	001a      	movs	r2, r3
 8002b06:	f006 fb27 	bl	8009158 <memcpy>
		  HAL_UART_Transmit(&huart2, (uint8_t*)naam, strlen(naam), 100);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f7fd fafb 	bl	8000108 <strlen>
 8002b12:	0003      	movs	r3, r0
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	6839      	ldr	r1, [r7, #0]
 8002b18:	4843      	ldr	r0, [pc, #268]	; (8002c28 <Read_Sensor_20+0x15c>)
 8002b1a:	2364      	movs	r3, #100	; 0x64
 8002b1c:	f004 fb9e 	bl	800725c <HAL_UART_Transmit>
	   Data2 = (((Data[0] <<8)+ Data[1])<< 4)+(Data[3]>>3) ;

	  itoa(Data2, naam,10);
	  return Data2;
	  	}
	  return 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	e078      	b.n	8002c16 <Read_Sensor_20+0x14a>
	  Data[5] = sensoradres;
 8002b24:	2408      	movs	r4, #8
 8002b26:	193b      	adds	r3, r7, r4
 8002b28:	1dfa      	adds	r2, r7, #7
 8002b2a:	7812      	ldrb	r2, [r2, #0]
 8002b2c:	715a      	strb	r2, [r3, #5]
	  HAL_I2C_Master_Transmit(&hi2c1, sensAddress ,(uint8_t *)&Data[5], I2C_MEMADD_SIZE_8BIT, 1000);
 8002b2e:	193b      	adds	r3, r7, r4
 8002b30:	1d5a      	adds	r2, r3, #5
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	8819      	ldrh	r1, [r3, #0]
 8002b36:	483a      	ldr	r0, [pc, #232]	; (8002c20 <Read_Sensor_20+0x154>)
 8002b38:	23fa      	movs	r3, #250	; 0xfa
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f002 fa52 	bl	8004fe8 <HAL_I2C_Master_Transmit>
	  Data[0] = 0x00;
 8002b44:	193b      	adds	r3, r7, r4
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]
	  Data[1] = 0x00;
 8002b4a:	193b      	adds	r3, r7, r4
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	705a      	strb	r2, [r3, #1]
	  Data[2] = 0x00;
 8002b50:	193b      	adds	r3, r7, r4
 8002b52:	2200      	movs	r2, #0
 8002b54:	709a      	strb	r2, [r3, #2]
	  while( Data[0] == 0x00 ){
 8002b56:	e00a      	b.n	8002b6e <Read_Sensor_20+0xa2>
	  HAL_I2C_Master_Receive(&hi2c1, sensAddress, (uint8_t *)&Data[0], I2C_MEMADD_SIZE_8BIT, 1000);
 8002b58:	2308      	movs	r3, #8
 8002b5a:	18fa      	adds	r2, r7, r3
 8002b5c:	1d3b      	adds	r3, r7, #4
 8002b5e:	8819      	ldrh	r1, [r3, #0]
 8002b60:	482f      	ldr	r0, [pc, #188]	; (8002c20 <Read_Sensor_20+0x154>)
 8002b62:	23fa      	movs	r3, #250	; 0xfa
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f002 fb45 	bl	80051f8 <HAL_I2C_Master_Receive>
	  while( Data[0] == 0x00 ){
 8002b6e:	2308      	movs	r3, #8
 8002b70:	18fb      	adds	r3, r7, r3
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0ef      	beq.n	8002b58 <Read_Sensor_20+0x8c>
	  while( Data[1] == 0x00 ){
 8002b78:	e011      	b.n	8002b9e <Read_Sensor_20+0xd2>
	  	  HAL_I2C_Master_Receive(&hi2c1, sensAddress|= 0x01, (uint8_t *)&Data[1], I2C_MEMADD_SIZE_8BIT, 1000);
 8002b7a:	1d3b      	adds	r3, r7, #4
 8002b7c:	1d3a      	adds	r2, r7, #4
 8002b7e:	8812      	ldrh	r2, [r2, #0]
 8002b80:	2101      	movs	r1, #1
 8002b82:	430a      	orrs	r2, r1
 8002b84:	801a      	strh	r2, [r3, #0]
 8002b86:	2308      	movs	r3, #8
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	1d3b      	adds	r3, r7, #4
 8002b8e:	8819      	ldrh	r1, [r3, #0]
 8002b90:	4823      	ldr	r0, [pc, #140]	; (8002c20 <Read_Sensor_20+0x154>)
 8002b92:	23fa      	movs	r3, #250	; 0xfa
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f002 fb2d 	bl	80051f8 <HAL_I2C_Master_Receive>
	  while( Data[1] == 0x00 ){
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	785b      	ldrb	r3, [r3, #1]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0e8      	beq.n	8002b7a <Read_Sensor_20+0xae>
	  Data[5] = sensoradres;
 8002ba8:	2108      	movs	r1, #8
 8002baa:	187b      	adds	r3, r7, r1
 8002bac:	1dfa      	adds	r2, r7, #7
 8002bae:	7812      	ldrb	r2, [r2, #0]
 8002bb0:	715a      	strb	r2, [r3, #5]
	  HAL_I2C_Master_Transmit(&hi2c1, sensAddress ,(uint8_t *)&Data[5], I2C_MEMADD_SIZE_8BIT, 1000);
 8002bb2:	187b      	adds	r3, r7, r1
 8002bb4:	1d5a      	adds	r2, r3, #5
 8002bb6:	1d3b      	adds	r3, r7, #4
 8002bb8:	8819      	ldrh	r1, [r3, #0]
 8002bba:	4819      	ldr	r0, [pc, #100]	; (8002c20 <Read_Sensor_20+0x154>)
 8002bbc:	23fa      	movs	r3, #250	; 0xfa
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f002 fa10 	bl	8004fe8 <HAL_I2C_Master_Transmit>
	  while( Data[3] == 0x00 ){
 8002bc8:	e00b      	b.n	8002be2 <Read_Sensor_20+0x116>
	  	  	  HAL_I2C_Master_Receive(&hi2c1, sensAddress, (uint8_t *)&Data[3], I2C_MEMADD_SIZE_8BIT, 1000);
 8002bca:	2308      	movs	r3, #8
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	1cda      	adds	r2, r3, #3
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	8819      	ldrh	r1, [r3, #0]
 8002bd4:	4812      	ldr	r0, [pc, #72]	; (8002c20 <Read_Sensor_20+0x154>)
 8002bd6:	23fa      	movs	r3, #250	; 0xfa
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f002 fb0b 	bl	80051f8 <HAL_I2C_Master_Receive>
	  while( Data[3] == 0x00 ){
 8002be2:	2308      	movs	r3, #8
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	78db      	ldrb	r3, [r3, #3]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0ee      	beq.n	8002bca <Read_Sensor_20+0xfe>
	   Data2 = (((Data[0] <<8)+ Data[1])<< 4)+(Data[3]>>3) ;
 8002bec:	2108      	movs	r1, #8
 8002bee:	187b      	adds	r3, r7, r1
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	021b      	lsls	r3, r3, #8
 8002bf4:	187a      	adds	r2, r7, r1
 8002bf6:	7852      	ldrb	r2, [r2, #1]
 8002bf8:	189b      	adds	r3, r3, r2
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	187a      	adds	r2, r7, r1
 8002bfe:	78d2      	ldrb	r2, [r2, #3]
 8002c00:	08d2      	lsrs	r2, r2, #3
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	189b      	adds	r3, r3, r2
 8002c06:	617b      	str	r3, [r7, #20]
	  itoa(Data2, naam,10);
 8002c08:	6839      	ldr	r1, [r7, #0]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	220a      	movs	r2, #10
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f006 fa9e 	bl	8009150 <itoa>
	  return Data2;
 8002c14:	697b      	ldr	r3, [r7, #20]
}
 8002c16:	0018      	movs	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b007      	add	sp, #28
 8002c1c:	bd90      	pop	{r4, r7, pc}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	200012f4 	.word	0x200012f4
 8002c24:	0800b5f8 	.word	0x0800b5f8
 8002c28:	200013c0 	.word	0x200013c0

08002c2c <Read_Pressure_Sensor>:
 *  Created on: Oct 3, 2020
 *      Author: quinn
 */
#include "T_H_A_L_Sensor.h"

 double Read_Pressure_Sensor( char *naam ){
 8002c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c2e:	b099      	sub	sp, #100	; 0x64
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
	char Data[10];
	uint16_t dig_value_T1= Read_Sensor_16_unsigned( 0x88, Data, (0x76 << 1));
 8002c34:	2656      	movs	r6, #86	; 0x56
 8002c36:	2208      	movs	r2, #8
 8002c38:	18bb      	adds	r3, r7, r2
 8002c3a:	199c      	adds	r4, r3, r6
 8002c3c:	250c      	movs	r5, #12
 8002c3e:	18b9      	adds	r1, r7, r2
 8002c40:	194b      	adds	r3, r1, r5
 8002c42:	22ec      	movs	r2, #236	; 0xec
 8002c44:	0019      	movs	r1, r3
 8002c46:	2088      	movs	r0, #136	; 0x88
 8002c48:	f7ff fe26 	bl	8002898 <Read_Sensor_16_unsigned>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	8023      	strh	r3, [r4, #0]
	int16_t dig_value_T2= Read_Sensor_16_signed( 0x8A, Data, (0x76 << 1));
 8002c50:	2354      	movs	r3, #84	; 0x54
 8002c52:	2208      	movs	r2, #8
 8002c54:	18b9      	adds	r1, r7, r2
 8002c56:	18cc      	adds	r4, r1, r3
 8002c58:	0013      	movs	r3, r2
 8002c5a:	18f9      	adds	r1, r7, r3
 8002c5c:	194b      	adds	r3, r1, r5
 8002c5e:	22ec      	movs	r2, #236	; 0xec
 8002c60:	0019      	movs	r1, r3
 8002c62:	208a      	movs	r0, #138	; 0x8a
 8002c64:	f7ff fea4 	bl	80029b0 <Read_Sensor_16_signed>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	8023      	strh	r3, [r4, #0]
	int16_t dig_value_T3= Read_Sensor_16_signed( 0x8C, Data, (0x76 << 1));
 8002c6c:	2252      	movs	r2, #82	; 0x52
 8002c6e:	2308      	movs	r3, #8
 8002c70:	18f9      	adds	r1, r7, r3
 8002c72:	188c      	adds	r4, r1, r2
 8002c74:	18fa      	adds	r2, r7, r3
 8002c76:	1953      	adds	r3, r2, r5
 8002c78:	22ec      	movs	r2, #236	; 0xec
 8002c7a:	0019      	movs	r1, r3
 8002c7c:	208c      	movs	r0, #140	; 0x8c
 8002c7e:	f7ff fe97 	bl	80029b0 <Read_Sensor_16_signed>
 8002c82:	0003      	movs	r3, r0
 8002c84:	8023      	strh	r3, [r4, #0]
	uint16_t dig_value_P1= Read_Sensor_16_unsigned( 0x8E, Data, (0x76 << 1));
 8002c86:	2250      	movs	r2, #80	; 0x50
 8002c88:	2308      	movs	r3, #8
 8002c8a:	18f9      	adds	r1, r7, r3
 8002c8c:	188c      	adds	r4, r1, r2
 8002c8e:	18fa      	adds	r2, r7, r3
 8002c90:	1953      	adds	r3, r2, r5
 8002c92:	22ec      	movs	r2, #236	; 0xec
 8002c94:	0019      	movs	r1, r3
 8002c96:	208e      	movs	r0, #142	; 0x8e
 8002c98:	f7ff fdfe 	bl	8002898 <Read_Sensor_16_unsigned>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	8023      	strh	r3, [r4, #0]
	int16_t dig_value_P2= Read_Sensor_16_signed( 0x90, Data, (0x76 << 1));
 8002ca0:	214e      	movs	r1, #78	; 0x4e
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	18fa      	adds	r2, r7, r3
 8002ca6:	1854      	adds	r4, r2, r1
 8002ca8:	18fa      	adds	r2, r7, r3
 8002caa:	1953      	adds	r3, r2, r5
 8002cac:	22ec      	movs	r2, #236	; 0xec
 8002cae:	0019      	movs	r1, r3
 8002cb0:	2090      	movs	r0, #144	; 0x90
 8002cb2:	f7ff fe7d 	bl	80029b0 <Read_Sensor_16_signed>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	8023      	strh	r3, [r4, #0]
	int16_t dig_value_P3= Read_Sensor_16_signed( 0x92, Data, (0x76 << 1));
 8002cba:	204c      	movs	r0, #76	; 0x4c
 8002cbc:	2308      	movs	r3, #8
 8002cbe:	18fa      	adds	r2, r7, r3
 8002cc0:	1814      	adds	r4, r2, r0
 8002cc2:	18fa      	adds	r2, r7, r3
 8002cc4:	1953      	adds	r3, r2, r5
 8002cc6:	22ec      	movs	r2, #236	; 0xec
 8002cc8:	0019      	movs	r1, r3
 8002cca:	2092      	movs	r0, #146	; 0x92
 8002ccc:	f7ff fe70 	bl	80029b0 <Read_Sensor_16_signed>
 8002cd0:	0003      	movs	r3, r0
 8002cd2:	8023      	strh	r3, [r4, #0]
	int16_t dig_value_P4= Read_Sensor_16_signed( 0x94, Data, (0x76 << 1));
 8002cd4:	244a      	movs	r4, #74	; 0x4a
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	4694      	mov	ip, r2
 8002cda:	44bc      	add	ip, r7
 8002cdc:	4464      	add	r4, ip
 8002cde:	2308      	movs	r3, #8
 8002ce0:	18fa      	adds	r2, r7, r3
 8002ce2:	1953      	adds	r3, r2, r5
 8002ce4:	22ec      	movs	r2, #236	; 0xec
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	2094      	movs	r0, #148	; 0x94
 8002cea:	f7ff fe61 	bl	80029b0 <Read_Sensor_16_signed>
 8002cee:	0003      	movs	r3, r0
 8002cf0:	8023      	strh	r3, [r4, #0]
	int16_t dig_value_P5= Read_Sensor_16_signed( 0x96, Data, (0x76 << 1));
 8002cf2:	2448      	movs	r4, #72	; 0x48
 8002cf4:	2208      	movs	r2, #8
 8002cf6:	4694      	mov	ip, r2
 8002cf8:	44bc      	add	ip, r7
 8002cfa:	4464      	add	r4, ip
 8002cfc:	2308      	movs	r3, #8
 8002cfe:	18f9      	adds	r1, r7, r3
 8002d00:	194b      	adds	r3, r1, r5
 8002d02:	22ec      	movs	r2, #236	; 0xec
 8002d04:	0019      	movs	r1, r3
 8002d06:	2096      	movs	r0, #150	; 0x96
 8002d08:	f7ff fe52 	bl	80029b0 <Read_Sensor_16_signed>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	8023      	strh	r3, [r4, #0]
	int16_t dig_value_P6= Read_Sensor_16_signed( 0x98, Data, (0x76 << 1));
 8002d10:	2246      	movs	r2, #70	; 0x46
 8002d12:	2308      	movs	r3, #8
 8002d14:	18f9      	adds	r1, r7, r3
 8002d16:	188c      	adds	r4, r1, r2
 8002d18:	001a      	movs	r2, r3
 8002d1a:	18b9      	adds	r1, r7, r2
 8002d1c:	194b      	adds	r3, r1, r5
 8002d1e:	22ec      	movs	r2, #236	; 0xec
 8002d20:	0019      	movs	r1, r3
 8002d22:	2098      	movs	r0, #152	; 0x98
 8002d24:	f7ff fe44 	bl	80029b0 <Read_Sensor_16_signed>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	8023      	strh	r3, [r4, #0]
	int16_t dig_value_P7= Read_Sensor_16_signed( 0x9A, Data, (0x76 << 1));
 8002d2c:	2144      	movs	r1, #68	; 0x44
 8002d2e:	2208      	movs	r2, #8
 8002d30:	18bb      	adds	r3, r7, r2
 8002d32:	185c      	adds	r4, r3, r1
 8002d34:	18bb      	adds	r3, r7, r2
 8002d36:	195b      	adds	r3, r3, r5
 8002d38:	22ec      	movs	r2, #236	; 0xec
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	209a      	movs	r0, #154	; 0x9a
 8002d3e:	f7ff fe37 	bl	80029b0 <Read_Sensor_16_signed>
 8002d42:	0003      	movs	r3, r0
 8002d44:	8023      	strh	r3, [r4, #0]
	int16_t dig_value_P8= Read_Sensor_16_signed( 0x9C, Data, (0x76 << 1));
 8002d46:	2042      	movs	r0, #66	; 0x42
 8002d48:	2208      	movs	r2, #8
 8002d4a:	18bb      	adds	r3, r7, r2
 8002d4c:	181c      	adds	r4, r3, r0
 8002d4e:	18bb      	adds	r3, r7, r2
 8002d50:	195b      	adds	r3, r3, r5
 8002d52:	22ec      	movs	r2, #236	; 0xec
 8002d54:	0019      	movs	r1, r3
 8002d56:	209c      	movs	r0, #156	; 0x9c
 8002d58:	f7ff fe2a 	bl	80029b0 <Read_Sensor_16_signed>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	8023      	strh	r3, [r4, #0]
	int16_t dig_value_P9= Read_Sensor_16_signed( 0x9E, Data, (0x76 << 1));
 8002d60:	2340      	movs	r3, #64	; 0x40
 8002d62:	2208      	movs	r2, #8
 8002d64:	18b9      	adds	r1, r7, r2
 8002d66:	18cc      	adds	r4, r1, r3
 8002d68:	18bb      	adds	r3, r7, r2
 8002d6a:	195b      	adds	r3, r3, r5
 8002d6c:	22ec      	movs	r2, #236	; 0xec
 8002d6e:	0019      	movs	r1, r3
 8002d70:	209e      	movs	r0, #158	; 0x9e
 8002d72:	f7ff fe1d 	bl	80029b0 <Read_Sensor_16_signed>
 8002d76:	0003      	movs	r3, r0
 8002d78:	8023      	strh	r3, [r4, #0]
	int value1= Read_Sensor_20( 0xF7, Data, (0x76 << 1));
 8002d7a:	2208      	movs	r2, #8
 8002d7c:	0014      	movs	r4, r2
 8002d7e:	18bb      	adds	r3, r7, r2
 8002d80:	195b      	adds	r3, r3, r5
 8002d82:	22ec      	movs	r2, #236	; 0xec
 8002d84:	0019      	movs	r1, r3
 8002d86:	20f7      	movs	r0, #247	; 0xf7
 8002d88:	f7ff fea0 	bl	8002acc <Read_Sensor_20>
 8002d8c:	0003      	movs	r3, r0
 8002d8e:	647b      	str	r3, [r7, #68]	; 0x44
	int value2= Read_Sensor_20( 0xF, Data, (0x76 << 1));
 8002d90:	0023      	movs	r3, r4
 8002d92:	18fa      	adds	r2, r7, r3
 8002d94:	1953      	adds	r3, r2, r5
 8002d96:	22ec      	movs	r2, #236	; 0xec
 8002d98:	0019      	movs	r1, r3
 8002d9a:	200f      	movs	r0, #15
 8002d9c:	f7ff fe96 	bl	8002acc <Read_Sensor_20>
 8002da0:	0003      	movs	r3, r0
 8002da2:	643b      	str	r3, [r7, #64]	; 0x40

	double var1= ((value1/16384.0)-(dig_value_T1/1024.0))*dig_value_T2;
 8002da4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002da6:	f7ff f8a7 	bl	8001ef8 <__aeabi_i2d>
 8002daa:	2200      	movs	r2, #0
 8002dac:	4bf1      	ldr	r3, [pc, #964]	; (8003174 <Read_Pressure_Sensor+0x548>)
 8002dae:	f7fd fe8d 	bl	8000acc <__aeabi_ddiv>
 8002db2:	0003      	movs	r3, r0
 8002db4:	000c      	movs	r4, r1
 8002db6:	0025      	movs	r5, r4
 8002db8:	001c      	movs	r4, r3
 8002dba:	2308      	movs	r3, #8
 8002dbc:	18fa      	adds	r2, r7, r3
 8002dbe:	1993      	adds	r3, r2, r6
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f7ff f898 	bl	8001ef8 <__aeabi_i2d>
 8002dc8:	2200      	movs	r2, #0
 8002dca:	4beb      	ldr	r3, [pc, #940]	; (8003178 <Read_Pressure_Sensor+0x54c>)
 8002dcc:	f7fd fe7e 	bl	8000acc <__aeabi_ddiv>
 8002dd0:	0002      	movs	r2, r0
 8002dd2:	000b      	movs	r3, r1
 8002dd4:	0020      	movs	r0, r4
 8002dd6:	0029      	movs	r1, r5
 8002dd8:	f7fe fcf4 	bl	80017c4 <__aeabi_dsub>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	000c      	movs	r4, r1
 8002de0:	0025      	movs	r5, r4
 8002de2:	001c      	movs	r4, r3
 8002de4:	2354      	movs	r3, #84	; 0x54
 8002de6:	2208      	movs	r2, #8
 8002de8:	4694      	mov	ip, r2
 8002dea:	44bc      	add	ip, r7
 8002dec:	4463      	add	r3, ip
 8002dee:	2200      	movs	r2, #0
 8002df0:	5e9b      	ldrsh	r3, [r3, r2]
 8002df2:	0018      	movs	r0, r3
 8002df4:	f7ff f880 	bl	8001ef8 <__aeabi_i2d>
 8002df8:	0002      	movs	r2, r0
 8002dfa:	000b      	movs	r3, r1
 8002dfc:	0020      	movs	r0, r4
 8002dfe:	0029      	movs	r1, r5
 8002e00:	f7fe fa6e 	bl	80012e0 <__aeabi_dmul>
 8002e04:	0003      	movs	r3, r0
 8002e06:	000c      	movs	r4, r1
 8002e08:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e0a:	63fc      	str	r4, [r7, #60]	; 0x3c
	double var2= ((value1/131072.0)-(dig_value_T1/8192.0))*((value1/131072.0)-(dig_value_T1/8192.0)) *-1000 ;
 8002e0c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002e0e:	f7ff f873 	bl	8001ef8 <__aeabi_i2d>
 8002e12:	2200      	movs	r2, #0
 8002e14:	2382      	movs	r3, #130	; 0x82
 8002e16:	05db      	lsls	r3, r3, #23
 8002e18:	f7fd fe58 	bl	8000acc <__aeabi_ddiv>
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	000c      	movs	r4, r1
 8002e20:	0025      	movs	r5, r4
 8002e22:	001c      	movs	r4, r3
 8002e24:	2308      	movs	r3, #8
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	199b      	adds	r3, r3, r6
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f7ff f863 	bl	8001ef8 <__aeabi_i2d>
 8002e32:	2200      	movs	r2, #0
 8002e34:	4bd1      	ldr	r3, [pc, #836]	; (800317c <Read_Pressure_Sensor+0x550>)
 8002e36:	f7fd fe49 	bl	8000acc <__aeabi_ddiv>
 8002e3a:	0002      	movs	r2, r0
 8002e3c:	000b      	movs	r3, r1
 8002e3e:	0020      	movs	r0, r4
 8002e40:	0029      	movs	r1, r5
 8002e42:	f7fe fcbf 	bl	80017c4 <__aeabi_dsub>
 8002e46:	0003      	movs	r3, r0
 8002e48:	000c      	movs	r4, r1
 8002e4a:	0025      	movs	r5, r4
 8002e4c:	001c      	movs	r4, r3
 8002e4e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002e50:	f7ff f852 	bl	8001ef8 <__aeabi_i2d>
 8002e54:	2200      	movs	r2, #0
 8002e56:	2382      	movs	r3, #130	; 0x82
 8002e58:	05db      	lsls	r3, r3, #23
 8002e5a:	f7fd fe37 	bl	8000acc <__aeabi_ddiv>
 8002e5e:	0002      	movs	r2, r0
 8002e60:	000b      	movs	r3, r1
 8002e62:	603a      	str	r2, [r7, #0]
 8002e64:	607b      	str	r3, [r7, #4]
 8002e66:	2308      	movs	r3, #8
 8002e68:	18fa      	adds	r2, r7, r3
 8002e6a:	1993      	adds	r3, r2, r6
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f7ff f842 	bl	8001ef8 <__aeabi_i2d>
 8002e74:	2200      	movs	r2, #0
 8002e76:	4bc1      	ldr	r3, [pc, #772]	; (800317c <Read_Pressure_Sensor+0x550>)
 8002e78:	f7fd fe28 	bl	8000acc <__aeabi_ddiv>
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	000b      	movs	r3, r1
 8002e80:	6838      	ldr	r0, [r7, #0]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	f7fe fc9e 	bl	80017c4 <__aeabi_dsub>
 8002e88:	0002      	movs	r2, r0
 8002e8a:	000b      	movs	r3, r1
 8002e8c:	0020      	movs	r0, r4
 8002e8e:	0029      	movs	r1, r5
 8002e90:	f7fe fa26 	bl	80012e0 <__aeabi_dmul>
 8002e94:	0003      	movs	r3, r0
 8002e96:	000c      	movs	r4, r1
 8002e98:	0018      	movs	r0, r3
 8002e9a:	0021      	movs	r1, r4
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	4bb8      	ldr	r3, [pc, #736]	; (8003180 <Read_Pressure_Sensor+0x554>)
 8002ea0:	f7fe fa1e 	bl	80012e0 <__aeabi_dmul>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	000c      	movs	r4, r1
 8002ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8002eaa:	637c      	str	r4, [r7, #52]	; 0x34
	//double T= (var1+var2)/5120.0;
	double var3= var1+var2;
 8002eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002eb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002eb4:	f7fd faee 	bl	8000494 <__aeabi_dadd>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	000c      	movs	r4, r1
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ebe:	62fc      	str	r4, [r7, #44]	; 0x2c

	 var1= (var3/2.0)-64000.0;
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	05db      	lsls	r3, r3, #23
 8002ec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ec8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002eca:	f7fd fdff 	bl	8000acc <__aeabi_ddiv>
 8002ece:	0003      	movs	r3, r0
 8002ed0:	000c      	movs	r4, r1
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	0021      	movs	r1, r4
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	4baa      	ldr	r3, [pc, #680]	; (8003184 <Read_Pressure_Sensor+0x558>)
 8002eda:	f7fe fc73 	bl	80017c4 <__aeabi_dsub>
 8002ede:	0003      	movs	r3, r0
 8002ee0:	000c      	movs	r4, r1
 8002ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ee4:	63fc      	str	r4, [r7, #60]	; 0x3c
	var2= var1*var1 *dig_value_P6/32768.0;
 8002ee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002eec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002eee:	f7fe f9f7 	bl	80012e0 <__aeabi_dmul>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	000c      	movs	r4, r1
 8002ef6:	0025      	movs	r5, r4
 8002ef8:	001c      	movs	r4, r3
 8002efa:	2646      	movs	r6, #70	; 0x46
 8002efc:	2308      	movs	r3, #8
 8002efe:	18fa      	adds	r2, r7, r3
 8002f00:	1993      	adds	r3, r2, r6
 8002f02:	2600      	movs	r6, #0
 8002f04:	5f9b      	ldrsh	r3, [r3, r6]
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7fe fff6 	bl	8001ef8 <__aeabi_i2d>
 8002f0c:	0002      	movs	r2, r0
 8002f0e:	000b      	movs	r3, r1
 8002f10:	0020      	movs	r0, r4
 8002f12:	0029      	movs	r1, r5
 8002f14:	f7fe f9e4 	bl	80012e0 <__aeabi_dmul>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	000c      	movs	r4, r1
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	0021      	movs	r1, r4
 8002f20:	2200      	movs	r2, #0
 8002f22:	4b99      	ldr	r3, [pc, #612]	; (8003188 <Read_Pressure_Sensor+0x55c>)
 8002f24:	f7fd fdd2 	bl	8000acc <__aeabi_ddiv>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	000c      	movs	r4, r1
 8002f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f2e:	637c      	str	r4, [r7, #52]	; 0x34
	 var2= var2+ var1* dig_value_P5*2.0;
 8002f30:	2448      	movs	r4, #72	; 0x48
 8002f32:	2608      	movs	r6, #8
 8002f34:	19bb      	adds	r3, r7, r6
 8002f36:	191b      	adds	r3, r3, r4
 8002f38:	2500      	movs	r5, #0
 8002f3a:	5f5b      	ldrsh	r3, [r3, r5]
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f7fe ffdb 	bl	8001ef8 <__aeabi_i2d>
 8002f42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f46:	f7fe f9cb 	bl	80012e0 <__aeabi_dmul>
 8002f4a:	0003      	movs	r3, r0
 8002f4c:	000c      	movs	r4, r1
 8002f4e:	0018      	movs	r0, r3
 8002f50:	0021      	movs	r1, r4
 8002f52:	0002      	movs	r2, r0
 8002f54:	000b      	movs	r3, r1
 8002f56:	f7fd fa9d 	bl	8000494 <__aeabi_dadd>
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	000c      	movs	r4, r1
 8002f5e:	001a      	movs	r2, r3
 8002f60:	0023      	movs	r3, r4
 8002f62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f66:	f7fd fa95 	bl	8000494 <__aeabi_dadd>
 8002f6a:	0003      	movs	r3, r0
 8002f6c:	000c      	movs	r4, r1
 8002f6e:	633b      	str	r3, [r7, #48]	; 0x30
 8002f70:	637c      	str	r4, [r7, #52]	; 0x34
	var2 = (var2/4.0)+(dig_value_P4*65536.0);
 8002f72:	2200      	movs	r2, #0
 8002f74:	4b85      	ldr	r3, [pc, #532]	; (800318c <Read_Pressure_Sensor+0x560>)
 8002f76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f7a:	f7fd fda7 	bl	8000acc <__aeabi_ddiv>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	000c      	movs	r4, r1
 8002f82:	0025      	movs	r5, r4
 8002f84:	001c      	movs	r4, r3
 8002f86:	234a      	movs	r3, #74	; 0x4a
 8002f88:	2208      	movs	r2, #8
 8002f8a:	4694      	mov	ip, r2
 8002f8c:	44bc      	add	ip, r7
 8002f8e:	4463      	add	r3, ip
 8002f90:	2600      	movs	r6, #0
 8002f92:	5f9b      	ldrsh	r3, [r3, r6]
 8002f94:	0018      	movs	r0, r3
 8002f96:	f7fe ffaf 	bl	8001ef8 <__aeabi_i2d>
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	4b7c      	ldr	r3, [pc, #496]	; (8003190 <Read_Pressure_Sensor+0x564>)
 8002f9e:	f7fe f99f 	bl	80012e0 <__aeabi_dmul>
 8002fa2:	0002      	movs	r2, r0
 8002fa4:	000b      	movs	r3, r1
 8002fa6:	0020      	movs	r0, r4
 8002fa8:	0029      	movs	r1, r5
 8002faa:	f7fd fa73 	bl	8000494 <__aeabi_dadd>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	000c      	movs	r4, r1
 8002fb2:	633b      	str	r3, [r7, #48]	; 0x30
 8002fb4:	637c      	str	r4, [r7, #52]	; 0x34
	 var1= (dig_value_P3* var1*var1/524288.0+dig_value_P2*var1)/524288.0;
 8002fb6:	204c      	movs	r0, #76	; 0x4c
 8002fb8:	2608      	movs	r6, #8
 8002fba:	19bb      	adds	r3, r7, r6
 8002fbc:	181b      	adds	r3, r3, r0
 8002fbe:	2400      	movs	r4, #0
 8002fc0:	5f1b      	ldrsh	r3, [r3, r4]
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f7fe ff98 	bl	8001ef8 <__aeabi_i2d>
 8002fc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fcc:	f7fe f988 	bl	80012e0 <__aeabi_dmul>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	000c      	movs	r4, r1
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	0021      	movs	r1, r4
 8002fd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fdc:	f7fe f980 	bl	80012e0 <__aeabi_dmul>
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	000c      	movs	r4, r1
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	0021      	movs	r1, r4
 8002fe8:	2200      	movs	r2, #0
 8002fea:	4b6a      	ldr	r3, [pc, #424]	; (8003194 <Read_Pressure_Sensor+0x568>)
 8002fec:	f7fd fd6e 	bl	8000acc <__aeabi_ddiv>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	000c      	movs	r4, r1
 8002ff4:	0025      	movs	r5, r4
 8002ff6:	001c      	movs	r4, r3
 8002ff8:	214e      	movs	r1, #78	; 0x4e
 8002ffa:	19bb      	adds	r3, r7, r6
 8002ffc:	185b      	adds	r3, r3, r1
 8002ffe:	2600      	movs	r6, #0
 8003000:	5f9b      	ldrsh	r3, [r3, r6]
 8003002:	0018      	movs	r0, r3
 8003004:	f7fe ff78 	bl	8001ef8 <__aeabi_i2d>
 8003008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800300a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800300c:	f7fe f968 	bl	80012e0 <__aeabi_dmul>
 8003010:	0002      	movs	r2, r0
 8003012:	000b      	movs	r3, r1
 8003014:	0020      	movs	r0, r4
 8003016:	0029      	movs	r1, r5
 8003018:	f7fd fa3c 	bl	8000494 <__aeabi_dadd>
 800301c:	0003      	movs	r3, r0
 800301e:	000c      	movs	r4, r1
 8003020:	0018      	movs	r0, r3
 8003022:	0021      	movs	r1, r4
 8003024:	2200      	movs	r2, #0
 8003026:	4b5b      	ldr	r3, [pc, #364]	; (8003194 <Read_Pressure_Sensor+0x568>)
 8003028:	f7fd fd50 	bl	8000acc <__aeabi_ddiv>
 800302c:	0003      	movs	r3, r0
 800302e:	000c      	movs	r4, r1
 8003030:	63bb      	str	r3, [r7, #56]	; 0x38
 8003032:	63fc      	str	r4, [r7, #60]	; 0x3c
	 var1=(1.0+var1/32768)*dig_value_P1;
 8003034:	2200      	movs	r2, #0
 8003036:	4b54      	ldr	r3, [pc, #336]	; (8003188 <Read_Pressure_Sensor+0x55c>)
 8003038:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800303a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800303c:	f7fd fd46 	bl	8000acc <__aeabi_ddiv>
 8003040:	0003      	movs	r3, r0
 8003042:	000c      	movs	r4, r1
 8003044:	0018      	movs	r0, r3
 8003046:	0021      	movs	r1, r4
 8003048:	2200      	movs	r2, #0
 800304a:	4b53      	ldr	r3, [pc, #332]	; (8003198 <Read_Pressure_Sensor+0x56c>)
 800304c:	f7fd fa22 	bl	8000494 <__aeabi_dadd>
 8003050:	0003      	movs	r3, r0
 8003052:	000c      	movs	r4, r1
 8003054:	0025      	movs	r5, r4
 8003056:	001c      	movs	r4, r3
 8003058:	2250      	movs	r2, #80	; 0x50
 800305a:	2608      	movs	r6, #8
 800305c:	19bb      	adds	r3, r7, r6
 800305e:	189b      	adds	r3, r3, r2
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	0018      	movs	r0, r3
 8003064:	f7fe ff48 	bl	8001ef8 <__aeabi_i2d>
 8003068:	0002      	movs	r2, r0
 800306a:	000b      	movs	r3, r1
 800306c:	0020      	movs	r0, r4
 800306e:	0029      	movs	r1, r5
 8003070:	f7fe f936 	bl	80012e0 <__aeabi_dmul>
 8003074:	0003      	movs	r3, r0
 8003076:	000c      	movs	r4, r1
 8003078:	63bb      	str	r3, [r7, #56]	; 0x38
 800307a:	63fc      	str	r4, [r7, #60]	; 0x3c
	 double P = 1048576- value2;
 800307c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800307e:	2280      	movs	r2, #128	; 0x80
 8003080:	0352      	lsls	r2, r2, #13
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	0018      	movs	r0, r3
 8003086:	f7fe ff37 	bl	8001ef8 <__aeabi_i2d>
 800308a:	0003      	movs	r3, r0
 800308c:	000c      	movs	r4, r1
 800308e:	623b      	str	r3, [r7, #32]
 8003090:	627c      	str	r4, [r7, #36]	; 0x24
	 P= (P-(var2/4096))*6250/var1;
 8003092:	2200      	movs	r2, #0
 8003094:	4b41      	ldr	r3, [pc, #260]	; (800319c <Read_Pressure_Sensor+0x570>)
 8003096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003098:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800309a:	f7fd fd17 	bl	8000acc <__aeabi_ddiv>
 800309e:	0003      	movs	r3, r0
 80030a0:	000c      	movs	r4, r1
 80030a2:	001a      	movs	r2, r3
 80030a4:	0023      	movs	r3, r4
 80030a6:	6a38      	ldr	r0, [r7, #32]
 80030a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030aa:	f7fe fb8b 	bl	80017c4 <__aeabi_dsub>
 80030ae:	0003      	movs	r3, r0
 80030b0:	000c      	movs	r4, r1
 80030b2:	0018      	movs	r0, r3
 80030b4:	0021      	movs	r1, r4
 80030b6:	2200      	movs	r2, #0
 80030b8:	4b39      	ldr	r3, [pc, #228]	; (80031a0 <Read_Pressure_Sensor+0x574>)
 80030ba:	f7fe f911 	bl	80012e0 <__aeabi_dmul>
 80030be:	0003      	movs	r3, r0
 80030c0:	000c      	movs	r4, r1
 80030c2:	0018      	movs	r0, r3
 80030c4:	0021      	movs	r1, r4
 80030c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ca:	f7fd fcff 	bl	8000acc <__aeabi_ddiv>
 80030ce:	0003      	movs	r3, r0
 80030d0:	000c      	movs	r4, r1
 80030d2:	623b      	str	r3, [r7, #32]
 80030d4:	627c      	str	r4, [r7, #36]	; 0x24
	 var1= dig_value_P9*P*P/2147483648.0;
 80030d6:	2340      	movs	r3, #64	; 0x40
 80030d8:	2208      	movs	r2, #8
 80030da:	4694      	mov	ip, r2
 80030dc:	44bc      	add	ip, r7
 80030de:	4463      	add	r3, ip
 80030e0:	2200      	movs	r2, #0
 80030e2:	5e9b      	ldrsh	r3, [r3, r2]
 80030e4:	0018      	movs	r0, r3
 80030e6:	f7fe ff07 	bl	8001ef8 <__aeabi_i2d>
 80030ea:	6a3a      	ldr	r2, [r7, #32]
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	f7fe f8f7 	bl	80012e0 <__aeabi_dmul>
 80030f2:	0003      	movs	r3, r0
 80030f4:	000c      	movs	r4, r1
 80030f6:	0018      	movs	r0, r3
 80030f8:	0021      	movs	r1, r4
 80030fa:	6a3a      	ldr	r2, [r7, #32]
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	f7fe f8ef 	bl	80012e0 <__aeabi_dmul>
 8003102:	0003      	movs	r3, r0
 8003104:	000c      	movs	r4, r1
 8003106:	0018      	movs	r0, r3
 8003108:	0021      	movs	r1, r4
 800310a:	2200      	movs	r2, #0
 800310c:	4b25      	ldr	r3, [pc, #148]	; (80031a4 <Read_Pressure_Sensor+0x578>)
 800310e:	f7fd fcdd 	bl	8000acc <__aeabi_ddiv>
 8003112:	0003      	movs	r3, r0
 8003114:	000c      	movs	r4, r1
 8003116:	63bb      	str	r3, [r7, #56]	; 0x38
 8003118:	63fc      	str	r4, [r7, #60]	; 0x3c
	 var2= P*dig_value_P8/32768;
 800311a:	2042      	movs	r0, #66	; 0x42
 800311c:	19bb      	adds	r3, r7, r6
 800311e:	181b      	adds	r3, r3, r0
 8003120:	2200      	movs	r2, #0
 8003122:	5e9b      	ldrsh	r3, [r3, r2]
 8003124:	0018      	movs	r0, r3
 8003126:	f7fe fee7 	bl	8001ef8 <__aeabi_i2d>
 800312a:	6a3a      	ldr	r2, [r7, #32]
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	f7fe f8d7 	bl	80012e0 <__aeabi_dmul>
 8003132:	0003      	movs	r3, r0
 8003134:	000c      	movs	r4, r1
 8003136:	0018      	movs	r0, r3
 8003138:	0021      	movs	r1, r4
 800313a:	2200      	movs	r2, #0
 800313c:	4b12      	ldr	r3, [pc, #72]	; (8003188 <Read_Pressure_Sensor+0x55c>)
 800313e:	f7fd fcc5 	bl	8000acc <__aeabi_ddiv>
 8003142:	0003      	movs	r3, r0
 8003144:	000c      	movs	r4, r1
 8003146:	633b      	str	r3, [r7, #48]	; 0x30
 8003148:	637c      	str	r4, [r7, #52]	; 0x34
	 P = P+(var1+var2+dig_value_P7)/16;
 800314a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800314c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003150:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003152:	f7fd f99f 	bl	8000494 <__aeabi_dadd>
 8003156:	0003      	movs	r3, r0
 8003158:	000c      	movs	r4, r1
 800315a:	0025      	movs	r5, r4
 800315c:	001c      	movs	r4, r3
 800315e:	2144      	movs	r1, #68	; 0x44
 8003160:	19bb      	adds	r3, r7, r6
 8003162:	185b      	adds	r3, r3, r1
 8003164:	2200      	movs	r2, #0
 8003166:	5e9b      	ldrsh	r3, [r3, r2]
 8003168:	0018      	movs	r0, r3
 800316a:	f7fe fec5 	bl	8001ef8 <__aeabi_i2d>
 800316e:	0002      	movs	r2, r0
 8003170:	000b      	movs	r3, r1
 8003172:	e019      	b.n	80031a8 <Read_Pressure_Sensor+0x57c>
 8003174:	40d00000 	.word	0x40d00000
 8003178:	40900000 	.word	0x40900000
 800317c:	40c00000 	.word	0x40c00000
 8003180:	c08f4000 	.word	0xc08f4000
 8003184:	40ef4000 	.word	0x40ef4000
 8003188:	40e00000 	.word	0x40e00000
 800318c:	40100000 	.word	0x40100000
 8003190:	40f00000 	.word	0x40f00000
 8003194:	41200000 	.word	0x41200000
 8003198:	3ff00000 	.word	0x3ff00000
 800319c:	40b00000 	.word	0x40b00000
 80031a0:	40b86a00 	.word	0x40b86a00
 80031a4:	41e00000 	.word	0x41e00000
 80031a8:	0020      	movs	r0, r4
 80031aa:	0029      	movs	r1, r5
 80031ac:	f7fd f972 	bl	8000494 <__aeabi_dadd>
 80031b0:	0003      	movs	r3, r0
 80031b2:	000c      	movs	r4, r1
 80031b4:	0018      	movs	r0, r3
 80031b6:	0021      	movs	r1, r4
 80031b8:	2200      	movs	r2, #0
 80031ba:	4b0f      	ldr	r3, [pc, #60]	; (80031f8 <Read_Pressure_Sensor+0x5cc>)
 80031bc:	f7fd fc86 	bl	8000acc <__aeabi_ddiv>
 80031c0:	0003      	movs	r3, r0
 80031c2:	000c      	movs	r4, r1
 80031c4:	001a      	movs	r2, r3
 80031c6:	0023      	movs	r3, r4
 80031c8:	6a38      	ldr	r0, [r7, #32]
 80031ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031cc:	f7fd f962 	bl	8000494 <__aeabi_dadd>
 80031d0:	0003      	movs	r3, r0
 80031d2:	000c      	movs	r4, r1
 80031d4:	623b      	str	r3, [r7, #32]
 80031d6:	627c      	str	r4, [r7, #36]	; 0x24
	itoa(P, naam,10);
 80031d8:	6a38      	ldr	r0, [r7, #32]
 80031da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031dc:	f7fe fe56 	bl	8001e8c <__aeabi_d2iz>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	220a      	movs	r2, #10
 80031e4:	0019      	movs	r1, r3
 80031e6:	f005 ffb3 	bl	8009150 <itoa>
	return P;
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	6a7c      	ldr	r4, [r7, #36]	; 0x24
	}
 80031ee:	0018      	movs	r0, r3
 80031f0:	0021      	movs	r1, r4
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b019      	add	sp, #100	; 0x64
 80031f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031f8:	40300000 	.word	0x40300000

080031fc <Tem_Sensor>:


 double Tem_Sensor(char *naam){
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
	 double T =((175.72 * ((Read_Sensor_16_signed( 0xF3, naam, (0x40 << 1)))) /(65536)) - 46.85);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2280      	movs	r2, #128	; 0x80
 8003208:	0019      	movs	r1, r3
 800320a:	20f3      	movs	r0, #243	; 0xf3
 800320c:	f7ff fbd0 	bl	80029b0 <Read_Sensor_16_signed>
 8003210:	0003      	movs	r3, r0
 8003212:	0018      	movs	r0, r3
 8003214:	f7fe fe70 	bl	8001ef8 <__aeabi_i2d>
 8003218:	4a13      	ldr	r2, [pc, #76]	; (8003268 <Tem_Sensor+0x6c>)
 800321a:	4b14      	ldr	r3, [pc, #80]	; (800326c <Tem_Sensor+0x70>)
 800321c:	f7fe f860 	bl	80012e0 <__aeabi_dmul>
 8003220:	0003      	movs	r3, r0
 8003222:	000c      	movs	r4, r1
 8003224:	0018      	movs	r0, r3
 8003226:	0021      	movs	r1, r4
 8003228:	2200      	movs	r2, #0
 800322a:	4b11      	ldr	r3, [pc, #68]	; (8003270 <Tem_Sensor+0x74>)
 800322c:	f7fd fc4e 	bl	8000acc <__aeabi_ddiv>
 8003230:	0003      	movs	r3, r0
 8003232:	000c      	movs	r4, r1
 8003234:	0018      	movs	r0, r3
 8003236:	0021      	movs	r1, r4
 8003238:	4a0e      	ldr	r2, [pc, #56]	; (8003274 <Tem_Sensor+0x78>)
 800323a:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <Tem_Sensor+0x7c>)
 800323c:	f7fe fac2 	bl	80017c4 <__aeabi_dsub>
 8003240:	0003      	movs	r3, r0
 8003242:	000c      	movs	r4, r1
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	60fc      	str	r4, [r7, #12]
 	 itoa(T, naam,10);
 8003248:	68b8      	ldr	r0, [r7, #8]
 800324a:	68f9      	ldr	r1, [r7, #12]
 800324c:	f7fe fe1e 	bl	8001e8c <__aeabi_d2iz>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	220a      	movs	r2, #10
 8003254:	0019      	movs	r1, r3
 8003256:	f005 ff7b 	bl	8009150 <itoa>
 	 return T ;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	68fc      	ldr	r4, [r7, #12]
 }
 800325e:	0018      	movs	r0, r3
 8003260:	0021      	movs	r1, r4
 8003262:	46bd      	mov	sp, r7
 8003264:	b005      	add	sp, #20
 8003266:	bd90      	pop	{r4, r7, pc}
 8003268:	3d70a3d7 	.word	0x3d70a3d7
 800326c:	4065f70a 	.word	0x4065f70a
 8003270:	40f00000 	.word	0x40f00000
 8003274:	cccccccd 	.word	0xcccccccd
 8003278:	40476ccc 	.word	0x40476ccc

0800327c <Hum_Sensor>:
 double Hum_Sensor(char *naam){
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
	 double H=(((125* (Read_Sensor_16_unsigned( 0xF5, naam, (0x40 << 1)))) / 65536)- 6);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2280      	movs	r2, #128	; 0x80
 8003288:	0019      	movs	r1, r3
 800328a:	20f5      	movs	r0, #245	; 0xf5
 800328c:	f7ff fb04 	bl	8002898 <Read_Sensor_16_unsigned>
 8003290:	0003      	movs	r3, r0
 8003292:	001a      	movs	r2, r3
 8003294:	0013      	movs	r3, r2
 8003296:	015b      	lsls	r3, r3, #5
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	189b      	adds	r3, r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	da02      	bge.n	80032a8 <Hum_Sensor+0x2c>
 80032a2:	4a0e      	ldr	r2, [pc, #56]	; (80032dc <Hum_Sensor+0x60>)
 80032a4:	4694      	mov	ip, r2
 80032a6:	4463      	add	r3, ip
 80032a8:	141b      	asrs	r3, r3, #16
 80032aa:	3b06      	subs	r3, #6
 80032ac:	0018      	movs	r0, r3
 80032ae:	f7fe fe23 	bl	8001ef8 <__aeabi_i2d>
 80032b2:	0003      	movs	r3, r0
 80032b4:	000c      	movs	r4, r1
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	60fc      	str	r4, [r7, #12]
	 itoa(H, naam,10);
 80032ba:	68b8      	ldr	r0, [r7, #8]
 80032bc:	68f9      	ldr	r1, [r7, #12]
 80032be:	f7fe fde5 	bl	8001e8c <__aeabi_d2iz>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	220a      	movs	r2, #10
 80032c6:	0019      	movs	r1, r3
 80032c8:	f005 ff42 	bl	8009150 <itoa>
	 return H;
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	68fc      	ldr	r4, [r7, #12]
 }
 80032d0:	0018      	movs	r0, r3
 80032d2:	0021      	movs	r1, r4
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b005      	add	sp, #20
 80032d8:	bd90      	pop	{r4, r7, pc}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	0000ffff 	.word	0x0000ffff

080032e0 <LUX_Sensor>:
 double LUX_Sensor(){
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
	 uint16_t analogValue;
	 double returnValue = 0.0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	2400      	movs	r4, #0
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	617c      	str	r4, [r7, #20]
	 double voltage = 0.0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	2400      	movs	r4, #0
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	60fc      	str	r4, [r7, #12]

	 HAL_ADC_Start(&hadc);
 80032f6:	4b24      	ldr	r3, [pc, #144]	; (8003388 <LUX_Sensor+0xa8>)
 80032f8:	0018      	movs	r0, r3
 80032fa:	f001 f8b7 	bl	800446c <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80032fe:	2301      	movs	r3, #1
 8003300:	425a      	negs	r2, r3
 8003302:	4b21      	ldr	r3, [pc, #132]	; (8003388 <LUX_Sensor+0xa8>)
 8003304:	0011      	movs	r1, r2
 8003306:	0018      	movs	r0, r3
 8003308:	f001 f904 	bl	8004514 <HAL_ADC_PollForConversion>
	 analogValue = HAL_ADC_GetValue(&hadc);
 800330c:	4b1e      	ldr	r3, [pc, #120]	; (8003388 <LUX_Sensor+0xa8>)
 800330e:	0018      	movs	r0, r3
 8003310:	f001 f992 	bl	8004638 <HAL_ADC_GetValue>
 8003314:	0002      	movs	r2, r0
 8003316:	1dbb      	adds	r3, r7, #6
 8003318:	801a      	strh	r2, [r3, #0]

	 voltage = 3.3- (((double) analogValue / 4095) * 3.3);
 800331a:	1dbb      	adds	r3, r7, #6
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	0018      	movs	r0, r3
 8003320:	f7fe fe24 	bl	8001f6c <__aeabi_ui2d>
 8003324:	2200      	movs	r2, #0
 8003326:	4b19      	ldr	r3, [pc, #100]	; (800338c <LUX_Sensor+0xac>)
 8003328:	f7fd fbd0 	bl	8000acc <__aeabi_ddiv>
 800332c:	0003      	movs	r3, r0
 800332e:	000c      	movs	r4, r1
 8003330:	0018      	movs	r0, r3
 8003332:	0021      	movs	r1, r4
 8003334:	4a16      	ldr	r2, [pc, #88]	; (8003390 <LUX_Sensor+0xb0>)
 8003336:	4b17      	ldr	r3, [pc, #92]	; (8003394 <LUX_Sensor+0xb4>)
 8003338:	f7fd ffd2 	bl	80012e0 <__aeabi_dmul>
 800333c:	0003      	movs	r3, r0
 800333e:	000c      	movs	r4, r1
 8003340:	001a      	movs	r2, r3
 8003342:	0023      	movs	r3, r4
 8003344:	4812      	ldr	r0, [pc, #72]	; (8003390 <LUX_Sensor+0xb0>)
 8003346:	4913      	ldr	r1, [pc, #76]	; (8003394 <LUX_Sensor+0xb4>)
 8003348:	f7fe fa3c 	bl	80017c4 <__aeabi_dsub>
 800334c:	0003      	movs	r3, r0
 800334e:	000c      	movs	r4, r1
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	60fc      	str	r4, [r7, #12]

	 returnValue = ( 250.0 / voltage ) - 50.0;
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2000      	movs	r0, #0
 800335a:	490f      	ldr	r1, [pc, #60]	; (8003398 <LUX_Sensor+0xb8>)
 800335c:	f7fd fbb6 	bl	8000acc <__aeabi_ddiv>
 8003360:	0003      	movs	r3, r0
 8003362:	000c      	movs	r4, r1
 8003364:	0018      	movs	r0, r3
 8003366:	0021      	movs	r1, r4
 8003368:	2200      	movs	r2, #0
 800336a:	4b0c      	ldr	r3, [pc, #48]	; (800339c <LUX_Sensor+0xbc>)
 800336c:	f7fe fa2a 	bl	80017c4 <__aeabi_dsub>
 8003370:	0003      	movs	r3, r0
 8003372:	000c      	movs	r4, r1
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	617c      	str	r4, [r7, #20]
	 return returnValue;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	697c      	ldr	r4, [r7, #20]
 }
 800337c:	0018      	movs	r0, r3
 800337e:	0021      	movs	r1, r4
 8003380:	46bd      	mov	sp, r7
 8003382:	b007      	add	sp, #28
 8003384:	bd90      	pop	{r4, r7, pc}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	20001440 	.word	0x20001440
 800338c:	40affe00 	.word	0x40affe00
 8003390:	66666666 	.word	0x66666666
 8003394:	400a6666 	.word	0x400a6666
 8003398:	406f4000 	.word	0x406f4000
 800339c:	40490000 	.word	0x40490000

080033a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4a06      	ldr	r2, [pc, #24]	; (80033c8 <vApplicationGetIdleTaskMemory+0x28>)
 80033b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	4a05      	ldr	r2, [pc, #20]	; (80033cc <vApplicationGetIdleTaskMemory+0x2c>)
 80033b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2280      	movs	r2, #128	; 0x80
 80033bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b004      	add	sp, #16
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	2000033c 	.word	0x2000033c
 80033cc:	20000390 	.word	0x20000390

080033d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033d0:	b5b0      	push	{r4, r5, r7, lr}
 80033d2:	b096      	sub	sp, #88	; 0x58
 80033d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033d6:	f000 feb7 	bl	8004148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033da:	f000 f84d 	bl	8003478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033de:	f000 fa55 	bl	800388c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80033e2:	f000 fa23 	bl	800382c <MX_USART2_UART_Init>
  MX_ADC_Init();
 80033e6:	f000 f8bb 	bl	8003560 <MX_ADC_Init>
  MX_I2C1_Init();
 80033ea:	f000 f915 	bl	8003618 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80033ee:	f000 f9ed 	bl	80037cc <MX_USART1_UART_Init>
  MX_RTC_Init();
 80033f2:	f000 f951 	bl	8003698 <MX_RTC_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 256);
 80033f6:	213c      	movs	r1, #60	; 0x3c
 80033f8:	187b      	adds	r3, r7, r1
 80033fa:	4a19      	ldr	r2, [pc, #100]	; (8003460 <main+0x90>)
 80033fc:	ca31      	ldmia	r2!, {r0, r4, r5}
 80033fe:	c331      	stmia	r3!, {r0, r4, r5}
 8003400:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003402:	c331      	stmia	r3!, {r0, r4, r5}
 8003404:	6812      	ldr	r2, [r2, #0]
 8003406:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003408:	187b      	adds	r3, r7, r1
 800340a:	2100      	movs	r1, #0
 800340c:	0018      	movs	r0, r3
 800340e:	f004 fe38 	bl	8008082 <osThreadCreate>
 8003412:	0002      	movs	r2, r0
 8003414:	4b13      	ldr	r3, [pc, #76]	; (8003464 <main+0x94>)
 8003416:	601a      	str	r2, [r3, #0]

  /* definition and creation of Read_T_H_A_L_Se */
  osThreadDef(Read_T_H_A_L_Se, ReadSensors, osPriorityNormal, 0, 128);
 8003418:	2120      	movs	r1, #32
 800341a:	187b      	adds	r3, r7, r1
 800341c:	4a12      	ldr	r2, [pc, #72]	; (8003468 <main+0x98>)
 800341e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003420:	c331      	stmia	r3!, {r0, r4, r5}
 8003422:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003424:	c331      	stmia	r3!, {r0, r4, r5}
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	601a      	str	r2, [r3, #0]
  Read_T_H_A_L_SeHandle = osThreadCreate(osThread(Read_T_H_A_L_Se), NULL);
 800342a:	187b      	adds	r3, r7, r1
 800342c:	2100      	movs	r1, #0
 800342e:	0018      	movs	r0, r3
 8003430:	f004 fe27 	bl	8008082 <osThreadCreate>
 8003434:	0002      	movs	r2, r0
 8003436:	4b0d      	ldr	r3, [pc, #52]	; (800346c <main+0x9c>)
 8003438:	601a      	str	r2, [r3, #0]

  /* definition and creation of ConnectToESP */
  osThreadDef(ConnectToESP, ConnectToServer, osPriorityAboveNormal, 0, 256);
 800343a:	1d3b      	adds	r3, r7, #4
 800343c:	4a0c      	ldr	r2, [pc, #48]	; (8003470 <main+0xa0>)
 800343e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003440:	c313      	stmia	r3!, {r0, r1, r4}
 8003442:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003444:	c313      	stmia	r3!, {r0, r1, r4}
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	601a      	str	r2, [r3, #0]
  ConnectToESPHandle = osThreadCreate(osThread(ConnectToESP), NULL);
 800344a:	1d3b      	adds	r3, r7, #4
 800344c:	2100      	movs	r1, #0
 800344e:	0018      	movs	r0, r3
 8003450:	f004 fe17 	bl	8008082 <osThreadCreate>
 8003454:	0002      	movs	r2, r0
 8003456:	4b07      	ldr	r3, [pc, #28]	; (8003474 <main+0xa4>)
 8003458:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800345a:	f004 fe0a 	bl	8008072 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800345e:	e7fe      	b.n	800345e <main+0x8e>
 8003460:	0800b60c 	.word	0x0800b60c
 8003464:	20001548 	.word	0x20001548
 8003468:	0800b638 	.word	0x0800b638
 800346c:	2000154c 	.word	0x2000154c
 8003470:	0800b664 	.word	0x0800b664
 8003474:	20001890 	.word	0x20001890

08003478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003478:	b590      	push	{r4, r7, lr}
 800347a:	b095      	sub	sp, #84	; 0x54
 800347c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800347e:	2420      	movs	r4, #32
 8003480:	193b      	adds	r3, r7, r4
 8003482:	0018      	movs	r0, r3
 8003484:	2330      	movs	r3, #48	; 0x30
 8003486:	001a      	movs	r2, r3
 8003488:	2100      	movs	r1, #0
 800348a:	f005 fe6e 	bl	800916a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800348e:	2310      	movs	r3, #16
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	0018      	movs	r0, r3
 8003494:	2310      	movs	r3, #16
 8003496:	001a      	movs	r2, r3
 8003498:	2100      	movs	r1, #0
 800349a:	f005 fe66 	bl	800916a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800349e:	003b      	movs	r3, r7
 80034a0:	0018      	movs	r0, r3
 80034a2:	2310      	movs	r3, #16
 80034a4:	001a      	movs	r2, r3
 80034a6:	2100      	movs	r1, #0
 80034a8:	f005 fe5f 	bl	800916a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80034ac:	0021      	movs	r1, r4
 80034ae:	187b      	adds	r3, r7, r1
 80034b0:	221a      	movs	r2, #26
 80034b2:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034b4:	187b      	adds	r3, r7, r1
 80034b6:	2201      	movs	r2, #1
 80034b8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80034ba:	187b      	adds	r3, r7, r1
 80034bc:	2201      	movs	r2, #1
 80034be:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034c0:	187b      	adds	r3, r7, r1
 80034c2:	2210      	movs	r2, #16
 80034c4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80034c6:	187b      	adds	r3, r7, r1
 80034c8:	2210      	movs	r2, #16
 80034ca:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80034cc:	187b      	adds	r3, r7, r1
 80034ce:	2201      	movs	r2, #1
 80034d0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034d2:	187b      	adds	r3, r7, r1
 80034d4:	2202      	movs	r2, #2
 80034d6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80034d8:	187b      	adds	r3, r7, r1
 80034da:	2200      	movs	r2, #0
 80034dc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80034de:	187b      	adds	r3, r7, r1
 80034e0:	22a0      	movs	r2, #160	; 0xa0
 80034e2:	0392      	lsls	r2, r2, #14
 80034e4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80034e6:	187b      	adds	r3, r7, r1
 80034e8:	2200      	movs	r2, #0
 80034ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034ec:	187b      	adds	r3, r7, r1
 80034ee:	0018      	movs	r0, r3
 80034f0:	f002 fb52 	bl	8005b98 <HAL_RCC_OscConfig>
 80034f4:	1e03      	subs	r3, r0, #0
 80034f6:	d001      	beq.n	80034fc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80034f8:	f000 fb9e 	bl	8003c38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034fc:	2110      	movs	r1, #16
 80034fe:	187b      	adds	r3, r7, r1
 8003500:	2207      	movs	r2, #7
 8003502:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003504:	187b      	adds	r3, r7, r1
 8003506:	2202      	movs	r2, #2
 8003508:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800350a:	187b      	adds	r3, r7, r1
 800350c:	2200      	movs	r2, #0
 800350e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003510:	187b      	adds	r3, r7, r1
 8003512:	2200      	movs	r2, #0
 8003514:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003516:	187b      	adds	r3, r7, r1
 8003518:	2101      	movs	r1, #1
 800351a:	0018      	movs	r0, r3
 800351c:	f002 fe58 	bl	80061d0 <HAL_RCC_ClockConfig>
 8003520:	1e03      	subs	r3, r0, #0
 8003522:	d001      	beq.n	8003528 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8003524:	f000 fb88 	bl	8003c38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8003528:	003b      	movs	r3, r7
 800352a:	4a0c      	ldr	r2, [pc, #48]	; (800355c <SystemClock_Config+0xe4>)
 800352c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800352e:	003b      	movs	r3, r7
 8003530:	2200      	movs	r2, #0
 8003532:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003534:	003b      	movs	r3, r7
 8003536:	2200      	movs	r2, #0
 8003538:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800353a:	003b      	movs	r3, r7
 800353c:	2280      	movs	r2, #128	; 0x80
 800353e:	0092      	lsls	r2, r2, #2
 8003540:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003542:	003b      	movs	r3, r7
 8003544:	0018      	movs	r0, r3
 8003546:	f002 ffbf 	bl	80064c8 <HAL_RCCEx_PeriphCLKConfig>
 800354a:	1e03      	subs	r3, r0, #0
 800354c:	d001      	beq.n	8003552 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800354e:	f000 fb73 	bl	8003c38 <Error_Handler>
  }
}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	46bd      	mov	sp, r7
 8003556:	b015      	add	sp, #84	; 0x54
 8003558:	bd90      	pop	{r4, r7, pc}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	00010021 	.word	0x00010021

08003560 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003566:	1d3b      	adds	r3, r7, #4
 8003568:	0018      	movs	r0, r3
 800356a:	230c      	movs	r3, #12
 800356c:	001a      	movs	r2, r3
 800356e:	2100      	movs	r1, #0
 8003570:	f005 fdfb 	bl	800916a <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003574:	4b26      	ldr	r3, [pc, #152]	; (8003610 <MX_ADC_Init+0xb0>)
 8003576:	4a27      	ldr	r2, [pc, #156]	; (8003614 <MX_ADC_Init+0xb4>)
 8003578:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800357a:	4b25      	ldr	r3, [pc, #148]	; (8003610 <MX_ADC_Init+0xb0>)
 800357c:	2200      	movs	r2, #0
 800357e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003580:	4b23      	ldr	r3, [pc, #140]	; (8003610 <MX_ADC_Init+0xb0>)
 8003582:	2200      	movs	r2, #0
 8003584:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003586:	4b22      	ldr	r3, [pc, #136]	; (8003610 <MX_ADC_Init+0xb0>)
 8003588:	2200      	movs	r2, #0
 800358a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800358c:	4b20      	ldr	r3, [pc, #128]	; (8003610 <MX_ADC_Init+0xb0>)
 800358e:	2201      	movs	r2, #1
 8003590:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003592:	4b1f      	ldr	r3, [pc, #124]	; (8003610 <MX_ADC_Init+0xb0>)
 8003594:	2204      	movs	r2, #4
 8003596:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003598:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <MX_ADC_Init+0xb0>)
 800359a:	2200      	movs	r2, #0
 800359c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800359e:	4b1c      	ldr	r3, [pc, #112]	; (8003610 <MX_ADC_Init+0xb0>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80035a4:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <MX_ADC_Init+0xb0>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80035aa:	4b19      	ldr	r3, [pc, #100]	; (8003610 <MX_ADC_Init+0xb0>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80035b0:	4b17      	ldr	r3, [pc, #92]	; (8003610 <MX_ADC_Init+0xb0>)
 80035b2:	22c2      	movs	r2, #194	; 0xc2
 80035b4:	32ff      	adds	r2, #255	; 0xff
 80035b6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80035b8:	4b15      	ldr	r3, [pc, #84]	; (8003610 <MX_ADC_Init+0xb0>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80035be:	4b14      	ldr	r3, [pc, #80]	; (8003610 <MX_ADC_Init+0xb0>)
 80035c0:	2224      	movs	r2, #36	; 0x24
 80035c2:	2100      	movs	r1, #0
 80035c4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80035c6:	4b12      	ldr	r3, [pc, #72]	; (8003610 <MX_ADC_Init+0xb0>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80035cc:	4b10      	ldr	r3, [pc, #64]	; (8003610 <MX_ADC_Init+0xb0>)
 80035ce:	0018      	movs	r0, r3
 80035d0:	f000 fe0c 	bl	80041ec <HAL_ADC_Init>
 80035d4:	1e03      	subs	r3, r0, #0
 80035d6:	d001      	beq.n	80035dc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80035d8:	f000 fb2e 	bl	8003c38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80035dc:	1d3b      	adds	r3, r7, #4
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	2280      	movs	r2, #128	; 0x80
 80035e6:	0152      	lsls	r2, r2, #5
 80035e8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80035ea:	1d3b      	adds	r3, r7, #4
 80035ec:	2280      	movs	r2, #128	; 0x80
 80035ee:	0552      	lsls	r2, r2, #21
 80035f0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80035f2:	1d3a      	adds	r2, r7, #4
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <MX_ADC_Init+0xb0>)
 80035f6:	0011      	movs	r1, r2
 80035f8:	0018      	movs	r0, r3
 80035fa:	f001 f829 	bl	8004650 <HAL_ADC_ConfigChannel>
 80035fe:	1e03      	subs	r3, r0, #0
 8003600:	d001      	beq.n	8003606 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8003602:	f000 fb19 	bl	8003c38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	46bd      	mov	sp, r7
 800360a:	b004      	add	sp, #16
 800360c:	bd80      	pop	{r7, pc}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	20001440 	.word	0x20001440
 8003614:	40012400 	.word	0x40012400

08003618 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800361c:	4b1b      	ldr	r3, [pc, #108]	; (800368c <MX_I2C1_Init+0x74>)
 800361e:	4a1c      	ldr	r2, [pc, #112]	; (8003690 <MX_I2C1_Init+0x78>)
 8003620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003622:	4b1a      	ldr	r3, [pc, #104]	; (800368c <MX_I2C1_Init+0x74>)
 8003624:	4a1b      	ldr	r2, [pc, #108]	; (8003694 <MX_I2C1_Init+0x7c>)
 8003626:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003628:	4b18      	ldr	r3, [pc, #96]	; (800368c <MX_I2C1_Init+0x74>)
 800362a:	2200      	movs	r2, #0
 800362c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800362e:	4b17      	ldr	r3, [pc, #92]	; (800368c <MX_I2C1_Init+0x74>)
 8003630:	2201      	movs	r2, #1
 8003632:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003634:	4b15      	ldr	r3, [pc, #84]	; (800368c <MX_I2C1_Init+0x74>)
 8003636:	2200      	movs	r2, #0
 8003638:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800363a:	4b14      	ldr	r3, [pc, #80]	; (800368c <MX_I2C1_Init+0x74>)
 800363c:	2200      	movs	r2, #0
 800363e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003640:	4b12      	ldr	r3, [pc, #72]	; (800368c <MX_I2C1_Init+0x74>)
 8003642:	2200      	movs	r2, #0
 8003644:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003646:	4b11      	ldr	r3, [pc, #68]	; (800368c <MX_I2C1_Init+0x74>)
 8003648:	2200      	movs	r2, #0
 800364a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800364c:	4b0f      	ldr	r3, [pc, #60]	; (800368c <MX_I2C1_Init+0x74>)
 800364e:	2200      	movs	r2, #0
 8003650:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003652:	4b0e      	ldr	r3, [pc, #56]	; (800368c <MX_I2C1_Init+0x74>)
 8003654:	0018      	movs	r0, r3
 8003656:	f001 fc31 	bl	8004ebc <HAL_I2C_Init>
 800365a:	1e03      	subs	r3, r0, #0
 800365c:	d001      	beq.n	8003662 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800365e:	f000 faeb 	bl	8003c38 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003662:	4b0a      	ldr	r3, [pc, #40]	; (800368c <MX_I2C1_Init+0x74>)
 8003664:	2100      	movs	r1, #0
 8003666:	0018      	movs	r0, r3
 8003668:	f002 f9cc 	bl	8005a04 <HAL_I2CEx_ConfigAnalogFilter>
 800366c:	1e03      	subs	r3, r0, #0
 800366e:	d001      	beq.n	8003674 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003670:	f000 fae2 	bl	8003c38 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003674:	4b05      	ldr	r3, [pc, #20]	; (800368c <MX_I2C1_Init+0x74>)
 8003676:	2100      	movs	r1, #0
 8003678:	0018      	movs	r0, r3
 800367a:	f002 fa0f 	bl	8005a9c <HAL_I2CEx_ConfigDigitalFilter>
 800367e:	1e03      	subs	r3, r0, #0
 8003680:	d001      	beq.n	8003686 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003682:	f000 fad9 	bl	8003c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	200012f4 	.word	0x200012f4
 8003690:	40005400 	.word	0x40005400
 8003694:	2000090e 	.word	0x2000090e

08003698 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b090      	sub	sp, #64	; 0x40
 800369c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800369e:	232c      	movs	r3, #44	; 0x2c
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	0018      	movs	r0, r3
 80036a4:	2314      	movs	r3, #20
 80036a6:	001a      	movs	r2, r3
 80036a8:	2100      	movs	r1, #0
 80036aa:	f005 fd5e 	bl	800916a <memset>
  RTC_DateTypeDef sDate = {0};
 80036ae:	2328      	movs	r3, #40	; 0x28
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80036b6:	003b      	movs	r3, r7
 80036b8:	0018      	movs	r0, r3
 80036ba:	2328      	movs	r3, #40	; 0x28
 80036bc:	001a      	movs	r2, r3
 80036be:	2100      	movs	r1, #0
 80036c0:	f005 fd53 	bl	800916a <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80036c4:	4b3f      	ldr	r3, [pc, #252]	; (80037c4 <MX_RTC_Init+0x12c>)
 80036c6:	4a40      	ldr	r2, [pc, #256]	; (80037c8 <MX_RTC_Init+0x130>)
 80036c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036ca:	4b3e      	ldr	r3, [pc, #248]	; (80037c4 <MX_RTC_Init+0x12c>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80036d0:	4b3c      	ldr	r3, [pc, #240]	; (80037c4 <MX_RTC_Init+0x12c>)
 80036d2:	227f      	movs	r2, #127	; 0x7f
 80036d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80036d6:	4b3b      	ldr	r3, [pc, #236]	; (80037c4 <MX_RTC_Init+0x12c>)
 80036d8:	22ff      	movs	r2, #255	; 0xff
 80036da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036dc:	4b39      	ldr	r3, [pc, #228]	; (80037c4 <MX_RTC_Init+0x12c>)
 80036de:	2200      	movs	r2, #0
 80036e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80036e2:	4b38      	ldr	r3, [pc, #224]	; (80037c4 <MX_RTC_Init+0x12c>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80036e8:	4b36      	ldr	r3, [pc, #216]	; (80037c4 <MX_RTC_Init+0x12c>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036ee:	4b35      	ldr	r3, [pc, #212]	; (80037c4 <MX_RTC_Init+0x12c>)
 80036f0:	0018      	movs	r0, r3
 80036f2:	f002 ffb7 	bl	8006664 <HAL_RTC_Init>
 80036f6:	1e03      	subs	r3, r0, #0
 80036f8:	d001      	beq.n	80036fe <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80036fa:	f000 fa9d 	bl	8003c38 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80036fe:	212c      	movs	r1, #44	; 0x2c
 8003700:	187b      	adds	r3, r7, r1
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8003706:	187b      	adds	r3, r7, r1
 8003708:	2200      	movs	r2, #0
 800370a:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800370c:	187b      	adds	r3, r7, r1
 800370e:	2200      	movs	r2, #0
 8003710:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003712:	187b      	adds	r3, r7, r1
 8003714:	2200      	movs	r2, #0
 8003716:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003718:	187b      	adds	r3, r7, r1
 800371a:	2200      	movs	r2, #0
 800371c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800371e:	1879      	adds	r1, r7, r1
 8003720:	4b28      	ldr	r3, [pc, #160]	; (80037c4 <MX_RTC_Init+0x12c>)
 8003722:	2201      	movs	r2, #1
 8003724:	0018      	movs	r0, r3
 8003726:	f003 f831 	bl	800678c <HAL_RTC_SetTime>
 800372a:	1e03      	subs	r3, r0, #0
 800372c:	d001      	beq.n	8003732 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800372e:	f000 fa83 	bl	8003c38 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003732:	2128      	movs	r1, #40	; 0x28
 8003734:	187b      	adds	r3, r7, r1
 8003736:	2201      	movs	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800373a:	187b      	adds	r3, r7, r1
 800373c:	2201      	movs	r2, #1
 800373e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8003740:	187b      	adds	r3, r7, r1
 8003742:	2201      	movs	r2, #1
 8003744:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8003746:	187b      	adds	r3, r7, r1
 8003748:	2200      	movs	r2, #0
 800374a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800374c:	1879      	adds	r1, r7, r1
 800374e:	4b1d      	ldr	r3, [pc, #116]	; (80037c4 <MX_RTC_Init+0x12c>)
 8003750:	2201      	movs	r2, #1
 8003752:	0018      	movs	r0, r3
 8003754:	f003 f8d6 	bl	8006904 <HAL_RTC_SetDate>
 8003758:	1e03      	subs	r3, r0, #0
 800375a:	d001      	beq.n	8003760 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 800375c:	f000 fa6c 	bl	8003c38 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003760:	003b      	movs	r3, r7
 8003762:	2200      	movs	r2, #0
 8003764:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8003766:	003b      	movs	r3, r7
 8003768:	2201      	movs	r2, #1
 800376a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800376c:	003b      	movs	r3, r7
 800376e:	2200      	movs	r2, #0
 8003770:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003772:	003b      	movs	r3, r7
 8003774:	2200      	movs	r2, #0
 8003776:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003778:	003b      	movs	r3, r7
 800377a:	2200      	movs	r2, #0
 800377c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800377e:	003b      	movs	r3, r7
 8003780:	2200      	movs	r2, #0
 8003782:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003784:	003b      	movs	r3, r7
 8003786:	2200      	movs	r2, #0
 8003788:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800378a:	003b      	movs	r3, r7
 800378c:	2200      	movs	r2, #0
 800378e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003790:	003b      	movs	r3, r7
 8003792:	2200      	movs	r2, #0
 8003794:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8003796:	003b      	movs	r3, r7
 8003798:	2220      	movs	r2, #32
 800379a:	2101      	movs	r1, #1
 800379c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800379e:	003b      	movs	r3, r7
 80037a0:	2280      	movs	r2, #128	; 0x80
 80037a2:	0052      	lsls	r2, r2, #1
 80037a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80037a6:	0039      	movs	r1, r7
 80037a8:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <MX_RTC_Init+0x12c>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	0018      	movs	r0, r3
 80037ae:	f003 f94f 	bl	8006a50 <HAL_RTC_SetAlarm_IT>
 80037b2:	1e03      	subs	r3, r0, #0
 80037b4:	d001      	beq.n	80037ba <MX_RTC_Init+0x122>
  {
    Error_Handler();
 80037b6:	f000 fa3f 	bl	8003c38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	46bd      	mov	sp, r7
 80037be:	b010      	add	sp, #64	; 0x40
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	20001870 	.word	0x20001870
 80037c8:	40002800 	.word	0x40002800

080037cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037d0:	4b14      	ldr	r3, [pc, #80]	; (8003824 <MX_USART1_UART_Init+0x58>)
 80037d2:	4a15      	ldr	r2, [pc, #84]	; (8003828 <MX_USART1_UART_Init+0x5c>)
 80037d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80037d6:	4b13      	ldr	r3, [pc, #76]	; (8003824 <MX_USART1_UART_Init+0x58>)
 80037d8:	22e1      	movs	r2, #225	; 0xe1
 80037da:	0252      	lsls	r2, r2, #9
 80037dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037de:	4b11      	ldr	r3, [pc, #68]	; (8003824 <MX_USART1_UART_Init+0x58>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037e4:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <MX_USART1_UART_Init+0x58>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037ea:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <MX_USART1_UART_Init+0x58>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037f0:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <MX_USART1_UART_Init+0x58>)
 80037f2:	220c      	movs	r2, #12
 80037f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037f6:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <MX_USART1_UART_Init+0x58>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037fc:	4b09      	ldr	r3, [pc, #36]	; (8003824 <MX_USART1_UART_Init+0x58>)
 80037fe:	2200      	movs	r2, #0
 8003800:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003802:	4b08      	ldr	r3, [pc, #32]	; (8003824 <MX_USART1_UART_Init+0x58>)
 8003804:	2200      	movs	r2, #0
 8003806:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <MX_USART1_UART_Init+0x58>)
 800380a:	2200      	movs	r2, #0
 800380c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <MX_USART1_UART_Init+0x58>)
 8003810:	0018      	movs	r0, r3
 8003812:	f003 fccf 	bl	80071b4 <HAL_UART_Init>
 8003816:	1e03      	subs	r3, r0, #0
 8003818:	d001      	beq.n	800381e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800381a:	f000 fa0d 	bl	8003c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20001340 	.word	0x20001340
 8003828:	40013800 	.word	0x40013800

0800382c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003830:	4b14      	ldr	r3, [pc, #80]	; (8003884 <MX_USART2_UART_Init+0x58>)
 8003832:	4a15      	ldr	r2, [pc, #84]	; (8003888 <MX_USART2_UART_Init+0x5c>)
 8003834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003836:	4b13      	ldr	r3, [pc, #76]	; (8003884 <MX_USART2_UART_Init+0x58>)
 8003838:	22e1      	movs	r2, #225	; 0xe1
 800383a:	0252      	lsls	r2, r2, #9
 800383c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800383e:	4b11      	ldr	r3, [pc, #68]	; (8003884 <MX_USART2_UART_Init+0x58>)
 8003840:	2200      	movs	r2, #0
 8003842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003844:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <MX_USART2_UART_Init+0x58>)
 8003846:	2200      	movs	r2, #0
 8003848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800384a:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <MX_USART2_UART_Init+0x58>)
 800384c:	2200      	movs	r2, #0
 800384e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003850:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <MX_USART2_UART_Init+0x58>)
 8003852:	220c      	movs	r2, #12
 8003854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003856:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <MX_USART2_UART_Init+0x58>)
 8003858:	2200      	movs	r2, #0
 800385a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800385c:	4b09      	ldr	r3, [pc, #36]	; (8003884 <MX_USART2_UART_Init+0x58>)
 800385e:	2200      	movs	r2, #0
 8003860:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003862:	4b08      	ldr	r3, [pc, #32]	; (8003884 <MX_USART2_UART_Init+0x58>)
 8003864:	2200      	movs	r2, #0
 8003866:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003868:	4b06      	ldr	r3, [pc, #24]	; (8003884 <MX_USART2_UART_Init+0x58>)
 800386a:	2200      	movs	r2, #0
 800386c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800386e:	4b05      	ldr	r3, [pc, #20]	; (8003884 <MX_USART2_UART_Init+0x58>)
 8003870:	0018      	movs	r0, r3
 8003872:	f003 fc9f 	bl	80071b4 <HAL_UART_Init>
 8003876:	1e03      	subs	r3, r0, #0
 8003878:	d001      	beq.n	800387e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800387a:	f000 f9dd 	bl	8003c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	200013c0 	.word	0x200013c0
 8003888:	40004400 	.word	0x40004400

0800388c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800388c:	b590      	push	{r4, r7, lr}
 800388e:	b08b      	sub	sp, #44	; 0x2c
 8003890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003892:	2414      	movs	r4, #20
 8003894:	193b      	adds	r3, r7, r4
 8003896:	0018      	movs	r0, r3
 8003898:	2314      	movs	r3, #20
 800389a:	001a      	movs	r2, r3
 800389c:	2100      	movs	r1, #0
 800389e:	f005 fc64 	bl	800916a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038a2:	4b33      	ldr	r3, [pc, #204]	; (8003970 <MX_GPIO_Init+0xe4>)
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	4b32      	ldr	r3, [pc, #200]	; (8003970 <MX_GPIO_Init+0xe4>)
 80038a8:	2180      	movs	r1, #128	; 0x80
 80038aa:	0309      	lsls	r1, r1, #12
 80038ac:	430a      	orrs	r2, r1
 80038ae:	615a      	str	r2, [r3, #20]
 80038b0:	4b2f      	ldr	r3, [pc, #188]	; (8003970 <MX_GPIO_Init+0xe4>)
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	2380      	movs	r3, #128	; 0x80
 80038b6:	031b      	lsls	r3, r3, #12
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80038be:	4b2c      	ldr	r3, [pc, #176]	; (8003970 <MX_GPIO_Init+0xe4>)
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	4b2b      	ldr	r3, [pc, #172]	; (8003970 <MX_GPIO_Init+0xe4>)
 80038c4:	2180      	movs	r1, #128	; 0x80
 80038c6:	03c9      	lsls	r1, r1, #15
 80038c8:	430a      	orrs	r2, r1
 80038ca:	615a      	str	r2, [r3, #20]
 80038cc:	4b28      	ldr	r3, [pc, #160]	; (8003970 <MX_GPIO_Init+0xe4>)
 80038ce:	695a      	ldr	r2, [r3, #20]
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	03db      	lsls	r3, r3, #15
 80038d4:	4013      	ands	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038da:	4b25      	ldr	r3, [pc, #148]	; (8003970 <MX_GPIO_Init+0xe4>)
 80038dc:	695a      	ldr	r2, [r3, #20]
 80038de:	4b24      	ldr	r3, [pc, #144]	; (8003970 <MX_GPIO_Init+0xe4>)
 80038e0:	2180      	movs	r1, #128	; 0x80
 80038e2:	0289      	lsls	r1, r1, #10
 80038e4:	430a      	orrs	r2, r1
 80038e6:	615a      	str	r2, [r3, #20]
 80038e8:	4b21      	ldr	r3, [pc, #132]	; (8003970 <MX_GPIO_Init+0xe4>)
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	029b      	lsls	r3, r3, #10
 80038f0:	4013      	ands	r3, r2
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f6:	4b1e      	ldr	r3, [pc, #120]	; (8003970 <MX_GPIO_Init+0xe4>)
 80038f8:	695a      	ldr	r2, [r3, #20]
 80038fa:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <MX_GPIO_Init+0xe4>)
 80038fc:	2180      	movs	r1, #128	; 0x80
 80038fe:	02c9      	lsls	r1, r1, #11
 8003900:	430a      	orrs	r2, r1
 8003902:	615a      	str	r2, [r3, #20]
 8003904:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <MX_GPIO_Init+0xe4>)
 8003906:	695a      	ldr	r2, [r3, #20]
 8003908:	2380      	movs	r3, #128	; 0x80
 800390a:	02db      	lsls	r3, r3, #11
 800390c:	4013      	ands	r3, r2
 800390e:	607b      	str	r3, [r7, #4]
 8003910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003912:	2390      	movs	r3, #144	; 0x90
 8003914:	05db      	lsls	r3, r3, #23
 8003916:	2200      	movs	r2, #0
 8003918:	2120      	movs	r1, #32
 800391a:	0018      	movs	r0, r3
 800391c:	f001 fab0 	bl	8004e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003920:	193b      	adds	r3, r7, r4
 8003922:	2280      	movs	r2, #128	; 0x80
 8003924:	0192      	lsls	r2, r2, #6
 8003926:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003928:	193b      	adds	r3, r7, r4
 800392a:	4a12      	ldr	r2, [pc, #72]	; (8003974 <MX_GPIO_Init+0xe8>)
 800392c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392e:	193b      	adds	r3, r7, r4
 8003930:	2200      	movs	r2, #0
 8003932:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003934:	193b      	adds	r3, r7, r4
 8003936:	4a10      	ldr	r2, [pc, #64]	; (8003978 <MX_GPIO_Init+0xec>)
 8003938:	0019      	movs	r1, r3
 800393a:	0010      	movs	r0, r2
 800393c:	f001 f930 	bl	8004ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003940:	0021      	movs	r1, r4
 8003942:	187b      	adds	r3, r7, r1
 8003944:	2220      	movs	r2, #32
 8003946:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003948:	187b      	adds	r3, r7, r1
 800394a:	2201      	movs	r2, #1
 800394c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394e:	187b      	adds	r3, r7, r1
 8003950:	2200      	movs	r2, #0
 8003952:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003954:	187b      	adds	r3, r7, r1
 8003956:	2200      	movs	r2, #0
 8003958:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800395a:	187a      	adds	r2, r7, r1
 800395c:	2390      	movs	r3, #144	; 0x90
 800395e:	05db      	lsls	r3, r3, #23
 8003960:	0011      	movs	r1, r2
 8003962:	0018      	movs	r0, r3
 8003964:	f001 f91c 	bl	8004ba0 <HAL_GPIO_Init>

}
 8003968:	46c0      	nop			; (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b00b      	add	sp, #44	; 0x2c
 800396e:	bd90      	pop	{r4, r7, pc}
 8003970:	40021000 	.word	0x40021000
 8003974:	10210000 	.word	0x10210000
 8003978:	48000800 	.word	0x48000800

0800397c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800397c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800397e:	b087      	sub	sp, #28
 8003980:	af02      	add	r7, sp, #8
 8003982:	6078      	str	r0, [r7, #4]
  /* Infinite loop */




    	 resetStandBy();
 8003984:	f000 f95e 	bl	8003c44 <resetStandBy>

    	if(Sensor_Read_status==2 && Connection_Server_status ==2){
 8003988:	4b4d      	ldr	r3, [pc, #308]	; (8003ac0 <StartDefaultTask+0x144>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b02      	cmp	r3, #2
 800398e:	d000      	beq.n	8003992 <StartDefaultTask+0x16>
 8003990:	e080      	b.n	8003a94 <StartDefaultTask+0x118>
 8003992:	4b4c      	ldr	r3, [pc, #304]	; (8003ac4 <StartDefaultTask+0x148>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d000      	beq.n	800399c <StartDefaultTask+0x20>
 800399a:	e07b      	b.n	8003a94 <StartDefaultTask+0x118>
    	for(int i=missed_cycles;  i>=0; i--){
 800399c:	4b4a      	ldr	r3, [pc, #296]	; (8003ac8 <StartDefaultTask+0x14c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	e068      	b.n	8003a76 <StartDefaultTask+0xfa>
    		sensorData[missed_cycles-i].minutes_expired= missed_cycles-(missed_cycles-i);
 80039a4:	4b48      	ldr	r3, [pc, #288]	; (8003ac8 <StartDefaultTask+0x14c>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1ad2      	subs	r2, r2, r3
 80039ac:	4947      	ldr	r1, [pc, #284]	; (8003acc <StartDefaultTask+0x150>)
 80039ae:	0013      	movs	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	189b      	adds	r3, r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	18cb      	adds	r3, r1, r3
 80039b8:	3320      	adds	r3, #32
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	601a      	str	r2, [r3, #0]
    		tcpSend(sensorData[missed_cycles-i].T,sensorData[missed_cycles-i].H
 80039be:	4b42      	ldr	r3, [pc, #264]	; (8003ac8 <StartDefaultTask+0x14c>)
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1ad2      	subs	r2, r2, r3
 80039c6:	4941      	ldr	r1, [pc, #260]	; (8003acc <StartDefaultTask+0x150>)
 80039c8:	0013      	movs	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	189b      	adds	r3, r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	18cb      	adds	r3, r1, r3
 80039d2:	685c      	ldr	r4, [r3, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	0018      	movs	r0, r3
 80039d8:	0021      	movs	r1, r4
 80039da:	f7fe fb4b 	bl	8002074 <__aeabi_d2f>
 80039de:	1c05      	adds	r5, r0, #0
 80039e0:	4b39      	ldr	r3, [pc, #228]	; (8003ac8 <StartDefaultTask+0x14c>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	1ad2      	subs	r2, r2, r3
 80039e8:	4938      	ldr	r1, [pc, #224]	; (8003acc <StartDefaultTask+0x150>)
 80039ea:	0013      	movs	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	189b      	adds	r3, r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	18cb      	adds	r3, r1, r3
 80039f4:	3308      	adds	r3, #8
 80039f6:	685c      	ldr	r4, [r3, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	0018      	movs	r0, r3
 80039fc:	0021      	movs	r1, r4
 80039fe:	f7fe fb39 	bl	8002074 <__aeabi_d2f>
 8003a02:	1c06      	adds	r6, r0, #0
    				,sensorData[missed_cycles-i].A,sensorData[missed_cycles-i].L, sensorData[missed_cycles-i].minutes_expired);
 8003a04:	4b30      	ldr	r3, [pc, #192]	; (8003ac8 <StartDefaultTask+0x14c>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1ad2      	subs	r2, r2, r3
 8003a0c:	492f      	ldr	r1, [pc, #188]	; (8003acc <StartDefaultTask+0x150>)
 8003a0e:	0013      	movs	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	189b      	adds	r3, r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	18cb      	adds	r3, r1, r3
 8003a18:	3310      	adds	r3, #16
 8003a1a:	685c      	ldr	r4, [r3, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
    		tcpSend(sensorData[missed_cycles-i].T,sensorData[missed_cycles-i].H
 8003a1e:	0018      	movs	r0, r3
 8003a20:	0021      	movs	r1, r4
 8003a22:	f7fe fb27 	bl	8002074 <__aeabi_d2f>
 8003a26:	6038      	str	r0, [r7, #0]
    				,sensorData[missed_cycles-i].A,sensorData[missed_cycles-i].L, sensorData[missed_cycles-i].minutes_expired);
 8003a28:	4b27      	ldr	r3, [pc, #156]	; (8003ac8 <StartDefaultTask+0x14c>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1ad2      	subs	r2, r2, r3
 8003a30:	4926      	ldr	r1, [pc, #152]	; (8003acc <StartDefaultTask+0x150>)
 8003a32:	0013      	movs	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	189b      	adds	r3, r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	18cb      	adds	r3, r1, r3
 8003a3c:	3318      	adds	r3, #24
 8003a3e:	685c      	ldr	r4, [r3, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
    		tcpSend(sensorData[missed_cycles-i].T,sensorData[missed_cycles-i].H
 8003a42:	0018      	movs	r0, r3
 8003a44:	0021      	movs	r1, r4
 8003a46:	f7fe fb15 	bl	8002074 <__aeabi_d2f>
    				,sensorData[missed_cycles-i].A,sensorData[missed_cycles-i].L, sensorData[missed_cycles-i].minutes_expired);
 8003a4a:	4b1f      	ldr	r3, [pc, #124]	; (8003ac8 <StartDefaultTask+0x14c>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1ad2      	subs	r2, r2, r3
    		tcpSend(sensorData[missed_cycles-i].T,sensorData[missed_cycles-i].H
 8003a52:	491e      	ldr	r1, [pc, #120]	; (8003acc <StartDefaultTask+0x150>)
 8003a54:	0013      	movs	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	189b      	adds	r3, r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	18cb      	adds	r3, r1, r3
 8003a5e:	3320      	adds	r3, #32
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	1c03      	adds	r3, r0, #0
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	1c31      	adds	r1, r6, #0
 8003a6a:	1c28      	adds	r0, r5, #0
 8003a6c:	f7fe fd36 	bl	80024dc <tcpSend>
    	for(int i=missed_cycles;  i>=0; i--){
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	da93      	bge.n	80039a4 <StartDefaultTask+0x28>
    	}
    		 	     missed_cycles=0;
 8003a7c:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <StartDefaultTask+0x14c>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
    		 	    Sensor_Read_status=0;
 8003a82:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <StartDefaultTask+0x144>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
    		 	    Connection_Server_status =0;
 8003a88:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <StartDefaultTask+0x148>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
    		 	   startStandBy();
 8003a8e:	f000 f8f3 	bl	8003c78 <startStandBy>
 8003a92:	e00e      	b.n	8003ab2 <StartDefaultTask+0x136>

    		 	}else if(Sensor_Read_status==2 && Connection_Server_status ==1){
 8003a94:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <StartDefaultTask+0x144>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d10a      	bne.n	8003ab2 <StartDefaultTask+0x136>
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <StartDefaultTask+0x148>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d106      	bne.n	8003ab2 <StartDefaultTask+0x136>
    		 		missed_cycles++;
 8003aa4:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <StartDefaultTask+0x14c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <StartDefaultTask+0x14c>)
 8003aac:	601a      	str	r2, [r3, #0]
    		 		 startSleep();
 8003aae:	f000 f8ea 	bl	8003c86 <startSleep>
	  		    }else{
	  		    	//sleep mode
	  		    }
    	//startStandBy();
    	vTaskDelete( NULL );
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	f004 fd12 	bl	80084dc <vTaskDelete>

  /* USER CODE END 5 */
}
 8003ab8:	46c0      	nop			; (mov r8, r8)
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b005      	add	sp, #20
 8003abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ac0:	20000595 	.word	0x20000595
 8003ac4:	20000594 	.word	0x20000594
 8003ac8:	20000590 	.word	0x20000590
 8003acc:	20001550 	.word	0x20001550

08003ad0 <ReadSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadSensors */
void ReadSensors(void const * argument)
{
 8003ad0:	b590      	push	{r4, r7, lr}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReadSensors */
  /* Infinite loop */
  static char Data[10];

	 if( Sensor_Read_status==0){
 8003ad8:	4b27      	ldr	r3, [pc, #156]	; (8003b78 <ReadSensors+0xa8>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d143      	bne.n	8003b68 <ReadSensors+0x98>
	  sensorData[missed_cycles].T= Tem_Sensor(Data);
 8003ae0:	4b26      	ldr	r3, [pc, #152]	; (8003b7c <ReadSensors+0xac>)
 8003ae2:	681c      	ldr	r4, [r3, #0]
 8003ae4:	4b26      	ldr	r3, [pc, #152]	; (8003b80 <ReadSensors+0xb0>)
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f7ff fb88 	bl	80031fc <Tem_Sensor>
 8003aec:	000a      	movs	r2, r1
 8003aee:	0001      	movs	r1, r0
 8003af0:	4824      	ldr	r0, [pc, #144]	; (8003b84 <ReadSensors+0xb4>)
 8003af2:	0023      	movs	r3, r4
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	191b      	adds	r3, r3, r4
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	18c3      	adds	r3, r0, r3
 8003afc:	6019      	str	r1, [r3, #0]
 8003afe:	605a      	str	r2, [r3, #4]
	  sensorData[missed_cycles].H= Hum_Sensor(Data);
 8003b00:	4b1e      	ldr	r3, [pc, #120]	; (8003b7c <ReadSensors+0xac>)
 8003b02:	681c      	ldr	r4, [r3, #0]
 8003b04:	4b1e      	ldr	r3, [pc, #120]	; (8003b80 <ReadSensors+0xb0>)
 8003b06:	0018      	movs	r0, r3
 8003b08:	f7ff fbb8 	bl	800327c <Hum_Sensor>
 8003b0c:	000a      	movs	r2, r1
 8003b0e:	0001      	movs	r1, r0
 8003b10:	481c      	ldr	r0, [pc, #112]	; (8003b84 <ReadSensors+0xb4>)
 8003b12:	0023      	movs	r3, r4
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	191b      	adds	r3, r3, r4
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	18c3      	adds	r3, r0, r3
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	6019      	str	r1, [r3, #0]
 8003b20:	605a      	str	r2, [r3, #4]
	  sensorData[missed_cycles].A= Read_Pressure_Sensor(Data);
 8003b22:	4b16      	ldr	r3, [pc, #88]	; (8003b7c <ReadSensors+0xac>)
 8003b24:	681c      	ldr	r4, [r3, #0]
 8003b26:	4b16      	ldr	r3, [pc, #88]	; (8003b80 <ReadSensors+0xb0>)
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f7ff f87f 	bl	8002c2c <Read_Pressure_Sensor>
 8003b2e:	000a      	movs	r2, r1
 8003b30:	0001      	movs	r1, r0
 8003b32:	4814      	ldr	r0, [pc, #80]	; (8003b84 <ReadSensors+0xb4>)
 8003b34:	0023      	movs	r3, r4
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	191b      	adds	r3, r3, r4
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	18c3      	adds	r3, r0, r3
 8003b3e:	3310      	adds	r3, #16
 8003b40:	6019      	str	r1, [r3, #0]
 8003b42:	605a      	str	r2, [r3, #4]
	  sensorData[missed_cycles].L= LUX_Sensor();
 8003b44:	4b0d      	ldr	r3, [pc, #52]	; (8003b7c <ReadSensors+0xac>)
 8003b46:	681c      	ldr	r4, [r3, #0]
 8003b48:	f7ff fbca 	bl	80032e0 <LUX_Sensor>
 8003b4c:	000a      	movs	r2, r1
 8003b4e:	0001      	movs	r1, r0
 8003b50:	480c      	ldr	r0, [pc, #48]	; (8003b84 <ReadSensors+0xb4>)
 8003b52:	0023      	movs	r3, r4
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	191b      	adds	r3, r3, r4
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	18c3      	adds	r3, r0, r3
 8003b5c:	3318      	adds	r3, #24
 8003b5e:	6019      	str	r1, [r3, #0]
 8003b60:	605a      	str	r2, [r3, #4]
	  Sensor_Read_status=2;
 8003b62:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <ReadSensors+0xa8>)
 8003b64:	2202      	movs	r2, #2
 8003b66:	701a      	strb	r2, [r3, #0]
	 }
	 vTaskDelete( NULL );
 8003b68:	2000      	movs	r0, #0
 8003b6a:	f004 fcb7 	bl	80084dc <vTaskDelete>

  /* USER CODE END ReadSensors */
}
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b003      	add	sp, #12
 8003b74:	bd90      	pop	{r4, r7, pc}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	20000595 	.word	0x20000595
 8003b7c:	20000590 	.word	0x20000590
 8003b80:	20000598 	.word	0x20000598
 8003b84:	20001550 	.word	0x20001550

08003b88 <ConnectToServer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ConnectToServer */
void ConnectToServer(void const * argument)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ConnectToServer */
  /* Infinite loop */


	  static _Bool Connection = 0;
	  if(Connection_Server_status==0 ){
 8003b90:	4b19      	ldr	r3, [pc, #100]	; (8003bf8 <ConnectToServer+0x70>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d127      	bne.n	8003be8 <ConnectToServer+0x60>
		  Connection = espConnect("Ziggo8550182", "Johanna1967!");
 8003b98:	4a18      	ldr	r2, [pc, #96]	; (8003bfc <ConnectToServer+0x74>)
 8003b9a:	4b19      	ldr	r3, [pc, #100]	; (8003c00 <ConnectToServer+0x78>)
 8003b9c:	0011      	movs	r1, r2
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f7fe fb32 	bl	8002208 <espConnect>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	001a      	movs	r2, r3
 8003ba8:	4b16      	ldr	r3, [pc, #88]	; (8003c04 <ConnectToServer+0x7c>)
 8003baa:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(5000);
 8003bac:	4b16      	ldr	r3, [pc, #88]	; (8003c08 <ConnectToServer+0x80>)
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f000 fafa 	bl	80041a8 <HAL_Delay>
		  Connection =tcpConnect("192.168.178.80", "80");
 8003bb4:	4a15      	ldr	r2, [pc, #84]	; (8003c0c <ConnectToServer+0x84>)
 8003bb6:	4b16      	ldr	r3, [pc, #88]	; (8003c10 <ConnectToServer+0x88>)
 8003bb8:	0011      	movs	r1, r2
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f7fe fbce 	bl	800235c <tcpConnect>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	001a      	movs	r2, r3
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <ConnectToServer+0x7c>)
 8003bc6:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(1000);
 8003bc8:	23fa      	movs	r3, #250	; 0xfa
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f000 faeb 	bl	80041a8 <HAL_Delay>
		  if(Connection==1){
 8003bd2:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <ConnectToServer+0x7c>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <ConnectToServer+0x5a>
			  Connection_Server_status=2;
 8003bda:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <ConnectToServer+0x70>)
 8003bdc:	2202      	movs	r2, #2
 8003bde:	701a      	strb	r2, [r3, #0]
 8003be0:	e002      	b.n	8003be8 <ConnectToServer+0x60>
		  }else{
			  Connection_Server_status=1;
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <ConnectToServer+0x70>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  vTaskDelete( NULL );
 8003be8:	2000      	movs	r0, #0
 8003bea:	f004 fc77 	bl	80084dc <vTaskDelete>

  /* USER CODE END ConnectToServer */
}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b002      	add	sp, #8
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	20000594 	.word	0x20000594
 8003bfc:	0800b680 	.word	0x0800b680
 8003c00:	0800b690 	.word	0x0800b690
 8003c04:	200005a2 	.word	0x200005a2
 8003c08:	00001388 	.word	0x00001388
 8003c0c:	0800b6a0 	.word	0x0800b6a0
 8003c10:	0800b6a4 	.word	0x0800b6a4

08003c14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a04      	ldr	r2, [pc, #16]	; (8003c34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d101      	bne.n	8003c2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003c26:	f000 faa3 	bl	8004170 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b002      	add	sp, #8
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	40012c00 	.word	0x40012c00

08003c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <resetStandBy>:
 *  Created on: Oct 3, 2020
 *      Author: quinn
 */

#include "standBy.h"
void resetStandBy(){
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
	// Check if flag haven't been reset
	if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET){
 8003c48:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <resetStandBy+0x30>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d10b      	bne.n	8003c6c <resetStandBy+0x28>
			// Reset flags
			__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <resetStandBy+0x30>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <resetStandBy+0x30>)
 8003c5a:	2108      	movs	r1, #8
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]
			__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8003c60:	4b04      	ldr	r3, [pc, #16]	; (8003c74 <resetStandBy+0x30>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <resetStandBy+0x30>)
 8003c66:	2104      	movs	r1, #4
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]
		}
}
 8003c6c:	46c0      	nop			; (mov r8, r8)
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	40007000 	.word	0x40007000

08003c78 <startStandBy>:
void startStandBy(){
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
	// Enter standby mode
	HAL_PWR_EnterSTANDBYMode();
 8003c7c:	f001 ff76 	bl	8005b6c <HAL_PWR_EnterSTANDBYMode>
}
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <startSleep>:
void startSleep(){
 8003c86:	b580      	push	{r7, lr}
 8003c88:	af00      	add	r7, sp, #0
	// Enter standby mode
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	f001 ff51 	bl	8005b34 <HAL_PWR_EnterSLEEPMode>
}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c9e:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <HAL_MspInit+0x44>)
 8003ca0:	699a      	ldr	r2, [r3, #24]
 8003ca2:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <HAL_MspInit+0x44>)
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	619a      	str	r2, [r3, #24]
 8003caa:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <HAL_MspInit+0x44>)
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	607b      	str	r3, [r7, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cb6:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <HAL_MspInit+0x44>)
 8003cb8:	69da      	ldr	r2, [r3, #28]
 8003cba:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <HAL_MspInit+0x44>)
 8003cbc:	2180      	movs	r1, #128	; 0x80
 8003cbe:	0549      	lsls	r1, r1, #21
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	61da      	str	r2, [r3, #28]
 8003cc4:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <HAL_MspInit+0x44>)
 8003cc6:	69da      	ldr	r2, [r3, #28]
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	055b      	lsls	r3, r3, #21
 8003ccc:	4013      	ands	r3, r2
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b002      	add	sp, #8
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	40021000 	.word	0x40021000

08003ce0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08a      	sub	sp, #40	; 0x28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce8:	2314      	movs	r3, #20
 8003cea:	18fb      	adds	r3, r7, r3
 8003cec:	0018      	movs	r0, r3
 8003cee:	2314      	movs	r3, #20
 8003cf0:	001a      	movs	r2, r3
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	f005 fa39 	bl	800916a <memset>
  if(hadc->Instance==ADC1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a19      	ldr	r2, [pc, #100]	; (8003d64 <HAL_ADC_MspInit+0x84>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d12c      	bne.n	8003d5c <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d02:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <HAL_ADC_MspInit+0x88>)
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	4b18      	ldr	r3, [pc, #96]	; (8003d68 <HAL_ADC_MspInit+0x88>)
 8003d08:	2180      	movs	r1, #128	; 0x80
 8003d0a:	0089      	lsls	r1, r1, #2
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	619a      	str	r2, [r3, #24]
 8003d10:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <HAL_ADC_MspInit+0x88>)
 8003d12:	699a      	ldr	r2, [r3, #24]
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4013      	ands	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d1e:	4b12      	ldr	r3, [pc, #72]	; (8003d68 <HAL_ADC_MspInit+0x88>)
 8003d20:	695a      	ldr	r2, [r3, #20]
 8003d22:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <HAL_ADC_MspInit+0x88>)
 8003d24:	2180      	movs	r1, #128	; 0x80
 8003d26:	0289      	lsls	r1, r1, #10
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	615a      	str	r2, [r3, #20]
 8003d2c:	4b0e      	ldr	r3, [pc, #56]	; (8003d68 <HAL_ADC_MspInit+0x88>)
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	2380      	movs	r3, #128	; 0x80
 8003d32:	029b      	lsls	r3, r3, #10
 8003d34:	4013      	ands	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d3a:	2114      	movs	r1, #20
 8003d3c:	187b      	adds	r3, r7, r1
 8003d3e:	2201      	movs	r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d42:	187b      	adds	r3, r7, r1
 8003d44:	2203      	movs	r2, #3
 8003d46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d48:	187b      	adds	r3, r7, r1
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d4e:	187a      	adds	r2, r7, r1
 8003d50:	2390      	movs	r3, #144	; 0x90
 8003d52:	05db      	lsls	r3, r3, #23
 8003d54:	0011      	movs	r1, r2
 8003d56:	0018      	movs	r0, r3
 8003d58:	f000 ff22 	bl	8004ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003d5c:	46c0      	nop			; (mov r8, r8)
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b00a      	add	sp, #40	; 0x28
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40012400 	.word	0x40012400
 8003d68:	40021000 	.word	0x40021000

08003d6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08a      	sub	sp, #40	; 0x28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d74:	2314      	movs	r3, #20
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	0018      	movs	r0, r3
 8003d7a:	2314      	movs	r3, #20
 8003d7c:	001a      	movs	r2, r3
 8003d7e:	2100      	movs	r1, #0
 8003d80:	f005 f9f3 	bl	800916a <memset>
  if(hi2c->Instance==I2C1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a1c      	ldr	r2, [pc, #112]	; (8003dfc <HAL_I2C_MspInit+0x90>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d132      	bne.n	8003df4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d8e:	4b1c      	ldr	r3, [pc, #112]	; (8003e00 <HAL_I2C_MspInit+0x94>)
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <HAL_I2C_MspInit+0x94>)
 8003d94:	2180      	movs	r1, #128	; 0x80
 8003d96:	02c9      	lsls	r1, r1, #11
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	615a      	str	r2, [r3, #20]
 8003d9c:	4b18      	ldr	r3, [pc, #96]	; (8003e00 <HAL_I2C_MspInit+0x94>)
 8003d9e:	695a      	ldr	r2, [r3, #20]
 8003da0:	2380      	movs	r3, #128	; 0x80
 8003da2:	02db      	lsls	r3, r3, #11
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003daa:	2114      	movs	r1, #20
 8003dac:	187b      	adds	r3, r7, r1
 8003dae:	2290      	movs	r2, #144	; 0x90
 8003db0:	0092      	lsls	r2, r2, #2
 8003db2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003db4:	187b      	adds	r3, r7, r1
 8003db6:	2212      	movs	r2, #18
 8003db8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dba:	187b      	adds	r3, r7, r1
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dc0:	187b      	adds	r3, r7, r1
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003dc6:	187b      	adds	r3, r7, r1
 8003dc8:	2201      	movs	r2, #1
 8003dca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dcc:	187b      	adds	r3, r7, r1
 8003dce:	4a0d      	ldr	r2, [pc, #52]	; (8003e04 <HAL_I2C_MspInit+0x98>)
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	0010      	movs	r0, r2
 8003dd4:	f000 fee4 	bl	8004ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003dd8:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <HAL_I2C_MspInit+0x94>)
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <HAL_I2C_MspInit+0x94>)
 8003dde:	2180      	movs	r1, #128	; 0x80
 8003de0:	0389      	lsls	r1, r1, #14
 8003de2:	430a      	orrs	r2, r1
 8003de4:	61da      	str	r2, [r3, #28]
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_I2C_MspInit+0x94>)
 8003de8:	69da      	ldr	r2, [r3, #28]
 8003dea:	2380      	movs	r3, #128	; 0x80
 8003dec:	039b      	lsls	r3, r3, #14
 8003dee:	4013      	ands	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003df4:	46c0      	nop			; (mov r8, r8)
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b00a      	add	sp, #40	; 0x28
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40005400 	.word	0x40005400
 8003e00:	40021000 	.word	0x40021000
 8003e04:	48000400 	.word	0x48000400

08003e08 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a0a      	ldr	r2, [pc, #40]	; (8003e40 <HAL_RTC_MspInit+0x38>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d10e      	bne.n	8003e38 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <HAL_RTC_MspInit+0x3c>)
 8003e1c:	6a1a      	ldr	r2, [r3, #32]
 8003e1e:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <HAL_RTC_MspInit+0x3c>)
 8003e20:	2180      	movs	r1, #128	; 0x80
 8003e22:	0209      	lsls	r1, r1, #8
 8003e24:	430a      	orrs	r2, r1
 8003e26:	621a      	str	r2, [r3, #32]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	2002      	movs	r0, #2
 8003e2e:	f000 fe09 	bl	8004a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003e32:	2002      	movs	r0, #2
 8003e34:	f000 fe1b 	bl	8004a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003e38:	46c0      	nop			; (mov r8, r8)
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b002      	add	sp, #8
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40002800 	.word	0x40002800
 8003e44:	40021000 	.word	0x40021000

08003e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08c      	sub	sp, #48	; 0x30
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e50:	231c      	movs	r3, #28
 8003e52:	18fb      	adds	r3, r7, r3
 8003e54:	0018      	movs	r0, r3
 8003e56:	2314      	movs	r3, #20
 8003e58:	001a      	movs	r2, r3
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	f005 f985 	bl	800916a <memset>
  if(huart->Instance==USART1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a3d      	ldr	r2, [pc, #244]	; (8003f5c <HAL_UART_MspInit+0x114>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d13c      	bne.n	8003ee4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e6a:	4b3d      	ldr	r3, [pc, #244]	; (8003f60 <HAL_UART_MspInit+0x118>)
 8003e6c:	699a      	ldr	r2, [r3, #24]
 8003e6e:	4b3c      	ldr	r3, [pc, #240]	; (8003f60 <HAL_UART_MspInit+0x118>)
 8003e70:	2180      	movs	r1, #128	; 0x80
 8003e72:	01c9      	lsls	r1, r1, #7
 8003e74:	430a      	orrs	r2, r1
 8003e76:	619a      	str	r2, [r3, #24]
 8003e78:	4b39      	ldr	r3, [pc, #228]	; (8003f60 <HAL_UART_MspInit+0x118>)
 8003e7a:	699a      	ldr	r2, [r3, #24]
 8003e7c:	2380      	movs	r3, #128	; 0x80
 8003e7e:	01db      	lsls	r3, r3, #7
 8003e80:	4013      	ands	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e86:	4b36      	ldr	r3, [pc, #216]	; (8003f60 <HAL_UART_MspInit+0x118>)
 8003e88:	695a      	ldr	r2, [r3, #20]
 8003e8a:	4b35      	ldr	r3, [pc, #212]	; (8003f60 <HAL_UART_MspInit+0x118>)
 8003e8c:	2180      	movs	r1, #128	; 0x80
 8003e8e:	0289      	lsls	r1, r1, #10
 8003e90:	430a      	orrs	r2, r1
 8003e92:	615a      	str	r2, [r3, #20]
 8003e94:	4b32      	ldr	r3, [pc, #200]	; (8003f60 <HAL_UART_MspInit+0x118>)
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	2380      	movs	r3, #128	; 0x80
 8003e9a:	029b      	lsls	r3, r3, #10
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003ea2:	211c      	movs	r1, #28
 8003ea4:	187b      	adds	r3, r7, r1
 8003ea6:	22c0      	movs	r2, #192	; 0xc0
 8003ea8:	00d2      	lsls	r2, r2, #3
 8003eaa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eac:	187b      	adds	r3, r7, r1
 8003eae:	2202      	movs	r2, #2
 8003eb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb2:	187b      	adds	r3, r7, r1
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003eb8:	187b      	adds	r3, r7, r1
 8003eba:	2203      	movs	r2, #3
 8003ebc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003ebe:	187b      	adds	r3, r7, r1
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ec4:	187a      	adds	r2, r7, r1
 8003ec6:	2390      	movs	r3, #144	; 0x90
 8003ec8:	05db      	lsls	r3, r3, #23
 8003eca:	0011      	movs	r1, r2
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f000 fe67 	bl	8004ba0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	201b      	movs	r0, #27
 8003ed8:	f000 fdb4 	bl	8004a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003edc:	201b      	movs	r0, #27
 8003ede:	f000 fdc6 	bl	8004a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003ee2:	e037      	b.n	8003f54 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a1e      	ldr	r2, [pc, #120]	; (8003f64 <HAL_UART_MspInit+0x11c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d132      	bne.n	8003f54 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003eee:	4b1c      	ldr	r3, [pc, #112]	; (8003f60 <HAL_UART_MspInit+0x118>)
 8003ef0:	69da      	ldr	r2, [r3, #28]
 8003ef2:	4b1b      	ldr	r3, [pc, #108]	; (8003f60 <HAL_UART_MspInit+0x118>)
 8003ef4:	2180      	movs	r1, #128	; 0x80
 8003ef6:	0289      	lsls	r1, r1, #10
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	61da      	str	r2, [r3, #28]
 8003efc:	4b18      	ldr	r3, [pc, #96]	; (8003f60 <HAL_UART_MspInit+0x118>)
 8003efe:	69da      	ldr	r2, [r3, #28]
 8003f00:	2380      	movs	r3, #128	; 0x80
 8003f02:	029b      	lsls	r3, r3, #10
 8003f04:	4013      	ands	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f0a:	4b15      	ldr	r3, [pc, #84]	; (8003f60 <HAL_UART_MspInit+0x118>)
 8003f0c:	695a      	ldr	r2, [r3, #20]
 8003f0e:	4b14      	ldr	r3, [pc, #80]	; (8003f60 <HAL_UART_MspInit+0x118>)
 8003f10:	2180      	movs	r1, #128	; 0x80
 8003f12:	0289      	lsls	r1, r1, #10
 8003f14:	430a      	orrs	r2, r1
 8003f16:	615a      	str	r2, [r3, #20]
 8003f18:	4b11      	ldr	r3, [pc, #68]	; (8003f60 <HAL_UART_MspInit+0x118>)
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	029b      	lsls	r3, r3, #10
 8003f20:	4013      	ands	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003f26:	211c      	movs	r1, #28
 8003f28:	187b      	adds	r3, r7, r1
 8003f2a:	220c      	movs	r2, #12
 8003f2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f2e:	187b      	adds	r3, r7, r1
 8003f30:	2202      	movs	r2, #2
 8003f32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f34:	187b      	adds	r3, r7, r1
 8003f36:	2200      	movs	r2, #0
 8003f38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f3a:	187b      	adds	r3, r7, r1
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003f40:	187b      	adds	r3, r7, r1
 8003f42:	2201      	movs	r2, #1
 8003f44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f46:	187a      	adds	r2, r7, r1
 8003f48:	2390      	movs	r3, #144	; 0x90
 8003f4a:	05db      	lsls	r3, r3, #23
 8003f4c:	0011      	movs	r1, r2
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f000 fe26 	bl	8004ba0 <HAL_GPIO_Init>
}
 8003f54:	46c0      	nop			; (mov r8, r8)
 8003f56:	46bd      	mov	sp, r7
 8003f58:	b00c      	add	sp, #48	; 0x30
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40013800 	.word	0x40013800
 8003f60:	40021000 	.word	0x40021000
 8003f64:	40004400 	.word	0x40004400

08003f68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08a      	sub	sp, #40	; 0x28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003f70:	2300      	movs	r3, #0
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8003f74:	2300      	movs	r3, #0
 8003f76:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	200d      	movs	r0, #13
 8003f80:	f000 fd60 	bl	8004a44 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8003f84:	200d      	movs	r0, #13
 8003f86:	f000 fd72 	bl	8004a6e <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003f8a:	4b21      	ldr	r3, [pc, #132]	; (8004010 <HAL_InitTick+0xa8>)
 8003f8c:	699a      	ldr	r2, [r3, #24]
 8003f8e:	4b20      	ldr	r3, [pc, #128]	; (8004010 <HAL_InitTick+0xa8>)
 8003f90:	2180      	movs	r1, #128	; 0x80
 8003f92:	0109      	lsls	r1, r1, #4
 8003f94:	430a      	orrs	r2, r1
 8003f96:	619a      	str	r2, [r3, #24]
 8003f98:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <HAL_InitTick+0xa8>)
 8003f9a:	699a      	ldr	r2, [r3, #24]
 8003f9c:	2380      	movs	r3, #128	; 0x80
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	60bb      	str	r3, [r7, #8]
 8003fa4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003fa6:	230c      	movs	r3, #12
 8003fa8:	18fa      	adds	r2, r7, r3
 8003faa:	2310      	movs	r3, #16
 8003fac:	18fb      	adds	r3, r7, r3
 8003fae:	0011      	movs	r1, r2
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f002 fa5f 	bl	8006474 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003fb6:	f002 fa47 	bl	8006448 <HAL_RCC_GetPCLK1Freq>
 8003fba:	0003      	movs	r3, r0
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	4914      	ldr	r1, [pc, #80]	; (8004014 <HAL_InitTick+0xac>)
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f7fc f8b2 	bl	800012c <__udivsi3>
 8003fc8:	0003      	movs	r3, r0
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003fce:	4b12      	ldr	r3, [pc, #72]	; (8004018 <HAL_InitTick+0xb0>)
 8003fd0:	4a12      	ldr	r2, [pc, #72]	; (800401c <HAL_InitTick+0xb4>)
 8003fd2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003fd4:	4b10      	ldr	r3, [pc, #64]	; (8004018 <HAL_InitTick+0xb0>)
 8003fd6:	4a12      	ldr	r2, [pc, #72]	; (8004020 <HAL_InitTick+0xb8>)
 8003fd8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003fda:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <HAL_InitTick+0xb0>)
 8003fdc:	6a3a      	ldr	r2, [r7, #32]
 8003fde:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8003fe0:	4b0d      	ldr	r3, [pc, #52]	; (8004018 <HAL_InitTick+0xb0>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fe6:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <HAL_InitTick+0xb0>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003fec:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <HAL_InitTick+0xb0>)
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f002 fece 	bl	8006d90 <HAL_TIM_Base_Init>
 8003ff4:	1e03      	subs	r3, r0, #0
 8003ff6:	d105      	bne.n	8004004 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003ff8:	4b07      	ldr	r3, [pc, #28]	; (8004018 <HAL_InitTick+0xb0>)
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f002 fefc 	bl	8006df8 <HAL_TIM_Base_Start_IT>
 8004000:	0003      	movs	r3, r0
 8004002:	e000      	b.n	8004006 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
}
 8004006:	0018      	movs	r0, r3
 8004008:	46bd      	mov	sp, r7
 800400a:	b00a      	add	sp, #40	; 0x28
 800400c:	bd80      	pop	{r7, pc}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	40021000 	.word	0x40021000
 8004014:	000f4240 	.word	0x000f4240
 8004018:	20001894 	.word	0x20001894
 800401c:	40012c00 	.word	0x40012c00
 8004020:	000003e7 	.word	0x000003e7

08004024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004028:	46c0      	nop			; (mov r8, r8)
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004032:	e7fe      	b.n	8004032 <HardFault_Handler+0x4>

08004034 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20.
  */
void RTC_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004038:	4b03      	ldr	r3, [pc, #12]	; (8004048 <RTC_IRQHandler+0x14>)
 800403a:	0018      	movs	r0, r3
 800403c:	f002 fdfa 	bl	8006c34 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8004040:	46c0      	nop			; (mov r8, r8)
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	20001870 	.word	0x20001870

0800404c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004050:	4b03      	ldr	r3, [pc, #12]	; (8004060 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8004052:	0018      	movs	r0, r3
 8004054:	f002 fef2 	bl	8006e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8004058:	46c0      	nop			; (mov r8, r8)
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	20001894 	.word	0x20001894

08004064 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004068:	4b03      	ldr	r3, [pc, #12]	; (8004078 <USART1_IRQHandler+0x14>)
 800406a:	0018      	movs	r0, r3
 800406c:	f003 fa9c 	bl	80075a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004070:	46c0      	nop			; (mov r8, r8)
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	20001340 	.word	0x20001340

0800407c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004084:	4a14      	ldr	r2, [pc, #80]	; (80040d8 <_sbrk+0x5c>)
 8004086:	4b15      	ldr	r3, [pc, #84]	; (80040dc <_sbrk+0x60>)
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004090:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <_sbrk+0x64>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d102      	bne.n	800409e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004098:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <_sbrk+0x64>)
 800409a:	4a12      	ldr	r2, [pc, #72]	; (80040e4 <_sbrk+0x68>)
 800409c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800409e:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <_sbrk+0x64>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	18d3      	adds	r3, r2, r3
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d207      	bcs.n	80040bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040ac:	f005 f80e 	bl	80090cc <__errno>
 80040b0:	0003      	movs	r3, r0
 80040b2:	220c      	movs	r2, #12
 80040b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040b6:	2301      	movs	r3, #1
 80040b8:	425b      	negs	r3, r3
 80040ba:	e009      	b.n	80040d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040bc:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <_sbrk+0x64>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040c2:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <_sbrk+0x64>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	18d2      	adds	r2, r2, r3
 80040ca:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <_sbrk+0x64>)
 80040cc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80040ce:	68fb      	ldr	r3, [r7, #12]
}
 80040d0:	0018      	movs	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b006      	add	sp, #24
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20002000 	.word	0x20002000
 80040dc:	00000400 	.word	0x00000400
 80040e0:	200005a4 	.word	0x200005a4
 80040e4:	200018e0 	.word	0x200018e0

080040e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80040ec:	46c0      	nop			; (mov r8, r8)
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80040f4:	480d      	ldr	r0, [pc, #52]	; (800412c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80040f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040f8:	480d      	ldr	r0, [pc, #52]	; (8004130 <LoopForever+0x6>)
  ldr r1, =_edata
 80040fa:	490e      	ldr	r1, [pc, #56]	; (8004134 <LoopForever+0xa>)
  ldr r2, =_sidata
 80040fc:	4a0e      	ldr	r2, [pc, #56]	; (8004138 <LoopForever+0xe>)
  movs r3, #0
 80040fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004100:	e002      	b.n	8004108 <LoopCopyDataInit>

08004102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004106:	3304      	adds	r3, #4

08004108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800410a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800410c:	d3f9      	bcc.n	8004102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800410e:	4a0b      	ldr	r2, [pc, #44]	; (800413c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004110:	4c0b      	ldr	r4, [pc, #44]	; (8004140 <LoopForever+0x16>)
  movs r3, #0
 8004112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004114:	e001      	b.n	800411a <LoopFillZerobss>

08004116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004118:	3204      	adds	r2, #4

0800411a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800411a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800411c:	d3fb      	bcc.n	8004116 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800411e:	f7ff ffe3 	bl	80040e8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004122:	f004 ffd9 	bl	80090d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004126:	f7ff f953 	bl	80033d0 <main>

0800412a <LoopForever>:

LoopForever:
    b LoopForever
 800412a:	e7fe      	b.n	800412a <LoopForever>
  ldr   r0, =_estack
 800412c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004134:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004138:	0800ba00 	.word	0x0800ba00
  ldr r2, =_sbss
 800413c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004140:	200018dc 	.word	0x200018dc

08004144 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004144:	e7fe      	b.n	8004144 <ADC1_IRQHandler>
	...

08004148 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800414c:	4b07      	ldr	r3, [pc, #28]	; (800416c <HAL_Init+0x24>)
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	4b06      	ldr	r3, [pc, #24]	; (800416c <HAL_Init+0x24>)
 8004152:	2110      	movs	r1, #16
 8004154:	430a      	orrs	r2, r1
 8004156:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004158:	2000      	movs	r0, #0
 800415a:	f7ff ff05 	bl	8003f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800415e:	f7ff fd9b 	bl	8003c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	0018      	movs	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	40022000 	.word	0x40022000

08004170 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004174:	4b05      	ldr	r3, [pc, #20]	; (800418c <HAL_IncTick+0x1c>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	001a      	movs	r2, r3
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <HAL_IncTick+0x20>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	18d2      	adds	r2, r2, r3
 8004180:	4b03      	ldr	r3, [pc, #12]	; (8004190 <HAL_IncTick+0x20>)
 8004182:	601a      	str	r2, [r3, #0]
}
 8004184:	46c0      	nop			; (mov r8, r8)
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	20000008 	.word	0x20000008
 8004190:	200018d4 	.word	0x200018d4

08004194 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  return uwTick;
 8004198:	4b02      	ldr	r3, [pc, #8]	; (80041a4 <HAL_GetTick+0x10>)
 800419a:	681b      	ldr	r3, [r3, #0]
}
 800419c:	0018      	movs	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	200018d4 	.word	0x200018d4

080041a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041b0:	f7ff fff0 	bl	8004194 <HAL_GetTick>
 80041b4:	0003      	movs	r3, r0
 80041b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	3301      	adds	r3, #1
 80041c0:	d005      	beq.n	80041ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041c2:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <HAL_Delay+0x40>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	001a      	movs	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	189b      	adds	r3, r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	f7ff ffe0 	bl	8004194 <HAL_GetTick>
 80041d4:	0002      	movs	r2, r0
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d8f7      	bhi.n	80041d0 <HAL_Delay+0x28>
  {
  }
}
 80041e0:	46c0      	nop			; (mov r8, r8)
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b004      	add	sp, #16
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	20000008 	.word	0x20000008

080041ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041f4:	230f      	movs	r3, #15
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	2200      	movs	r2, #0
 80041fa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e125      	b.n	8004456 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2234      	movs	r2, #52	; 0x34
 800421c:	2100      	movs	r1, #0
 800421e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	0018      	movs	r0, r3
 8004224:	f7ff fd5c 	bl	8003ce0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422c:	2210      	movs	r2, #16
 800422e:	4013      	ands	r3, r2
 8004230:	d000      	beq.n	8004234 <HAL_ADC_Init+0x48>
 8004232:	e103      	b.n	800443c <HAL_ADC_Init+0x250>
 8004234:	230f      	movs	r3, #15
 8004236:	18fb      	adds	r3, r7, r3
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d000      	beq.n	8004240 <HAL_ADC_Init+0x54>
 800423e:	e0fd      	b.n	800443c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2204      	movs	r2, #4
 8004248:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800424a:	d000      	beq.n	800424e <HAL_ADC_Init+0x62>
 800424c:	e0f6      	b.n	800443c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004252:	4a83      	ldr	r2, [pc, #524]	; (8004460 <HAL_ADC_Init+0x274>)
 8004254:	4013      	ands	r3, r2
 8004256:	2202      	movs	r2, #2
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2203      	movs	r2, #3
 8004266:	4013      	ands	r3, r2
 8004268:	2b01      	cmp	r3, #1
 800426a:	d112      	bne.n	8004292 <HAL_ADC_Init+0xa6>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2201      	movs	r2, #1
 8004274:	4013      	ands	r3, r2
 8004276:	2b01      	cmp	r3, #1
 8004278:	d009      	beq.n	800428e <HAL_ADC_Init+0xa2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	2380      	movs	r3, #128	; 0x80
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	401a      	ands	r2, r3
 8004286:	2380      	movs	r3, #128	; 0x80
 8004288:	021b      	lsls	r3, r3, #8
 800428a:	429a      	cmp	r2, r3
 800428c:	d101      	bne.n	8004292 <HAL_ADC_Init+0xa6>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <HAL_ADC_Init+0xa8>
 8004292:	2300      	movs	r3, #0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d116      	bne.n	80042c6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	2218      	movs	r2, #24
 80042a0:	4393      	bics	r3, r2
 80042a2:	0019      	movs	r1, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	0899      	lsrs	r1, r3, #2
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4964      	ldr	r1, [pc, #400]	; (8004464 <HAL_ADC_Init+0x278>)
 80042d2:	400a      	ands	r2, r1
 80042d4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	7e1b      	ldrb	r3, [r3, #24]
 80042da:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	7e5b      	ldrb	r3, [r3, #25]
 80042e0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80042e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	7e9b      	ldrb	r3, [r3, #26]
 80042e8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80042ea:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d002      	beq.n	80042fa <HAL_ADC_Init+0x10e>
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	015b      	lsls	r3, r3, #5
 80042f8:	e000      	b.n	80042fc <HAL_ADC_Init+0x110>
 80042fa:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80042fc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004302:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	2b02      	cmp	r3, #2
 800430a:	d101      	bne.n	8004310 <HAL_ADC_Init+0x124>
 800430c:	2304      	movs	r3, #4
 800430e:	e000      	b.n	8004312 <HAL_ADC_Init+0x126>
 8004310:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8004312:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2124      	movs	r1, #36	; 0x24
 8004318:	5c5b      	ldrb	r3, [r3, r1]
 800431a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800431c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	4313      	orrs	r3, r2
 8004322:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	7edb      	ldrb	r3, [r3, #27]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d115      	bne.n	8004358 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	7e9b      	ldrb	r3, [r3, #26]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d105      	bne.n	8004340 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2280      	movs	r2, #128	; 0x80
 8004338:	0252      	lsls	r2, r2, #9
 800433a:	4313      	orrs	r3, r2
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	e00b      	b.n	8004358 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004344:	2220      	movs	r2, #32
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004350:	2201      	movs	r2, #1
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69da      	ldr	r2, [r3, #28]
 800435c:	23c2      	movs	r3, #194	; 0xc2
 800435e:	33ff      	adds	r3, #255	; 0xff
 8004360:	429a      	cmp	r2, r3
 8004362:	d007      	beq.n	8004374 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800436c:	4313      	orrs	r3, r2
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	4313      	orrs	r3, r2
 8004372:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68d9      	ldr	r1, [r3, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	430a      	orrs	r2, r1
 8004382:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004388:	2380      	movs	r3, #128	; 0x80
 800438a:	055b      	lsls	r3, r3, #21
 800438c:	429a      	cmp	r2, r3
 800438e:	d01b      	beq.n	80043c8 <HAL_ADC_Init+0x1dc>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	2b01      	cmp	r3, #1
 8004396:	d017      	beq.n	80043c8 <HAL_ADC_Init+0x1dc>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	2b02      	cmp	r3, #2
 800439e:	d013      	beq.n	80043c8 <HAL_ADC_Init+0x1dc>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	d00f      	beq.n	80043c8 <HAL_ADC_Init+0x1dc>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d00b      	beq.n	80043c8 <HAL_ADC_Init+0x1dc>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	2b05      	cmp	r3, #5
 80043b6:	d007      	beq.n	80043c8 <HAL_ADC_Init+0x1dc>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	2b06      	cmp	r3, #6
 80043be:	d003      	beq.n	80043c8 <HAL_ADC_Init+0x1dc>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	2b07      	cmp	r3, #7
 80043c6:	d112      	bne.n	80043ee <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695a      	ldr	r2, [r3, #20]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2107      	movs	r1, #7
 80043d4:	438a      	bics	r2, r1
 80043d6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6959      	ldr	r1, [r3, #20]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e2:	2207      	movs	r2, #7
 80043e4:	401a      	ands	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	4a1c      	ldr	r2, [pc, #112]	; (8004468 <HAL_ADC_Init+0x27c>)
 80043f6:	4013      	ands	r3, r2
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d10b      	bne.n	8004416 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	2203      	movs	r2, #3
 800440a:	4393      	bics	r3, r2
 800440c:	2201      	movs	r2, #1
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004414:	e01c      	b.n	8004450 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441a:	2212      	movs	r2, #18
 800441c:	4393      	bics	r3, r2
 800441e:	2210      	movs	r2, #16
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	2201      	movs	r2, #1
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8004432:	230f      	movs	r3, #15
 8004434:	18fb      	adds	r3, r7, r3
 8004436:	2201      	movs	r2, #1
 8004438:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800443a:	e009      	b.n	8004450 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	2210      	movs	r2, #16
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8004448:	230f      	movs	r3, #15
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	2201      	movs	r2, #1
 800444e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004450:	230f      	movs	r3, #15
 8004452:	18fb      	adds	r3, r7, r3
 8004454:	781b      	ldrb	r3, [r3, #0]
}
 8004456:	0018      	movs	r0, r3
 8004458:	46bd      	mov	sp, r7
 800445a:	b004      	add	sp, #16
 800445c:	bd80      	pop	{r7, pc}
 800445e:	46c0      	nop			; (mov r8, r8)
 8004460:	fffffefd 	.word	0xfffffefd
 8004464:	fffe0219 	.word	0xfffe0219
 8004468:	833fffe7 	.word	0x833fffe7

0800446c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800446c:	b590      	push	{r4, r7, lr}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004474:	230f      	movs	r3, #15
 8004476:	18fb      	adds	r3, r7, r3
 8004478:	2200      	movs	r2, #0
 800447a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	2204      	movs	r2, #4
 8004484:	4013      	ands	r3, r2
 8004486:	d138      	bne.n	80044fa <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2234      	movs	r2, #52	; 0x34
 800448c:	5c9b      	ldrb	r3, [r3, r2]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_ADC_Start+0x2a>
 8004492:	2302      	movs	r3, #2
 8004494:	e038      	b.n	8004508 <HAL_ADC_Start+0x9c>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2234      	movs	r2, #52	; 0x34
 800449a:	2101      	movs	r1, #1
 800449c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	7e5b      	ldrb	r3, [r3, #25]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d007      	beq.n	80044b6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80044a6:	230f      	movs	r3, #15
 80044a8:	18fc      	adds	r4, r7, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	0018      	movs	r0, r3
 80044ae:	f000 f9c5 	bl	800483c <ADC_Enable>
 80044b2:	0003      	movs	r3, r0
 80044b4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80044b6:	230f      	movs	r3, #15
 80044b8:	18fb      	adds	r3, r7, r3
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d120      	bne.n	8004502 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c4:	4a12      	ldr	r2, [pc, #72]	; (8004510 <HAL_ADC_Start+0xa4>)
 80044c6:	4013      	ands	r3, r2
 80044c8:	2280      	movs	r2, #128	; 0x80
 80044ca:	0052      	lsls	r2, r2, #1
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2234      	movs	r2, #52	; 0x34
 80044dc:	2100      	movs	r1, #0
 80044de:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	221c      	movs	r2, #28
 80044e6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2104      	movs	r1, #4
 80044f4:	430a      	orrs	r2, r1
 80044f6:	609a      	str	r2, [r3, #8]
 80044f8:	e003      	b.n	8004502 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80044fa:	230f      	movs	r3, #15
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	2202      	movs	r2, #2
 8004500:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004502:	230f      	movs	r3, #15
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	781b      	ldrb	r3, [r3, #0]
}
 8004508:	0018      	movs	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	b005      	add	sp, #20
 800450e:	bd90      	pop	{r4, r7, pc}
 8004510:	fffff0fe 	.word	0xfffff0fe

08004514 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	2b08      	cmp	r3, #8
 8004524:	d102      	bne.n	800452c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8004526:	2308      	movs	r3, #8
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	e014      	b.n	8004556 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	2201      	movs	r2, #1
 8004534:	4013      	ands	r3, r2
 8004536:	2b01      	cmp	r3, #1
 8004538:	d10b      	bne.n	8004552 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	2220      	movs	r2, #32
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2234      	movs	r2, #52	; 0x34
 800454a:	2100      	movs	r1, #0
 800454c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e06b      	b.n	800462a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8004552:	230c      	movs	r3, #12
 8004554:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004556:	f7ff fe1d 	bl	8004194 <HAL_GetTick>
 800455a:	0003      	movs	r3, r0
 800455c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800455e:	e019      	b.n	8004594 <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	3301      	adds	r3, #1
 8004564:	d016      	beq.n	8004594 <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d007      	beq.n	800457c <HAL_ADC_PollForConversion+0x68>
 800456c:	f7ff fe12 	bl	8004194 <HAL_GetTick>
 8004570:	0002      	movs	r2, r0
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d20b      	bcs.n	8004594 <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	2204      	movs	r2, #4
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2234      	movs	r2, #52	; 0x34
 800458c:	2100      	movs	r1, #0
 800458e:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e04a      	b.n	800462a <HAL_ADC_PollForConversion+0x116>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4013      	ands	r3, r2
 800459e:	d0df      	beq.n	8004560 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	2280      	movs	r2, #128	; 0x80
 80045a6:	0092      	lsls	r2, r2, #2
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	23c0      	movs	r3, #192	; 0xc0
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	4013      	ands	r3, r2
 80045ba:	d12d      	bne.n	8004618 <HAL_ADC_PollForConversion+0x104>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d129      	bne.n	8004618 <HAL_ADC_PollForConversion+0x104>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2208      	movs	r2, #8
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d122      	bne.n	8004618 <HAL_ADC_PollForConversion+0x104>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2204      	movs	r2, #4
 80045da:	4013      	ands	r3, r2
 80045dc:	d110      	bne.n	8004600 <HAL_ADC_PollForConversion+0xec>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	210c      	movs	r1, #12
 80045ea:	438a      	bics	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	4a10      	ldr	r2, [pc, #64]	; (8004634 <HAL_ADC_PollForConversion+0x120>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	2201      	movs	r2, #1
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38
 80045fe:	e00b      	b.n	8004618 <HAL_ADC_PollForConversion+0x104>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	2220      	movs	r2, #32
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004610:	2201      	movs	r2, #1
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	7e1b      	ldrb	r3, [r3, #24]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d103      	bne.n	8004628 <HAL_ADC_PollForConversion+0x114>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	220c      	movs	r2, #12
 8004626:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	0018      	movs	r0, r3
 800462c:	46bd      	mov	sp, r7
 800462e:	b004      	add	sp, #16
 8004630:	bd80      	pop	{r7, pc}
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	fffffefe 	.word	0xfffffefe

08004638 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004646:	0018      	movs	r0, r3
 8004648:	46bd      	mov	sp, r7
 800464a:	b002      	add	sp, #8
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800465a:	230f      	movs	r3, #15
 800465c:	18fb      	adds	r3, r7, r3
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466a:	2380      	movs	r3, #128	; 0x80
 800466c:	055b      	lsls	r3, r3, #21
 800466e:	429a      	cmp	r2, r3
 8004670:	d011      	beq.n	8004696 <HAL_ADC_ConfigChannel+0x46>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	2b01      	cmp	r3, #1
 8004678:	d00d      	beq.n	8004696 <HAL_ADC_ConfigChannel+0x46>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	2b02      	cmp	r3, #2
 8004680:	d009      	beq.n	8004696 <HAL_ADC_ConfigChannel+0x46>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	2b03      	cmp	r3, #3
 8004688:	d005      	beq.n	8004696 <HAL_ADC_ConfigChannel+0x46>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	2b04      	cmp	r3, #4
 8004690:	d001      	beq.n	8004696 <HAL_ADC_ConfigChannel+0x46>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2234      	movs	r2, #52	; 0x34
 800469a:	5c9b      	ldrb	r3, [r3, r2]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x54>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e0bb      	b.n	800481c <HAL_ADC_ConfigChannel+0x1cc>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2234      	movs	r2, #52	; 0x34
 80046a8:	2101      	movs	r1, #1
 80046aa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2204      	movs	r2, #4
 80046b4:	4013      	ands	r3, r2
 80046b6:	d000      	beq.n	80046ba <HAL_ADC_ConfigChannel+0x6a>
 80046b8:	e09f      	b.n	80047fa <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	4a59      	ldr	r2, [pc, #356]	; (8004824 <HAL_ADC_ConfigChannel+0x1d4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d100      	bne.n	80046c6 <HAL_ADC_ConfigChannel+0x76>
 80046c4:	e077      	b.n	80047b6 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2201      	movs	r2, #1
 80046d2:	409a      	lsls	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e0:	2380      	movs	r3, #128	; 0x80
 80046e2:	055b      	lsls	r3, r3, #21
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d037      	beq.n	8004758 <HAL_ADC_ConfigChannel+0x108>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d033      	beq.n	8004758 <HAL_ADC_ConfigChannel+0x108>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d02f      	beq.n	8004758 <HAL_ADC_ConfigChannel+0x108>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d02b      	beq.n	8004758 <HAL_ADC_ConfigChannel+0x108>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	2b04      	cmp	r3, #4
 8004706:	d027      	beq.n	8004758 <HAL_ADC_ConfigChannel+0x108>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	2b05      	cmp	r3, #5
 800470e:	d023      	beq.n	8004758 <HAL_ADC_ConfigChannel+0x108>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	2b06      	cmp	r3, #6
 8004716:	d01f      	beq.n	8004758 <HAL_ADC_ConfigChannel+0x108>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471c:	2b07      	cmp	r3, #7
 800471e:	d01b      	beq.n	8004758 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	2107      	movs	r1, #7
 800472c:	400b      	ands	r3, r1
 800472e:	429a      	cmp	r2, r3
 8004730:	d012      	beq.n	8004758 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695a      	ldr	r2, [r3, #20]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2107      	movs	r1, #7
 800473e:	438a      	bics	r2, r1
 8004740:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6959      	ldr	r1, [r3, #20]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	2207      	movs	r2, #7
 800474e:	401a      	ands	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b10      	cmp	r3, #16
 800475e:	d003      	beq.n	8004768 <HAL_ADC_ConfigChannel+0x118>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b11      	cmp	r3, #17
 8004766:	d152      	bne.n	800480e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004768:	4b2f      	ldr	r3, [pc, #188]	; (8004828 <HAL_ADC_ConfigChannel+0x1d8>)
 800476a:	6819      	ldr	r1, [r3, #0]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b10      	cmp	r3, #16
 8004772:	d102      	bne.n	800477a <HAL_ADC_ConfigChannel+0x12a>
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	041b      	lsls	r3, r3, #16
 8004778:	e001      	b.n	800477e <HAL_ADC_ConfigChannel+0x12e>
 800477a:	2380      	movs	r3, #128	; 0x80
 800477c:	03db      	lsls	r3, r3, #15
 800477e:	4a2a      	ldr	r2, [pc, #168]	; (8004828 <HAL_ADC_ConfigChannel+0x1d8>)
 8004780:	430b      	orrs	r3, r1
 8004782:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b10      	cmp	r3, #16
 800478a:	d140      	bne.n	800480e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800478c:	4b27      	ldr	r3, [pc, #156]	; (800482c <HAL_ADC_ConfigChannel+0x1dc>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4927      	ldr	r1, [pc, #156]	; (8004830 <HAL_ADC_ConfigChannel+0x1e0>)
 8004792:	0018      	movs	r0, r3
 8004794:	f7fb fcca 	bl	800012c <__udivsi3>
 8004798:	0003      	movs	r3, r0
 800479a:	001a      	movs	r2, r3
 800479c:	0013      	movs	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	189b      	adds	r3, r3, r2
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80047a6:	e002      	b.n	80047ae <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1f9      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x158>
 80047b4:	e02b      	b.n	800480e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2101      	movs	r1, #1
 80047c2:	4099      	lsls	r1, r3
 80047c4:	000b      	movs	r3, r1
 80047c6:	43d9      	mvns	r1, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	400a      	ands	r2, r1
 80047ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b10      	cmp	r3, #16
 80047d6:	d003      	beq.n	80047e0 <HAL_ADC_ConfigChannel+0x190>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b11      	cmp	r3, #17
 80047de:	d116      	bne.n	800480e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80047e0:	4b11      	ldr	r3, [pc, #68]	; (8004828 <HAL_ADC_ConfigChannel+0x1d8>)
 80047e2:	6819      	ldr	r1, [r3, #0]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b10      	cmp	r3, #16
 80047ea:	d101      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x1a0>
 80047ec:	4a11      	ldr	r2, [pc, #68]	; (8004834 <HAL_ADC_ConfigChannel+0x1e4>)
 80047ee:	e000      	b.n	80047f2 <HAL_ADC_ConfigChannel+0x1a2>
 80047f0:	4a11      	ldr	r2, [pc, #68]	; (8004838 <HAL_ADC_ConfigChannel+0x1e8>)
 80047f2:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <HAL_ADC_ConfigChannel+0x1d8>)
 80047f4:	400a      	ands	r2, r1
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	e009      	b.n	800480e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fe:	2220      	movs	r2, #32
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004806:	230f      	movs	r3, #15
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	2201      	movs	r2, #1
 800480c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2234      	movs	r2, #52	; 0x34
 8004812:	2100      	movs	r1, #0
 8004814:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004816:	230f      	movs	r3, #15
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	781b      	ldrb	r3, [r3, #0]
}
 800481c:	0018      	movs	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	b004      	add	sp, #16
 8004822:	bd80      	pop	{r7, pc}
 8004824:	00001001 	.word	0x00001001
 8004828:	40012708 	.word	0x40012708
 800482c:	20000004 	.word	0x20000004
 8004830:	000f4240 	.word	0x000f4240
 8004834:	ff7fffff 	.word	0xff7fffff
 8004838:	ffbfffff 	.word	0xffbfffff

0800483c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2203      	movs	r2, #3
 8004854:	4013      	ands	r3, r2
 8004856:	2b01      	cmp	r3, #1
 8004858:	d112      	bne.n	8004880 <ADC_Enable+0x44>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2201      	movs	r2, #1
 8004862:	4013      	ands	r3, r2
 8004864:	2b01      	cmp	r3, #1
 8004866:	d009      	beq.n	800487c <ADC_Enable+0x40>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	2380      	movs	r3, #128	; 0x80
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	401a      	ands	r2, r3
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	429a      	cmp	r2, r3
 800487a:	d101      	bne.n	8004880 <ADC_Enable+0x44>
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <ADC_Enable+0x46>
 8004880:	2300      	movs	r3, #0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d14b      	bne.n	800491e <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	4a26      	ldr	r2, [pc, #152]	; (8004928 <ADC_Enable+0xec>)
 800488e:	4013      	ands	r3, r2
 8004890:	d00d      	beq.n	80048ae <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	2210      	movs	r2, #16
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a2:	2201      	movs	r2, #1
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e038      	b.n	8004920 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2101      	movs	r1, #1
 80048ba:	430a      	orrs	r2, r1
 80048bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80048be:	4b1b      	ldr	r3, [pc, #108]	; (800492c <ADC_Enable+0xf0>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	491b      	ldr	r1, [pc, #108]	; (8004930 <ADC_Enable+0xf4>)
 80048c4:	0018      	movs	r0, r3
 80048c6:	f7fb fc31 	bl	800012c <__udivsi3>
 80048ca:	0003      	movs	r3, r0
 80048cc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80048ce:	e002      	b.n	80048d6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1f9      	bne.n	80048d0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80048dc:	f7ff fc5a 	bl	8004194 <HAL_GetTick>
 80048e0:	0003      	movs	r3, r0
 80048e2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80048e4:	e014      	b.n	8004910 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048e6:	f7ff fc55 	bl	8004194 <HAL_GetTick>
 80048ea:	0002      	movs	r2, r0
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d90d      	bls.n	8004910 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	2210      	movs	r2, #16
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004904:	2201      	movs	r2, #1
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e007      	b.n	8004920 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2201      	movs	r2, #1
 8004918:	4013      	ands	r3, r2
 800491a:	2b01      	cmp	r3, #1
 800491c:	d1e3      	bne.n	80048e6 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	0018      	movs	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	b004      	add	sp, #16
 8004926:	bd80      	pop	{r7, pc}
 8004928:	80000017 	.word	0x80000017
 800492c:	20000004 	.word	0x20000004
 8004930:	000f4240 	.word	0x000f4240

08004934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	0002      	movs	r2, r0
 800493c:	1dfb      	adds	r3, r7, #7
 800493e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004940:	1dfb      	adds	r3, r7, #7
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	2b7f      	cmp	r3, #127	; 0x7f
 8004946:	d809      	bhi.n	800495c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004948:	1dfb      	adds	r3, r7, #7
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	001a      	movs	r2, r3
 800494e:	231f      	movs	r3, #31
 8004950:	401a      	ands	r2, r3
 8004952:	4b04      	ldr	r3, [pc, #16]	; (8004964 <__NVIC_EnableIRQ+0x30>)
 8004954:	2101      	movs	r1, #1
 8004956:	4091      	lsls	r1, r2
 8004958:	000a      	movs	r2, r1
 800495a:	601a      	str	r2, [r3, #0]
  }
}
 800495c:	46c0      	nop			; (mov r8, r8)
 800495e:	46bd      	mov	sp, r7
 8004960:	b002      	add	sp, #8
 8004962:	bd80      	pop	{r7, pc}
 8004964:	e000e100 	.word	0xe000e100

08004968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004968:	b590      	push	{r4, r7, lr}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	0002      	movs	r2, r0
 8004970:	6039      	str	r1, [r7, #0]
 8004972:	1dfb      	adds	r3, r7, #7
 8004974:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004976:	1dfb      	adds	r3, r7, #7
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b7f      	cmp	r3, #127	; 0x7f
 800497c:	d828      	bhi.n	80049d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800497e:	4a2f      	ldr	r2, [pc, #188]	; (8004a3c <__NVIC_SetPriority+0xd4>)
 8004980:	1dfb      	adds	r3, r7, #7
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	b25b      	sxtb	r3, r3
 8004986:	089b      	lsrs	r3, r3, #2
 8004988:	33c0      	adds	r3, #192	; 0xc0
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	589b      	ldr	r3, [r3, r2]
 800498e:	1dfa      	adds	r2, r7, #7
 8004990:	7812      	ldrb	r2, [r2, #0]
 8004992:	0011      	movs	r1, r2
 8004994:	2203      	movs	r2, #3
 8004996:	400a      	ands	r2, r1
 8004998:	00d2      	lsls	r2, r2, #3
 800499a:	21ff      	movs	r1, #255	; 0xff
 800499c:	4091      	lsls	r1, r2
 800499e:	000a      	movs	r2, r1
 80049a0:	43d2      	mvns	r2, r2
 80049a2:	401a      	ands	r2, r3
 80049a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	019b      	lsls	r3, r3, #6
 80049aa:	22ff      	movs	r2, #255	; 0xff
 80049ac:	401a      	ands	r2, r3
 80049ae:	1dfb      	adds	r3, r7, #7
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	0018      	movs	r0, r3
 80049b4:	2303      	movs	r3, #3
 80049b6:	4003      	ands	r3, r0
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049bc:	481f      	ldr	r0, [pc, #124]	; (8004a3c <__NVIC_SetPriority+0xd4>)
 80049be:	1dfb      	adds	r3, r7, #7
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	b25b      	sxtb	r3, r3
 80049c4:	089b      	lsrs	r3, r3, #2
 80049c6:	430a      	orrs	r2, r1
 80049c8:	33c0      	adds	r3, #192	; 0xc0
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80049ce:	e031      	b.n	8004a34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049d0:	4a1b      	ldr	r2, [pc, #108]	; (8004a40 <__NVIC_SetPriority+0xd8>)
 80049d2:	1dfb      	adds	r3, r7, #7
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	0019      	movs	r1, r3
 80049d8:	230f      	movs	r3, #15
 80049da:	400b      	ands	r3, r1
 80049dc:	3b08      	subs	r3, #8
 80049de:	089b      	lsrs	r3, r3, #2
 80049e0:	3306      	adds	r3, #6
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	18d3      	adds	r3, r2, r3
 80049e6:	3304      	adds	r3, #4
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	1dfa      	adds	r2, r7, #7
 80049ec:	7812      	ldrb	r2, [r2, #0]
 80049ee:	0011      	movs	r1, r2
 80049f0:	2203      	movs	r2, #3
 80049f2:	400a      	ands	r2, r1
 80049f4:	00d2      	lsls	r2, r2, #3
 80049f6:	21ff      	movs	r1, #255	; 0xff
 80049f8:	4091      	lsls	r1, r2
 80049fa:	000a      	movs	r2, r1
 80049fc:	43d2      	mvns	r2, r2
 80049fe:	401a      	ands	r2, r3
 8004a00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	019b      	lsls	r3, r3, #6
 8004a06:	22ff      	movs	r2, #255	; 0xff
 8004a08:	401a      	ands	r2, r3
 8004a0a:	1dfb      	adds	r3, r7, #7
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	0018      	movs	r0, r3
 8004a10:	2303      	movs	r3, #3
 8004a12:	4003      	ands	r3, r0
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a18:	4809      	ldr	r0, [pc, #36]	; (8004a40 <__NVIC_SetPriority+0xd8>)
 8004a1a:	1dfb      	adds	r3, r7, #7
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	001c      	movs	r4, r3
 8004a20:	230f      	movs	r3, #15
 8004a22:	4023      	ands	r3, r4
 8004a24:	3b08      	subs	r3, #8
 8004a26:	089b      	lsrs	r3, r3, #2
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	3306      	adds	r3, #6
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	18c3      	adds	r3, r0, r3
 8004a30:	3304      	adds	r3, #4
 8004a32:	601a      	str	r2, [r3, #0]
}
 8004a34:	46c0      	nop			; (mov r8, r8)
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b003      	add	sp, #12
 8004a3a:	bd90      	pop	{r4, r7, pc}
 8004a3c:	e000e100 	.word	0xe000e100
 8004a40:	e000ed00 	.word	0xe000ed00

08004a44 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
 8004a4e:	210f      	movs	r1, #15
 8004a50:	187b      	adds	r3, r7, r1
 8004a52:	1c02      	adds	r2, r0, #0
 8004a54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	187b      	adds	r3, r7, r1
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	b25b      	sxtb	r3, r3
 8004a5e:	0011      	movs	r1, r2
 8004a60:	0018      	movs	r0, r3
 8004a62:	f7ff ff81 	bl	8004968 <__NVIC_SetPriority>
}
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	b004      	add	sp, #16
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	0002      	movs	r2, r0
 8004a76:	1dfb      	adds	r3, r7, #7
 8004a78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a7a:	1dfb      	adds	r3, r7, #7
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	b25b      	sxtb	r3, r3
 8004a80:	0018      	movs	r0, r3
 8004a82:	f7ff ff57 	bl	8004934 <__NVIC_EnableIRQ>
}
 8004a86:	46c0      	nop			; (mov r8, r8)
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	b002      	add	sp, #8
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b082      	sub	sp, #8
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2221      	movs	r2, #33	; 0x21
 8004a9a:	5c9b      	ldrb	r3, [r3, r2]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d008      	beq.n	8004ab4 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	2100      	movs	r1, #0
 8004aae:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e020      	b.n	8004af6 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	210e      	movs	r1, #14
 8004ac0:	438a      	bics	r2, r1
 8004ac2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2101      	movs	r1, #1
 8004ad0:	438a      	bics	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004adc:	2101      	movs	r1, #1
 8004ade:	4091      	lsls	r1, r2
 8004ae0:	000a      	movs	r2, r1
 8004ae2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2221      	movs	r2, #33	; 0x21
 8004ae8:	2101      	movs	r1, #1
 8004aea:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2220      	movs	r2, #32
 8004af0:	2100      	movs	r1, #0
 8004af2:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	0018      	movs	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b002      	add	sp, #8
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b084      	sub	sp, #16
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b06:	230f      	movs	r3, #15
 8004b08:	18fb      	adds	r3, r7, r3
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2221      	movs	r2, #33	; 0x21
 8004b12:	5c9b      	ldrb	r3, [r3, r2]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d007      	beq.n	8004b2a <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004b20:	230f      	movs	r3, #15
 8004b22:	18fb      	adds	r3, r7, r3
 8004b24:	2201      	movs	r2, #1
 8004b26:	701a      	strb	r2, [r3, #0]
 8004b28:	e028      	b.n	8004b7c <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	210e      	movs	r1, #14
 8004b36:	438a      	bics	r2, r1
 8004b38:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2101      	movs	r1, #1
 8004b46:	438a      	bics	r2, r1
 8004b48:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b52:	2101      	movs	r1, #1
 8004b54:	4091      	lsls	r1, r2
 8004b56:	000a      	movs	r2, r1
 8004b58:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2221      	movs	r2, #33	; 0x21
 8004b5e:	2101      	movs	r1, #1
 8004b60:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	2100      	movs	r1, #0
 8004b68:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d004      	beq.n	8004b7c <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	0010      	movs	r0, r2
 8004b7a:	4798      	blx	r3
    } 
  }
  return status;
 8004b7c:	230f      	movs	r3, #15
 8004b7e:	18fb      	adds	r3, r7, r3
 8004b80:	781b      	ldrb	r3, [r3, #0]
}
 8004b82:	0018      	movs	r0, r3
 8004b84:	46bd      	mov	sp, r7
 8004b86:	b004      	add	sp, #16
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8004b96:	0018      	movs	r0, r3
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	b002      	add	sp, #8
 8004b9c:	bd80      	pop	{r7, pc}
	...

08004ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bae:	e14f      	b.n	8004e50 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4091      	lsls	r1, r2
 8004bba:	000a      	movs	r2, r1
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d100      	bne.n	8004bc8 <HAL_GPIO_Init+0x28>
 8004bc6:	e140      	b.n	8004e4a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d00b      	beq.n	8004be8 <HAL_GPIO_Init+0x48>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d007      	beq.n	8004be8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bdc:	2b11      	cmp	r3, #17
 8004bde:	d003      	beq.n	8004be8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b12      	cmp	r3, #18
 8004be6:	d130      	bne.n	8004c4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	2203      	movs	r2, #3
 8004bf4:	409a      	lsls	r2, r3
 8004bf6:	0013      	movs	r3, r2
 8004bf8:	43da      	mvns	r2, r3
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	409a      	lsls	r2, r3
 8004c0a:	0013      	movs	r3, r2
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c1e:	2201      	movs	r2, #1
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	409a      	lsls	r2, r3
 8004c24:	0013      	movs	r3, r2
 8004c26:	43da      	mvns	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	091b      	lsrs	r3, r3, #4
 8004c34:	2201      	movs	r2, #1
 8004c36:	401a      	ands	r2, r3
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	409a      	lsls	r2, r3
 8004c3c:	0013      	movs	r3, r2
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	2203      	movs	r2, #3
 8004c56:	409a      	lsls	r2, r3
 8004c58:	0013      	movs	r3, r2
 8004c5a:	43da      	mvns	r2, r3
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	0013      	movs	r3, r2
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d003      	beq.n	8004c8a <HAL_GPIO_Init+0xea>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b12      	cmp	r3, #18
 8004c88:	d123      	bne.n	8004cd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	08da      	lsrs	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	3208      	adds	r2, #8
 8004c92:	0092      	lsls	r2, r2, #2
 8004c94:	58d3      	ldr	r3, [r2, r3]
 8004c96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2207      	movs	r2, #7
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	220f      	movs	r2, #15
 8004ca2:	409a      	lsls	r2, r3
 8004ca4:	0013      	movs	r3, r2
 8004ca6:	43da      	mvns	r2, r3
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	4013      	ands	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2107      	movs	r1, #7
 8004cb6:	400b      	ands	r3, r1
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	409a      	lsls	r2, r3
 8004cbc:	0013      	movs	r3, r2
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	08da      	lsrs	r2, r3, #3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3208      	adds	r2, #8
 8004ccc:	0092      	lsls	r2, r2, #2
 8004cce:	6939      	ldr	r1, [r7, #16]
 8004cd0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	2203      	movs	r2, #3
 8004cde:	409a      	lsls	r2, r3
 8004ce0:	0013      	movs	r3, r2
 8004ce2:	43da      	mvns	r2, r3
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2203      	movs	r2, #3
 8004cf0:	401a      	ands	r2, r3
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	409a      	lsls	r2, r3
 8004cf8:	0013      	movs	r3, r2
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	2380      	movs	r3, #128	; 0x80
 8004d0c:	055b      	lsls	r3, r3, #21
 8004d0e:	4013      	ands	r3, r2
 8004d10:	d100      	bne.n	8004d14 <HAL_GPIO_Init+0x174>
 8004d12:	e09a      	b.n	8004e4a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d14:	4b54      	ldr	r3, [pc, #336]	; (8004e68 <HAL_GPIO_Init+0x2c8>)
 8004d16:	699a      	ldr	r2, [r3, #24]
 8004d18:	4b53      	ldr	r3, [pc, #332]	; (8004e68 <HAL_GPIO_Init+0x2c8>)
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	619a      	str	r2, [r3, #24]
 8004d20:	4b51      	ldr	r3, [pc, #324]	; (8004e68 <HAL_GPIO_Init+0x2c8>)
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	2201      	movs	r2, #1
 8004d26:	4013      	ands	r3, r2
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d2c:	4a4f      	ldr	r2, [pc, #316]	; (8004e6c <HAL_GPIO_Init+0x2cc>)
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	089b      	lsrs	r3, r3, #2
 8004d32:	3302      	adds	r3, #2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	589b      	ldr	r3, [r3, r2]
 8004d38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2203      	movs	r2, #3
 8004d3e:	4013      	ands	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	220f      	movs	r2, #15
 8004d44:	409a      	lsls	r2, r3
 8004d46:	0013      	movs	r3, r2
 8004d48:	43da      	mvns	r2, r3
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	2390      	movs	r3, #144	; 0x90
 8004d54:	05db      	lsls	r3, r3, #23
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d013      	beq.n	8004d82 <HAL_GPIO_Init+0x1e2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a44      	ldr	r2, [pc, #272]	; (8004e70 <HAL_GPIO_Init+0x2d0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00d      	beq.n	8004d7e <HAL_GPIO_Init+0x1de>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a43      	ldr	r2, [pc, #268]	; (8004e74 <HAL_GPIO_Init+0x2d4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d007      	beq.n	8004d7a <HAL_GPIO_Init+0x1da>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a42      	ldr	r2, [pc, #264]	; (8004e78 <HAL_GPIO_Init+0x2d8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d101      	bne.n	8004d76 <HAL_GPIO_Init+0x1d6>
 8004d72:	2303      	movs	r3, #3
 8004d74:	e006      	b.n	8004d84 <HAL_GPIO_Init+0x1e4>
 8004d76:	2305      	movs	r3, #5
 8004d78:	e004      	b.n	8004d84 <HAL_GPIO_Init+0x1e4>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e002      	b.n	8004d84 <HAL_GPIO_Init+0x1e4>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <HAL_GPIO_Init+0x1e4>
 8004d82:	2300      	movs	r3, #0
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	2103      	movs	r1, #3
 8004d88:	400a      	ands	r2, r1
 8004d8a:	0092      	lsls	r2, r2, #2
 8004d8c:	4093      	lsls	r3, r2
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d94:	4935      	ldr	r1, [pc, #212]	; (8004e6c <HAL_GPIO_Init+0x2cc>)
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	089b      	lsrs	r3, r3, #2
 8004d9a:	3302      	adds	r3, #2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004da2:	4b36      	ldr	r3, [pc, #216]	; (8004e7c <HAL_GPIO_Init+0x2dc>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	43da      	mvns	r2, r3
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	4013      	ands	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	2380      	movs	r3, #128	; 0x80
 8004db8:	025b      	lsls	r3, r3, #9
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d003      	beq.n	8004dc6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004dc6:	4b2d      	ldr	r3, [pc, #180]	; (8004e7c <HAL_GPIO_Init+0x2dc>)
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004dcc:	4b2b      	ldr	r3, [pc, #172]	; (8004e7c <HAL_GPIO_Init+0x2dc>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	43da      	mvns	r2, r3
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	2380      	movs	r3, #128	; 0x80
 8004de2:	029b      	lsls	r3, r3, #10
 8004de4:	4013      	ands	r3, r2
 8004de6:	d003      	beq.n	8004df0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004df0:	4b22      	ldr	r3, [pc, #136]	; (8004e7c <HAL_GPIO_Init+0x2dc>)
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004df6:	4b21      	ldr	r3, [pc, #132]	; (8004e7c <HAL_GPIO_Init+0x2dc>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	43da      	mvns	r2, r3
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	4013      	ands	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	2380      	movs	r3, #128	; 0x80
 8004e0c:	035b      	lsls	r3, r3, #13
 8004e0e:	4013      	ands	r3, r2
 8004e10:	d003      	beq.n	8004e1a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004e1a:	4b18      	ldr	r3, [pc, #96]	; (8004e7c <HAL_GPIO_Init+0x2dc>)
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004e20:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <HAL_GPIO_Init+0x2dc>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	43da      	mvns	r2, r3
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	2380      	movs	r3, #128	; 0x80
 8004e36:	039b      	lsls	r3, r3, #14
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d003      	beq.n	8004e44 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004e44:	4b0d      	ldr	r3, [pc, #52]	; (8004e7c <HAL_GPIO_Init+0x2dc>)
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	40da      	lsrs	r2, r3
 8004e58:	1e13      	subs	r3, r2, #0
 8004e5a:	d000      	beq.n	8004e5e <HAL_GPIO_Init+0x2be>
 8004e5c:	e6a8      	b.n	8004bb0 <HAL_GPIO_Init+0x10>
  } 
}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	46bd      	mov	sp, r7
 8004e62:	b006      	add	sp, #24
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	40010000 	.word	0x40010000
 8004e70:	48000400 	.word	0x48000400
 8004e74:	48000800 	.word	0x48000800
 8004e78:	48000c00 	.word	0x48000c00
 8004e7c:	40010400 	.word	0x40010400

08004e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	0008      	movs	r0, r1
 8004e8a:	0011      	movs	r1, r2
 8004e8c:	1cbb      	adds	r3, r7, #2
 8004e8e:	1c02      	adds	r2, r0, #0
 8004e90:	801a      	strh	r2, [r3, #0]
 8004e92:	1c7b      	adds	r3, r7, #1
 8004e94:	1c0a      	adds	r2, r1, #0
 8004e96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e98:	1c7b      	adds	r3, r7, #1
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d004      	beq.n	8004eaa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ea0:	1cbb      	adds	r3, r7, #2
 8004ea2:	881a      	ldrh	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ea8:	e003      	b.n	8004eb2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004eaa:	1cbb      	adds	r3, r7, #2
 8004eac:	881a      	ldrh	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	b002      	add	sp, #8
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e082      	b.n	8004fd4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2241      	movs	r2, #65	; 0x41
 8004ed2:	5c9b      	ldrb	r3, [r3, r2]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d107      	bne.n	8004eea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2240      	movs	r2, #64	; 0x40
 8004ede:	2100      	movs	r1, #0
 8004ee0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	f7fe ff41 	bl	8003d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2241      	movs	r2, #65	; 0x41
 8004eee:	2124      	movs	r1, #36	; 0x24
 8004ef0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2101      	movs	r1, #1
 8004efe:	438a      	bics	r2, r1
 8004f00:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4934      	ldr	r1, [pc, #208]	; (8004fdc <HAL_I2C_Init+0x120>)
 8004f0c:	400a      	ands	r2, r1
 8004f0e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4931      	ldr	r1, [pc, #196]	; (8004fe0 <HAL_I2C_Init+0x124>)
 8004f1c:	400a      	ands	r2, r1
 8004f1e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d108      	bne.n	8004f3a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2180      	movs	r1, #128	; 0x80
 8004f32:	0209      	lsls	r1, r1, #8
 8004f34:	430a      	orrs	r2, r1
 8004f36:	609a      	str	r2, [r3, #8]
 8004f38:	e007      	b.n	8004f4a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2184      	movs	r1, #132	; 0x84
 8004f44:	0209      	lsls	r1, r1, #8
 8004f46:	430a      	orrs	r2, r1
 8004f48:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d104      	bne.n	8004f5c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2280      	movs	r2, #128	; 0x80
 8004f58:	0112      	lsls	r2, r2, #4
 8004f5a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	491f      	ldr	r1, [pc, #124]	; (8004fe4 <HAL_I2C_Init+0x128>)
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	491a      	ldr	r1, [pc, #104]	; (8004fe0 <HAL_I2C_Init+0x124>)
 8004f78:	400a      	ands	r2, r1
 8004f7a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	431a      	orrs	r2, r3
 8004f86:	0011      	movs	r1, r2
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	021a      	lsls	r2, r3, #8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69d9      	ldr	r1, [r3, #28]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1a      	ldr	r2, [r3, #32]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2241      	movs	r2, #65	; 0x41
 8004fc0:	2120      	movs	r1, #32
 8004fc2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2242      	movs	r2, #66	; 0x42
 8004fce:	2100      	movs	r1, #0
 8004fd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	b002      	add	sp, #8
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	f0ffffff 	.word	0xf0ffffff
 8004fe0:	ffff7fff 	.word	0xffff7fff
 8004fe4:	02008000 	.word	0x02008000

08004fe8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004fe8:	b590      	push	{r4, r7, lr}
 8004fea:	b089      	sub	sp, #36	; 0x24
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	0008      	movs	r0, r1
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	0019      	movs	r1, r3
 8004ff6:	230a      	movs	r3, #10
 8004ff8:	18fb      	adds	r3, r7, r3
 8004ffa:	1c02      	adds	r2, r0, #0
 8004ffc:	801a      	strh	r2, [r3, #0]
 8004ffe:	2308      	movs	r3, #8
 8005000:	18fb      	adds	r3, r7, r3
 8005002:	1c0a      	adds	r2, r1, #0
 8005004:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2241      	movs	r2, #65	; 0x41
 800500a:	5c9b      	ldrb	r3, [r3, r2]
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b20      	cmp	r3, #32
 8005010:	d000      	beq.n	8005014 <HAL_I2C_Master_Transmit+0x2c>
 8005012:	e0e7      	b.n	80051e4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2240      	movs	r2, #64	; 0x40
 8005018:	5c9b      	ldrb	r3, [r3, r2]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <HAL_I2C_Master_Transmit+0x3a>
 800501e:	2302      	movs	r3, #2
 8005020:	e0e1      	b.n	80051e6 <HAL_I2C_Master_Transmit+0x1fe>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2240      	movs	r2, #64	; 0x40
 8005026:	2101      	movs	r1, #1
 8005028:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800502a:	f7ff f8b3 	bl	8004194 <HAL_GetTick>
 800502e:	0003      	movs	r3, r0
 8005030:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005032:	2380      	movs	r3, #128	; 0x80
 8005034:	0219      	lsls	r1, r3, #8
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	2319      	movs	r3, #25
 800503e:	2201      	movs	r2, #1
 8005040:	f000 fb1e 	bl	8005680 <I2C_WaitOnFlagUntilTimeout>
 8005044:	1e03      	subs	r3, r0, #0
 8005046:	d001      	beq.n	800504c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e0cc      	b.n	80051e6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2241      	movs	r2, #65	; 0x41
 8005050:	2121      	movs	r1, #33	; 0x21
 8005052:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2242      	movs	r2, #66	; 0x42
 8005058:	2110      	movs	r1, #16
 800505a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2208      	movs	r2, #8
 800506c:	18ba      	adds	r2, r7, r2
 800506e:	8812      	ldrh	r2, [r2, #0]
 8005070:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507c:	b29b      	uxth	r3, r3
 800507e:	2bff      	cmp	r3, #255	; 0xff
 8005080:	d911      	bls.n	80050a6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	22ff      	movs	r2, #255	; 0xff
 8005086:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508c:	b2da      	uxtb	r2, r3
 800508e:	2380      	movs	r3, #128	; 0x80
 8005090:	045c      	lsls	r4, r3, #17
 8005092:	230a      	movs	r3, #10
 8005094:	18fb      	adds	r3, r7, r3
 8005096:	8819      	ldrh	r1, [r3, #0]
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	4b55      	ldr	r3, [pc, #340]	; (80051f0 <HAL_I2C_Master_Transmit+0x208>)
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	0023      	movs	r3, r4
 80050a0:	f000 fc7a 	bl	8005998 <I2C_TransferConfig>
 80050a4:	e075      	b.n	8005192 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	2380      	movs	r3, #128	; 0x80
 80050b8:	049c      	lsls	r4, r3, #18
 80050ba:	230a      	movs	r3, #10
 80050bc:	18fb      	adds	r3, r7, r3
 80050be:	8819      	ldrh	r1, [r3, #0]
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	4b4b      	ldr	r3, [pc, #300]	; (80051f0 <HAL_I2C_Master_Transmit+0x208>)
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	0023      	movs	r3, r4
 80050c8:	f000 fc66 	bl	8005998 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80050cc:	e061      	b.n	8005192 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	0018      	movs	r0, r3
 80050d6:	f000 fb12 	bl	80056fe <I2C_WaitOnTXISFlagUntilTimeout>
 80050da:	1e03      	subs	r3, r0, #0
 80050dc:	d001      	beq.n	80050e2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e081      	b.n	80051e6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	781a      	ldrb	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	3b01      	subs	r3, #1
 8005100:	b29a      	uxth	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005116:	b29b      	uxth	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d03a      	beq.n	8005192 <HAL_I2C_Master_Transmit+0x1aa>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005120:	2b00      	cmp	r3, #0
 8005122:	d136      	bne.n	8005192 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	0013      	movs	r3, r2
 800512e:	2200      	movs	r2, #0
 8005130:	2180      	movs	r1, #128	; 0x80
 8005132:	f000 faa5 	bl	8005680 <I2C_WaitOnFlagUntilTimeout>
 8005136:	1e03      	subs	r3, r0, #0
 8005138:	d001      	beq.n	800513e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e053      	b.n	80051e6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005142:	b29b      	uxth	r3, r3
 8005144:	2bff      	cmp	r3, #255	; 0xff
 8005146:	d911      	bls.n	800516c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	22ff      	movs	r2, #255	; 0xff
 800514c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005152:	b2da      	uxtb	r2, r3
 8005154:	2380      	movs	r3, #128	; 0x80
 8005156:	045c      	lsls	r4, r3, #17
 8005158:	230a      	movs	r3, #10
 800515a:	18fb      	adds	r3, r7, r3
 800515c:	8819      	ldrh	r1, [r3, #0]
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	2300      	movs	r3, #0
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	0023      	movs	r3, r4
 8005166:	f000 fc17 	bl	8005998 <I2C_TransferConfig>
 800516a:	e012      	b.n	8005192 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517a:	b2da      	uxtb	r2, r3
 800517c:	2380      	movs	r3, #128	; 0x80
 800517e:	049c      	lsls	r4, r3, #18
 8005180:	230a      	movs	r3, #10
 8005182:	18fb      	adds	r3, r7, r3
 8005184:	8819      	ldrh	r1, [r3, #0]
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	2300      	movs	r3, #0
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	0023      	movs	r3, r4
 800518e:	f000 fc03 	bl	8005998 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005196:	b29b      	uxth	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d198      	bne.n	80050ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	0018      	movs	r0, r3
 80051a4:	f000 faea 	bl	800577c <I2C_WaitOnSTOPFlagUntilTimeout>
 80051a8:	1e03      	subs	r3, r0, #0
 80051aa:	d001      	beq.n	80051b0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e01a      	b.n	80051e6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2220      	movs	r2, #32
 80051b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	490c      	ldr	r1, [pc, #48]	; (80051f4 <HAL_I2C_Master_Transmit+0x20c>)
 80051c4:	400a      	ands	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2241      	movs	r2, #65	; 0x41
 80051cc:	2120      	movs	r1, #32
 80051ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2242      	movs	r2, #66	; 0x42
 80051d4:	2100      	movs	r1, #0
 80051d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2240      	movs	r2, #64	; 0x40
 80051dc:	2100      	movs	r1, #0
 80051de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	e000      	b.n	80051e6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80051e4:	2302      	movs	r3, #2
  }
}
 80051e6:	0018      	movs	r0, r3
 80051e8:	46bd      	mov	sp, r7
 80051ea:	b007      	add	sp, #28
 80051ec:	bd90      	pop	{r4, r7, pc}
 80051ee:	46c0      	nop			; (mov r8, r8)
 80051f0:	80002000 	.word	0x80002000
 80051f4:	fe00e800 	.word	0xfe00e800

080051f8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80051f8:	b590      	push	{r4, r7, lr}
 80051fa:	b089      	sub	sp, #36	; 0x24
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	0008      	movs	r0, r1
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	0019      	movs	r1, r3
 8005206:	230a      	movs	r3, #10
 8005208:	18fb      	adds	r3, r7, r3
 800520a:	1c02      	adds	r2, r0, #0
 800520c:	801a      	strh	r2, [r3, #0]
 800520e:	2308      	movs	r3, #8
 8005210:	18fb      	adds	r3, r7, r3
 8005212:	1c0a      	adds	r2, r1, #0
 8005214:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2241      	movs	r2, #65	; 0x41
 800521a:	5c9b      	ldrb	r3, [r3, r2]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b20      	cmp	r3, #32
 8005220:	d000      	beq.n	8005224 <HAL_I2C_Master_Receive+0x2c>
 8005222:	e0e8      	b.n	80053f6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2240      	movs	r2, #64	; 0x40
 8005228:	5c9b      	ldrb	r3, [r3, r2]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d101      	bne.n	8005232 <HAL_I2C_Master_Receive+0x3a>
 800522e:	2302      	movs	r3, #2
 8005230:	e0e2      	b.n	80053f8 <HAL_I2C_Master_Receive+0x200>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2240      	movs	r2, #64	; 0x40
 8005236:	2101      	movs	r1, #1
 8005238:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800523a:	f7fe ffab 	bl	8004194 <HAL_GetTick>
 800523e:	0003      	movs	r3, r0
 8005240:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005242:	2380      	movs	r3, #128	; 0x80
 8005244:	0219      	lsls	r1, r3, #8
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	2319      	movs	r3, #25
 800524e:	2201      	movs	r2, #1
 8005250:	f000 fa16 	bl	8005680 <I2C_WaitOnFlagUntilTimeout>
 8005254:	1e03      	subs	r3, r0, #0
 8005256:	d001      	beq.n	800525c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e0cd      	b.n	80053f8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2241      	movs	r2, #65	; 0x41
 8005260:	2122      	movs	r1, #34	; 0x22
 8005262:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2242      	movs	r2, #66	; 0x42
 8005268:	2110      	movs	r1, #16
 800526a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2208      	movs	r2, #8
 800527c:	18ba      	adds	r2, r7, r2
 800527e:	8812      	ldrh	r2, [r2, #0]
 8005280:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528c:	b29b      	uxth	r3, r3
 800528e:	2bff      	cmp	r3, #255	; 0xff
 8005290:	d911      	bls.n	80052b6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	22ff      	movs	r2, #255	; 0xff
 8005296:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529c:	b2da      	uxtb	r2, r3
 800529e:	2380      	movs	r3, #128	; 0x80
 80052a0:	045c      	lsls	r4, r3, #17
 80052a2:	230a      	movs	r3, #10
 80052a4:	18fb      	adds	r3, r7, r3
 80052a6:	8819      	ldrh	r1, [r3, #0]
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	4b55      	ldr	r3, [pc, #340]	; (8005400 <HAL_I2C_Master_Receive+0x208>)
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	0023      	movs	r3, r4
 80052b0:	f000 fb72 	bl	8005998 <I2C_TransferConfig>
 80052b4:	e076      	b.n	80053a4 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	2380      	movs	r3, #128	; 0x80
 80052c8:	049c      	lsls	r4, r3, #18
 80052ca:	230a      	movs	r3, #10
 80052cc:	18fb      	adds	r3, r7, r3
 80052ce:	8819      	ldrh	r1, [r3, #0]
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	4b4b      	ldr	r3, [pc, #300]	; (8005400 <HAL_I2C_Master_Receive+0x208>)
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	0023      	movs	r3, r4
 80052d8:	f000 fb5e 	bl	8005998 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80052dc:	e062      	b.n	80053a4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	0018      	movs	r0, r3
 80052e6:	f000 fa85 	bl	80057f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052ea:	1e03      	subs	r3, r0, #0
 80052ec:	d001      	beq.n	80052f2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e082      	b.n	80053f8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d03a      	beq.n	80053a4 <HAL_I2C_Master_Receive+0x1ac>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005332:	2b00      	cmp	r3, #0
 8005334:	d136      	bne.n	80053a4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	0013      	movs	r3, r2
 8005340:	2200      	movs	r2, #0
 8005342:	2180      	movs	r1, #128	; 0x80
 8005344:	f000 f99c 	bl	8005680 <I2C_WaitOnFlagUntilTimeout>
 8005348:	1e03      	subs	r3, r0, #0
 800534a:	d001      	beq.n	8005350 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e053      	b.n	80053f8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005354:	b29b      	uxth	r3, r3
 8005356:	2bff      	cmp	r3, #255	; 0xff
 8005358:	d911      	bls.n	800537e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	22ff      	movs	r2, #255	; 0xff
 800535e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005364:	b2da      	uxtb	r2, r3
 8005366:	2380      	movs	r3, #128	; 0x80
 8005368:	045c      	lsls	r4, r3, #17
 800536a:	230a      	movs	r3, #10
 800536c:	18fb      	adds	r3, r7, r3
 800536e:	8819      	ldrh	r1, [r3, #0]
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	2300      	movs	r3, #0
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	0023      	movs	r3, r4
 8005378:	f000 fb0e 	bl	8005998 <I2C_TransferConfig>
 800537c:	e012      	b.n	80053a4 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005382:	b29a      	uxth	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538c:	b2da      	uxtb	r2, r3
 800538e:	2380      	movs	r3, #128	; 0x80
 8005390:	049c      	lsls	r4, r3, #18
 8005392:	230a      	movs	r3, #10
 8005394:	18fb      	adds	r3, r7, r3
 8005396:	8819      	ldrh	r1, [r3, #0]
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	2300      	movs	r3, #0
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	0023      	movs	r3, r4
 80053a0:	f000 fafa 	bl	8005998 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d197      	bne.n	80052de <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	0018      	movs	r0, r3
 80053b6:	f000 f9e1 	bl	800577c <I2C_WaitOnSTOPFlagUntilTimeout>
 80053ba:	1e03      	subs	r3, r0, #0
 80053bc:	d001      	beq.n	80053c2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e01a      	b.n	80053f8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2220      	movs	r2, #32
 80053c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	490b      	ldr	r1, [pc, #44]	; (8005404 <HAL_I2C_Master_Receive+0x20c>)
 80053d6:	400a      	ands	r2, r1
 80053d8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2241      	movs	r2, #65	; 0x41
 80053de:	2120      	movs	r1, #32
 80053e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2242      	movs	r2, #66	; 0x42
 80053e6:	2100      	movs	r1, #0
 80053e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2240      	movs	r2, #64	; 0x40
 80053ee:	2100      	movs	r1, #0
 80053f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	e000      	b.n	80053f8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80053f6:	2302      	movs	r3, #2
  }
}
 80053f8:	0018      	movs	r0, r3
 80053fa:	46bd      	mov	sp, r7
 80053fc:	b007      	add	sp, #28
 80053fe:	bd90      	pop	{r4, r7, pc}
 8005400:	80002400 	.word	0x80002400
 8005404:	fe00e800 	.word	0xfe00e800

08005408 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08a      	sub	sp, #40	; 0x28
 800540c:	af02      	add	r7, sp, #8
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	607a      	str	r2, [r7, #4]
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	230a      	movs	r3, #10
 8005416:	18fb      	adds	r3, r7, r3
 8005418:	1c0a      	adds	r2, r1, #0
 800541a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800541c:	2300      	movs	r3, #0
 800541e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2241      	movs	r2, #65	; 0x41
 8005424:	5c9b      	ldrb	r3, [r3, r2]
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b20      	cmp	r3, #32
 800542a:	d000      	beq.n	800542e <HAL_I2C_IsDeviceReady+0x26>
 800542c:	e0fe      	b.n	800562c <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	699a      	ldr	r2, [r3, #24]
 8005434:	2380      	movs	r3, #128	; 0x80
 8005436:	021b      	lsls	r3, r3, #8
 8005438:	401a      	ands	r2, r3
 800543a:	2380      	movs	r3, #128	; 0x80
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	429a      	cmp	r2, r3
 8005440:	d101      	bne.n	8005446 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8005442:	2302      	movs	r3, #2
 8005444:	e0f3      	b.n	800562e <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2240      	movs	r2, #64	; 0x40
 800544a:	5c9b      	ldrb	r3, [r3, r2]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_I2C_IsDeviceReady+0x4c>
 8005450:	2302      	movs	r3, #2
 8005452:	e0ec      	b.n	800562e <HAL_I2C_IsDeviceReady+0x226>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2240      	movs	r2, #64	; 0x40
 8005458:	2101      	movs	r1, #1
 800545a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2241      	movs	r2, #65	; 0x41
 8005460:	2124      	movs	r1, #36	; 0x24
 8005462:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d107      	bne.n	8005482 <HAL_I2C_IsDeviceReady+0x7a>
 8005472:	230a      	movs	r3, #10
 8005474:	18fb      	adds	r3, r7, r3
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	059b      	lsls	r3, r3, #22
 800547a:	0d9b      	lsrs	r3, r3, #22
 800547c:	4a6e      	ldr	r2, [pc, #440]	; (8005638 <HAL_I2C_IsDeviceReady+0x230>)
 800547e:	431a      	orrs	r2, r3
 8005480:	e007      	b.n	8005492 <HAL_I2C_IsDeviceReady+0x8a>
 8005482:	230a      	movs	r3, #10
 8005484:	18fb      	adds	r3, r7, r3
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	059b      	lsls	r3, r3, #22
 800548a:	0d9b      	lsrs	r3, r3, #22
 800548c:	22a0      	movs	r2, #160	; 0xa0
 800548e:	0192      	lsls	r2, r2, #6
 8005490:	431a      	orrs	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005498:	f7fe fe7c 	bl	8004194 <HAL_GetTick>
 800549c:	0003      	movs	r3, r0
 800549e:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	2220      	movs	r2, #32
 80054a8:	4013      	ands	r3, r2
 80054aa:	3b20      	subs	r3, #32
 80054ac:	425a      	negs	r2, r3
 80054ae:	4153      	adcs	r3, r2
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	231f      	movs	r3, #31
 80054b4:	18fb      	adds	r3, r7, r3
 80054b6:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	2210      	movs	r2, #16
 80054c0:	4013      	ands	r3, r2
 80054c2:	3b10      	subs	r3, #16
 80054c4:	425a      	negs	r2, r3
 80054c6:	4153      	adcs	r3, r2
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	231e      	movs	r3, #30
 80054cc:	18fb      	adds	r3, r7, r3
 80054ce:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80054d0:	e035      	b.n	800553e <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	3301      	adds	r3, #1
 80054d6:	d01a      	beq.n	800550e <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054d8:	f7fe fe5c 	bl	8004194 <HAL_GetTick>
 80054dc:	0002      	movs	r2, r0
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d302      	bcc.n	80054ee <HAL_I2C_IsDeviceReady+0xe6>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10f      	bne.n	800550e <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2241      	movs	r2, #65	; 0x41
 80054f2:	2120      	movs	r1, #32
 80054f4:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fa:	2220      	movs	r2, #32
 80054fc:	431a      	orrs	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2240      	movs	r2, #64	; 0x40
 8005506:	2100      	movs	r1, #0
 8005508:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e08f      	b.n	800562e <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	2220      	movs	r2, #32
 8005516:	4013      	ands	r3, r2
 8005518:	3b20      	subs	r3, #32
 800551a:	425a      	negs	r2, r3
 800551c:	4153      	adcs	r3, r2
 800551e:	b2da      	uxtb	r2, r3
 8005520:	231f      	movs	r3, #31
 8005522:	18fb      	adds	r3, r7, r3
 8005524:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	2210      	movs	r2, #16
 800552e:	4013      	ands	r3, r2
 8005530:	3b10      	subs	r3, #16
 8005532:	425a      	negs	r2, r3
 8005534:	4153      	adcs	r3, r2
 8005536:	b2da      	uxtb	r2, r3
 8005538:	231e      	movs	r3, #30
 800553a:	18fb      	adds	r3, r7, r3
 800553c:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800553e:	231f      	movs	r3, #31
 8005540:	18fb      	adds	r3, r7, r3
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d104      	bne.n	8005552 <HAL_I2C_IsDeviceReady+0x14a>
 8005548:	231e      	movs	r3, #30
 800554a:	18fb      	adds	r3, r7, r3
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0bf      	beq.n	80054d2 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	2210      	movs	r2, #16
 800555a:	4013      	ands	r3, r2
 800555c:	2b10      	cmp	r3, #16
 800555e:	d01a      	beq.n	8005596 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	0013      	movs	r3, r2
 800556a:	2200      	movs	r2, #0
 800556c:	2120      	movs	r1, #32
 800556e:	f000 f887 	bl	8005680 <I2C_WaitOnFlagUntilTimeout>
 8005572:	1e03      	subs	r3, r0, #0
 8005574:	d001      	beq.n	800557a <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e059      	b.n	800562e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2220      	movs	r2, #32
 8005580:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2241      	movs	r2, #65	; 0x41
 8005586:	2120      	movs	r1, #32
 8005588:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2240      	movs	r2, #64	; 0x40
 800558e:	2100      	movs	r1, #0
 8005590:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	e04b      	b.n	800562e <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	0013      	movs	r3, r2
 80055a0:	2200      	movs	r2, #0
 80055a2:	2120      	movs	r1, #32
 80055a4:	f000 f86c 	bl	8005680 <I2C_WaitOnFlagUntilTimeout>
 80055a8:	1e03      	subs	r3, r0, #0
 80055aa:	d001      	beq.n	80055b0 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e03e      	b.n	800562e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2210      	movs	r2, #16
 80055b6:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2220      	movs	r2, #32
 80055be:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d119      	bne.n	80055fc <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2180      	movs	r1, #128	; 0x80
 80055d4:	01c9      	lsls	r1, r1, #7
 80055d6:	430a      	orrs	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	0013      	movs	r3, r2
 80055e4:	2200      	movs	r2, #0
 80055e6:	2120      	movs	r1, #32
 80055e8:	f000 f84a 	bl	8005680 <I2C_WaitOnFlagUntilTimeout>
 80055ec:	1e03      	subs	r3, r0, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e01c      	b.n	800562e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2220      	movs	r2, #32
 80055fa:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	3301      	adds	r3, #1
 8005600:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	429a      	cmp	r2, r3
 8005608:	d900      	bls.n	800560c <HAL_I2C_IsDeviceReady+0x204>
 800560a:	e72e      	b.n	800546a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2241      	movs	r2, #65	; 0x41
 8005610:	2120      	movs	r1, #32
 8005612:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005618:	2220      	movs	r2, #32
 800561a:	431a      	orrs	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2240      	movs	r2, #64	; 0x40
 8005624:	2100      	movs	r1, #0
 8005626:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 800562c:	2302      	movs	r3, #2
  }
}
 800562e:	0018      	movs	r0, r3
 8005630:	46bd      	mov	sp, r7
 8005632:	b008      	add	sp, #32
 8005634:	bd80      	pop	{r7, pc}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	02002000 	.word	0x02002000

0800563c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	2202      	movs	r2, #2
 800564c:	4013      	ands	r3, r2
 800564e:	2b02      	cmp	r3, #2
 8005650:	d103      	bne.n	800565a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2200      	movs	r2, #0
 8005658:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	2201      	movs	r2, #1
 8005662:	4013      	ands	r3, r2
 8005664:	2b01      	cmp	r3, #1
 8005666:	d007      	beq.n	8005678 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699a      	ldr	r2, [r3, #24]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2101      	movs	r1, #1
 8005674:	430a      	orrs	r2, r1
 8005676:	619a      	str	r2, [r3, #24]
  }
}
 8005678:	46c0      	nop			; (mov r8, r8)
 800567a:	46bd      	mov	sp, r7
 800567c:	b002      	add	sp, #8
 800567e:	bd80      	pop	{r7, pc}

08005680 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	603b      	str	r3, [r7, #0]
 800568c:	1dfb      	adds	r3, r7, #7
 800568e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005690:	e021      	b.n	80056d6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	3301      	adds	r3, #1
 8005696:	d01e      	beq.n	80056d6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005698:	f7fe fd7c 	bl	8004194 <HAL_GetTick>
 800569c:	0002      	movs	r2, r0
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d302      	bcc.n	80056ae <I2C_WaitOnFlagUntilTimeout+0x2e>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d113      	bne.n	80056d6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b2:	2220      	movs	r2, #32
 80056b4:	431a      	orrs	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2241      	movs	r2, #65	; 0x41
 80056be:	2120      	movs	r1, #32
 80056c0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2242      	movs	r2, #66	; 0x42
 80056c6:	2100      	movs	r1, #0
 80056c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2240      	movs	r2, #64	; 0x40
 80056ce:	2100      	movs	r1, #0
 80056d0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e00f      	b.n	80056f6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	4013      	ands	r3, r2
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	425a      	negs	r2, r3
 80056e6:	4153      	adcs	r3, r2
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	001a      	movs	r2, r3
 80056ec:	1dfb      	adds	r3, r7, #7
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d0ce      	beq.n	8005692 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	0018      	movs	r0, r3
 80056f8:	46bd      	mov	sp, r7
 80056fa:	b004      	add	sp, #16
 80056fc:	bd80      	pop	{r7, pc}

080056fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800570a:	e02b      	b.n	8005764 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	0018      	movs	r0, r3
 8005714:	f000 f8da 	bl	80058cc <I2C_IsAcknowledgeFailed>
 8005718:	1e03      	subs	r3, r0, #0
 800571a:	d001      	beq.n	8005720 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e029      	b.n	8005774 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	3301      	adds	r3, #1
 8005724:	d01e      	beq.n	8005764 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005726:	f7fe fd35 	bl	8004194 <HAL_GetTick>
 800572a:	0002      	movs	r2, r0
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	429a      	cmp	r2, r3
 8005734:	d302      	bcc.n	800573c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d113      	bne.n	8005764 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005740:	2220      	movs	r2, #32
 8005742:	431a      	orrs	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2241      	movs	r2, #65	; 0x41
 800574c:	2120      	movs	r1, #32
 800574e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2242      	movs	r2, #66	; 0x42
 8005754:	2100      	movs	r1, #0
 8005756:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2240      	movs	r2, #64	; 0x40
 800575c:	2100      	movs	r1, #0
 800575e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e007      	b.n	8005774 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	2202      	movs	r2, #2
 800576c:	4013      	ands	r3, r2
 800576e:	2b02      	cmp	r3, #2
 8005770:	d1cc      	bne.n	800570c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	0018      	movs	r0, r3
 8005776:	46bd      	mov	sp, r7
 8005778:	b004      	add	sp, #16
 800577a:	bd80      	pop	{r7, pc}

0800577c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005788:	e028      	b.n	80057dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	68b9      	ldr	r1, [r7, #8]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	0018      	movs	r0, r3
 8005792:	f000 f89b 	bl	80058cc <I2C_IsAcknowledgeFailed>
 8005796:	1e03      	subs	r3, r0, #0
 8005798:	d001      	beq.n	800579e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e026      	b.n	80057ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800579e:	f7fe fcf9 	bl	8004194 <HAL_GetTick>
 80057a2:	0002      	movs	r2, r0
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d302      	bcc.n	80057b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d113      	bne.n	80057dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b8:	2220      	movs	r2, #32
 80057ba:	431a      	orrs	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2241      	movs	r2, #65	; 0x41
 80057c4:	2120      	movs	r1, #32
 80057c6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2242      	movs	r2, #66	; 0x42
 80057cc:	2100      	movs	r1, #0
 80057ce:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2240      	movs	r2, #64	; 0x40
 80057d4:	2100      	movs	r1, #0
 80057d6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e007      	b.n	80057ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	2220      	movs	r2, #32
 80057e4:	4013      	ands	r3, r2
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d1cf      	bne.n	800578a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	0018      	movs	r0, r3
 80057ee:	46bd      	mov	sp, r7
 80057f0:	b004      	add	sp, #16
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005800:	e055      	b.n	80058ae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	0018      	movs	r0, r3
 800580a:	f000 f85f 	bl	80058cc <I2C_IsAcknowledgeFailed>
 800580e:	1e03      	subs	r3, r0, #0
 8005810:	d001      	beq.n	8005816 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e053      	b.n	80058be <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	2220      	movs	r2, #32
 800581e:	4013      	ands	r3, r2
 8005820:	2b20      	cmp	r3, #32
 8005822:	d129      	bne.n	8005878 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2204      	movs	r2, #4
 800582c:	4013      	ands	r3, r2
 800582e:	2b04      	cmp	r3, #4
 8005830:	d105      	bne.n	800583e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	e03f      	b.n	80058be <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2220      	movs	r2, #32
 8005844:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	491d      	ldr	r1, [pc, #116]	; (80058c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005852:	400a      	ands	r2, r1
 8005854:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2241      	movs	r2, #65	; 0x41
 8005860:	2120      	movs	r1, #32
 8005862:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2242      	movs	r2, #66	; 0x42
 8005868:	2100      	movs	r1, #0
 800586a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2240      	movs	r2, #64	; 0x40
 8005870:	2100      	movs	r1, #0
 8005872:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e022      	b.n	80058be <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005878:	f7fe fc8c 	bl	8004194 <HAL_GetTick>
 800587c:	0002      	movs	r2, r0
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	429a      	cmp	r2, r3
 8005886:	d302      	bcc.n	800588e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10f      	bne.n	80058ae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005892:	2220      	movs	r2, #32
 8005894:	431a      	orrs	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2241      	movs	r2, #65	; 0x41
 800589e:	2120      	movs	r1, #32
 80058a0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2240      	movs	r2, #64	; 0x40
 80058a6:	2100      	movs	r1, #0
 80058a8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e007      	b.n	80058be <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	2204      	movs	r2, #4
 80058b6:	4013      	ands	r3, r2
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d1a2      	bne.n	8005802 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	0018      	movs	r0, r3
 80058c0:	46bd      	mov	sp, r7
 80058c2:	b004      	add	sp, #16
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	46c0      	nop			; (mov r8, r8)
 80058c8:	fe00e800 	.word	0xfe00e800

080058cc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	2210      	movs	r2, #16
 80058e0:	4013      	ands	r3, r2
 80058e2:	2b10      	cmp	r3, #16
 80058e4:	d151      	bne.n	800598a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058e6:	e021      	b.n	800592c <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	3301      	adds	r3, #1
 80058ec:	d01e      	beq.n	800592c <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ee:	f7fe fc51 	bl	8004194 <HAL_GetTick>
 80058f2:	0002      	movs	r2, r0
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d302      	bcc.n	8005904 <I2C_IsAcknowledgeFailed+0x38>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d113      	bne.n	800592c <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005908:	2220      	movs	r2, #32
 800590a:	431a      	orrs	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2241      	movs	r2, #65	; 0x41
 8005914:	2120      	movs	r1, #32
 8005916:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2242      	movs	r2, #66	; 0x42
 800591c:	2100      	movs	r1, #0
 800591e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2240      	movs	r2, #64	; 0x40
 8005924:	2100      	movs	r1, #0
 8005926:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e02f      	b.n	800598c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	2220      	movs	r2, #32
 8005934:	4013      	ands	r3, r2
 8005936:	2b20      	cmp	r3, #32
 8005938:	d1d6      	bne.n	80058e8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2210      	movs	r2, #16
 8005940:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2220      	movs	r2, #32
 8005948:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	0018      	movs	r0, r3
 800594e:	f7ff fe75 	bl	800563c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	490d      	ldr	r1, [pc, #52]	; (8005994 <I2C_IsAcknowledgeFailed+0xc8>)
 800595e:	400a      	ands	r2, r1
 8005960:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005966:	2204      	movs	r2, #4
 8005968:	431a      	orrs	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2241      	movs	r2, #65	; 0x41
 8005972:	2120      	movs	r1, #32
 8005974:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2242      	movs	r2, #66	; 0x42
 800597a:	2100      	movs	r1, #0
 800597c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2240      	movs	r2, #64	; 0x40
 8005982:	2100      	movs	r1, #0
 8005984:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	0018      	movs	r0, r3
 800598e:	46bd      	mov	sp, r7
 8005990:	b004      	add	sp, #16
 8005992:	bd80      	pop	{r7, pc}
 8005994:	fe00e800 	.word	0xfe00e800

08005998 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005998:	b590      	push	{r4, r7, lr}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	0008      	movs	r0, r1
 80059a2:	0011      	movs	r1, r2
 80059a4:	607b      	str	r3, [r7, #4]
 80059a6:	240a      	movs	r4, #10
 80059a8:	193b      	adds	r3, r7, r4
 80059aa:	1c02      	adds	r2, r0, #0
 80059ac:	801a      	strh	r2, [r3, #0]
 80059ae:	2009      	movs	r0, #9
 80059b0:	183b      	adds	r3, r7, r0
 80059b2:	1c0a      	adds	r2, r1, #0
 80059b4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	6a3a      	ldr	r2, [r7, #32]
 80059be:	0d51      	lsrs	r1, r2, #21
 80059c0:	2280      	movs	r2, #128	; 0x80
 80059c2:	00d2      	lsls	r2, r2, #3
 80059c4:	400a      	ands	r2, r1
 80059c6:	490e      	ldr	r1, [pc, #56]	; (8005a00 <I2C_TransferConfig+0x68>)
 80059c8:	430a      	orrs	r2, r1
 80059ca:	43d2      	mvns	r2, r2
 80059cc:	401a      	ands	r2, r3
 80059ce:	0011      	movs	r1, r2
 80059d0:	193b      	adds	r3, r7, r4
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	059b      	lsls	r3, r3, #22
 80059d6:	0d9a      	lsrs	r2, r3, #22
 80059d8:	183b      	adds	r3, r7, r0
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	0418      	lsls	r0, r3, #16
 80059de:	23ff      	movs	r3, #255	; 0xff
 80059e0:	041b      	lsls	r3, r3, #16
 80059e2:	4003      	ands	r3, r0
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	431a      	orrs	r2, r3
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	431a      	orrs	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80059f6:	46c0      	nop			; (mov r8, r8)
 80059f8:	46bd      	mov	sp, r7
 80059fa:	b005      	add	sp, #20
 80059fc:	bd90      	pop	{r4, r7, pc}
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	03ff63ff 	.word	0x03ff63ff

08005a04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2241      	movs	r2, #65	; 0x41
 8005a12:	5c9b      	ldrb	r3, [r3, r2]
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	d138      	bne.n	8005a8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2240      	movs	r2, #64	; 0x40
 8005a1e:	5c9b      	ldrb	r3, [r3, r2]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e032      	b.n	8005a8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2240      	movs	r2, #64	; 0x40
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2241      	movs	r2, #65	; 0x41
 8005a34:	2124      	movs	r1, #36	; 0x24
 8005a36:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2101      	movs	r1, #1
 8005a44:	438a      	bics	r2, r1
 8005a46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4911      	ldr	r1, [pc, #68]	; (8005a98 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005a54:	400a      	ands	r2, r1
 8005a56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6819      	ldr	r1, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2101      	movs	r1, #1
 8005a74:	430a      	orrs	r2, r1
 8005a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2241      	movs	r2, #65	; 0x41
 8005a7c:	2120      	movs	r1, #32
 8005a7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2240      	movs	r2, #64	; 0x40
 8005a84:	2100      	movs	r1, #0
 8005a86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e000      	b.n	8005a8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a8c:	2302      	movs	r3, #2
  }
}
 8005a8e:	0018      	movs	r0, r3
 8005a90:	46bd      	mov	sp, r7
 8005a92:	b002      	add	sp, #8
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	ffffefff 	.word	0xffffefff

08005a9c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2241      	movs	r2, #65	; 0x41
 8005aaa:	5c9b      	ldrb	r3, [r3, r2]
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d139      	bne.n	8005b26 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2240      	movs	r2, #64	; 0x40
 8005ab6:	5c9b      	ldrb	r3, [r3, r2]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e033      	b.n	8005b28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2240      	movs	r2, #64	; 0x40
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2241      	movs	r2, #65	; 0x41
 8005acc:	2124      	movs	r1, #36	; 0x24
 8005ace:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2101      	movs	r1, #1
 8005adc:	438a      	bics	r2, r1
 8005ade:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4a11      	ldr	r2, [pc, #68]	; (8005b30 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2241      	movs	r2, #65	; 0x41
 8005b16:	2120      	movs	r1, #32
 8005b18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2240      	movs	r2, #64	; 0x40
 8005b1e:	2100      	movs	r1, #0
 8005b20:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	e000      	b.n	8005b28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b26:	2302      	movs	r3, #2
  }
}
 8005b28:	0018      	movs	r0, r3
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	b004      	add	sp, #16
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	fffff0ff 	.word	0xfffff0ff

08005b34 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	000a      	movs	r2, r1
 8005b3e:	1cfb      	adds	r3, r7, #3
 8005b40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8005b42:	4b09      	ldr	r3, [pc, #36]	; (8005b68 <HAL_PWR_EnterSLEEPMode+0x34>)
 8005b44:	691a      	ldr	r2, [r3, #16]
 8005b46:	4b08      	ldr	r3, [pc, #32]	; (8005b68 <HAL_PWR_EnterSLEEPMode+0x34>)
 8005b48:	2104      	movs	r1, #4
 8005b4a:	438a      	bics	r2, r1
 8005b4c:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005b4e:	1cfb      	adds	r3, r7, #3
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d101      	bne.n	8005b5a <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005b56:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8005b58:	e002      	b.n	8005b60 <HAL_PWR_EnterSLEEPMode+0x2c>
    __SEV();
 8005b5a:	bf40      	sev
    __WFE();
 8005b5c:	bf20      	wfe
    __WFE();
 8005b5e:	bf20      	wfe
}
 8005b60:	46c0      	nop			; (mov r8, r8)
 8005b62:	46bd      	mov	sp, r7
 8005b64:	b002      	add	sp, #8
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	e000ed00 	.word	0xe000ed00

08005b6c <HAL_PWR_EnterSTANDBYMode>:
  *            not used and the core is supplied directly from an external source.
  *            Consequently, the Standby mode is not available on those devices.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
  /* Select STANDBY mode */
  PWR->CR |= (uint32_t)PWR_CR_PDDS;
 8005b70:	4b07      	ldr	r3, [pc, #28]	; (8005b90 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	4b06      	ldr	r3, [pc, #24]	; (8005b90 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8005b76:	2102      	movs	r1, #2
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8005b7c:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8005b7e:	691a      	ldr	r2, [r3, #16]
 8005b80:	4b04      	ldr	r3, [pc, #16]	; (8005b94 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8005b82:	2104      	movs	r1, #4
 8005b84:	430a      	orrs	r2, r1
 8005b86:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8005b88:	bf30      	wfi
}
 8005b8a:	46c0      	nop			; (mov r8, r8)
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	40007000 	.word	0x40007000
 8005b94:	e000ed00 	.word	0xe000ed00

08005b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e303      	b.n	80061b2 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	d100      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x1e>
 8005bb4:	e08d      	b.n	8005cd2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005bb6:	4bc4      	ldr	r3, [pc, #784]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	220c      	movs	r2, #12
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d00e      	beq.n	8005be0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005bc2:	4bc1      	ldr	r3, [pc, #772]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	220c      	movs	r2, #12
 8005bc8:	4013      	ands	r3, r2
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	d116      	bne.n	8005bfc <HAL_RCC_OscConfig+0x64>
 8005bce:	4bbe      	ldr	r3, [pc, #760]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	2380      	movs	r3, #128	; 0x80
 8005bd4:	025b      	lsls	r3, r3, #9
 8005bd6:	401a      	ands	r2, r3
 8005bd8:	2380      	movs	r3, #128	; 0x80
 8005bda:	025b      	lsls	r3, r3, #9
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d10d      	bne.n	8005bfc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005be0:	4bb9      	ldr	r3, [pc, #740]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	2380      	movs	r3, #128	; 0x80
 8005be6:	029b      	lsls	r3, r3, #10
 8005be8:	4013      	ands	r3, r2
 8005bea:	d100      	bne.n	8005bee <HAL_RCC_OscConfig+0x56>
 8005bec:	e070      	b.n	8005cd0 <HAL_RCC_OscConfig+0x138>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d000      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x60>
 8005bf6:	e06b      	b.n	8005cd0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e2da      	b.n	80061b2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d107      	bne.n	8005c14 <HAL_RCC_OscConfig+0x7c>
 8005c04:	4bb0      	ldr	r3, [pc, #704]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	4baf      	ldr	r3, [pc, #700]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005c0a:	2180      	movs	r1, #128	; 0x80
 8005c0c:	0249      	lsls	r1, r1, #9
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	e02f      	b.n	8005c74 <HAL_RCC_OscConfig+0xdc>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10c      	bne.n	8005c36 <HAL_RCC_OscConfig+0x9e>
 8005c1c:	4baa      	ldr	r3, [pc, #680]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	4ba9      	ldr	r3, [pc, #676]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005c22:	49aa      	ldr	r1, [pc, #680]	; (8005ecc <HAL_RCC_OscConfig+0x334>)
 8005c24:	400a      	ands	r2, r1
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	4ba7      	ldr	r3, [pc, #668]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	4ba6      	ldr	r3, [pc, #664]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005c2e:	49a8      	ldr	r1, [pc, #672]	; (8005ed0 <HAL_RCC_OscConfig+0x338>)
 8005c30:	400a      	ands	r2, r1
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	e01e      	b.n	8005c74 <HAL_RCC_OscConfig+0xdc>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b05      	cmp	r3, #5
 8005c3c:	d10e      	bne.n	8005c5c <HAL_RCC_OscConfig+0xc4>
 8005c3e:	4ba2      	ldr	r3, [pc, #648]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	4ba1      	ldr	r3, [pc, #644]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005c44:	2180      	movs	r1, #128	; 0x80
 8005c46:	02c9      	lsls	r1, r1, #11
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	4b9e      	ldr	r3, [pc, #632]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	4b9d      	ldr	r3, [pc, #628]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005c52:	2180      	movs	r1, #128	; 0x80
 8005c54:	0249      	lsls	r1, r1, #9
 8005c56:	430a      	orrs	r2, r1
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	e00b      	b.n	8005c74 <HAL_RCC_OscConfig+0xdc>
 8005c5c:	4b9a      	ldr	r3, [pc, #616]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	4b99      	ldr	r3, [pc, #612]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005c62:	499a      	ldr	r1, [pc, #616]	; (8005ecc <HAL_RCC_OscConfig+0x334>)
 8005c64:	400a      	ands	r2, r1
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	4b97      	ldr	r3, [pc, #604]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	4b96      	ldr	r3, [pc, #600]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005c6e:	4998      	ldr	r1, [pc, #608]	; (8005ed0 <HAL_RCC_OscConfig+0x338>)
 8005c70:	400a      	ands	r2, r1
 8005c72:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d014      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7c:	f7fe fa8a 	bl	8004194 <HAL_GetTick>
 8005c80:	0003      	movs	r3, r0
 8005c82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c86:	f7fe fa85 	bl	8004194 <HAL_GetTick>
 8005c8a:	0002      	movs	r2, r0
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b64      	cmp	r3, #100	; 0x64
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e28c      	b.n	80061b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c98:	4b8b      	ldr	r3, [pc, #556]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	2380      	movs	r3, #128	; 0x80
 8005c9e:	029b      	lsls	r3, r3, #10
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	d0f0      	beq.n	8005c86 <HAL_RCC_OscConfig+0xee>
 8005ca4:	e015      	b.n	8005cd2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca6:	f7fe fa75 	bl	8004194 <HAL_GetTick>
 8005caa:	0003      	movs	r3, r0
 8005cac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cb0:	f7fe fa70 	bl	8004194 <HAL_GetTick>
 8005cb4:	0002      	movs	r2, r0
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b64      	cmp	r3, #100	; 0x64
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e277      	b.n	80061b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cc2:	4b81      	ldr	r3, [pc, #516]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	2380      	movs	r3, #128	; 0x80
 8005cc8:	029b      	lsls	r3, r3, #10
 8005cca:	4013      	ands	r3, r2
 8005ccc:	d1f0      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x118>
 8005cce:	e000      	b.n	8005cd2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cd0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	4013      	ands	r3, r2
 8005cda:	d100      	bne.n	8005cde <HAL_RCC_OscConfig+0x146>
 8005cdc:	e069      	b.n	8005db2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005cde:	4b7a      	ldr	r3, [pc, #488]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	220c      	movs	r2, #12
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	d00b      	beq.n	8005d00 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005ce8:	4b77      	ldr	r3, [pc, #476]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	220c      	movs	r2, #12
 8005cee:	4013      	ands	r3, r2
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d11c      	bne.n	8005d2e <HAL_RCC_OscConfig+0x196>
 8005cf4:	4b74      	ldr	r3, [pc, #464]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	2380      	movs	r3, #128	; 0x80
 8005cfa:	025b      	lsls	r3, r3, #9
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	d116      	bne.n	8005d2e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d00:	4b71      	ldr	r3, [pc, #452]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2202      	movs	r2, #2
 8005d06:	4013      	ands	r3, r2
 8005d08:	d005      	beq.n	8005d16 <HAL_RCC_OscConfig+0x17e>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d001      	beq.n	8005d16 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e24d      	b.n	80061b2 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d16:	4b6c      	ldr	r3, [pc, #432]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	22f8      	movs	r2, #248	; 0xf8
 8005d1c:	4393      	bics	r3, r2
 8005d1e:	0019      	movs	r1, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	00da      	lsls	r2, r3, #3
 8005d26:	4b68      	ldr	r3, [pc, #416]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d2c:	e041      	b.n	8005db2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d024      	beq.n	8005d80 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d36:	4b64      	ldr	r3, [pc, #400]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	4b63      	ldr	r3, [pc, #396]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d42:	f7fe fa27 	bl	8004194 <HAL_GetTick>
 8005d46:	0003      	movs	r3, r0
 8005d48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d4c:	f7fe fa22 	bl	8004194 <HAL_GetTick>
 8005d50:	0002      	movs	r2, r0
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e229      	b.n	80061b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d5e:	4b5a      	ldr	r3, [pc, #360]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2202      	movs	r2, #2
 8005d64:	4013      	ands	r3, r2
 8005d66:	d0f1      	beq.n	8005d4c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d68:	4b57      	ldr	r3, [pc, #348]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	22f8      	movs	r2, #248	; 0xf8
 8005d6e:	4393      	bics	r3, r2
 8005d70:	0019      	movs	r1, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	00da      	lsls	r2, r3, #3
 8005d78:	4b53      	ldr	r3, [pc, #332]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	e018      	b.n	8005db2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d80:	4b51      	ldr	r3, [pc, #324]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	4b50      	ldr	r3, [pc, #320]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005d86:	2101      	movs	r1, #1
 8005d88:	438a      	bics	r2, r1
 8005d8a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d8c:	f7fe fa02 	bl	8004194 <HAL_GetTick>
 8005d90:	0003      	movs	r3, r0
 8005d92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d94:	e008      	b.n	8005da8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d96:	f7fe f9fd 	bl	8004194 <HAL_GetTick>
 8005d9a:	0002      	movs	r2, r0
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e204      	b.n	80061b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005da8:	4b47      	ldr	r3, [pc, #284]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2202      	movs	r2, #2
 8005dae:	4013      	ands	r3, r2
 8005db0:	d1f1      	bne.n	8005d96 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2208      	movs	r2, #8
 8005db8:	4013      	ands	r3, r2
 8005dba:	d036      	beq.n	8005e2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d019      	beq.n	8005df8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dc4:	4b40      	ldr	r3, [pc, #256]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dc8:	4b3f      	ldr	r3, [pc, #252]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005dca:	2101      	movs	r1, #1
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dd0:	f7fe f9e0 	bl	8004194 <HAL_GetTick>
 8005dd4:	0003      	movs	r3, r0
 8005dd6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dd8:	e008      	b.n	8005dec <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dda:	f7fe f9db 	bl	8004194 <HAL_GetTick>
 8005dde:	0002      	movs	r2, r0
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e1e2      	b.n	80061b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dec:	4b36      	ldr	r3, [pc, #216]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	2202      	movs	r2, #2
 8005df2:	4013      	ands	r3, r2
 8005df4:	d0f1      	beq.n	8005dda <HAL_RCC_OscConfig+0x242>
 8005df6:	e018      	b.n	8005e2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005df8:	4b33      	ldr	r3, [pc, #204]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005dfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dfc:	4b32      	ldr	r3, [pc, #200]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005dfe:	2101      	movs	r1, #1
 8005e00:	438a      	bics	r2, r1
 8005e02:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e04:	f7fe f9c6 	bl	8004194 <HAL_GetTick>
 8005e08:	0003      	movs	r3, r0
 8005e0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e0c:	e008      	b.n	8005e20 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e0e:	f7fe f9c1 	bl	8004194 <HAL_GetTick>
 8005e12:	0002      	movs	r2, r0
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e1c8      	b.n	80061b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e20:	4b29      	ldr	r3, [pc, #164]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	2202      	movs	r2, #2
 8005e26:	4013      	ands	r3, r2
 8005e28:	d1f1      	bne.n	8005e0e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2204      	movs	r2, #4
 8005e30:	4013      	ands	r3, r2
 8005e32:	d100      	bne.n	8005e36 <HAL_RCC_OscConfig+0x29e>
 8005e34:	e0b6      	b.n	8005fa4 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e36:	231f      	movs	r3, #31
 8005e38:	18fb      	adds	r3, r7, r3
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e3e:	4b22      	ldr	r3, [pc, #136]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005e40:	69da      	ldr	r2, [r3, #28]
 8005e42:	2380      	movs	r3, #128	; 0x80
 8005e44:	055b      	lsls	r3, r3, #21
 8005e46:	4013      	ands	r3, r2
 8005e48:	d111      	bne.n	8005e6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e4a:	4b1f      	ldr	r3, [pc, #124]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005e4c:	69da      	ldr	r2, [r3, #28]
 8005e4e:	4b1e      	ldr	r3, [pc, #120]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005e50:	2180      	movs	r1, #128	; 0x80
 8005e52:	0549      	lsls	r1, r1, #21
 8005e54:	430a      	orrs	r2, r1
 8005e56:	61da      	str	r2, [r3, #28]
 8005e58:	4b1b      	ldr	r3, [pc, #108]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005e5a:	69da      	ldr	r2, [r3, #28]
 8005e5c:	2380      	movs	r3, #128	; 0x80
 8005e5e:	055b      	lsls	r3, r3, #21
 8005e60:	4013      	ands	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005e66:	231f      	movs	r3, #31
 8005e68:	18fb      	adds	r3, r7, r3
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e6e:	4b19      	ldr	r3, [pc, #100]	; (8005ed4 <HAL_RCC_OscConfig+0x33c>)
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	2380      	movs	r3, #128	; 0x80
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	4013      	ands	r3, r2
 8005e78:	d11a      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e7a:	4b16      	ldr	r3, [pc, #88]	; (8005ed4 <HAL_RCC_OscConfig+0x33c>)
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4b15      	ldr	r3, [pc, #84]	; (8005ed4 <HAL_RCC_OscConfig+0x33c>)
 8005e80:	2180      	movs	r1, #128	; 0x80
 8005e82:	0049      	lsls	r1, r1, #1
 8005e84:	430a      	orrs	r2, r1
 8005e86:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e88:	f7fe f984 	bl	8004194 <HAL_GetTick>
 8005e8c:	0003      	movs	r3, r0
 8005e8e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e90:	e008      	b.n	8005ea4 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e92:	f7fe f97f 	bl	8004194 <HAL_GetTick>
 8005e96:	0002      	movs	r2, r0
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b64      	cmp	r3, #100	; 0x64
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e186      	b.n	80061b2 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea4:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <HAL_RCC_OscConfig+0x33c>)
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	2380      	movs	r3, #128	; 0x80
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	4013      	ands	r3, r2
 8005eae:	d0f0      	beq.n	8005e92 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d10f      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x340>
 8005eb8:	4b03      	ldr	r3, [pc, #12]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005eba:	6a1a      	ldr	r2, [r3, #32]
 8005ebc:	4b02      	ldr	r3, [pc, #8]	; (8005ec8 <HAL_RCC_OscConfig+0x330>)
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	621a      	str	r2, [r3, #32]
 8005ec4:	e036      	b.n	8005f34 <HAL_RCC_OscConfig+0x39c>
 8005ec6:	46c0      	nop			; (mov r8, r8)
 8005ec8:	40021000 	.word	0x40021000
 8005ecc:	fffeffff 	.word	0xfffeffff
 8005ed0:	fffbffff 	.word	0xfffbffff
 8005ed4:	40007000 	.word	0x40007000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10c      	bne.n	8005efa <HAL_RCC_OscConfig+0x362>
 8005ee0:	4bb6      	ldr	r3, [pc, #728]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005ee2:	6a1a      	ldr	r2, [r3, #32]
 8005ee4:	4bb5      	ldr	r3, [pc, #724]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	438a      	bics	r2, r1
 8005eea:	621a      	str	r2, [r3, #32]
 8005eec:	4bb3      	ldr	r3, [pc, #716]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005eee:	6a1a      	ldr	r2, [r3, #32]
 8005ef0:	4bb2      	ldr	r3, [pc, #712]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005ef2:	2104      	movs	r1, #4
 8005ef4:	438a      	bics	r2, r1
 8005ef6:	621a      	str	r2, [r3, #32]
 8005ef8:	e01c      	b.n	8005f34 <HAL_RCC_OscConfig+0x39c>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	2b05      	cmp	r3, #5
 8005f00:	d10c      	bne.n	8005f1c <HAL_RCC_OscConfig+0x384>
 8005f02:	4bae      	ldr	r3, [pc, #696]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005f04:	6a1a      	ldr	r2, [r3, #32]
 8005f06:	4bad      	ldr	r3, [pc, #692]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005f08:	2104      	movs	r1, #4
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	621a      	str	r2, [r3, #32]
 8005f0e:	4bab      	ldr	r3, [pc, #684]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005f10:	6a1a      	ldr	r2, [r3, #32]
 8005f12:	4baa      	ldr	r3, [pc, #680]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005f14:	2101      	movs	r1, #1
 8005f16:	430a      	orrs	r2, r1
 8005f18:	621a      	str	r2, [r3, #32]
 8005f1a:	e00b      	b.n	8005f34 <HAL_RCC_OscConfig+0x39c>
 8005f1c:	4ba7      	ldr	r3, [pc, #668]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005f1e:	6a1a      	ldr	r2, [r3, #32]
 8005f20:	4ba6      	ldr	r3, [pc, #664]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005f22:	2101      	movs	r1, #1
 8005f24:	438a      	bics	r2, r1
 8005f26:	621a      	str	r2, [r3, #32]
 8005f28:	4ba4      	ldr	r3, [pc, #656]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005f2a:	6a1a      	ldr	r2, [r3, #32]
 8005f2c:	4ba3      	ldr	r3, [pc, #652]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005f2e:	2104      	movs	r1, #4
 8005f30:	438a      	bics	r2, r1
 8005f32:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d014      	beq.n	8005f66 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f3c:	f7fe f92a 	bl	8004194 <HAL_GetTick>
 8005f40:	0003      	movs	r3, r0
 8005f42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f44:	e009      	b.n	8005f5a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f46:	f7fe f925 	bl	8004194 <HAL_GetTick>
 8005f4a:	0002      	movs	r2, r0
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	4a9b      	ldr	r2, [pc, #620]	; (80061c0 <HAL_RCC_OscConfig+0x628>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e12b      	b.n	80061b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f5a:	4b98      	ldr	r3, [pc, #608]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	4013      	ands	r3, r2
 8005f62:	d0f0      	beq.n	8005f46 <HAL_RCC_OscConfig+0x3ae>
 8005f64:	e013      	b.n	8005f8e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f66:	f7fe f915 	bl	8004194 <HAL_GetTick>
 8005f6a:	0003      	movs	r3, r0
 8005f6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f6e:	e009      	b.n	8005f84 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f70:	f7fe f910 	bl	8004194 <HAL_GetTick>
 8005f74:	0002      	movs	r2, r0
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	4a91      	ldr	r2, [pc, #580]	; (80061c0 <HAL_RCC_OscConfig+0x628>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d901      	bls.n	8005f84 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e116      	b.n	80061b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f84:	4b8d      	ldr	r3, [pc, #564]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	d1f0      	bne.n	8005f70 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f8e:	231f      	movs	r3, #31
 8005f90:	18fb      	adds	r3, r7, r3
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d105      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f98:	4b88      	ldr	r3, [pc, #544]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005f9a:	69da      	ldr	r2, [r3, #28]
 8005f9c:	4b87      	ldr	r3, [pc, #540]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005f9e:	4989      	ldr	r1, [pc, #548]	; (80061c4 <HAL_RCC_OscConfig+0x62c>)
 8005fa0:	400a      	ands	r2, r1
 8005fa2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2210      	movs	r2, #16
 8005faa:	4013      	ands	r3, r2
 8005fac:	d063      	beq.n	8006076 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d12a      	bne.n	800600c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005fb6:	4b81      	ldr	r3, [pc, #516]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fba:	4b80      	ldr	r3, [pc, #512]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005fbc:	2104      	movs	r1, #4
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005fc2:	4b7e      	ldr	r3, [pc, #504]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fc6:	4b7d      	ldr	r3, [pc, #500]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005fc8:	2101      	movs	r1, #1
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fce:	f7fe f8e1 	bl	8004194 <HAL_GetTick>
 8005fd2:	0003      	movs	r3, r0
 8005fd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005fd8:	f7fe f8dc 	bl	8004194 <HAL_GetTick>
 8005fdc:	0002      	movs	r2, r0
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e0e3      	b.n	80061b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005fea:	4b74      	ldr	r3, [pc, #464]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fee:	2202      	movs	r2, #2
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	d0f1      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005ff4:	4b71      	ldr	r3, [pc, #452]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8005ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff8:	22f8      	movs	r2, #248	; 0xf8
 8005ffa:	4393      	bics	r3, r2
 8005ffc:	0019      	movs	r1, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	00da      	lsls	r2, r3, #3
 8006004:	4b6d      	ldr	r3, [pc, #436]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8006006:	430a      	orrs	r2, r1
 8006008:	635a      	str	r2, [r3, #52]	; 0x34
 800600a:	e034      	b.n	8006076 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	3305      	adds	r3, #5
 8006012:	d111      	bne.n	8006038 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006014:	4b69      	ldr	r3, [pc, #420]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8006016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006018:	4b68      	ldr	r3, [pc, #416]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 800601a:	2104      	movs	r1, #4
 800601c:	438a      	bics	r2, r1
 800601e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006020:	4b66      	ldr	r3, [pc, #408]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8006022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006024:	22f8      	movs	r2, #248	; 0xf8
 8006026:	4393      	bics	r3, r2
 8006028:	0019      	movs	r1, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	00da      	lsls	r2, r3, #3
 8006030:	4b62      	ldr	r3, [pc, #392]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8006032:	430a      	orrs	r2, r1
 8006034:	635a      	str	r2, [r3, #52]	; 0x34
 8006036:	e01e      	b.n	8006076 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006038:	4b60      	ldr	r3, [pc, #384]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 800603a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800603c:	4b5f      	ldr	r3, [pc, #380]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 800603e:	2104      	movs	r1, #4
 8006040:	430a      	orrs	r2, r1
 8006042:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006044:	4b5d      	ldr	r3, [pc, #372]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8006046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006048:	4b5c      	ldr	r3, [pc, #368]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 800604a:	2101      	movs	r1, #1
 800604c:	438a      	bics	r2, r1
 800604e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006050:	f7fe f8a0 	bl	8004194 <HAL_GetTick>
 8006054:	0003      	movs	r3, r0
 8006056:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006058:	e008      	b.n	800606c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800605a:	f7fe f89b 	bl	8004194 <HAL_GetTick>
 800605e:	0002      	movs	r2, r0
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d901      	bls.n	800606c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e0a2      	b.n	80061b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800606c:	4b53      	ldr	r3, [pc, #332]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 800606e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006070:	2202      	movs	r2, #2
 8006072:	4013      	ands	r3, r2
 8006074:	d1f1      	bne.n	800605a <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d100      	bne.n	8006080 <HAL_RCC_OscConfig+0x4e8>
 800607e:	e097      	b.n	80061b0 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006080:	4b4e      	ldr	r3, [pc, #312]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	220c      	movs	r2, #12
 8006086:	4013      	ands	r3, r2
 8006088:	2b08      	cmp	r3, #8
 800608a:	d100      	bne.n	800608e <HAL_RCC_OscConfig+0x4f6>
 800608c:	e06b      	b.n	8006166 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	2b02      	cmp	r3, #2
 8006094:	d14c      	bne.n	8006130 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006096:	4b49      	ldr	r3, [pc, #292]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	4b48      	ldr	r3, [pc, #288]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 800609c:	494a      	ldr	r1, [pc, #296]	; (80061c8 <HAL_RCC_OscConfig+0x630>)
 800609e:	400a      	ands	r2, r1
 80060a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a2:	f7fe f877 	bl	8004194 <HAL_GetTick>
 80060a6:	0003      	movs	r3, r0
 80060a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060aa:	e008      	b.n	80060be <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060ac:	f7fe f872 	bl	8004194 <HAL_GetTick>
 80060b0:	0002      	movs	r2, r0
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e079      	b.n	80061b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060be:	4b3f      	ldr	r3, [pc, #252]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	2380      	movs	r3, #128	; 0x80
 80060c4:	049b      	lsls	r3, r3, #18
 80060c6:	4013      	ands	r3, r2
 80060c8:	d1f0      	bne.n	80060ac <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060ca:	4b3c      	ldr	r3, [pc, #240]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ce:	220f      	movs	r2, #15
 80060d0:	4393      	bics	r3, r2
 80060d2:	0019      	movs	r1, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d8:	4b38      	ldr	r3, [pc, #224]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 80060da:	430a      	orrs	r2, r1
 80060dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80060de:	4b37      	ldr	r3, [pc, #220]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	4a3a      	ldr	r2, [pc, #232]	; (80061cc <HAL_RCC_OscConfig+0x634>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	0019      	movs	r1, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	431a      	orrs	r2, r3
 80060f2:	4b32      	ldr	r3, [pc, #200]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 80060f4:	430a      	orrs	r2, r1
 80060f6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060f8:	4b30      	ldr	r3, [pc, #192]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	4b2f      	ldr	r3, [pc, #188]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 80060fe:	2180      	movs	r1, #128	; 0x80
 8006100:	0449      	lsls	r1, r1, #17
 8006102:	430a      	orrs	r2, r1
 8006104:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006106:	f7fe f845 	bl	8004194 <HAL_GetTick>
 800610a:	0003      	movs	r3, r0
 800610c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800610e:	e008      	b.n	8006122 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006110:	f7fe f840 	bl	8004194 <HAL_GetTick>
 8006114:	0002      	movs	r2, r0
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e047      	b.n	80061b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006122:	4b26      	ldr	r3, [pc, #152]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	2380      	movs	r3, #128	; 0x80
 8006128:	049b      	lsls	r3, r3, #18
 800612a:	4013      	ands	r3, r2
 800612c:	d0f0      	beq.n	8006110 <HAL_RCC_OscConfig+0x578>
 800612e:	e03f      	b.n	80061b0 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006130:	4b22      	ldr	r3, [pc, #136]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	4b21      	ldr	r3, [pc, #132]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8006136:	4924      	ldr	r1, [pc, #144]	; (80061c8 <HAL_RCC_OscConfig+0x630>)
 8006138:	400a      	ands	r2, r1
 800613a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800613c:	f7fe f82a 	bl	8004194 <HAL_GetTick>
 8006140:	0003      	movs	r3, r0
 8006142:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006144:	e008      	b.n	8006158 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006146:	f7fe f825 	bl	8004194 <HAL_GetTick>
 800614a:	0002      	movs	r2, r0
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e02c      	b.n	80061b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006158:	4b18      	ldr	r3, [pc, #96]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	2380      	movs	r3, #128	; 0x80
 800615e:	049b      	lsls	r3, r3, #18
 8006160:	4013      	ands	r3, r2
 8006162:	d1f0      	bne.n	8006146 <HAL_RCC_OscConfig+0x5ae>
 8006164:	e024      	b.n	80061b0 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d101      	bne.n	8006172 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e01f      	b.n	80061b2 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006172:	4b12      	ldr	r3, [pc, #72]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006178:	4b10      	ldr	r3, [pc, #64]	; (80061bc <HAL_RCC_OscConfig+0x624>)
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	2380      	movs	r3, #128	; 0x80
 8006182:	025b      	lsls	r3, r3, #9
 8006184:	401a      	ands	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	429a      	cmp	r2, r3
 800618c:	d10e      	bne.n	80061ac <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	220f      	movs	r2, #15
 8006192:	401a      	ands	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006198:	429a      	cmp	r2, r3
 800619a:	d107      	bne.n	80061ac <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	23f0      	movs	r3, #240	; 0xf0
 80061a0:	039b      	lsls	r3, r3, #14
 80061a2:	401a      	ands	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d001      	beq.n	80061b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e000      	b.n	80061b2 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	0018      	movs	r0, r3
 80061b4:	46bd      	mov	sp, r7
 80061b6:	b008      	add	sp, #32
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	46c0      	nop			; (mov r8, r8)
 80061bc:	40021000 	.word	0x40021000
 80061c0:	00001388 	.word	0x00001388
 80061c4:	efffffff 	.word	0xefffffff
 80061c8:	feffffff 	.word	0xfeffffff
 80061cc:	ffc2ffff 	.word	0xffc2ffff

080061d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e0b3      	b.n	800634c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061e4:	4b5b      	ldr	r3, [pc, #364]	; (8006354 <HAL_RCC_ClockConfig+0x184>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2201      	movs	r2, #1
 80061ea:	4013      	ands	r3, r2
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d911      	bls.n	8006216 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061f2:	4b58      	ldr	r3, [pc, #352]	; (8006354 <HAL_RCC_ClockConfig+0x184>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2201      	movs	r2, #1
 80061f8:	4393      	bics	r3, r2
 80061fa:	0019      	movs	r1, r3
 80061fc:	4b55      	ldr	r3, [pc, #340]	; (8006354 <HAL_RCC_ClockConfig+0x184>)
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006204:	4b53      	ldr	r3, [pc, #332]	; (8006354 <HAL_RCC_ClockConfig+0x184>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2201      	movs	r2, #1
 800620a:	4013      	ands	r3, r2
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	429a      	cmp	r2, r3
 8006210:	d001      	beq.n	8006216 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e09a      	b.n	800634c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2202      	movs	r2, #2
 800621c:	4013      	ands	r3, r2
 800621e:	d015      	beq.n	800624c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2204      	movs	r2, #4
 8006226:	4013      	ands	r3, r2
 8006228:	d006      	beq.n	8006238 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800622a:	4b4b      	ldr	r3, [pc, #300]	; (8006358 <HAL_RCC_ClockConfig+0x188>)
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	4b4a      	ldr	r3, [pc, #296]	; (8006358 <HAL_RCC_ClockConfig+0x188>)
 8006230:	21e0      	movs	r1, #224	; 0xe0
 8006232:	00c9      	lsls	r1, r1, #3
 8006234:	430a      	orrs	r2, r1
 8006236:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006238:	4b47      	ldr	r3, [pc, #284]	; (8006358 <HAL_RCC_ClockConfig+0x188>)
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	22f0      	movs	r2, #240	; 0xf0
 800623e:	4393      	bics	r3, r2
 8006240:	0019      	movs	r1, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	4b44      	ldr	r3, [pc, #272]	; (8006358 <HAL_RCC_ClockConfig+0x188>)
 8006248:	430a      	orrs	r2, r1
 800624a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2201      	movs	r2, #1
 8006252:	4013      	ands	r3, r2
 8006254:	d040      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d107      	bne.n	800626e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800625e:	4b3e      	ldr	r3, [pc, #248]	; (8006358 <HAL_RCC_ClockConfig+0x188>)
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	2380      	movs	r3, #128	; 0x80
 8006264:	029b      	lsls	r3, r3, #10
 8006266:	4013      	ands	r3, r2
 8006268:	d114      	bne.n	8006294 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e06e      	b.n	800634c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	2b02      	cmp	r3, #2
 8006274:	d107      	bne.n	8006286 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006276:	4b38      	ldr	r3, [pc, #224]	; (8006358 <HAL_RCC_ClockConfig+0x188>)
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	2380      	movs	r3, #128	; 0x80
 800627c:	049b      	lsls	r3, r3, #18
 800627e:	4013      	ands	r3, r2
 8006280:	d108      	bne.n	8006294 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e062      	b.n	800634c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006286:	4b34      	ldr	r3, [pc, #208]	; (8006358 <HAL_RCC_ClockConfig+0x188>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2202      	movs	r2, #2
 800628c:	4013      	ands	r3, r2
 800628e:	d101      	bne.n	8006294 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e05b      	b.n	800634c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006294:	4b30      	ldr	r3, [pc, #192]	; (8006358 <HAL_RCC_ClockConfig+0x188>)
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	2203      	movs	r2, #3
 800629a:	4393      	bics	r3, r2
 800629c:	0019      	movs	r1, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	4b2d      	ldr	r3, [pc, #180]	; (8006358 <HAL_RCC_ClockConfig+0x188>)
 80062a4:	430a      	orrs	r2, r1
 80062a6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062a8:	f7fd ff74 	bl	8004194 <HAL_GetTick>
 80062ac:	0003      	movs	r3, r0
 80062ae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062b0:	e009      	b.n	80062c6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062b2:	f7fd ff6f 	bl	8004194 <HAL_GetTick>
 80062b6:	0002      	movs	r2, r0
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	4a27      	ldr	r2, [pc, #156]	; (800635c <HAL_RCC_ClockConfig+0x18c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e042      	b.n	800634c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062c6:	4b24      	ldr	r3, [pc, #144]	; (8006358 <HAL_RCC_ClockConfig+0x188>)
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	220c      	movs	r2, #12
 80062cc:	401a      	ands	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d1ec      	bne.n	80062b2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062d8:	4b1e      	ldr	r3, [pc, #120]	; (8006354 <HAL_RCC_ClockConfig+0x184>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2201      	movs	r2, #1
 80062de:	4013      	ands	r3, r2
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d211      	bcs.n	800630a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062e6:	4b1b      	ldr	r3, [pc, #108]	; (8006354 <HAL_RCC_ClockConfig+0x184>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2201      	movs	r2, #1
 80062ec:	4393      	bics	r3, r2
 80062ee:	0019      	movs	r1, r3
 80062f0:	4b18      	ldr	r3, [pc, #96]	; (8006354 <HAL_RCC_ClockConfig+0x184>)
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062f8:	4b16      	ldr	r3, [pc, #88]	; (8006354 <HAL_RCC_ClockConfig+0x184>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2201      	movs	r2, #1
 80062fe:	4013      	ands	r3, r2
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	429a      	cmp	r2, r3
 8006304:	d001      	beq.n	800630a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e020      	b.n	800634c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2204      	movs	r2, #4
 8006310:	4013      	ands	r3, r2
 8006312:	d009      	beq.n	8006328 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006314:	4b10      	ldr	r3, [pc, #64]	; (8006358 <HAL_RCC_ClockConfig+0x188>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	4a11      	ldr	r2, [pc, #68]	; (8006360 <HAL_RCC_ClockConfig+0x190>)
 800631a:	4013      	ands	r3, r2
 800631c:	0019      	movs	r1, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	4b0d      	ldr	r3, [pc, #52]	; (8006358 <HAL_RCC_ClockConfig+0x188>)
 8006324:	430a      	orrs	r2, r1
 8006326:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006328:	f000 f820 	bl	800636c <HAL_RCC_GetSysClockFreq>
 800632c:	0001      	movs	r1, r0
 800632e:	4b0a      	ldr	r3, [pc, #40]	; (8006358 <HAL_RCC_ClockConfig+0x188>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	091b      	lsrs	r3, r3, #4
 8006334:	220f      	movs	r2, #15
 8006336:	4013      	ands	r3, r2
 8006338:	4a0a      	ldr	r2, [pc, #40]	; (8006364 <HAL_RCC_ClockConfig+0x194>)
 800633a:	5cd3      	ldrb	r3, [r2, r3]
 800633c:	000a      	movs	r2, r1
 800633e:	40da      	lsrs	r2, r3
 8006340:	4b09      	ldr	r3, [pc, #36]	; (8006368 <HAL_RCC_ClockConfig+0x198>)
 8006342:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006344:	2000      	movs	r0, #0
 8006346:	f7fd fe0f 	bl	8003f68 <HAL_InitTick>
  
  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	0018      	movs	r0, r3
 800634e:	46bd      	mov	sp, r7
 8006350:	b004      	add	sp, #16
 8006352:	bd80      	pop	{r7, pc}
 8006354:	40022000 	.word	0x40022000
 8006358:	40021000 	.word	0x40021000
 800635c:	00001388 	.word	0x00001388
 8006360:	fffff8ff 	.word	0xfffff8ff
 8006364:	0800b75c 	.word	0x0800b75c
 8006368:	20000004 	.word	0x20000004

0800636c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800636c:	b590      	push	{r4, r7, lr}
 800636e:	b08f      	sub	sp, #60	; 0x3c
 8006370:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8006372:	2314      	movs	r3, #20
 8006374:	18fb      	adds	r3, r7, r3
 8006376:	4a2b      	ldr	r2, [pc, #172]	; (8006424 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006378:	ca13      	ldmia	r2!, {r0, r1, r4}
 800637a:	c313      	stmia	r3!, {r0, r1, r4}
 800637c:	6812      	ldr	r2, [r2, #0]
 800637e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8006380:	1d3b      	adds	r3, r7, #4
 8006382:	4a29      	ldr	r2, [pc, #164]	; (8006428 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006384:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006386:	c313      	stmia	r3!, {r0, r1, r4}
 8006388:	6812      	ldr	r2, [r2, #0]
 800638a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800638c:	2300      	movs	r3, #0
 800638e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006390:	2300      	movs	r3, #0
 8006392:	62bb      	str	r3, [r7, #40]	; 0x28
 8006394:	2300      	movs	r3, #0
 8006396:	637b      	str	r3, [r7, #52]	; 0x34
 8006398:	2300      	movs	r3, #0
 800639a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80063a0:	4b22      	ldr	r3, [pc, #136]	; (800642c <HAL_RCC_GetSysClockFreq+0xc0>)
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a8:	220c      	movs	r2, #12
 80063aa:	4013      	ands	r3, r2
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d002      	beq.n	80063b6 <HAL_RCC_GetSysClockFreq+0x4a>
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d003      	beq.n	80063bc <HAL_RCC_GetSysClockFreq+0x50>
 80063b4:	e02d      	b.n	8006412 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80063b6:	4b1e      	ldr	r3, [pc, #120]	; (8006430 <HAL_RCC_GetSysClockFreq+0xc4>)
 80063b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80063ba:	e02d      	b.n	8006418 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	0c9b      	lsrs	r3, r3, #18
 80063c0:	220f      	movs	r2, #15
 80063c2:	4013      	ands	r3, r2
 80063c4:	2214      	movs	r2, #20
 80063c6:	18ba      	adds	r2, r7, r2
 80063c8:	5cd3      	ldrb	r3, [r2, r3]
 80063ca:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80063cc:	4b17      	ldr	r3, [pc, #92]	; (800642c <HAL_RCC_GetSysClockFreq+0xc0>)
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	220f      	movs	r2, #15
 80063d2:	4013      	ands	r3, r2
 80063d4:	1d3a      	adds	r2, r7, #4
 80063d6:	5cd3      	ldrb	r3, [r2, r3]
 80063d8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80063da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063dc:	2380      	movs	r3, #128	; 0x80
 80063de:	025b      	lsls	r3, r3, #9
 80063e0:	4013      	ands	r3, r2
 80063e2:	d009      	beq.n	80063f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80063e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063e6:	4812      	ldr	r0, [pc, #72]	; (8006430 <HAL_RCC_GetSysClockFreq+0xc4>)
 80063e8:	f7f9 fea0 	bl	800012c <__udivsi3>
 80063ec:	0003      	movs	r3, r0
 80063ee:	001a      	movs	r2, r3
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	4353      	muls	r3, r2
 80063f4:	637b      	str	r3, [r7, #52]	; 0x34
 80063f6:	e009      	b.n	800640c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80063f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063fa:	000a      	movs	r2, r1
 80063fc:	0152      	lsls	r2, r2, #5
 80063fe:	1a52      	subs	r2, r2, r1
 8006400:	0193      	lsls	r3, r2, #6
 8006402:	1a9b      	subs	r3, r3, r2
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	185b      	adds	r3, r3, r1
 8006408:	021b      	lsls	r3, r3, #8
 800640a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800640c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006410:	e002      	b.n	8006418 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006412:	4b07      	ldr	r3, [pc, #28]	; (8006430 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006414:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006416:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800641a:	0018      	movs	r0, r3
 800641c:	46bd      	mov	sp, r7
 800641e:	b00f      	add	sp, #60	; 0x3c
 8006420:	bd90      	pop	{r4, r7, pc}
 8006422:	46c0      	nop			; (mov r8, r8)
 8006424:	0800b6b4 	.word	0x0800b6b4
 8006428:	0800b6c4 	.word	0x0800b6c4
 800642c:	40021000 	.word	0x40021000
 8006430:	007a1200 	.word	0x007a1200

08006434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006438:	4b02      	ldr	r3, [pc, #8]	; (8006444 <HAL_RCC_GetHCLKFreq+0x10>)
 800643a:	681b      	ldr	r3, [r3, #0]
}
 800643c:	0018      	movs	r0, r3
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	46c0      	nop			; (mov r8, r8)
 8006444:	20000004 	.word	0x20000004

08006448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800644c:	f7ff fff2 	bl	8006434 <HAL_RCC_GetHCLKFreq>
 8006450:	0001      	movs	r1, r0
 8006452:	4b06      	ldr	r3, [pc, #24]	; (800646c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	0a1b      	lsrs	r3, r3, #8
 8006458:	2207      	movs	r2, #7
 800645a:	4013      	ands	r3, r2
 800645c:	4a04      	ldr	r2, [pc, #16]	; (8006470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800645e:	5cd3      	ldrb	r3, [r2, r3]
 8006460:	40d9      	lsrs	r1, r3
 8006462:	000b      	movs	r3, r1
}    
 8006464:	0018      	movs	r0, r3
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	46c0      	nop			; (mov r8, r8)
 800646c:	40021000 	.word	0x40021000
 8006470:	0800b76c 	.word	0x0800b76c

08006474 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2207      	movs	r2, #7
 8006482:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006484:	4b0e      	ldr	r3, [pc, #56]	; (80064c0 <HAL_RCC_GetClockConfig+0x4c>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	2203      	movs	r2, #3
 800648a:	401a      	ands	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8006490:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <HAL_RCC_GetClockConfig+0x4c>)
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	22f0      	movs	r2, #240	; 0xf0
 8006496:	401a      	ands	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 800649c:	4b08      	ldr	r3, [pc, #32]	; (80064c0 <HAL_RCC_GetClockConfig+0x4c>)
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	23e0      	movs	r3, #224	; 0xe0
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	401a      	ands	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80064aa:	4b06      	ldr	r3, [pc, #24]	; (80064c4 <HAL_RCC_GetClockConfig+0x50>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2201      	movs	r2, #1
 80064b0:	401a      	ands	r2, r3
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	601a      	str	r2, [r3, #0]
}
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	46bd      	mov	sp, r7
 80064ba:	b002      	add	sp, #8
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	46c0      	nop			; (mov r8, r8)
 80064c0:	40021000 	.word	0x40021000
 80064c4:	40022000 	.word	0x40022000

080064c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	2380      	movs	r3, #128	; 0x80
 80064de:	025b      	lsls	r3, r3, #9
 80064e0:	4013      	ands	r3, r2
 80064e2:	d100      	bne.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80064e4:	e08f      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80064e6:	2317      	movs	r3, #23
 80064e8:	18fb      	adds	r3, r7, r3
 80064ea:	2200      	movs	r2, #0
 80064ec:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064ee:	4b57      	ldr	r3, [pc, #348]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80064f0:	69da      	ldr	r2, [r3, #28]
 80064f2:	2380      	movs	r3, #128	; 0x80
 80064f4:	055b      	lsls	r3, r3, #21
 80064f6:	4013      	ands	r3, r2
 80064f8:	d111      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80064fa:	4b54      	ldr	r3, [pc, #336]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80064fc:	69da      	ldr	r2, [r3, #28]
 80064fe:	4b53      	ldr	r3, [pc, #332]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006500:	2180      	movs	r1, #128	; 0x80
 8006502:	0549      	lsls	r1, r1, #21
 8006504:	430a      	orrs	r2, r1
 8006506:	61da      	str	r2, [r3, #28]
 8006508:	4b50      	ldr	r3, [pc, #320]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800650a:	69da      	ldr	r2, [r3, #28]
 800650c:	2380      	movs	r3, #128	; 0x80
 800650e:	055b      	lsls	r3, r3, #21
 8006510:	4013      	ands	r3, r2
 8006512:	60bb      	str	r3, [r7, #8]
 8006514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006516:	2317      	movs	r3, #23
 8006518:	18fb      	adds	r3, r7, r3
 800651a:	2201      	movs	r2, #1
 800651c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800651e:	4b4c      	ldr	r3, [pc, #304]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	2380      	movs	r3, #128	; 0x80
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	4013      	ands	r3, r2
 8006528:	d11a      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800652a:	4b49      	ldr	r3, [pc, #292]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	4b48      	ldr	r3, [pc, #288]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006530:	2180      	movs	r1, #128	; 0x80
 8006532:	0049      	lsls	r1, r1, #1
 8006534:	430a      	orrs	r2, r1
 8006536:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006538:	f7fd fe2c 	bl	8004194 <HAL_GetTick>
 800653c:	0003      	movs	r3, r0
 800653e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006540:	e008      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006542:	f7fd fe27 	bl	8004194 <HAL_GetTick>
 8006546:	0002      	movs	r2, r0
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b64      	cmp	r3, #100	; 0x64
 800654e:	d901      	bls.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e077      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006554:	4b3e      	ldr	r3, [pc, #248]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	2380      	movs	r3, #128	; 0x80
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	4013      	ands	r3, r2
 800655e:	d0f0      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006560:	4b3a      	ldr	r3, [pc, #232]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006562:	6a1a      	ldr	r2, [r3, #32]
 8006564:	23c0      	movs	r3, #192	; 0xc0
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4013      	ands	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d034      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x114>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	23c0      	movs	r3, #192	; 0xc0
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4013      	ands	r3, r2
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	429a      	cmp	r2, r3
 8006580:	d02c      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006582:	4b32      	ldr	r3, [pc, #200]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	4a33      	ldr	r2, [pc, #204]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006588:	4013      	ands	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800658c:	4b2f      	ldr	r3, [pc, #188]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800658e:	6a1a      	ldr	r2, [r3, #32]
 8006590:	4b2e      	ldr	r3, [pc, #184]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006592:	2180      	movs	r1, #128	; 0x80
 8006594:	0249      	lsls	r1, r1, #9
 8006596:	430a      	orrs	r2, r1
 8006598:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800659a:	4b2c      	ldr	r3, [pc, #176]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800659c:	6a1a      	ldr	r2, [r3, #32]
 800659e:	4b2b      	ldr	r3, [pc, #172]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80065a0:	492d      	ldr	r1, [pc, #180]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80065a2:	400a      	ands	r2, r1
 80065a4:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80065a6:	4b29      	ldr	r3, [pc, #164]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	4013      	ands	r3, r2
 80065b2:	d013      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065b4:	f7fd fdee 	bl	8004194 <HAL_GetTick>
 80065b8:	0003      	movs	r3, r0
 80065ba:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065bc:	e009      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065be:	f7fd fde9 	bl	8004194 <HAL_GetTick>
 80065c2:	0002      	movs	r2, r0
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	4a24      	ldr	r2, [pc, #144]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e038      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065d2:	4b1e      	ldr	r3, [pc, #120]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	2202      	movs	r2, #2
 80065d8:	4013      	ands	r3, r2
 80065da:	d0f0      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065dc:	4b1b      	ldr	r3, [pc, #108]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	4a1c      	ldr	r2, [pc, #112]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80065e2:	4013      	ands	r3, r2
 80065e4:	0019      	movs	r1, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	4b18      	ldr	r3, [pc, #96]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80065ec:	430a      	orrs	r2, r1
 80065ee:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80065f0:	2317      	movs	r3, #23
 80065f2:	18fb      	adds	r3, r7, r3
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d105      	bne.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065fa:	4b14      	ldr	r3, [pc, #80]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80065fc:	69da      	ldr	r2, [r3, #28]
 80065fe:	4b13      	ldr	r3, [pc, #76]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006600:	4917      	ldr	r1, [pc, #92]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8006602:	400a      	ands	r2, r1
 8006604:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2201      	movs	r2, #1
 800660c:	4013      	ands	r3, r2
 800660e:	d009      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006610:	4b0e      	ldr	r3, [pc, #56]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006614:	2203      	movs	r2, #3
 8006616:	4393      	bics	r3, r2
 8006618:	0019      	movs	r1, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	689a      	ldr	r2, [r3, #8]
 800661e:	4b0b      	ldr	r3, [pc, #44]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006620:	430a      	orrs	r2, r1
 8006622:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2220      	movs	r2, #32
 800662a:	4013      	ands	r3, r2
 800662c:	d009      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800662e:	4b07      	ldr	r3, [pc, #28]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006632:	2210      	movs	r2, #16
 8006634:	4393      	bics	r3, r2
 8006636:	0019      	movs	r1, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68da      	ldr	r2, [r3, #12]
 800663c:	4b03      	ldr	r3, [pc, #12]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800663e:	430a      	orrs	r2, r1
 8006640:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	0018      	movs	r0, r3
 8006646:	46bd      	mov	sp, r7
 8006648:	b006      	add	sp, #24
 800664a:	bd80      	pop	{r7, pc}
 800664c:	40021000 	.word	0x40021000
 8006650:	40007000 	.word	0x40007000
 8006654:	fffffcff 	.word	0xfffffcff
 8006658:	fffeffff 	.word	0xfffeffff
 800665c:	00001388 	.word	0x00001388
 8006660:	efffffff 	.word	0xefffffff

08006664 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e081      	b.n	800677a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	7f5b      	ldrb	r3, [r3, #29]
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d106      	bne.n	800668e <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	0018      	movs	r0, r3
 800668a:	f7fd fbbd 	bl	8003e08 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2202      	movs	r2, #2
 8006692:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	22ca      	movs	r2, #202	; 0xca
 800669a:	625a      	str	r2, [r3, #36]	; 0x24
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2253      	movs	r2, #83	; 0x53
 80066a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	0018      	movs	r0, r3
 80066a8:	f000 fb25 	bl	8006cf6 <RTC_EnterInitMode>
 80066ac:	1e03      	subs	r3, r0, #0
 80066ae:	d008      	beq.n	80066c2 <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	22ff      	movs	r2, #255	; 0xff
 80066b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2204      	movs	r2, #4
 80066bc:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e05b      	b.n	800677a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	492d      	ldr	r1, [pc, #180]	; (8006784 <HAL_RTC_Init+0x120>)
 80066ce:	400a      	ands	r2, r1
 80066d0:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6899      	ldr	r1, [r3, #8]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	431a      	orrs	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	431a      	orrs	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	68d2      	ldr	r2, [r2, #12]
 80066f8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6919      	ldr	r1, [r3, #16]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	041a      	lsls	r2, r3, #16
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2180      	movs	r1, #128	; 0x80
 800671a:	438a      	bics	r2, r1
 800671c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	2220      	movs	r2, #32
 8006726:	4013      	ands	r3, r2
 8006728:	d10e      	bne.n	8006748 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	0018      	movs	r0, r3
 800672e:	f000 fab9 	bl	8006ca4 <HAL_RTC_WaitForSynchro>
 8006732:	1e03      	subs	r3, r0, #0
 8006734:	d008      	beq.n	8006748 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	22ff      	movs	r2, #255	; 0xff
 800673c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2204      	movs	r2, #4
 8006742:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e018      	b.n	800677a <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	490d      	ldr	r1, [pc, #52]	; (8006788 <HAL_RTC_Init+0x124>)
 8006754:	400a      	ands	r2, r1
 8006756:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	699a      	ldr	r2, [r3, #24]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	22ff      	movs	r2, #255	; 0xff
 8006770:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006778:	2300      	movs	r3, #0
  }
}
 800677a:	0018      	movs	r0, r3
 800677c:	46bd      	mov	sp, r7
 800677e:	b002      	add	sp, #8
 8006780:	bd80      	pop	{r7, pc}
 8006782:	46c0      	nop			; (mov r8, r8)
 8006784:	ff8fffbf 	.word	0xff8fffbf
 8006788:	fffbffff 	.word	0xfffbffff

0800678c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800678c:	b590      	push	{r4, r7, lr}
 800678e:	b087      	sub	sp, #28
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006798:	2300      	movs	r3, #0
 800679a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	7f1b      	ldrb	r3, [r3, #28]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <HAL_RTC_SetTime+0x1c>
 80067a4:	2302      	movs	r3, #2
 80067a6:	e0a5      	b.n	80068f4 <HAL_RTC_SetTime+0x168>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2201      	movs	r2, #1
 80067ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2202      	movs	r2, #2
 80067b2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d125      	bne.n	8006806 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	2240      	movs	r2, #64	; 0x40
 80067c2:	4013      	ands	r3, r2
 80067c4:	d102      	bne.n	80067cc <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2200      	movs	r2, #0
 80067ca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	0018      	movs	r0, r3
 80067d2:	f000 fabc 	bl	8006d4e <RTC_ByteToBcd2>
 80067d6:	0003      	movs	r3, r0
 80067d8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	785b      	ldrb	r3, [r3, #1]
 80067de:	0018      	movs	r0, r3
 80067e0:	f000 fab5 	bl	8006d4e <RTC_ByteToBcd2>
 80067e4:	0003      	movs	r3, r0
 80067e6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80067e8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	789b      	ldrb	r3, [r3, #2]
 80067ee:	0018      	movs	r0, r3
 80067f0:	f000 faad 	bl	8006d4e <RTC_ByteToBcd2>
 80067f4:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80067f6:	0022      	movs	r2, r4
 80067f8:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	78db      	ldrb	r3, [r3, #3]
 80067fe:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006800:	4313      	orrs	r3, r2
 8006802:	617b      	str	r3, [r7, #20]
 8006804:	e017      	b.n	8006836 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	2240      	movs	r2, #64	; 0x40
 800680e:	4013      	ands	r3, r2
 8006810:	d102      	bne.n	8006818 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2200      	movs	r2, #0
 8006816:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	785b      	ldrb	r3, [r3, #1]
 8006822:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006824:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800682a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	78db      	ldrb	r3, [r3, #3]
 8006830:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006832:	4313      	orrs	r3, r2
 8006834:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	22ca      	movs	r2, #202	; 0xca
 800683c:	625a      	str	r2, [r3, #36]	; 0x24
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2253      	movs	r2, #83	; 0x53
 8006844:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	0018      	movs	r0, r3
 800684a:	f000 fa54 	bl	8006cf6 <RTC_EnterInitMode>
 800684e:	1e03      	subs	r3, r0, #0
 8006850:	d00b      	beq.n	800686a <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	22ff      	movs	r2, #255	; 0xff
 8006858:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2204      	movs	r2, #4
 800685e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e044      	b.n	80068f4 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	4922      	ldr	r1, [pc, #136]	; (80068fc <HAL_RTC_SetTime+0x170>)
 8006872:	400a      	ands	r2, r1
 8006874:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	491f      	ldr	r1, [pc, #124]	; (8006900 <HAL_RTC_SetTime+0x174>)
 8006882:	400a      	ands	r2, r1
 8006884:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6899      	ldr	r1, [r3, #8]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	431a      	orrs	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2180      	movs	r1, #128	; 0x80
 80068aa:	438a      	bics	r2, r1
 80068ac:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	2220      	movs	r2, #32
 80068b6:	4013      	ands	r3, r2
 80068b8:	d111      	bne.n	80068de <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	0018      	movs	r0, r3
 80068be:	f000 f9f1 	bl	8006ca4 <HAL_RTC_WaitForSynchro>
 80068c2:	1e03      	subs	r3, r0, #0
 80068c4:	d00b      	beq.n	80068de <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	22ff      	movs	r2, #255	; 0xff
 80068cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2204      	movs	r2, #4
 80068d2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e00a      	b.n	80068f4 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	22ff      	movs	r2, #255	; 0xff
 80068e4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2201      	movs	r2, #1
 80068ea:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80068f2:	2300      	movs	r3, #0
  }
}
 80068f4:	0018      	movs	r0, r3
 80068f6:	46bd      	mov	sp, r7
 80068f8:	b007      	add	sp, #28
 80068fa:	bd90      	pop	{r4, r7, pc}
 80068fc:	007f7f7f 	.word	0x007f7f7f
 8006900:	fffbffff 	.word	0xfffbffff

08006904 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006904:	b590      	push	{r4, r7, lr}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	7f1b      	ldrb	r3, [r3, #28]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d101      	bne.n	8006920 <HAL_RTC_SetDate+0x1c>
 800691c:	2302      	movs	r3, #2
 800691e:	e091      	b.n	8006a44 <HAL_RTC_SetDate+0x140>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2201      	movs	r2, #1
 8006924:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2202      	movs	r2, #2
 800692a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10e      	bne.n	8006950 <HAL_RTC_SetDate+0x4c>
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	785b      	ldrb	r3, [r3, #1]
 8006936:	001a      	movs	r2, r3
 8006938:	2310      	movs	r3, #16
 800693a:	4013      	ands	r3, r2
 800693c:	d008      	beq.n	8006950 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	785b      	ldrb	r3, [r3, #1]
 8006942:	2210      	movs	r2, #16
 8006944:	4393      	bics	r3, r2
 8006946:	b2db      	uxtb	r3, r3
 8006948:	330a      	adds	r3, #10
 800694a:	b2da      	uxtb	r2, r3
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d11c      	bne.n	8006990 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	78db      	ldrb	r3, [r3, #3]
 800695a:	0018      	movs	r0, r3
 800695c:	f000 f9f7 	bl	8006d4e <RTC_ByteToBcd2>
 8006960:	0003      	movs	r3, r0
 8006962:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	785b      	ldrb	r3, [r3, #1]
 8006968:	0018      	movs	r0, r3
 800696a:	f000 f9f0 	bl	8006d4e <RTC_ByteToBcd2>
 800696e:	0003      	movs	r3, r0
 8006970:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006972:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	789b      	ldrb	r3, [r3, #2]
 8006978:	0018      	movs	r0, r3
 800697a:	f000 f9e8 	bl	8006d4e <RTC_ByteToBcd2>
 800697e:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006980:	0022      	movs	r2, r4
 8006982:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800698a:	4313      	orrs	r3, r2
 800698c:	617b      	str	r3, [r7, #20]
 800698e:	e00e      	b.n	80069ae <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	78db      	ldrb	r3, [r3, #3]
 8006994:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	785b      	ldrb	r3, [r3, #1]
 800699a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800699c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80069a2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	22ca      	movs	r2, #202	; 0xca
 80069b4:	625a      	str	r2, [r3, #36]	; 0x24
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2253      	movs	r2, #83	; 0x53
 80069bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	0018      	movs	r0, r3
 80069c2:	f000 f998 	bl	8006cf6 <RTC_EnterInitMode>
 80069c6:	1e03      	subs	r3, r0, #0
 80069c8:	d00b      	beq.n	80069e2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	22ff      	movs	r2, #255	; 0xff
 80069d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2204      	movs	r2, #4
 80069d6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e030      	b.n	8006a44 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4918      	ldr	r1, [pc, #96]	; (8006a4c <HAL_RTC_SetDate+0x148>)
 80069ea:	400a      	ands	r2, r1
 80069ec:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68da      	ldr	r2, [r3, #12]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2180      	movs	r1, #128	; 0x80
 80069fa:	438a      	bics	r2, r1
 80069fc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	2220      	movs	r2, #32
 8006a06:	4013      	ands	r3, r2
 8006a08:	d111      	bne.n	8006a2e <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	f000 f949 	bl	8006ca4 <HAL_RTC_WaitForSynchro>
 8006a12:	1e03      	subs	r3, r0, #0
 8006a14:	d00b      	beq.n	8006a2e <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	22ff      	movs	r2, #255	; 0xff
 8006a1c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2204      	movs	r2, #4
 8006a22:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e00a      	b.n	8006a44 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	22ff      	movs	r2, #255	; 0xff
 8006a34:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006a42:	2300      	movs	r3, #0
  }
}
 8006a44:	0018      	movs	r0, r3
 8006a46:	46bd      	mov	sp, r7
 8006a48:	b007      	add	sp, #28
 8006a4a:	bd90      	pop	{r4, r7, pc}
 8006a4c:	00ffff3f 	.word	0x00ffff3f

08006a50 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006a50:	b590      	push	{r4, r7, lr}
 8006a52:	b089      	sub	sp, #36	; 0x24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	61fb      	str	r3, [r7, #28]
 8006a64:	2300      	movs	r3, #0
 8006a66:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	7f1b      	ldrb	r3, [r3, #28]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d101      	bne.n	8006a74 <HAL_RTC_SetAlarm_IT+0x24>
 8006a70:	2302      	movs	r3, #2
 8006a72:	e0d5      	b.n	8006c20 <HAL_RTC_SetAlarm_IT+0x1d0>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2201      	movs	r2, #1
 8006a78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d136      	bne.n	8006af4 <HAL_RTC_SetAlarm_IT+0xa4>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	2240      	movs	r2, #64	; 0x40
 8006a8e:	4013      	ands	r3, r2
 8006a90:	d102      	bne.n	8006a98 <HAL_RTC_SetAlarm_IT+0x48>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2200      	movs	r2, #0
 8006a96:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	f000 f956 	bl	8006d4e <RTC_ByteToBcd2>
 8006aa2:	0003      	movs	r3, r0
 8006aa4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	785b      	ldrb	r3, [r3, #1]
 8006aaa:	0018      	movs	r0, r3
 8006aac:	f000 f94f 	bl	8006d4e <RTC_ByteToBcd2>
 8006ab0:	0003      	movs	r3, r0
 8006ab2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006ab4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	789b      	ldrb	r3, [r3, #2]
 8006aba:	0018      	movs	r0, r3
 8006abc:	f000 f947 	bl	8006d4e <RTC_ByteToBcd2>
 8006ac0:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006ac2:	0022      	movs	r2, r4
 8006ac4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	78db      	ldrb	r3, [r3, #3]
 8006aca:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006acc:	431a      	orrs	r2, r3
 8006ace:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	5c9b      	ldrb	r3, [r3, r2]
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	f000 f939 	bl	8006d4e <RTC_ByteToBcd2>
 8006adc:	0003      	movs	r3, r0
 8006ade:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006ae0:	0022      	movs	r2, r4
 8006ae2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006ae8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006aee:	4313      	orrs	r3, r2
 8006af0:	61fb      	str	r3, [r7, #28]
 8006af2:	e022      	b.n	8006b3a <HAL_RTC_SetAlarm_IT+0xea>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	2240      	movs	r2, #64	; 0x40
 8006afc:	4013      	ands	r3, r2
 8006afe:	d102      	bne.n	8006b06 <HAL_RTC_SetAlarm_IT+0xb6>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2200      	movs	r2, #0
 8006b04:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	785b      	ldrb	r3, [r3, #1]
 8006b10:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006b12:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006b18:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	78db      	ldrb	r3, [r3, #3]
 8006b1e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006b20:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2120      	movs	r1, #32
 8006b26:	5c5b      	ldrb	r3, [r3, r1]
 8006b28:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006b2a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006b30:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006b36:	4313      	orrs	r3, r2
 8006b38:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	22ca      	movs	r2, #202	; 0xca
 8006b4c:	625a      	str	r2, [r3, #36]	; 0x24
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2253      	movs	r2, #83	; 0x53
 8006b54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Alarm A interrupt */
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4931      	ldr	r1, [pc, #196]	; (8006c28 <HAL_RTC_SetAlarm_IT+0x1d8>)
 8006b62:	400a      	ands	r2, r1
 8006b64:	609a      	str	r2, [r3, #8]

  /* Clear flag alarm A */
  __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	22ff      	movs	r2, #255	; 0xff
 8006b6e:	401a      	ands	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	492d      	ldr	r1, [pc, #180]	; (8006c2c <HAL_RTC_SetAlarm_IT+0x1dc>)
 8006b76:	430a      	orrs	r2, r1
 8006b78:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006b7a:	f7fd fb0b 	bl	8004194 <HAL_GetTick>
 8006b7e:	0003      	movs	r3, r0
 8006b80:	61bb      	str	r3, [r7, #24]

  /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8006b82:	e014      	b.n	8006bae <HAL_RTC_SetAlarm_IT+0x15e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b84:	f7fd fb06 	bl	8004194 <HAL_GetTick>
 8006b88:	0002      	movs	r2, r0
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	1ad2      	subs	r2, r2, r3
 8006b8e:	23fa      	movs	r3, #250	; 0xfa
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d90b      	bls.n	8006bae <HAL_RTC_SetAlarm_IT+0x15e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	22ff      	movs	r2, #255	; 0xff
 8006b9c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2203      	movs	r2, #3
 8006ba2:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e038      	b.n	8006c20 <HAL_RTC_SetAlarm_IT+0x1d0>
  while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	d0e4      	beq.n	8006b84 <HAL_RTC_SetAlarm_IT+0x134>
    }
  }

  hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69fa      	ldr	r2, [r7, #28]
 8006bc0:	61da      	str	r2, [r3, #28]
  /* Configure the Alarm A Sub Second register */
  hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Configure the Alarm state: Enable Alarm */
  __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2180      	movs	r1, #128	; 0x80
 8006bd6:	0049      	lsls	r1, r1, #1
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	609a      	str	r2, [r3, #8]
  /* Configure the Alarm interrupt */
  __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2180      	movs	r1, #128	; 0x80
 8006be8:	0149      	lsls	r1, r1, #5
 8006bea:	430a      	orrs	r2, r1
 8006bec:	609a      	str	r2, [r3, #8]

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006bee:	4b10      	ldr	r3, [pc, #64]	; (8006c30 <HAL_RTC_SetAlarm_IT+0x1e0>)
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	4b0f      	ldr	r3, [pc, #60]	; (8006c30 <HAL_RTC_SetAlarm_IT+0x1e0>)
 8006bf4:	2180      	movs	r1, #128	; 0x80
 8006bf6:	0289      	lsls	r1, r1, #10
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006bfc:	4b0c      	ldr	r3, [pc, #48]	; (8006c30 <HAL_RTC_SetAlarm_IT+0x1e0>)
 8006bfe:	689a      	ldr	r2, [r3, #8]
 8006c00:	4b0b      	ldr	r3, [pc, #44]	; (8006c30 <HAL_RTC_SetAlarm_IT+0x1e0>)
 8006c02:	2180      	movs	r1, #128	; 0x80
 8006c04:	0289      	lsls	r1, r1, #10
 8006c06:	430a      	orrs	r2, r1
 8006c08:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	22ff      	movs	r2, #255	; 0xff
 8006c10:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	0018      	movs	r0, r3
 8006c22:	46bd      	mov	sp, r7
 8006c24:	b009      	add	sp, #36	; 0x24
 8006c26:	bd90      	pop	{r4, r7, pc}
 8006c28:	fffffeff 	.word	0xfffffeff
 8006c2c:	fffffe7f 	.word	0xfffffe7f
 8006c30:	40010400 	.word	0x40010400

08006c34 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	2380      	movs	r3, #128	; 0x80
 8006c44:	015b      	lsls	r3, r3, #5
 8006c46:	4013      	ands	r3, r2
 8006c48:	d014      	beq.n	8006c74 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68da      	ldr	r2, [r3, #12]
 8006c50:	2380      	movs	r3, #128	; 0x80
 8006c52:	005b      	lsls	r3, r3, #1
 8006c54:	4013      	ands	r3, r2
 8006c56:	d00d      	beq.n	8006c74 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	0018      	movs	r0, r3
 8006c5c:	f000 f81a 	bl	8006c94 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	22ff      	movs	r2, #255	; 0xff
 8006c68:	401a      	ands	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4907      	ldr	r1, [pc, #28]	; (8006c8c <HAL_RTC_AlarmIRQHandler+0x58>)
 8006c70:	430a      	orrs	r2, r1
 8006c72:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006c74:	4b06      	ldr	r3, [pc, #24]	; (8006c90 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8006c76:	2280      	movs	r2, #128	; 0x80
 8006c78:	0292      	lsls	r2, r2, #10
 8006c7a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	775a      	strb	r2, [r3, #29]
}
 8006c82:	46c0      	nop			; (mov r8, r8)
 8006c84:	46bd      	mov	sp, r7
 8006c86:	b002      	add	sp, #8
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	46c0      	nop			; (mov r8, r8)
 8006c8c:	fffffe7f 	.word	0xfffffe7f
 8006c90:	40010400 	.word	0x40010400

08006c94 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006c9c:	46c0      	nop			; (mov r8, r8)
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	b002      	add	sp, #8
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68da      	ldr	r2, [r3, #12]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	21a0      	movs	r1, #160	; 0xa0
 8006cbc:	438a      	bics	r2, r1
 8006cbe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006cc0:	f7fd fa68 	bl	8004194 <HAL_GetTick>
 8006cc4:	0003      	movs	r3, r0
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006cc8:	e00a      	b.n	8006ce0 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006cca:	f7fd fa63 	bl	8004194 <HAL_GetTick>
 8006cce:	0002      	movs	r2, r0
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	1ad2      	subs	r2, r2, r3
 8006cd4:	23fa      	movs	r3, #250	; 0xfa
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d901      	bls.n	8006ce0 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e006      	b.n	8006cee <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	4013      	ands	r3, r2
 8006cea:	d0ee      	beq.n	8006cca <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	0018      	movs	r0, r3
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	b004      	add	sp, #16
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	2240      	movs	r2, #64	; 0x40
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	d11a      	bne.n	8006d44 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2201      	movs	r2, #1
 8006d14:	4252      	negs	r2, r2
 8006d16:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006d18:	f7fd fa3c 	bl	8004194 <HAL_GetTick>
 8006d1c:	0003      	movs	r3, r0
 8006d1e:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006d20:	e00a      	b.n	8006d38 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006d22:	f7fd fa37 	bl	8004194 <HAL_GetTick>
 8006d26:	0002      	movs	r2, r0
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	1ad2      	subs	r2, r2, r3
 8006d2c:	23fa      	movs	r3, #250	; 0xfa
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d901      	bls.n	8006d38 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e006      	b.n	8006d46 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	2240      	movs	r2, #64	; 0x40
 8006d40:	4013      	ands	r3, r2
 8006d42:	d0ee      	beq.n	8006d22 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	0018      	movs	r0, r3
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	b004      	add	sp, #16
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	0002      	movs	r2, r0
 8006d56:	1dfb      	adds	r3, r7, #7
 8006d58:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8006d5e:	e007      	b.n	8006d70 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	3301      	adds	r3, #1
 8006d64:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006d66:	1dfb      	adds	r3, r7, #7
 8006d68:	1dfa      	adds	r2, r7, #7
 8006d6a:	7812      	ldrb	r2, [r2, #0]
 8006d6c:	3a0a      	subs	r2, #10
 8006d6e:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 8006d70:	1dfb      	adds	r3, r7, #7
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	2b09      	cmp	r3, #9
 8006d76:	d8f3      	bhi.n	8006d60 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	011b      	lsls	r3, r3, #4
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	1dfb      	adds	r3, r7, #7
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	b2db      	uxtb	r3, r3
}
 8006d88:	0018      	movs	r0, r3
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	b004      	add	sp, #16
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e01e      	b.n	8006de0 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	223d      	movs	r2, #61	; 0x3d
 8006da6:	5c9b      	ldrb	r3, [r3, r2]
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d107      	bne.n	8006dbe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	223c      	movs	r2, #60	; 0x3c
 8006db2:	2100      	movs	r1, #0
 8006db4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	0018      	movs	r0, r3
 8006dba:	f000 f815 	bl	8006de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	223d      	movs	r2, #61	; 0x3d
 8006dc2:	2102      	movs	r1, #2
 8006dc4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	0019      	movs	r1, r3
 8006dd0:	0010      	movs	r0, r2
 8006dd2:	f000 f969 	bl	80070a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	223d      	movs	r2, #61	; 0x3d
 8006dda:	2101      	movs	r1, #1
 8006ddc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	0018      	movs	r0, r3
 8006de2:	46bd      	mov	sp, r7
 8006de4:	b002      	add	sp, #8
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006df0:	46c0      	nop			; (mov r8, r8)
 8006df2:	46bd      	mov	sp, r7
 8006df4:	b002      	add	sp, #8
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	2207      	movs	r2, #7
 8006e18:	4013      	ands	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2b06      	cmp	r3, #6
 8006e20:	d007      	beq.n	8006e32 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	0018      	movs	r0, r3
 8006e36:	46bd      	mov	sp, r7
 8006e38:	b004      	add	sp, #16
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d124      	bne.n	8006e9c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	2202      	movs	r2, #2
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d11d      	bne.n	8006e9c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2203      	movs	r2, #3
 8006e66:	4252      	negs	r2, r2
 8006e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	2203      	movs	r2, #3
 8006e78:	4013      	ands	r3, r2
 8006e7a:	d004      	beq.n	8006e86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	0018      	movs	r0, r3
 8006e80:	f000 f8fa 	bl	8007078 <HAL_TIM_IC_CaptureCallback>
 8006e84:	e007      	b.n	8006e96 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f000 f8ed 	bl	8007068 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	0018      	movs	r0, r3
 8006e92:	f000 f8f9 	bl	8007088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	2204      	movs	r2, #4
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	2b04      	cmp	r3, #4
 8006ea8:	d125      	bne.n	8006ef6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	2204      	movs	r2, #4
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	2b04      	cmp	r3, #4
 8006eb6:	d11e      	bne.n	8006ef6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2205      	movs	r2, #5
 8006ebe:	4252      	negs	r2, r2
 8006ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699a      	ldr	r2, [r3, #24]
 8006ece:	23c0      	movs	r3, #192	; 0xc0
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	d004      	beq.n	8006ee0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	0018      	movs	r0, r3
 8006eda:	f000 f8cd 	bl	8007078 <HAL_TIM_IC_CaptureCallback>
 8006ede:	e007      	b.n	8006ef0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	0018      	movs	r0, r3
 8006ee4:	f000 f8c0 	bl	8007068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	0018      	movs	r0, r3
 8006eec:	f000 f8cc 	bl	8007088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	2208      	movs	r2, #8
 8006efe:	4013      	ands	r3, r2
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d124      	bne.n	8006f4e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	2208      	movs	r2, #8
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	2b08      	cmp	r3, #8
 8006f10:	d11d      	bne.n	8006f4e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2209      	movs	r2, #9
 8006f18:	4252      	negs	r2, r2
 8006f1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2204      	movs	r2, #4
 8006f20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	2203      	movs	r2, #3
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	d004      	beq.n	8006f38 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	0018      	movs	r0, r3
 8006f32:	f000 f8a1 	bl	8007078 <HAL_TIM_IC_CaptureCallback>
 8006f36:	e007      	b.n	8006f48 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	f000 f894 	bl	8007068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	0018      	movs	r0, r3
 8006f44:	f000 f8a0 	bl	8007088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	2210      	movs	r2, #16
 8006f56:	4013      	ands	r3, r2
 8006f58:	2b10      	cmp	r3, #16
 8006f5a:	d125      	bne.n	8006fa8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	2210      	movs	r2, #16
 8006f64:	4013      	ands	r3, r2
 8006f66:	2b10      	cmp	r3, #16
 8006f68:	d11e      	bne.n	8006fa8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2211      	movs	r2, #17
 8006f70:	4252      	negs	r2, r2
 8006f72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2208      	movs	r2, #8
 8006f78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	69da      	ldr	r2, [r3, #28]
 8006f80:	23c0      	movs	r3, #192	; 0xc0
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	4013      	ands	r3, r2
 8006f86:	d004      	beq.n	8006f92 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	0018      	movs	r0, r3
 8006f8c:	f000 f874 	bl	8007078 <HAL_TIM_IC_CaptureCallback>
 8006f90:	e007      	b.n	8006fa2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	0018      	movs	r0, r3
 8006f96:	f000 f867 	bl	8007068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	f000 f873 	bl	8007088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d10f      	bne.n	8006fd6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d108      	bne.n	8006fd6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	4252      	negs	r2, r2
 8006fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	f7fc fe1f 	bl	8003c14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	2280      	movs	r2, #128	; 0x80
 8006fde:	4013      	ands	r3, r2
 8006fe0:	2b80      	cmp	r3, #128	; 0x80
 8006fe2:	d10f      	bne.n	8007004 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	2280      	movs	r2, #128	; 0x80
 8006fec:	4013      	ands	r3, r2
 8006fee:	2b80      	cmp	r3, #128	; 0x80
 8006ff0:	d108      	bne.n	8007004 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2281      	movs	r2, #129	; 0x81
 8006ff8:	4252      	negs	r2, r2
 8006ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	0018      	movs	r0, r3
 8007000:	f000 f8d0 	bl	80071a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	2240      	movs	r2, #64	; 0x40
 800700c:	4013      	ands	r3, r2
 800700e:	2b40      	cmp	r3, #64	; 0x40
 8007010:	d10f      	bne.n	8007032 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	2240      	movs	r2, #64	; 0x40
 800701a:	4013      	ands	r3, r2
 800701c:	2b40      	cmp	r3, #64	; 0x40
 800701e:	d108      	bne.n	8007032 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2241      	movs	r2, #65	; 0x41
 8007026:	4252      	negs	r2, r2
 8007028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	0018      	movs	r0, r3
 800702e:	f000 f833 	bl	8007098 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	2220      	movs	r2, #32
 800703a:	4013      	ands	r3, r2
 800703c:	2b20      	cmp	r3, #32
 800703e:	d10f      	bne.n	8007060 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	2220      	movs	r2, #32
 8007048:	4013      	ands	r3, r2
 800704a:	2b20      	cmp	r3, #32
 800704c:	d108      	bne.n	8007060 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2221      	movs	r2, #33	; 0x21
 8007054:	4252      	negs	r2, r2
 8007056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	0018      	movs	r0, r3
 800705c:	f000 f89a 	bl	8007194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007060:	46c0      	nop			; (mov r8, r8)
 8007062:	46bd      	mov	sp, r7
 8007064:	b002      	add	sp, #8
 8007066:	bd80      	pop	{r7, pc}

08007068 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007070:	46c0      	nop			; (mov r8, r8)
 8007072:	46bd      	mov	sp, r7
 8007074:	b002      	add	sp, #8
 8007076:	bd80      	pop	{r7, pc}

08007078 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007080:	46c0      	nop			; (mov r8, r8)
 8007082:	46bd      	mov	sp, r7
 8007084:	b002      	add	sp, #8
 8007086:	bd80      	pop	{r7, pc}

08007088 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007090:	46c0      	nop			; (mov r8, r8)
 8007092:	46bd      	mov	sp, r7
 8007094:	b002      	add	sp, #8
 8007096:	bd80      	pop	{r7, pc}

08007098 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070a0:	46c0      	nop			; (mov r8, r8)
 80070a2:	46bd      	mov	sp, r7
 80070a4:	b002      	add	sp, #8
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a2f      	ldr	r2, [pc, #188]	; (8007178 <TIM_Base_SetConfig+0xd0>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d003      	beq.n	80070c8 <TIM_Base_SetConfig+0x20>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a2e      	ldr	r2, [pc, #184]	; (800717c <TIM_Base_SetConfig+0xd4>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d108      	bne.n	80070da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2270      	movs	r2, #112	; 0x70
 80070cc:	4393      	bics	r3, r2
 80070ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a26      	ldr	r2, [pc, #152]	; (8007178 <TIM_Base_SetConfig+0xd0>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d013      	beq.n	800710a <TIM_Base_SetConfig+0x62>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a25      	ldr	r2, [pc, #148]	; (800717c <TIM_Base_SetConfig+0xd4>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d00f      	beq.n	800710a <TIM_Base_SetConfig+0x62>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a24      	ldr	r2, [pc, #144]	; (8007180 <TIM_Base_SetConfig+0xd8>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d00b      	beq.n	800710a <TIM_Base_SetConfig+0x62>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a23      	ldr	r2, [pc, #140]	; (8007184 <TIM_Base_SetConfig+0xdc>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d007      	beq.n	800710a <TIM_Base_SetConfig+0x62>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a22      	ldr	r2, [pc, #136]	; (8007188 <TIM_Base_SetConfig+0xe0>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d003      	beq.n	800710a <TIM_Base_SetConfig+0x62>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a21      	ldr	r2, [pc, #132]	; (800718c <TIM_Base_SetConfig+0xe4>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d108      	bne.n	800711c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	4a20      	ldr	r2, [pc, #128]	; (8007190 <TIM_Base_SetConfig+0xe8>)
 800710e:	4013      	ands	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	4313      	orrs	r3, r2
 800711a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2280      	movs	r2, #128	; 0x80
 8007120:	4393      	bics	r3, r2
 8007122:	001a      	movs	r2, r3
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	4313      	orrs	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	689a      	ldr	r2, [r3, #8]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a0c      	ldr	r2, [pc, #48]	; (8007178 <TIM_Base_SetConfig+0xd0>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d00b      	beq.n	8007162 <TIM_Base_SetConfig+0xba>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a0d      	ldr	r2, [pc, #52]	; (8007184 <TIM_Base_SetConfig+0xdc>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d007      	beq.n	8007162 <TIM_Base_SetConfig+0xba>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a0c      	ldr	r2, [pc, #48]	; (8007188 <TIM_Base_SetConfig+0xe0>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d003      	beq.n	8007162 <TIM_Base_SetConfig+0xba>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a0b      	ldr	r2, [pc, #44]	; (800718c <TIM_Base_SetConfig+0xe4>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d103      	bne.n	800716a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	691a      	ldr	r2, [r3, #16]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	615a      	str	r2, [r3, #20]
}
 8007170:	46c0      	nop			; (mov r8, r8)
 8007172:	46bd      	mov	sp, r7
 8007174:	b004      	add	sp, #16
 8007176:	bd80      	pop	{r7, pc}
 8007178:	40012c00 	.word	0x40012c00
 800717c:	40000400 	.word	0x40000400
 8007180:	40002000 	.word	0x40002000
 8007184:	40014000 	.word	0x40014000
 8007188:	40014400 	.word	0x40014400
 800718c:	40014800 	.word	0x40014800
 8007190:	fffffcff 	.word	0xfffffcff

08007194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800719c:	46c0      	nop			; (mov r8, r8)
 800719e:	46bd      	mov	sp, r7
 80071a0:	b002      	add	sp, #8
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071ac:	46c0      	nop			; (mov r8, r8)
 80071ae:	46bd      	mov	sp, r7
 80071b0:	b002      	add	sp, #8
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e044      	b.n	8007250 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d107      	bne.n	80071de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2270      	movs	r2, #112	; 0x70
 80071d2:	2100      	movs	r1, #0
 80071d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	0018      	movs	r0, r3
 80071da:	f7fc fe35 	bl	8003e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2224      	movs	r2, #36	; 0x24
 80071e2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2101      	movs	r1, #1
 80071f0:	438a      	bics	r2, r1
 80071f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	0018      	movs	r0, r3
 80071f8:	f000 fb16 	bl	8007828 <UART_SetConfig>
 80071fc:	0003      	movs	r3, r0
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d101      	bne.n	8007206 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e024      	b.n	8007250 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	0018      	movs	r0, r3
 8007212:	f000 fc8f 	bl	8007b34 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	490d      	ldr	r1, [pc, #52]	; (8007258 <HAL_UART_Init+0xa4>)
 8007222:	400a      	ands	r2, r1
 8007224:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2108      	movs	r1, #8
 8007232:	438a      	bics	r2, r1
 8007234:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2101      	movs	r1, #1
 8007242:	430a      	orrs	r2, r1
 8007244:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	0018      	movs	r0, r3
 800724a:	f000 fd27 	bl	8007c9c <UART_CheckIdleState>
 800724e:	0003      	movs	r3, r0
}
 8007250:	0018      	movs	r0, r3
 8007252:	46bd      	mov	sp, r7
 8007254:	b002      	add	sp, #8
 8007256:	bd80      	pop	{r7, pc}
 8007258:	fffff7ff 	.word	0xfffff7ff

0800725c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08a      	sub	sp, #40	; 0x28
 8007260:	af02      	add	r7, sp, #8
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	603b      	str	r3, [r7, #0]
 8007268:	1dbb      	adds	r3, r7, #6
 800726a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007270:	2b20      	cmp	r3, #32
 8007272:	d000      	beq.n	8007276 <HAL_UART_Transmit+0x1a>
 8007274:	e095      	b.n	80073a2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <HAL_UART_Transmit+0x28>
 800727c:	1dbb      	adds	r3, r7, #6
 800727e:	881b      	ldrh	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e08d      	b.n	80073a4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	689a      	ldr	r2, [r3, #8]
 800728c:	2380      	movs	r3, #128	; 0x80
 800728e:	015b      	lsls	r3, r3, #5
 8007290:	429a      	cmp	r2, r3
 8007292:	d109      	bne.n	80072a8 <HAL_UART_Transmit+0x4c>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d105      	bne.n	80072a8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2201      	movs	r2, #1
 80072a0:	4013      	ands	r3, r2
 80072a2:	d001      	beq.n	80072a8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e07d      	b.n	80073a4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2270      	movs	r2, #112	; 0x70
 80072ac:	5c9b      	ldrb	r3, [r3, r2]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d101      	bne.n	80072b6 <HAL_UART_Transmit+0x5a>
 80072b2:	2302      	movs	r3, #2
 80072b4:	e076      	b.n	80073a4 <HAL_UART_Transmit+0x148>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2270      	movs	r2, #112	; 0x70
 80072ba:	2101      	movs	r1, #1
 80072bc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2221      	movs	r2, #33	; 0x21
 80072c8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80072ca:	f7fc ff63 	bl	8004194 <HAL_GetTick>
 80072ce:	0003      	movs	r3, r0
 80072d0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	1dba      	adds	r2, r7, #6
 80072d6:	2150      	movs	r1, #80	; 0x50
 80072d8:	8812      	ldrh	r2, [r2, #0]
 80072da:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	1dba      	adds	r2, r7, #6
 80072e0:	2152      	movs	r1, #82	; 0x52
 80072e2:	8812      	ldrh	r2, [r2, #0]
 80072e4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	689a      	ldr	r2, [r3, #8]
 80072ea:	2380      	movs	r3, #128	; 0x80
 80072ec:	015b      	lsls	r3, r3, #5
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d108      	bne.n	8007304 <HAL_UART_Transmit+0xa8>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d104      	bne.n	8007304 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80072fa:	2300      	movs	r3, #0
 80072fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	61bb      	str	r3, [r7, #24]
 8007302:	e003      	b.n	800730c <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007308:	2300      	movs	r3, #0
 800730a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800730c:	e02d      	b.n	800736a <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	0013      	movs	r3, r2
 8007318:	2200      	movs	r2, #0
 800731a:	2180      	movs	r1, #128	; 0x80
 800731c:	f000 fd04 	bl	8007d28 <UART_WaitOnFlagUntilTimeout>
 8007320:	1e03      	subs	r3, r0, #0
 8007322:	d001      	beq.n	8007328 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e03d      	b.n	80073a4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10b      	bne.n	8007346 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	881a      	ldrh	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	05d2      	lsls	r2, r2, #23
 8007338:	0dd2      	lsrs	r2, r2, #23
 800733a:	b292      	uxth	r2, r2
 800733c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	3302      	adds	r3, #2
 8007342:	61bb      	str	r3, [r7, #24]
 8007344:	e008      	b.n	8007358 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	781a      	ldrb	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	b292      	uxth	r2, r2
 8007350:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	3301      	adds	r3, #1
 8007356:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2252      	movs	r2, #82	; 0x52
 800735c:	5a9b      	ldrh	r3, [r3, r2]
 800735e:	b29b      	uxth	r3, r3
 8007360:	3b01      	subs	r3, #1
 8007362:	b299      	uxth	r1, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2252      	movs	r2, #82	; 0x52
 8007368:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2252      	movs	r2, #82	; 0x52
 800736e:	5a9b      	ldrh	r3, [r3, r2]
 8007370:	b29b      	uxth	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1cb      	bne.n	800730e <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	0013      	movs	r3, r2
 8007380:	2200      	movs	r2, #0
 8007382:	2140      	movs	r1, #64	; 0x40
 8007384:	f000 fcd0 	bl	8007d28 <UART_WaitOnFlagUntilTimeout>
 8007388:	1e03      	subs	r3, r0, #0
 800738a:	d001      	beq.n	8007390 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e009      	b.n	80073a4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2220      	movs	r2, #32
 8007394:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2270      	movs	r2, #112	; 0x70
 800739a:	2100      	movs	r1, #0
 800739c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	e000      	b.n	80073a4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80073a2:	2302      	movs	r3, #2
  }
}
 80073a4:	0018      	movs	r0, r3
 80073a6:	46bd      	mov	sp, r7
 80073a8:	b008      	add	sp, #32
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	1dbb      	adds	r3, r7, #6
 80073b8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073be:	2b20      	cmp	r3, #32
 80073c0:	d000      	beq.n	80073c4 <HAL_UART_Receive_IT+0x18>
 80073c2:	e08b      	b.n	80074dc <HAL_UART_Receive_IT+0x130>
  {
    if ((pData == NULL) || (Size == 0U))
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <HAL_UART_Receive_IT+0x26>
 80073ca:	1dbb      	adds	r3, r7, #6
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e083      	b.n	80074de <HAL_UART_Receive_IT+0x132>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	689a      	ldr	r2, [r3, #8]
 80073da:	2380      	movs	r3, #128	; 0x80
 80073dc:	015b      	lsls	r3, r3, #5
 80073de:	429a      	cmp	r2, r3
 80073e0:	d109      	bne.n	80073f6 <HAL_UART_Receive_IT+0x4a>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d105      	bne.n	80073f6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2201      	movs	r2, #1
 80073ee:	4013      	ands	r3, r2
 80073f0:	d001      	beq.n	80073f6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e073      	b.n	80074de <HAL_UART_Receive_IT+0x132>
      }
    }

    __HAL_LOCK(huart);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2270      	movs	r2, #112	; 0x70
 80073fa:	5c9b      	ldrb	r3, [r3, r2]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d101      	bne.n	8007404 <HAL_UART_Receive_IT+0x58>
 8007400:	2302      	movs	r3, #2
 8007402:	e06c      	b.n	80074de <HAL_UART_Receive_IT+0x132>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2270      	movs	r2, #112	; 0x70
 8007408:	2101      	movs	r1, #1
 800740a:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	1dba      	adds	r2, r7, #6
 8007416:	2158      	movs	r1, #88	; 0x58
 8007418:	8812      	ldrh	r2, [r2, #0]
 800741a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	1dba      	adds	r2, r7, #6
 8007420:	215a      	movs	r1, #90	; 0x5a
 8007422:	8812      	ldrh	r2, [r2, #0]
 8007424:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	2380      	movs	r3, #128	; 0x80
 8007432:	015b      	lsls	r3, r3, #5
 8007434:	429a      	cmp	r2, r3
 8007436:	d10d      	bne.n	8007454 <HAL_UART_Receive_IT+0xa8>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d104      	bne.n	800744a <HAL_UART_Receive_IT+0x9e>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	225c      	movs	r2, #92	; 0x5c
 8007444:	4928      	ldr	r1, [pc, #160]	; (80074e8 <HAL_UART_Receive_IT+0x13c>)
 8007446:	5299      	strh	r1, [r3, r2]
 8007448:	e01a      	b.n	8007480 <HAL_UART_Receive_IT+0xd4>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	225c      	movs	r2, #92	; 0x5c
 800744e:	21ff      	movs	r1, #255	; 0xff
 8007450:	5299      	strh	r1, [r3, r2]
 8007452:	e015      	b.n	8007480 <HAL_UART_Receive_IT+0xd4>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10d      	bne.n	8007478 <HAL_UART_Receive_IT+0xcc>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d104      	bne.n	800746e <HAL_UART_Receive_IT+0xc2>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	225c      	movs	r2, #92	; 0x5c
 8007468:	21ff      	movs	r1, #255	; 0xff
 800746a:	5299      	strh	r1, [r3, r2]
 800746c:	e008      	b.n	8007480 <HAL_UART_Receive_IT+0xd4>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	225c      	movs	r2, #92	; 0x5c
 8007472:	217f      	movs	r1, #127	; 0x7f
 8007474:	5299      	strh	r1, [r3, r2]
 8007476:	e003      	b.n	8007480 <HAL_UART_Receive_IT+0xd4>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	225c      	movs	r2, #92	; 0x5c
 800747c:	2100      	movs	r1, #0
 800747e:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2222      	movs	r2, #34	; 0x22
 800748a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689a      	ldr	r2, [r3, #8]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2101      	movs	r1, #1
 8007498:	430a      	orrs	r2, r1
 800749a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	689a      	ldr	r2, [r3, #8]
 80074a0:	2380      	movs	r3, #128	; 0x80
 80074a2:	015b      	lsls	r3, r3, #5
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d107      	bne.n	80074b8 <HAL_UART_Receive_IT+0x10c>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d103      	bne.n	80074b8 <HAL_UART_Receive_IT+0x10c>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4a0e      	ldr	r2, [pc, #56]	; (80074ec <HAL_UART_Receive_IT+0x140>)
 80074b4:	661a      	str	r2, [r3, #96]	; 0x60
 80074b6:	e002      	b.n	80074be <HAL_UART_Receive_IT+0x112>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4a0d      	ldr	r2, [pc, #52]	; (80074f0 <HAL_UART_Receive_IT+0x144>)
 80074bc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2270      	movs	r2, #112	; 0x70
 80074c2:	2100      	movs	r1, #0
 80074c4:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2190      	movs	r1, #144	; 0x90
 80074d2:	0049      	lsls	r1, r1, #1
 80074d4:	430a      	orrs	r2, r1
 80074d6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	e000      	b.n	80074de <HAL_UART_Receive_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 80074dc:	2302      	movs	r3, #2
  }
}
 80074de:	0018      	movs	r0, r3
 80074e0:	46bd      	mov	sp, r7
 80074e2:	b004      	add	sp, #16
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	46c0      	nop			; (mov r8, r8)
 80074e8:	000001ff 	.word	0x000001ff
 80074ec:	08007f85 	.word	0x08007f85
 80074f0:	08007ec9 	.word	0x08007ec9

080074f4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4927      	ldr	r1, [pc, #156]	; (80075a4 <HAL_UART_AbortReceive+0xb0>)
 8007508:	400a      	ands	r2, r1
 800750a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689a      	ldr	r2, [r3, #8]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2101      	movs	r1, #1
 8007518:	438a      	bics	r2, r1
 800751a:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	2240      	movs	r2, #64	; 0x40
 8007524:	4013      	ands	r3, r2
 8007526:	2b40      	cmp	r3, #64	; 0x40
 8007528:	d123      	bne.n	8007572 <HAL_UART_AbortReceive+0x7e>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689a      	ldr	r2, [r3, #8]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2140      	movs	r1, #64	; 0x40
 8007536:	438a      	bics	r2, r1
 8007538:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800753e:	2b00      	cmp	r3, #0
 8007540:	d017      	beq.n	8007572 <HAL_UART_AbortReceive+0x7e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007546:	2200      	movs	r2, #0
 8007548:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800754e:	0018      	movs	r0, r3
 8007550:	f7fd fa9d 	bl	8004a8e <HAL_DMA_Abort>
 8007554:	1e03      	subs	r3, r0, #0
 8007556:	d00c      	beq.n	8007572 <HAL_UART_AbortReceive+0x7e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800755c:	0018      	movs	r0, r3
 800755e:	f7fd fb14 	bl	8004b8a <HAL_DMA_GetError>
 8007562:	0003      	movs	r3, r0
 8007564:	2b20      	cmp	r3, #32
 8007566:	d104      	bne.n	8007572 <HAL_UART_AbortReceive+0x7e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2210      	movs	r2, #16
 800756c:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e013      	b.n	800759a <HAL_UART_AbortReceive+0xa6>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	225a      	movs	r2, #90	; 0x5a
 8007576:	2100      	movs	r1, #0
 8007578:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	220f      	movs	r2, #15
 8007580:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	699a      	ldr	r2, [r3, #24]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2108      	movs	r1, #8
 800758e:	430a      	orrs	r2, r1
 8007590:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2220      	movs	r2, #32
 8007596:	679a      	str	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	0018      	movs	r0, r3
 800759c:	46bd      	mov	sp, r7
 800759e:	b002      	add	sp, #8
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	46c0      	nop			; (mov r8, r8)
 80075a4:	fffffedf 	.word	0xfffffedf

080075a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b088      	sub	sp, #32
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	4a89      	ldr	r2, [pc, #548]	; (80077f0 <HAL_UART_IRQHandler+0x248>)
 80075cc:	4013      	ands	r3, r2
 80075ce:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d112      	bne.n	80075fc <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	2220      	movs	r2, #32
 80075da:	4013      	ands	r3, r2
 80075dc:	d00e      	beq.n	80075fc <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	2220      	movs	r2, #32
 80075e2:	4013      	ands	r3, r2
 80075e4:	d00a      	beq.n	80075fc <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d100      	bne.n	80075f0 <HAL_UART_IRQHandler+0x48>
 80075ee:	e0f7      	b.n	80077e0 <HAL_UART_IRQHandler+0x238>
      {
        huart->RxISR(huart);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	0010      	movs	r0, r2
 80075f8:	4798      	blx	r3
      }
      return;
 80075fa:	e0f1      	b.n	80077e0 <HAL_UART_IRQHandler+0x238>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d100      	bne.n	8007604 <HAL_UART_IRQHandler+0x5c>
 8007602:	e0cd      	b.n	80077a0 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	2201      	movs	r2, #1
 8007608:	4013      	ands	r3, r2
 800760a:	d105      	bne.n	8007618 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800760c:	69ba      	ldr	r2, [r7, #24]
 800760e:	2390      	movs	r3, #144	; 0x90
 8007610:	005b      	lsls	r3, r3, #1
 8007612:	4013      	ands	r3, r2
 8007614:	d100      	bne.n	8007618 <HAL_UART_IRQHandler+0x70>
 8007616:	e0c3      	b.n	80077a0 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	2201      	movs	r2, #1
 800761c:	4013      	ands	r3, r2
 800761e:	d00e      	beq.n	800763e <HAL_UART_IRQHandler+0x96>
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	2380      	movs	r3, #128	; 0x80
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	4013      	ands	r3, r2
 8007628:	d009      	beq.n	800763e <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2201      	movs	r2, #1
 8007630:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007636:	2201      	movs	r2, #1
 8007638:	431a      	orrs	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	2202      	movs	r2, #2
 8007642:	4013      	ands	r3, r2
 8007644:	d00d      	beq.n	8007662 <HAL_UART_IRQHandler+0xba>
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2201      	movs	r2, #1
 800764a:	4013      	ands	r3, r2
 800764c:	d009      	beq.n	8007662 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2202      	movs	r2, #2
 8007654:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800765a:	2204      	movs	r2, #4
 800765c:	431a      	orrs	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	2204      	movs	r2, #4
 8007666:	4013      	ands	r3, r2
 8007668:	d00d      	beq.n	8007686 <HAL_UART_IRQHandler+0xde>
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2201      	movs	r2, #1
 800766e:	4013      	ands	r3, r2
 8007670:	d009      	beq.n	8007686 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2204      	movs	r2, #4
 8007678:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800767e:	2202      	movs	r2, #2
 8007680:	431a      	orrs	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	2208      	movs	r2, #8
 800768a:	4013      	ands	r3, r2
 800768c:	d011      	beq.n	80076b2 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	2220      	movs	r2, #32
 8007692:	4013      	ands	r3, r2
 8007694:	d103      	bne.n	800769e <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	2201      	movs	r2, #1
 800769a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800769c:	d009      	beq.n	80076b2 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2208      	movs	r2, #8
 80076a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076aa:	2208      	movs	r2, #8
 80076ac:	431a      	orrs	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80076b2:	69fa      	ldr	r2, [r7, #28]
 80076b4:	2380      	movs	r3, #128	; 0x80
 80076b6:	011b      	lsls	r3, r3, #4
 80076b8:	4013      	ands	r3, r2
 80076ba:	d00f      	beq.n	80076dc <HAL_UART_IRQHandler+0x134>
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	2380      	movs	r3, #128	; 0x80
 80076c0:	04db      	lsls	r3, r3, #19
 80076c2:	4013      	ands	r3, r2
 80076c4:	d00a      	beq.n	80076dc <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2280      	movs	r2, #128	; 0x80
 80076cc:	0112      	lsls	r2, r2, #4
 80076ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076d4:	2220      	movs	r2, #32
 80076d6:	431a      	orrs	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d100      	bne.n	80076e6 <HAL_UART_IRQHandler+0x13e>
 80076e4:	e07e      	b.n	80077e4 <HAL_UART_IRQHandler+0x23c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	2220      	movs	r2, #32
 80076ea:	4013      	ands	r3, r2
 80076ec:	d00c      	beq.n	8007708 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	2220      	movs	r2, #32
 80076f2:	4013      	ands	r3, r2
 80076f4:	d008      	beq.n	8007708 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d004      	beq.n	8007708 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	0010      	movs	r0, r2
 8007706:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800770c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	2240      	movs	r2, #64	; 0x40
 8007716:	4013      	ands	r3, r2
 8007718:	2b40      	cmp	r3, #64	; 0x40
 800771a:	d003      	beq.n	8007724 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2228      	movs	r2, #40	; 0x28
 8007720:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007722:	d033      	beq.n	800778c <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	0018      	movs	r0, r3
 8007728:	f000 fb7c 	bl	8007e24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	2240      	movs	r2, #64	; 0x40
 8007734:	4013      	ands	r3, r2
 8007736:	2b40      	cmp	r3, #64	; 0x40
 8007738:	d123      	bne.n	8007782 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689a      	ldr	r2, [r3, #8]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2140      	movs	r1, #64	; 0x40
 8007746:	438a      	bics	r2, r1
 8007748:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800774e:	2b00      	cmp	r3, #0
 8007750:	d012      	beq.n	8007778 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007756:	4a27      	ldr	r2, [pc, #156]	; (80077f4 <HAL_UART_IRQHandler+0x24c>)
 8007758:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800775e:	0018      	movs	r0, r3
 8007760:	f7fd f9cd 	bl	8004afe <HAL_DMA_Abort_IT>
 8007764:	1e03      	subs	r3, r0, #0
 8007766:	d019      	beq.n	800779c <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800776c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007772:	0018      	movs	r0, r3
 8007774:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007776:	e011      	b.n	800779c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	0018      	movs	r0, r3
 800777c:	f000 f84c 	bl	8007818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007780:	e00c      	b.n	800779c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	0018      	movs	r0, r3
 8007786:	f000 f847 	bl	8007818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800778a:	e007      	b.n	800779c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	0018      	movs	r0, r3
 8007790:	f000 f842 	bl	8007818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800779a:	e023      	b.n	80077e4 <HAL_UART_IRQHandler+0x23c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800779c:	46c0      	nop			; (mov r8, r8)
    return;
 800779e:	e021      	b.n	80077e4 <HAL_UART_IRQHandler+0x23c>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	2280      	movs	r2, #128	; 0x80
 80077a4:	4013      	ands	r3, r2
 80077a6:	d00d      	beq.n	80077c4 <HAL_UART_IRQHandler+0x21c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	2280      	movs	r2, #128	; 0x80
 80077ac:	4013      	ands	r3, r2
 80077ae:	d009      	beq.n	80077c4 <HAL_UART_IRQHandler+0x21c>
  {
    if (huart->TxISR != NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d017      	beq.n	80077e8 <HAL_UART_IRQHandler+0x240>
    {
      huart->TxISR(huart);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	0010      	movs	r0, r2
 80077c0:	4798      	blx	r3
    }
    return;
 80077c2:	e011      	b.n	80077e8 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	2240      	movs	r2, #64	; 0x40
 80077c8:	4013      	ands	r3, r2
 80077ca:	d00e      	beq.n	80077ea <HAL_UART_IRQHandler+0x242>
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	2240      	movs	r2, #64	; 0x40
 80077d0:	4013      	ands	r3, r2
 80077d2:	d00a      	beq.n	80077ea <HAL_UART_IRQHandler+0x242>
  {
    UART_EndTransmit_IT(huart);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	0018      	movs	r0, r3
 80077d8:	f000 fb5b 	bl	8007e92 <UART_EndTransmit_IT>
    return;
 80077dc:	46c0      	nop			; (mov r8, r8)
 80077de:	e004      	b.n	80077ea <HAL_UART_IRQHandler+0x242>
      return;
 80077e0:	46c0      	nop			; (mov r8, r8)
 80077e2:	e002      	b.n	80077ea <HAL_UART_IRQHandler+0x242>
    return;
 80077e4:	46c0      	nop			; (mov r8, r8)
 80077e6:	e000      	b.n	80077ea <HAL_UART_IRQHandler+0x242>
    return;
 80077e8:	46c0      	nop			; (mov r8, r8)
  }

}
 80077ea:	46bd      	mov	sp, r7
 80077ec:	b008      	add	sp, #32
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	0000080f 	.word	0x0000080f
 80077f4:	08007e65 	.word	0x08007e65

080077f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007800:	46c0      	nop			; (mov r8, r8)
 8007802:	46bd      	mov	sp, r7
 8007804:	b002      	add	sp, #8
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007810:	46c0      	nop			; (mov r8, r8)
 8007812:	46bd      	mov	sp, r7
 8007814:	b002      	add	sp, #8
 8007816:	bd80      	pop	{r7, pc}

08007818 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007820:	46c0      	nop			; (mov r8, r8)
 8007822:	46bd      	mov	sp, r7
 8007824:	b002      	add	sp, #8
 8007826:	bd80      	pop	{r7, pc}

08007828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b088      	sub	sp, #32
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007830:	2300      	movs	r3, #0
 8007832:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007834:	2317      	movs	r3, #23
 8007836:	18fb      	adds	r3, r7, r3
 8007838:	2200      	movs	r2, #0
 800783a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	689a      	ldr	r2, [r3, #8]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	431a      	orrs	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	431a      	orrs	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	69db      	ldr	r3, [r3, #28]
 8007850:	4313      	orrs	r3, r2
 8007852:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4aad      	ldr	r2, [pc, #692]	; (8007b10 <UART_SetConfig+0x2e8>)
 800785c:	4013      	ands	r3, r2
 800785e:	0019      	movs	r1, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	430a      	orrs	r2, r1
 8007868:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	4aa8      	ldr	r2, [pc, #672]	; (8007b14 <UART_SetConfig+0x2ec>)
 8007872:	4013      	ands	r3, r2
 8007874:	0019      	movs	r1, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68da      	ldr	r2, [r3, #12]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	430a      	orrs	r2, r1
 8007880:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	4313      	orrs	r3, r2
 8007890:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	4a9f      	ldr	r2, [pc, #636]	; (8007b18 <UART_SetConfig+0x2f0>)
 800789a:	4013      	ands	r3, r2
 800789c:	0019      	movs	r1, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a9b      	ldr	r2, [pc, #620]	; (8007b1c <UART_SetConfig+0x2f4>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d125      	bne.n	80078fe <UART_SetConfig+0xd6>
 80078b2:	4b9b      	ldr	r3, [pc, #620]	; (8007b20 <UART_SetConfig+0x2f8>)
 80078b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b6:	2203      	movs	r2, #3
 80078b8:	4013      	ands	r3, r2
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d00f      	beq.n	80078de <UART_SetConfig+0xb6>
 80078be:	d304      	bcc.n	80078ca <UART_SetConfig+0xa2>
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d011      	beq.n	80078e8 <UART_SetConfig+0xc0>
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	d005      	beq.n	80078d4 <UART_SetConfig+0xac>
 80078c8:	e013      	b.n	80078f2 <UART_SetConfig+0xca>
 80078ca:	231f      	movs	r3, #31
 80078cc:	18fb      	adds	r3, r7, r3
 80078ce:	2200      	movs	r2, #0
 80078d0:	701a      	strb	r2, [r3, #0]
 80078d2:	e022      	b.n	800791a <UART_SetConfig+0xf2>
 80078d4:	231f      	movs	r3, #31
 80078d6:	18fb      	adds	r3, r7, r3
 80078d8:	2202      	movs	r2, #2
 80078da:	701a      	strb	r2, [r3, #0]
 80078dc:	e01d      	b.n	800791a <UART_SetConfig+0xf2>
 80078de:	231f      	movs	r3, #31
 80078e0:	18fb      	adds	r3, r7, r3
 80078e2:	2204      	movs	r2, #4
 80078e4:	701a      	strb	r2, [r3, #0]
 80078e6:	e018      	b.n	800791a <UART_SetConfig+0xf2>
 80078e8:	231f      	movs	r3, #31
 80078ea:	18fb      	adds	r3, r7, r3
 80078ec:	2208      	movs	r2, #8
 80078ee:	701a      	strb	r2, [r3, #0]
 80078f0:	e013      	b.n	800791a <UART_SetConfig+0xf2>
 80078f2:	231f      	movs	r3, #31
 80078f4:	18fb      	adds	r3, r7, r3
 80078f6:	2210      	movs	r2, #16
 80078f8:	701a      	strb	r2, [r3, #0]
 80078fa:	46c0      	nop			; (mov r8, r8)
 80078fc:	e00d      	b.n	800791a <UART_SetConfig+0xf2>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a88      	ldr	r2, [pc, #544]	; (8007b24 <UART_SetConfig+0x2fc>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d104      	bne.n	8007912 <UART_SetConfig+0xea>
 8007908:	231f      	movs	r3, #31
 800790a:	18fb      	adds	r3, r7, r3
 800790c:	2200      	movs	r2, #0
 800790e:	701a      	strb	r2, [r3, #0]
 8007910:	e003      	b.n	800791a <UART_SetConfig+0xf2>
 8007912:	231f      	movs	r3, #31
 8007914:	18fb      	adds	r3, r7, r3
 8007916:	2210      	movs	r2, #16
 8007918:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	69da      	ldr	r2, [r3, #28]
 800791e:	2380      	movs	r3, #128	; 0x80
 8007920:	021b      	lsls	r3, r3, #8
 8007922:	429a      	cmp	r2, r3
 8007924:	d000      	beq.n	8007928 <UART_SetConfig+0x100>
 8007926:	e07d      	b.n	8007a24 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8007928:	231f      	movs	r3, #31
 800792a:	18fb      	adds	r3, r7, r3
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	2b02      	cmp	r3, #2
 8007930:	d01c      	beq.n	800796c <UART_SetConfig+0x144>
 8007932:	dc02      	bgt.n	800793a <UART_SetConfig+0x112>
 8007934:	2b00      	cmp	r3, #0
 8007936:	d005      	beq.n	8007944 <UART_SetConfig+0x11c>
 8007938:	e04b      	b.n	80079d2 <UART_SetConfig+0x1aa>
 800793a:	2b04      	cmp	r3, #4
 800793c:	d025      	beq.n	800798a <UART_SetConfig+0x162>
 800793e:	2b08      	cmp	r3, #8
 8007940:	d037      	beq.n	80079b2 <UART_SetConfig+0x18a>
 8007942:	e046      	b.n	80079d2 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007944:	f7fe fd80 	bl	8006448 <HAL_RCC_GetPCLK1Freq>
 8007948:	0003      	movs	r3, r0
 800794a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	005a      	lsls	r2, r3, #1
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	085b      	lsrs	r3, r3, #1
 8007956:	18d2      	adds	r2, r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	0019      	movs	r1, r3
 800795e:	0010      	movs	r0, r2
 8007960:	f7f8 fbe4 	bl	800012c <__udivsi3>
 8007964:	0003      	movs	r3, r0
 8007966:	b29b      	uxth	r3, r3
 8007968:	61bb      	str	r3, [r7, #24]
        break;
 800796a:	e037      	b.n	80079dc <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	085b      	lsrs	r3, r3, #1
 8007972:	4a6d      	ldr	r2, [pc, #436]	; (8007b28 <UART_SetConfig+0x300>)
 8007974:	189a      	adds	r2, r3, r2
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	0019      	movs	r1, r3
 800797c:	0010      	movs	r0, r2
 800797e:	f7f8 fbd5 	bl	800012c <__udivsi3>
 8007982:	0003      	movs	r3, r0
 8007984:	b29b      	uxth	r3, r3
 8007986:	61bb      	str	r3, [r7, #24]
        break;
 8007988:	e028      	b.n	80079dc <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800798a:	f7fe fcef 	bl	800636c <HAL_RCC_GetSysClockFreq>
 800798e:	0003      	movs	r3, r0
 8007990:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	005a      	lsls	r2, r3, #1
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	085b      	lsrs	r3, r3, #1
 800799c:	18d2      	adds	r2, r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	0019      	movs	r1, r3
 80079a4:	0010      	movs	r0, r2
 80079a6:	f7f8 fbc1 	bl	800012c <__udivsi3>
 80079aa:	0003      	movs	r3, r0
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	61bb      	str	r3, [r7, #24]
        break;
 80079b0:	e014      	b.n	80079dc <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	085b      	lsrs	r3, r3, #1
 80079b8:	2280      	movs	r2, #128	; 0x80
 80079ba:	0252      	lsls	r2, r2, #9
 80079bc:	189a      	adds	r2, r3, r2
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	0019      	movs	r1, r3
 80079c4:	0010      	movs	r0, r2
 80079c6:	f7f8 fbb1 	bl	800012c <__udivsi3>
 80079ca:	0003      	movs	r3, r0
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	61bb      	str	r3, [r7, #24]
        break;
 80079d0:	e004      	b.n	80079dc <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 80079d2:	2317      	movs	r3, #23
 80079d4:	18fb      	adds	r3, r7, r3
 80079d6:	2201      	movs	r2, #1
 80079d8:	701a      	strb	r2, [r3, #0]
        break;
 80079da:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	2b0f      	cmp	r3, #15
 80079e0:	d91b      	bls.n	8007a1a <UART_SetConfig+0x1f2>
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	4a51      	ldr	r2, [pc, #324]	; (8007b2c <UART_SetConfig+0x304>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d817      	bhi.n	8007a1a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	200a      	movs	r0, #10
 80079f0:	183b      	adds	r3, r7, r0
 80079f2:	210f      	movs	r1, #15
 80079f4:	438a      	bics	r2, r1
 80079f6:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	085b      	lsrs	r3, r3, #1
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2207      	movs	r2, #7
 8007a00:	4013      	ands	r3, r2
 8007a02:	b299      	uxth	r1, r3
 8007a04:	183b      	adds	r3, r7, r0
 8007a06:	183a      	adds	r2, r7, r0
 8007a08:	8812      	ldrh	r2, [r2, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	183a      	adds	r2, r7, r0
 8007a14:	8812      	ldrh	r2, [r2, #0]
 8007a16:	60da      	str	r2, [r3, #12]
 8007a18:	e06c      	b.n	8007af4 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8007a1a:	2317      	movs	r3, #23
 8007a1c:	18fb      	adds	r3, r7, r3
 8007a1e:	2201      	movs	r2, #1
 8007a20:	701a      	strb	r2, [r3, #0]
 8007a22:	e067      	b.n	8007af4 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8007a24:	231f      	movs	r3, #31
 8007a26:	18fb      	adds	r3, r7, r3
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d01b      	beq.n	8007a66 <UART_SetConfig+0x23e>
 8007a2e:	dc02      	bgt.n	8007a36 <UART_SetConfig+0x20e>
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d005      	beq.n	8007a40 <UART_SetConfig+0x218>
 8007a34:	e049      	b.n	8007aca <UART_SetConfig+0x2a2>
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	d024      	beq.n	8007a84 <UART_SetConfig+0x25c>
 8007a3a:	2b08      	cmp	r3, #8
 8007a3c:	d035      	beq.n	8007aaa <UART_SetConfig+0x282>
 8007a3e:	e044      	b.n	8007aca <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a40:	f7fe fd02 	bl	8006448 <HAL_RCC_GetPCLK1Freq>
 8007a44:	0003      	movs	r3, r0
 8007a46:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	085a      	lsrs	r2, r3, #1
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	18d2      	adds	r2, r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	0019      	movs	r1, r3
 8007a58:	0010      	movs	r0, r2
 8007a5a:	f7f8 fb67 	bl	800012c <__udivsi3>
 8007a5e:	0003      	movs	r3, r0
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	61bb      	str	r3, [r7, #24]
        break;
 8007a64:	e036      	b.n	8007ad4 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	085b      	lsrs	r3, r3, #1
 8007a6c:	4a30      	ldr	r2, [pc, #192]	; (8007b30 <UART_SetConfig+0x308>)
 8007a6e:	189a      	adds	r2, r3, r2
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	0019      	movs	r1, r3
 8007a76:	0010      	movs	r0, r2
 8007a78:	f7f8 fb58 	bl	800012c <__udivsi3>
 8007a7c:	0003      	movs	r3, r0
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	61bb      	str	r3, [r7, #24]
        break;
 8007a82:	e027      	b.n	8007ad4 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a84:	f7fe fc72 	bl	800636c <HAL_RCC_GetSysClockFreq>
 8007a88:	0003      	movs	r3, r0
 8007a8a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	085a      	lsrs	r2, r3, #1
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	18d2      	adds	r2, r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	0019      	movs	r1, r3
 8007a9c:	0010      	movs	r0, r2
 8007a9e:	f7f8 fb45 	bl	800012c <__udivsi3>
 8007aa2:	0003      	movs	r3, r0
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	61bb      	str	r3, [r7, #24]
        break;
 8007aa8:	e014      	b.n	8007ad4 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	085b      	lsrs	r3, r3, #1
 8007ab0:	2280      	movs	r2, #128	; 0x80
 8007ab2:	0212      	lsls	r2, r2, #8
 8007ab4:	189a      	adds	r2, r3, r2
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	0019      	movs	r1, r3
 8007abc:	0010      	movs	r0, r2
 8007abe:	f7f8 fb35 	bl	800012c <__udivsi3>
 8007ac2:	0003      	movs	r3, r0
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	61bb      	str	r3, [r7, #24]
        break;
 8007ac8:	e004      	b.n	8007ad4 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8007aca:	2317      	movs	r3, #23
 8007acc:	18fb      	adds	r3, r7, r3
 8007ace:	2201      	movs	r2, #1
 8007ad0:	701a      	strb	r2, [r3, #0]
        break;
 8007ad2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	2b0f      	cmp	r3, #15
 8007ad8:	d908      	bls.n	8007aec <UART_SetConfig+0x2c4>
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	4a13      	ldr	r2, [pc, #76]	; (8007b2c <UART_SetConfig+0x304>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d804      	bhi.n	8007aec <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	60da      	str	r2, [r3, #12]
 8007aea:	e003      	b.n	8007af4 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8007aec:	2317      	movs	r3, #23
 8007aee:	18fb      	adds	r3, r7, r3
 8007af0:	2201      	movs	r2, #1
 8007af2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007b00:	2317      	movs	r3, #23
 8007b02:	18fb      	adds	r3, r7, r3
 8007b04:	781b      	ldrb	r3, [r3, #0]
}
 8007b06:	0018      	movs	r0, r3
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	b008      	add	sp, #32
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	46c0      	nop			; (mov r8, r8)
 8007b10:	ffff69f3 	.word	0xffff69f3
 8007b14:	ffffcfff 	.word	0xffffcfff
 8007b18:	fffff4ff 	.word	0xfffff4ff
 8007b1c:	40013800 	.word	0x40013800
 8007b20:	40021000 	.word	0x40021000
 8007b24:	40004400 	.word	0x40004400
 8007b28:	00f42400 	.word	0x00f42400
 8007b2c:	0000ffff 	.word	0x0000ffff
 8007b30:	007a1200 	.word	0x007a1200

08007b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b40:	2201      	movs	r2, #1
 8007b42:	4013      	ands	r3, r2
 8007b44:	d00b      	beq.n	8007b5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	4a4a      	ldr	r2, [pc, #296]	; (8007c78 <UART_AdvFeatureConfig+0x144>)
 8007b4e:	4013      	ands	r3, r2
 8007b50:	0019      	movs	r1, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b62:	2202      	movs	r2, #2
 8007b64:	4013      	ands	r3, r2
 8007b66:	d00b      	beq.n	8007b80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	4a43      	ldr	r2, [pc, #268]	; (8007c7c <UART_AdvFeatureConfig+0x148>)
 8007b70:	4013      	ands	r3, r2
 8007b72:	0019      	movs	r1, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b84:	2204      	movs	r2, #4
 8007b86:	4013      	ands	r3, r2
 8007b88:	d00b      	beq.n	8007ba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	4a3b      	ldr	r2, [pc, #236]	; (8007c80 <UART_AdvFeatureConfig+0x14c>)
 8007b92:	4013      	ands	r3, r2
 8007b94:	0019      	movs	r1, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba6:	2208      	movs	r2, #8
 8007ba8:	4013      	ands	r3, r2
 8007baa:	d00b      	beq.n	8007bc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	4a34      	ldr	r2, [pc, #208]	; (8007c84 <UART_AdvFeatureConfig+0x150>)
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	0019      	movs	r1, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	2210      	movs	r2, #16
 8007bca:	4013      	ands	r3, r2
 8007bcc:	d00b      	beq.n	8007be6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	4a2c      	ldr	r2, [pc, #176]	; (8007c88 <UART_AdvFeatureConfig+0x154>)
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	0019      	movs	r1, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bea:	2220      	movs	r2, #32
 8007bec:	4013      	ands	r3, r2
 8007bee:	d00b      	beq.n	8007c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	4a25      	ldr	r2, [pc, #148]	; (8007c8c <UART_AdvFeatureConfig+0x158>)
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	0019      	movs	r1, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	430a      	orrs	r2, r1
 8007c06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	2240      	movs	r2, #64	; 0x40
 8007c0e:	4013      	ands	r3, r2
 8007c10:	d01d      	beq.n	8007c4e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	4a1d      	ldr	r2, [pc, #116]	; (8007c90 <UART_AdvFeatureConfig+0x15c>)
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	0019      	movs	r1, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	430a      	orrs	r2, r1
 8007c28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c2e:	2380      	movs	r3, #128	; 0x80
 8007c30:	035b      	lsls	r3, r3, #13
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d10b      	bne.n	8007c4e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	4a15      	ldr	r2, [pc, #84]	; (8007c94 <UART_AdvFeatureConfig+0x160>)
 8007c3e:	4013      	ands	r3, r2
 8007c40:	0019      	movs	r1, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	2280      	movs	r2, #128	; 0x80
 8007c54:	4013      	ands	r3, r2
 8007c56:	d00b      	beq.n	8007c70 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	4a0e      	ldr	r2, [pc, #56]	; (8007c98 <UART_AdvFeatureConfig+0x164>)
 8007c60:	4013      	ands	r3, r2
 8007c62:	0019      	movs	r1, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	605a      	str	r2, [r3, #4]
  }
}
 8007c70:	46c0      	nop			; (mov r8, r8)
 8007c72:	46bd      	mov	sp, r7
 8007c74:	b002      	add	sp, #8
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	fffdffff 	.word	0xfffdffff
 8007c7c:	fffeffff 	.word	0xfffeffff
 8007c80:	fffbffff 	.word	0xfffbffff
 8007c84:	ffff7fff 	.word	0xffff7fff
 8007c88:	ffffefff 	.word	0xffffefff
 8007c8c:	ffffdfff 	.word	0xffffdfff
 8007c90:	ffefffff 	.word	0xffefffff
 8007c94:	ff9fffff 	.word	0xff9fffff
 8007c98:	fff7ffff 	.word	0xfff7ffff

08007c9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af02      	add	r7, sp, #8
 8007ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007caa:	f7fc fa73 	bl	8004194 <HAL_GetTick>
 8007cae:	0003      	movs	r3, r0
 8007cb0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2208      	movs	r2, #8
 8007cba:	4013      	ands	r3, r2
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	d10d      	bne.n	8007cdc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	2380      	movs	r3, #128	; 0x80
 8007cc4:	0399      	lsls	r1, r3, #14
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	4b16      	ldr	r3, [pc, #88]	; (8007d24 <UART_CheckIdleState+0x88>)
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	0013      	movs	r3, r2
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f000 f82a 	bl	8007d28 <UART_WaitOnFlagUntilTimeout>
 8007cd4:	1e03      	subs	r3, r0, #0
 8007cd6:	d001      	beq.n	8007cdc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e01f      	b.n	8007d1c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2204      	movs	r2, #4
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	d10d      	bne.n	8007d06 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	2380      	movs	r3, #128	; 0x80
 8007cee:	03d9      	lsls	r1, r3, #15
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	4b0c      	ldr	r3, [pc, #48]	; (8007d24 <UART_CheckIdleState+0x88>)
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	0013      	movs	r3, r2
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f000 f815 	bl	8007d28 <UART_WaitOnFlagUntilTimeout>
 8007cfe:	1e03      	subs	r3, r0, #0
 8007d00:	d001      	beq.n	8007d06 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e00a      	b.n	8007d1c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2270      	movs	r2, #112	; 0x70
 8007d16:	2100      	movs	r1, #0
 8007d18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	b004      	add	sp, #16
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	01ffffff 	.word	0x01ffffff

08007d28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	603b      	str	r3, [r7, #0]
 8007d34:	1dfb      	adds	r3, r7, #7
 8007d36:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d38:	e05d      	b.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	d05a      	beq.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d40:	f7fc fa28 	bl	8004194 <HAL_GetTick>
 8007d44:	0002      	movs	r2, r0
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d302      	bcc.n	8007d56 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d11b      	bne.n	8007d8e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	492f      	ldr	r1, [pc, #188]	; (8007e20 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8007d62:	400a      	ands	r2, r1
 8007d64:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	689a      	ldr	r2, [r3, #8]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2101      	movs	r1, #1
 8007d72:	438a      	bics	r2, r1
 8007d74:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2270      	movs	r2, #112	; 0x70
 8007d86:	2100      	movs	r1, #0
 8007d88:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e043      	b.n	8007e16 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2204      	movs	r2, #4
 8007d96:	4013      	ands	r3, r2
 8007d98:	d02d      	beq.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	69da      	ldr	r2, [r3, #28]
 8007da0:	2380      	movs	r3, #128	; 0x80
 8007da2:	011b      	lsls	r3, r3, #4
 8007da4:	401a      	ands	r2, r3
 8007da6:	2380      	movs	r3, #128	; 0x80
 8007da8:	011b      	lsls	r3, r3, #4
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d123      	bne.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2280      	movs	r2, #128	; 0x80
 8007db4:	0112      	lsls	r2, r2, #4
 8007db6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4917      	ldr	r1, [pc, #92]	; (8007e20 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8007dc4:	400a      	ands	r2, r1
 8007dc6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689a      	ldr	r2, [r3, #8]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	438a      	bics	r2, r1
 8007dd6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2220      	movs	r2, #32
 8007de2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2220      	movs	r2, #32
 8007de8:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2270      	movs	r2, #112	; 0x70
 8007dee:	2100      	movs	r1, #0
 8007df0:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e00f      	b.n	8007e16 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	69db      	ldr	r3, [r3, #28]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	425a      	negs	r2, r3
 8007e06:	4153      	adcs	r3, r2
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	001a      	movs	r2, r3
 8007e0c:	1dfb      	adds	r3, r7, #7
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d092      	beq.n	8007d3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	0018      	movs	r0, r3
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	b004      	add	sp, #16
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	46c0      	nop			; (mov r8, r8)
 8007e20:	fffffe5f 	.word	0xfffffe5f

08007e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	490a      	ldr	r1, [pc, #40]	; (8007e60 <UART_EndRxTransfer+0x3c>)
 8007e38:	400a      	ands	r2, r1
 8007e3a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	689a      	ldr	r2, [r3, #8]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2101      	movs	r1, #1
 8007e48:	438a      	bics	r2, r1
 8007e4a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007e58:	46c0      	nop			; (mov r8, r8)
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	b002      	add	sp, #8
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	fffffedf 	.word	0xfffffedf

08007e64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	225a      	movs	r2, #90	; 0x5a
 8007e76:	2100      	movs	r1, #0
 8007e78:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2252      	movs	r2, #82	; 0x52
 8007e7e:	2100      	movs	r1, #0
 8007e80:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	0018      	movs	r0, r3
 8007e86:	f7ff fcc7 	bl	8007818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e8a:	46c0      	nop			; (mov r8, r8)
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	b004      	add	sp, #16
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b082      	sub	sp, #8
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2140      	movs	r1, #64	; 0x40
 8007ea6:	438a      	bics	r2, r1
 8007ea8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2220      	movs	r2, #32
 8007eae:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	0018      	movs	r0, r3
 8007eba:	f7ff fc9d 	bl	80077f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ebe:	46c0      	nop			; (mov r8, r8)
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	b002      	add	sp, #8
 8007ec4:	bd80      	pop	{r7, pc}
	...

08007ec8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007ed0:	230e      	movs	r3, #14
 8007ed2:	18fb      	adds	r3, r7, r3
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	215c      	movs	r1, #92	; 0x5c
 8007ed8:	5a52      	ldrh	r2, [r2, r1]
 8007eda:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ee0:	2b22      	cmp	r3, #34	; 0x22
 8007ee2:	d140      	bne.n	8007f66 <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	210c      	movs	r1, #12
 8007eea:	187b      	adds	r3, r7, r1
 8007eec:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007eee:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ef0:	187b      	adds	r3, r7, r1
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	b2da      	uxtb	r2, r3
 8007ef6:	230e      	movs	r3, #14
 8007ef8:	18fb      	adds	r3, r7, r3
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	b2d9      	uxtb	r1, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f02:	400a      	ands	r2, r1
 8007f04:	b2d2      	uxtb	r2, r2
 8007f06:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f0c:	1c5a      	adds	r2, r3, #1
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	225a      	movs	r2, #90	; 0x5a
 8007f16:	5a9b      	ldrh	r3, [r3, r2]
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	b299      	uxth	r1, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	225a      	movs	r2, #90	; 0x5a
 8007f22:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	225a      	movs	r2, #90	; 0x5a
 8007f28:	5a9b      	ldrh	r3, [r3, r2]
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d122      	bne.n	8007f76 <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4911      	ldr	r1, [pc, #68]	; (8007f80 <UART_RxISR_8BIT+0xb8>)
 8007f3c:	400a      	ands	r2, r1
 8007f3e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689a      	ldr	r2, [r3, #8]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	438a      	bics	r2, r1
 8007f4e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2220      	movs	r2, #32
 8007f54:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	0018      	movs	r0, r3
 8007f60:	f7ff fc52 	bl	8007808 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f64:	e007      	b.n	8007f76 <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	699a      	ldr	r2, [r3, #24]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2108      	movs	r1, #8
 8007f72:	430a      	orrs	r2, r1
 8007f74:	619a      	str	r2, [r3, #24]
}
 8007f76:	46c0      	nop			; (mov r8, r8)
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	b004      	add	sp, #16
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	46c0      	nop			; (mov r8, r8)
 8007f80:	fffffedf 	.word	0xfffffedf

08007f84 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007f8c:	230e      	movs	r3, #14
 8007f8e:	18fb      	adds	r3, r7, r3
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	215c      	movs	r1, #92	; 0x5c
 8007f94:	5a52      	ldrh	r2, [r2, r1]
 8007f96:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f9c:	2b22      	cmp	r3, #34	; 0x22
 8007f9e:	d140      	bne.n	8008022 <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	210c      	movs	r1, #12
 8007fa6:	187b      	adds	r3, r7, r1
 8007fa8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007faa:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007fb2:	187b      	adds	r3, r7, r1
 8007fb4:	220e      	movs	r2, #14
 8007fb6:	18ba      	adds	r2, r7, r2
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	8812      	ldrh	r2, [r2, #0]
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc8:	1c9a      	adds	r2, r3, #2
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	225a      	movs	r2, #90	; 0x5a
 8007fd2:	5a9b      	ldrh	r3, [r3, r2]
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	b299      	uxth	r1, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	225a      	movs	r2, #90	; 0x5a
 8007fde:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	225a      	movs	r2, #90	; 0x5a
 8007fe4:	5a9b      	ldrh	r3, [r3, r2]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d122      	bne.n	8008032 <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4911      	ldr	r1, [pc, #68]	; (800803c <UART_RxISR_16BIT+0xb8>)
 8007ff8:	400a      	ands	r2, r1
 8007ffa:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689a      	ldr	r2, [r3, #8]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2101      	movs	r1, #1
 8008008:	438a      	bics	r2, r1
 800800a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2220      	movs	r2, #32
 8008010:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	0018      	movs	r0, r3
 800801c:	f7ff fbf4 	bl	8007808 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008020:	e007      	b.n	8008032 <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	699a      	ldr	r2, [r3, #24]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2108      	movs	r1, #8
 800802e:	430a      	orrs	r2, r1
 8008030:	619a      	str	r2, [r3, #24]
}
 8008032:	46c0      	nop			; (mov r8, r8)
 8008034:	46bd      	mov	sp, r7
 8008036:	b004      	add	sp, #16
 8008038:	bd80      	pop	{r7, pc}
 800803a:	46c0      	nop			; (mov r8, r8)
 800803c:	fffffedf 	.word	0xfffffedf

08008040 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	0002      	movs	r2, r0
 8008048:	1dbb      	adds	r3, r7, #6
 800804a:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008050:	1dbb      	adds	r3, r7, #6
 8008052:	2200      	movs	r2, #0
 8008054:	5e9b      	ldrsh	r3, [r3, r2]
 8008056:	2b84      	cmp	r3, #132	; 0x84
 8008058:	d006      	beq.n	8008068 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800805a:	1dbb      	adds	r3, r7, #6
 800805c:	2200      	movs	r2, #0
 800805e:	5e9a      	ldrsh	r2, [r3, r2]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	18d3      	adds	r3, r2, r3
 8008064:	3303      	adds	r3, #3
 8008066:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008068:	68fb      	ldr	r3, [r7, #12]
}
 800806a:	0018      	movs	r0, r3
 800806c:	46bd      	mov	sp, r7
 800806e:	b004      	add	sp, #16
 8008070:	bd80      	pop	{r7, pc}

08008072 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008076:	f000 fa95 	bl	80085a4 <vTaskStartScheduler>
  
  return osOK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	0018      	movs	r0, r3
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008082:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008084:	b089      	sub	sp, #36	; 0x24
 8008086:	af04      	add	r7, sp, #16
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d020      	beq.n	80080d6 <osThreadCreate+0x54>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d01c      	beq.n	80080d6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685c      	ldr	r4, [r3, #4]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681d      	ldr	r5, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	691e      	ldr	r6, [r3, #16]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2208      	movs	r2, #8
 80080ac:	5e9b      	ldrsh	r3, [r3, r2]
 80080ae:	0018      	movs	r0, r3
 80080b0:	f7ff ffc6 	bl	8008040 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	695a      	ldr	r2, [r3, #20]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	9302      	str	r3, [sp, #8]
 80080c0:	9201      	str	r2, [sp, #4]
 80080c2:	9000      	str	r0, [sp, #0]
 80080c4:	000b      	movs	r3, r1
 80080c6:	0032      	movs	r2, r6
 80080c8:	0029      	movs	r1, r5
 80080ca:	0020      	movs	r0, r4
 80080cc:	f000 f899 	bl	8008202 <xTaskCreateStatic>
 80080d0:	0003      	movs	r3, r0
 80080d2:	60fb      	str	r3, [r7, #12]
 80080d4:	e01d      	b.n	8008112 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	685c      	ldr	r4, [r3, #4]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80080e2:	b29e      	uxth	r6, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2208      	movs	r2, #8
 80080e8:	5e9b      	ldrsh	r3, [r3, r2]
 80080ea:	0018      	movs	r0, r3
 80080ec:	f7ff ffa8 	bl	8008040 <makeFreeRtosPriority>
 80080f0:	0001      	movs	r1, r0
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	230c      	movs	r3, #12
 80080f6:	18fb      	adds	r3, r7, r3
 80080f8:	9301      	str	r3, [sp, #4]
 80080fa:	9100      	str	r1, [sp, #0]
 80080fc:	0013      	movs	r3, r2
 80080fe:	0032      	movs	r2, r6
 8008100:	0029      	movs	r1, r5
 8008102:	0020      	movs	r0, r4
 8008104:	f000 f8c0 	bl	8008288 <xTaskCreate>
 8008108:	0003      	movs	r3, r0
 800810a:	2b01      	cmp	r3, #1
 800810c:	d001      	beq.n	8008112 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 800810e:	2300      	movs	r3, #0
 8008110:	e000      	b.n	8008114 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008112:	68fb      	ldr	r3, [r7, #12]
}
 8008114:	0018      	movs	r0, r3
 8008116:	46bd      	mov	sp, r7
 8008118:	b005      	add	sp, #20
 800811a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800811c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3308      	adds	r3, #8
 8008128:	001a      	movs	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	4252      	negs	r2, r2
 8008134:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	3308      	adds	r3, #8
 800813a:	001a      	movs	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	3308      	adds	r3, #8
 8008144:	001a      	movs	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008150:	46c0      	nop			; (mov r8, r8)
 8008152:	46bd      	mov	sp, r7
 8008154:	b002      	add	sp, #8
 8008156:	bd80      	pop	{r7, pc}

08008158 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008166:	46c0      	nop			; (mov r8, r8)
 8008168:	46bd      	mov	sp, r7
 800816a:	b002      	add	sp, #8
 800816c:	bd80      	pop	{r7, pc}

0800816e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	689a      	ldr	r2, [r3, #8]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	683a      	ldr	r2, [r7, #0]
 8008192:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	1c5a      	adds	r2, r3, #1
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	601a      	str	r2, [r3, #0]
}
 80081aa:	46c0      	nop			; (mov r8, r8)
 80081ac:	46bd      	mov	sp, r7
 80081ae:	b004      	add	sp, #16
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b084      	sub	sp, #16
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	6892      	ldr	r2, [r2, #8]
 80081c8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	6852      	ldr	r2, [r2, #4]
 80081d2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d103      	bne.n	80081e6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	689a      	ldr	r2, [r3, #8]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	1e5a      	subs	r2, r3, #1
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
}
 80081fa:	0018      	movs	r0, r3
 80081fc:	46bd      	mov	sp, r7
 80081fe:	b004      	add	sp, #16
 8008200:	bd80      	pop	{r7, pc}

08008202 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008202:	b590      	push	{r4, r7, lr}
 8008204:	b08d      	sub	sp, #52	; 0x34
 8008206:	af04      	add	r7, sp, #16
 8008208:	60f8      	str	r0, [r7, #12]
 800820a:	60b9      	str	r1, [r7, #8]
 800820c:	607a      	str	r2, [r7, #4]
 800820e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <xTaskCreateStatic+0x18>
 8008216:	b672      	cpsid	i
 8008218:	e7fe      	b.n	8008218 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800821a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <xTaskCreateStatic+0x22>
 8008220:	b672      	cpsid	i
 8008222:	e7fe      	b.n	8008222 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008224:	2354      	movs	r3, #84	; 0x54
 8008226:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	2b54      	cmp	r3, #84	; 0x54
 800822c:	d001      	beq.n	8008232 <xTaskCreateStatic+0x30>
 800822e:	b672      	cpsid	i
 8008230:	e7fe      	b.n	8008230 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008234:	2b00      	cmp	r3, #0
 8008236:	d020      	beq.n	800827a <xTaskCreateStatic+0x78>
 8008238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823a:	2b00      	cmp	r3, #0
 800823c:	d01d      	beq.n	800827a <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800823e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008240:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008246:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	2251      	movs	r2, #81	; 0x51
 800824c:	2102      	movs	r1, #2
 800824e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008250:	683c      	ldr	r4, [r7, #0]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	68b9      	ldr	r1, [r7, #8]
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	2300      	movs	r3, #0
 800825a:	9303      	str	r3, [sp, #12]
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	9302      	str	r3, [sp, #8]
 8008260:	2318      	movs	r3, #24
 8008262:	18fb      	adds	r3, r7, r3
 8008264:	9301      	str	r3, [sp, #4]
 8008266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	0023      	movs	r3, r4
 800826c:	f000 f858 	bl	8008320 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	0018      	movs	r0, r3
 8008274:	f000 f8ce 	bl	8008414 <prvAddNewTaskToReadyList>
 8008278:	e001      	b.n	800827e <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800827a:	2300      	movs	r3, #0
 800827c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800827e:	69bb      	ldr	r3, [r7, #24]
	}
 8008280:	0018      	movs	r0, r3
 8008282:	46bd      	mov	sp, r7
 8008284:	b009      	add	sp, #36	; 0x24
 8008286:	bd90      	pop	{r4, r7, pc}

08008288 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008288:	b590      	push	{r4, r7, lr}
 800828a:	b08d      	sub	sp, #52	; 0x34
 800828c:	af04      	add	r7, sp, #16
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	603b      	str	r3, [r7, #0]
 8008294:	1dbb      	adds	r3, r7, #6
 8008296:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008298:	1dbb      	adds	r3, r7, #6
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	0018      	movs	r0, r3
 80082a0:	f000 fd6e 	bl	8008d80 <pvPortMalloc>
 80082a4:	0003      	movs	r3, r0
 80082a6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d010      	beq.n	80082d0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80082ae:	2054      	movs	r0, #84	; 0x54
 80082b0:	f000 fd66 	bl	8008d80 <pvPortMalloc>
 80082b4:	0003      	movs	r3, r0
 80082b6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d003      	beq.n	80082c6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	631a      	str	r2, [r3, #48]	; 0x30
 80082c4:	e006      	b.n	80082d4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	0018      	movs	r0, r3
 80082ca:	f000 fdff 	bl	8008ecc <vPortFree>
 80082ce:	e001      	b.n	80082d4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082d0:	2300      	movs	r3, #0
 80082d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d01a      	beq.n	8008310 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	2251      	movs	r2, #81	; 0x51
 80082de:	2100      	movs	r1, #0
 80082e0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082e2:	1dbb      	adds	r3, r7, #6
 80082e4:	881a      	ldrh	r2, [r3, #0]
 80082e6:	683c      	ldr	r4, [r7, #0]
 80082e8:	68b9      	ldr	r1, [r7, #8]
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	2300      	movs	r3, #0
 80082ee:	9303      	str	r3, [sp, #12]
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	9302      	str	r3, [sp, #8]
 80082f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f6:	9301      	str	r3, [sp, #4]
 80082f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	0023      	movs	r3, r4
 80082fe:	f000 f80f 	bl	8008320 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	0018      	movs	r0, r3
 8008306:	f000 f885 	bl	8008414 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800830a:	2301      	movs	r3, #1
 800830c:	61bb      	str	r3, [r7, #24]
 800830e:	e002      	b.n	8008316 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008310:	2301      	movs	r3, #1
 8008312:	425b      	negs	r3, r3
 8008314:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008316:	69bb      	ldr	r3, [r7, #24]
	}
 8008318:	0018      	movs	r0, r3
 800831a:	46bd      	mov	sp, r7
 800831c:	b009      	add	sp, #36	; 0x24
 800831e:	bd90      	pop	{r4, r7, pc}

08008320 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800832e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4936      	ldr	r1, [pc, #216]	; (8008410 <prvInitialiseNewTask+0xf0>)
 8008336:	468c      	mov	ip, r1
 8008338:	4463      	add	r3, ip
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	18d3      	adds	r3, r2, r3
 800833e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	2207      	movs	r2, #7
 8008344:	4393      	bics	r3, r2
 8008346:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	2207      	movs	r2, #7
 800834c:	4013      	ands	r3, r2
 800834e:	d001      	beq.n	8008354 <prvInitialiseNewTask+0x34>
 8008350:	b672      	cpsid	i
 8008352:	e7fe      	b.n	8008352 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008354:	2300      	movs	r3, #0
 8008356:	617b      	str	r3, [r7, #20]
 8008358:	e013      	b.n	8008382 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	18d3      	adds	r3, r2, r3
 8008360:	7818      	ldrb	r0, [r3, #0]
 8008362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008364:	2134      	movs	r1, #52	; 0x34
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	18d3      	adds	r3, r2, r3
 800836a:	185b      	adds	r3, r3, r1
 800836c:	1c02      	adds	r2, r0, #0
 800836e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	18d3      	adds	r3, r2, r3
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d006      	beq.n	800838a <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	3301      	adds	r3, #1
 8008380:	617b      	str	r3, [r7, #20]
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2b0f      	cmp	r3, #15
 8008386:	d9e8      	bls.n	800835a <prvInitialiseNewTask+0x3a>
 8008388:	e000      	b.n	800838c <prvInitialiseNewTask+0x6c>
		{
			break;
 800838a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800838c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838e:	2243      	movs	r2, #67	; 0x43
 8008390:	2100      	movs	r1, #0
 8008392:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008394:	6a3b      	ldr	r3, [r7, #32]
 8008396:	2b06      	cmp	r3, #6
 8008398:	d901      	bls.n	800839e <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800839a:	2306      	movs	r3, #6
 800839c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a0:	6a3a      	ldr	r2, [r7, #32]
 80083a2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a6:	6a3a      	ldr	r2, [r7, #32]
 80083a8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80083aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ac:	2200      	movs	r2, #0
 80083ae:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b2:	3304      	adds	r3, #4
 80083b4:	0018      	movs	r0, r3
 80083b6:	f7ff fecf 	bl	8008158 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80083ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083bc:	3318      	adds	r3, #24
 80083be:	0018      	movs	r0, r3
 80083c0:	f7ff feca 	bl	8008158 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80083c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083ca:	6a3b      	ldr	r3, [r7, #32]
 80083cc:	2207      	movs	r2, #7
 80083ce:	1ad2      	subs	r2, r2, r3
 80083d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083d8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80083da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083dc:	2200      	movs	r2, #0
 80083de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e2:	2250      	movs	r2, #80	; 0x50
 80083e4:	2100      	movs	r1, #0
 80083e6:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	68f9      	ldr	r1, [r7, #12]
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	0018      	movs	r0, r3
 80083f0:	f000 fb92 	bl	8008b18 <pxPortInitialiseStack>
 80083f4:	0002      	movs	r2, r0
 80083f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d002      	beq.n	8008406 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008406:	46c0      	nop			; (mov r8, r8)
 8008408:	46bd      	mov	sp, r7
 800840a:	b006      	add	sp, #24
 800840c:	bd80      	pop	{r7, pc}
 800840e:	46c0      	nop			; (mov r8, r8)
 8008410:	3fffffff 	.word	0x3fffffff

08008414 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800841c:	f000 fc18 	bl	8008c50 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008420:	4b28      	ldr	r3, [pc, #160]	; (80084c4 <prvAddNewTaskToReadyList+0xb0>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	1c5a      	adds	r2, r3, #1
 8008426:	4b27      	ldr	r3, [pc, #156]	; (80084c4 <prvAddNewTaskToReadyList+0xb0>)
 8008428:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800842a:	4b27      	ldr	r3, [pc, #156]	; (80084c8 <prvAddNewTaskToReadyList+0xb4>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d109      	bne.n	8008446 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008432:	4b25      	ldr	r3, [pc, #148]	; (80084c8 <prvAddNewTaskToReadyList+0xb4>)
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008438:	4b22      	ldr	r3, [pc, #136]	; (80084c4 <prvAddNewTaskToReadyList+0xb0>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d110      	bne.n	8008462 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008440:	f000 faac 	bl	800899c <prvInitialiseTaskLists>
 8008444:	e00d      	b.n	8008462 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008446:	4b21      	ldr	r3, [pc, #132]	; (80084cc <prvAddNewTaskToReadyList+0xb8>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d109      	bne.n	8008462 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800844e:	4b1e      	ldr	r3, [pc, #120]	; (80084c8 <prvAddNewTaskToReadyList+0xb4>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008458:	429a      	cmp	r2, r3
 800845a:	d802      	bhi.n	8008462 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800845c:	4b1a      	ldr	r3, [pc, #104]	; (80084c8 <prvAddNewTaskToReadyList+0xb4>)
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008462:	4b1b      	ldr	r3, [pc, #108]	; (80084d0 <prvAddNewTaskToReadyList+0xbc>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	1c5a      	adds	r2, r3, #1
 8008468:	4b19      	ldr	r3, [pc, #100]	; (80084d0 <prvAddNewTaskToReadyList+0xbc>)
 800846a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008470:	4b18      	ldr	r3, [pc, #96]	; (80084d4 <prvAddNewTaskToReadyList+0xc0>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	429a      	cmp	r2, r3
 8008476:	d903      	bls.n	8008480 <prvAddNewTaskToReadyList+0x6c>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847c:	4b15      	ldr	r3, [pc, #84]	; (80084d4 <prvAddNewTaskToReadyList+0xc0>)
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008484:	0013      	movs	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	189b      	adds	r3, r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4a12      	ldr	r2, [pc, #72]	; (80084d8 <prvAddNewTaskToReadyList+0xc4>)
 800848e:	189a      	adds	r2, r3, r2
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	3304      	adds	r3, #4
 8008494:	0019      	movs	r1, r3
 8008496:	0010      	movs	r0, r2
 8008498:	f7ff fe69 	bl	800816e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800849c:	f000 fbea 	bl	8008c74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084a0:	4b0a      	ldr	r3, [pc, #40]	; (80084cc <prvAddNewTaskToReadyList+0xb8>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d008      	beq.n	80084ba <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084a8:	4b07      	ldr	r3, [pc, #28]	; (80084c8 <prvAddNewTaskToReadyList+0xb4>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d201      	bcs.n	80084ba <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80084b6:	f000 fbbb 	bl	8008c30 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084ba:	46c0      	nop			; (mov r8, r8)
 80084bc:	46bd      	mov	sp, r7
 80084be:	b002      	add	sp, #8
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	46c0      	nop			; (mov r8, r8)
 80084c4:	200006a8 	.word	0x200006a8
 80084c8:	200005a8 	.word	0x200005a8
 80084cc:	200006b4 	.word	0x200006b4
 80084d0:	200006c4 	.word	0x200006c4
 80084d4:	200006b0 	.word	0x200006b0
 80084d8:	200005ac 	.word	0x200005ac

080084dc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80084e4:	f000 fbb4 	bl	8008c50 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d102      	bne.n	80084f4 <vTaskDelete+0x18>
 80084ee:	4b26      	ldr	r3, [pc, #152]	; (8008588 <vTaskDelete+0xac>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	e000      	b.n	80084f6 <vTaskDelete+0x1a>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	3304      	adds	r3, #4
 80084fc:	0018      	movs	r0, r3
 80084fe:	f7ff fe58 	bl	80081b2 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008506:	2b00      	cmp	r3, #0
 8008508:	d004      	beq.n	8008514 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3318      	adds	r3, #24
 800850e:	0018      	movs	r0, r3
 8008510:	f7ff fe4f 	bl	80081b2 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008514:	4b1d      	ldr	r3, [pc, #116]	; (800858c <vTaskDelete+0xb0>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	1c5a      	adds	r2, r3, #1
 800851a:	4b1c      	ldr	r3, [pc, #112]	; (800858c <vTaskDelete+0xb0>)
 800851c:	601a      	str	r2, [r3, #0]

			if( pxTCB == pxCurrentTCB )
 800851e:	4b1a      	ldr	r3, [pc, #104]	; (8008588 <vTaskDelete+0xac>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	429a      	cmp	r2, r3
 8008526:	d10c      	bne.n	8008542 <vTaskDelete+0x66>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	1d1a      	adds	r2, r3, #4
 800852c:	4b18      	ldr	r3, [pc, #96]	; (8008590 <vTaskDelete+0xb4>)
 800852e:	0011      	movs	r1, r2
 8008530:	0018      	movs	r0, r3
 8008532:	f7ff fe1c 	bl	800816e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008536:	4b17      	ldr	r3, [pc, #92]	; (8008594 <vTaskDelete+0xb8>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	1c5a      	adds	r2, r3, #1
 800853c:	4b15      	ldr	r3, [pc, #84]	; (8008594 <vTaskDelete+0xb8>)
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	e00a      	b.n	8008558 <vTaskDelete+0x7c>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008542:	4b15      	ldr	r3, [pc, #84]	; (8008598 <vTaskDelete+0xbc>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	1e5a      	subs	r2, r3, #1
 8008548:	4b13      	ldr	r3, [pc, #76]	; (8008598 <vTaskDelete+0xbc>)
 800854a:	601a      	str	r2, [r3, #0]
				prvDeleteTCB( pxTCB );
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	0018      	movs	r0, r3
 8008550:	f000 fa96 	bl	8008a80 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008554:	f000 fabc 	bl	8008ad0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8008558:	f000 fb8c 	bl	8008c74 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800855c:	4b0f      	ldr	r3, [pc, #60]	; (800859c <vTaskDelete+0xc0>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00c      	beq.n	800857e <vTaskDelete+0xa2>
		{
			if( pxTCB == pxCurrentTCB )
 8008564:	4b08      	ldr	r3, [pc, #32]	; (8008588 <vTaskDelete+0xac>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	429a      	cmp	r2, r3
 800856c:	d107      	bne.n	800857e <vTaskDelete+0xa2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800856e:	4b0c      	ldr	r3, [pc, #48]	; (80085a0 <vTaskDelete+0xc4>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <vTaskDelete+0x9e>
 8008576:	b672      	cpsid	i
 8008578:	e7fe      	b.n	8008578 <vTaskDelete+0x9c>
				portYIELD_WITHIN_API();
 800857a:	f000 fb59 	bl	8008c30 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800857e:	46c0      	nop			; (mov r8, r8)
 8008580:	46bd      	mov	sp, r7
 8008582:	b004      	add	sp, #16
 8008584:	bd80      	pop	{r7, pc}
 8008586:	46c0      	nop			; (mov r8, r8)
 8008588:	200005a8 	.word	0x200005a8
 800858c:	200006c4 	.word	0x200006c4
 8008590:	2000067c 	.word	0x2000067c
 8008594:	20000690 	.word	0x20000690
 8008598:	200006a8 	.word	0x200006a8
 800859c:	200006b4 	.word	0x200006b4
 80085a0:	200006d0 	.word	0x200006d0

080085a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80085a4:	b590      	push	{r4, r7, lr}
 80085a6:	b089      	sub	sp, #36	; 0x24
 80085a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80085aa:	2300      	movs	r3, #0
 80085ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80085ae:	2300      	movs	r3, #0
 80085b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80085b2:	003a      	movs	r2, r7
 80085b4:	1d39      	adds	r1, r7, #4
 80085b6:	2308      	movs	r3, #8
 80085b8:	18fb      	adds	r3, r7, r3
 80085ba:	0018      	movs	r0, r3
 80085bc:	f7fa fef0 	bl	80033a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80085c0:	683c      	ldr	r4, [r7, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	4918      	ldr	r1, [pc, #96]	; (8008628 <vTaskStartScheduler+0x84>)
 80085c8:	4818      	ldr	r0, [pc, #96]	; (800862c <vTaskStartScheduler+0x88>)
 80085ca:	9202      	str	r2, [sp, #8]
 80085cc:	9301      	str	r3, [sp, #4]
 80085ce:	2300      	movs	r3, #0
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	2300      	movs	r3, #0
 80085d4:	0022      	movs	r2, r4
 80085d6:	f7ff fe14 	bl	8008202 <xTaskCreateStatic>
 80085da:	0002      	movs	r2, r0
 80085dc:	4b14      	ldr	r3, [pc, #80]	; (8008630 <vTaskStartScheduler+0x8c>)
 80085de:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80085e0:	4b13      	ldr	r3, [pc, #76]	; (8008630 <vTaskStartScheduler+0x8c>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d002      	beq.n	80085ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80085e8:	2301      	movs	r3, #1
 80085ea:	60fb      	str	r3, [r7, #12]
 80085ec:	e001      	b.n	80085f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085ee:	2300      	movs	r3, #0
 80085f0:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d10d      	bne.n	8008614 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80085f8:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085fa:	4b0e      	ldr	r3, [pc, #56]	; (8008634 <vTaskStartScheduler+0x90>)
 80085fc:	2201      	movs	r2, #1
 80085fe:	4252      	negs	r2, r2
 8008600:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008602:	4b0d      	ldr	r3, [pc, #52]	; (8008638 <vTaskStartScheduler+0x94>)
 8008604:	2201      	movs	r2, #1
 8008606:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008608:	4b0c      	ldr	r3, [pc, #48]	; (800863c <vTaskStartScheduler+0x98>)
 800860a:	2200      	movs	r2, #0
 800860c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800860e:	f000 faeb 	bl	8008be8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008612:	e004      	b.n	800861e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	3301      	adds	r3, #1
 8008618:	d101      	bne.n	800861e <vTaskStartScheduler+0x7a>
 800861a:	b672      	cpsid	i
 800861c:	e7fe      	b.n	800861c <vTaskStartScheduler+0x78>
}
 800861e:	46c0      	nop			; (mov r8, r8)
 8008620:	46bd      	mov	sp, r7
 8008622:	b005      	add	sp, #20
 8008624:	bd90      	pop	{r4, r7, pc}
 8008626:	46c0      	nop			; (mov r8, r8)
 8008628:	0800b6d4 	.word	0x0800b6d4
 800862c:	0800897d 	.word	0x0800897d
 8008630:	200006cc 	.word	0x200006cc
 8008634:	200006c8 	.word	0x200006c8
 8008638:	200006b4 	.word	0x200006b4
 800863c:	200006ac 	.word	0x200006ac

08008640 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008644:	4b03      	ldr	r3, [pc, #12]	; (8008654 <vTaskSuspendAll+0x14>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	1c5a      	adds	r2, r3, #1
 800864a:	4b02      	ldr	r3, [pc, #8]	; (8008654 <vTaskSuspendAll+0x14>)
 800864c:	601a      	str	r2, [r3, #0]
}
 800864e:	46c0      	nop			; (mov r8, r8)
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	200006d0 	.word	0x200006d0

08008658 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800865e:	2300      	movs	r3, #0
 8008660:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008662:	2300      	movs	r3, #0
 8008664:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008666:	4b3a      	ldr	r3, [pc, #232]	; (8008750 <xTaskResumeAll+0xf8>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d101      	bne.n	8008672 <xTaskResumeAll+0x1a>
 800866e:	b672      	cpsid	i
 8008670:	e7fe      	b.n	8008670 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008672:	f000 faed 	bl	8008c50 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008676:	4b36      	ldr	r3, [pc, #216]	; (8008750 <xTaskResumeAll+0xf8>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	1e5a      	subs	r2, r3, #1
 800867c:	4b34      	ldr	r3, [pc, #208]	; (8008750 <xTaskResumeAll+0xf8>)
 800867e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008680:	4b33      	ldr	r3, [pc, #204]	; (8008750 <xTaskResumeAll+0xf8>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d15b      	bne.n	8008740 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008688:	4b32      	ldr	r3, [pc, #200]	; (8008754 <xTaskResumeAll+0xfc>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d057      	beq.n	8008740 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008690:	e02f      	b.n	80086f2 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008692:	4b31      	ldr	r3, [pc, #196]	; (8008758 <xTaskResumeAll+0x100>)
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	3318      	adds	r3, #24
 800869e:	0018      	movs	r0, r3
 80086a0:	f7ff fd87 	bl	80081b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	3304      	adds	r3, #4
 80086a8:	0018      	movs	r0, r3
 80086aa:	f7ff fd82 	bl	80081b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b2:	4b2a      	ldr	r3, [pc, #168]	; (800875c <xTaskResumeAll+0x104>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d903      	bls.n	80086c2 <xTaskResumeAll+0x6a>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086be:	4b27      	ldr	r3, [pc, #156]	; (800875c <xTaskResumeAll+0x104>)
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c6:	0013      	movs	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	189b      	adds	r3, r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4a24      	ldr	r2, [pc, #144]	; (8008760 <xTaskResumeAll+0x108>)
 80086d0:	189a      	adds	r2, r3, r2
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	3304      	adds	r3, #4
 80086d6:	0019      	movs	r1, r3
 80086d8:	0010      	movs	r0, r2
 80086da:	f7ff fd48 	bl	800816e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e2:	4b20      	ldr	r3, [pc, #128]	; (8008764 <xTaskResumeAll+0x10c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d302      	bcc.n	80086f2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80086ec:	4b1e      	ldr	r3, [pc, #120]	; (8008768 <xTaskResumeAll+0x110>)
 80086ee:	2201      	movs	r2, #1
 80086f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086f2:	4b19      	ldr	r3, [pc, #100]	; (8008758 <xTaskResumeAll+0x100>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1cb      	bne.n	8008692 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d001      	beq.n	8008704 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008700:	f000 f9e6 	bl	8008ad0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008704:	4b19      	ldr	r3, [pc, #100]	; (800876c <xTaskResumeAll+0x114>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00f      	beq.n	8008730 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008710:	f000 f82e 	bl	8008770 <xTaskIncrementTick>
 8008714:	1e03      	subs	r3, r0, #0
 8008716:	d002      	beq.n	800871e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8008718:	4b13      	ldr	r3, [pc, #76]	; (8008768 <xTaskResumeAll+0x110>)
 800871a:	2201      	movs	r2, #1
 800871c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	3b01      	subs	r3, #1
 8008722:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1f2      	bne.n	8008710 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800872a:	4b10      	ldr	r3, [pc, #64]	; (800876c <xTaskResumeAll+0x114>)
 800872c:	2200      	movs	r2, #0
 800872e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008730:	4b0d      	ldr	r3, [pc, #52]	; (8008768 <xTaskResumeAll+0x110>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008738:	2301      	movs	r3, #1
 800873a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800873c:	f000 fa78 	bl	8008c30 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008740:	f000 fa98 	bl	8008c74 <vPortExitCritical>

	return xAlreadyYielded;
 8008744:	68bb      	ldr	r3, [r7, #8]
}
 8008746:	0018      	movs	r0, r3
 8008748:	46bd      	mov	sp, r7
 800874a:	b004      	add	sp, #16
 800874c:	bd80      	pop	{r7, pc}
 800874e:	46c0      	nop			; (mov r8, r8)
 8008750:	200006d0 	.word	0x200006d0
 8008754:	200006a8 	.word	0x200006a8
 8008758:	20000668 	.word	0x20000668
 800875c:	200006b0 	.word	0x200006b0
 8008760:	200005ac 	.word	0x200005ac
 8008764:	200005a8 	.word	0x200005a8
 8008768:	200006bc 	.word	0x200006bc
 800876c:	200006b8 	.word	0x200006b8

08008770 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008776:	2300      	movs	r3, #0
 8008778:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800877a:	4b4c      	ldr	r3, [pc, #304]	; (80088ac <xTaskIncrementTick+0x13c>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d000      	beq.n	8008784 <xTaskIncrementTick+0x14>
 8008782:	e083      	b.n	800888c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008784:	4b4a      	ldr	r3, [pc, #296]	; (80088b0 <xTaskIncrementTick+0x140>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	3301      	adds	r3, #1
 800878a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800878c:	4b48      	ldr	r3, [pc, #288]	; (80088b0 <xTaskIncrementTick+0x140>)
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d117      	bne.n	80087c8 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8008798:	4b46      	ldr	r3, [pc, #280]	; (80088b4 <xTaskIncrementTick+0x144>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <xTaskIncrementTick+0x36>
 80087a2:	b672      	cpsid	i
 80087a4:	e7fe      	b.n	80087a4 <xTaskIncrementTick+0x34>
 80087a6:	4b43      	ldr	r3, [pc, #268]	; (80088b4 <xTaskIncrementTick+0x144>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	60fb      	str	r3, [r7, #12]
 80087ac:	4b42      	ldr	r3, [pc, #264]	; (80088b8 <xTaskIncrementTick+0x148>)
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	4b40      	ldr	r3, [pc, #256]	; (80088b4 <xTaskIncrementTick+0x144>)
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	4b40      	ldr	r3, [pc, #256]	; (80088b8 <xTaskIncrementTick+0x148>)
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	4b40      	ldr	r3, [pc, #256]	; (80088bc <xTaskIncrementTick+0x14c>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	1c5a      	adds	r2, r3, #1
 80087c0:	4b3e      	ldr	r3, [pc, #248]	; (80088bc <xTaskIncrementTick+0x14c>)
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	f000 f984 	bl	8008ad0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80087c8:	4b3d      	ldr	r3, [pc, #244]	; (80088c0 <xTaskIncrementTick+0x150>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	693a      	ldr	r2, [r7, #16]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d34e      	bcc.n	8008870 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087d2:	4b38      	ldr	r3, [pc, #224]	; (80088b4 <xTaskIncrementTick+0x144>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <xTaskIncrementTick+0x70>
 80087dc:	2301      	movs	r3, #1
 80087de:	e000      	b.n	80087e2 <xTaskIncrementTick+0x72>
 80087e0:	2300      	movs	r3, #0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d004      	beq.n	80087f0 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087e6:	4b36      	ldr	r3, [pc, #216]	; (80088c0 <xTaskIncrementTick+0x150>)
 80087e8:	2201      	movs	r2, #1
 80087ea:	4252      	negs	r2, r2
 80087ec:	601a      	str	r2, [r3, #0]
					break;
 80087ee:	e03f      	b.n	8008870 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80087f0:	4b30      	ldr	r3, [pc, #192]	; (80088b4 <xTaskIncrementTick+0x144>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	429a      	cmp	r2, r3
 8008806:	d203      	bcs.n	8008810 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008808:	4b2d      	ldr	r3, [pc, #180]	; (80088c0 <xTaskIncrementTick+0x150>)
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	601a      	str	r2, [r3, #0]
						break;
 800880e:	e02f      	b.n	8008870 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	3304      	adds	r3, #4
 8008814:	0018      	movs	r0, r3
 8008816:	f7ff fccc 	bl	80081b2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881e:	2b00      	cmp	r3, #0
 8008820:	d004      	beq.n	800882c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	3318      	adds	r3, #24
 8008826:	0018      	movs	r0, r3
 8008828:	f7ff fcc3 	bl	80081b2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008830:	4b24      	ldr	r3, [pc, #144]	; (80088c4 <xTaskIncrementTick+0x154>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	429a      	cmp	r2, r3
 8008836:	d903      	bls.n	8008840 <xTaskIncrementTick+0xd0>
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800883c:	4b21      	ldr	r3, [pc, #132]	; (80088c4 <xTaskIncrementTick+0x154>)
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008844:	0013      	movs	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	189b      	adds	r3, r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4a1e      	ldr	r2, [pc, #120]	; (80088c8 <xTaskIncrementTick+0x158>)
 800884e:	189a      	adds	r2, r3, r2
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	3304      	adds	r3, #4
 8008854:	0019      	movs	r1, r3
 8008856:	0010      	movs	r0, r2
 8008858:	f7ff fc89 	bl	800816e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008860:	4b1a      	ldr	r3, [pc, #104]	; (80088cc <xTaskIncrementTick+0x15c>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008866:	429a      	cmp	r2, r3
 8008868:	d3b3      	bcc.n	80087d2 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800886a:	2301      	movs	r3, #1
 800886c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800886e:	e7b0      	b.n	80087d2 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008870:	4b16      	ldr	r3, [pc, #88]	; (80088cc <xTaskIncrementTick+0x15c>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008876:	4914      	ldr	r1, [pc, #80]	; (80088c8 <xTaskIncrementTick+0x158>)
 8008878:	0013      	movs	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	189b      	adds	r3, r3, r2
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	585b      	ldr	r3, [r3, r1]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d907      	bls.n	8008896 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008886:	2301      	movs	r3, #1
 8008888:	617b      	str	r3, [r7, #20]
 800888a:	e004      	b.n	8008896 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800888c:	4b10      	ldr	r3, [pc, #64]	; (80088d0 <xTaskIncrementTick+0x160>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	1c5a      	adds	r2, r3, #1
 8008892:	4b0f      	ldr	r3, [pc, #60]	; (80088d0 <xTaskIncrementTick+0x160>)
 8008894:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008896:	4b0f      	ldr	r3, [pc, #60]	; (80088d4 <xTaskIncrementTick+0x164>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800889e:	2301      	movs	r3, #1
 80088a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80088a2:	697b      	ldr	r3, [r7, #20]
}
 80088a4:	0018      	movs	r0, r3
 80088a6:	46bd      	mov	sp, r7
 80088a8:	b006      	add	sp, #24
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	200006d0 	.word	0x200006d0
 80088b0:	200006ac 	.word	0x200006ac
 80088b4:	20000660 	.word	0x20000660
 80088b8:	20000664 	.word	0x20000664
 80088bc:	200006c0 	.word	0x200006c0
 80088c0:	200006c8 	.word	0x200006c8
 80088c4:	200006b0 	.word	0x200006b0
 80088c8:	200005ac 	.word	0x200005ac
 80088cc:	200005a8 	.word	0x200005a8
 80088d0:	200006b8 	.word	0x200006b8
 80088d4:	200006bc 	.word	0x200006bc

080088d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80088de:	4b22      	ldr	r3, [pc, #136]	; (8008968 <vTaskSwitchContext+0x90>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d003      	beq.n	80088ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80088e6:	4b21      	ldr	r3, [pc, #132]	; (800896c <vTaskSwitchContext+0x94>)
 80088e8:	2201      	movs	r2, #1
 80088ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80088ec:	e037      	b.n	800895e <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80088ee:	4b1f      	ldr	r3, [pc, #124]	; (800896c <vTaskSwitchContext+0x94>)
 80088f0:	2200      	movs	r2, #0
 80088f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80088f4:	4b1e      	ldr	r3, [pc, #120]	; (8008970 <vTaskSwitchContext+0x98>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	607b      	str	r3, [r7, #4]
 80088fa:	e007      	b.n	800890c <vTaskSwitchContext+0x34>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d101      	bne.n	8008906 <vTaskSwitchContext+0x2e>
 8008902:	b672      	cpsid	i
 8008904:	e7fe      	b.n	8008904 <vTaskSwitchContext+0x2c>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	3b01      	subs	r3, #1
 800890a:	607b      	str	r3, [r7, #4]
 800890c:	4919      	ldr	r1, [pc, #100]	; (8008974 <vTaskSwitchContext+0x9c>)
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	0013      	movs	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	189b      	adds	r3, r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	585b      	ldr	r3, [r3, r1]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d0ee      	beq.n	80088fc <vTaskSwitchContext+0x24>
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	0013      	movs	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	189b      	adds	r3, r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4a12      	ldr	r2, [pc, #72]	; (8008974 <vTaskSwitchContext+0x9c>)
 800892a:	189b      	adds	r3, r3, r2
 800892c:	603b      	str	r3, [r7, #0]
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	685a      	ldr	r2, [r3, #4]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	605a      	str	r2, [r3, #4]
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	3308      	adds	r3, #8
 8008940:	429a      	cmp	r2, r3
 8008942:	d104      	bne.n	800894e <vTaskSwitchContext+0x76>
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	685a      	ldr	r2, [r3, #4]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	605a      	str	r2, [r3, #4]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	68da      	ldr	r2, [r3, #12]
 8008954:	4b08      	ldr	r3, [pc, #32]	; (8008978 <vTaskSwitchContext+0xa0>)
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	4b05      	ldr	r3, [pc, #20]	; (8008970 <vTaskSwitchContext+0x98>)
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	601a      	str	r2, [r3, #0]
}
 800895e:	46c0      	nop			; (mov r8, r8)
 8008960:	46bd      	mov	sp, r7
 8008962:	b002      	add	sp, #8
 8008964:	bd80      	pop	{r7, pc}
 8008966:	46c0      	nop			; (mov r8, r8)
 8008968:	200006d0 	.word	0x200006d0
 800896c:	200006bc 	.word	0x200006bc
 8008970:	200006b0 	.word	0x200006b0
 8008974:	200005ac 	.word	0x200005ac
 8008978:	200005a8 	.word	0x200005a8

0800897c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008984:	f000 f84e 	bl	8008a24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008988:	4b03      	ldr	r3, [pc, #12]	; (8008998 <prvIdleTask+0x1c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d9f9      	bls.n	8008984 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008990:	f000 f94e 	bl	8008c30 <vPortYield>
		prvCheckTasksWaitingTermination();
 8008994:	e7f6      	b.n	8008984 <prvIdleTask+0x8>
 8008996:	46c0      	nop			; (mov r8, r8)
 8008998:	200005ac 	.word	0x200005ac

0800899c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089a2:	2300      	movs	r3, #0
 80089a4:	607b      	str	r3, [r7, #4]
 80089a6:	e00c      	b.n	80089c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	0013      	movs	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	189b      	adds	r3, r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4a14      	ldr	r2, [pc, #80]	; (8008a04 <prvInitialiseTaskLists+0x68>)
 80089b4:	189b      	adds	r3, r3, r2
 80089b6:	0018      	movs	r0, r3
 80089b8:	f7ff fbb0 	bl	800811c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	3301      	adds	r3, #1
 80089c0:	607b      	str	r3, [r7, #4]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2b06      	cmp	r3, #6
 80089c6:	d9ef      	bls.n	80089a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80089c8:	4b0f      	ldr	r3, [pc, #60]	; (8008a08 <prvInitialiseTaskLists+0x6c>)
 80089ca:	0018      	movs	r0, r3
 80089cc:	f7ff fba6 	bl	800811c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80089d0:	4b0e      	ldr	r3, [pc, #56]	; (8008a0c <prvInitialiseTaskLists+0x70>)
 80089d2:	0018      	movs	r0, r3
 80089d4:	f7ff fba2 	bl	800811c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80089d8:	4b0d      	ldr	r3, [pc, #52]	; (8008a10 <prvInitialiseTaskLists+0x74>)
 80089da:	0018      	movs	r0, r3
 80089dc:	f7ff fb9e 	bl	800811c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80089e0:	4b0c      	ldr	r3, [pc, #48]	; (8008a14 <prvInitialiseTaskLists+0x78>)
 80089e2:	0018      	movs	r0, r3
 80089e4:	f7ff fb9a 	bl	800811c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80089e8:	4b0b      	ldr	r3, [pc, #44]	; (8008a18 <prvInitialiseTaskLists+0x7c>)
 80089ea:	0018      	movs	r0, r3
 80089ec:	f7ff fb96 	bl	800811c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80089f0:	4b0a      	ldr	r3, [pc, #40]	; (8008a1c <prvInitialiseTaskLists+0x80>)
 80089f2:	4a05      	ldr	r2, [pc, #20]	; (8008a08 <prvInitialiseTaskLists+0x6c>)
 80089f4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80089f6:	4b0a      	ldr	r3, [pc, #40]	; (8008a20 <prvInitialiseTaskLists+0x84>)
 80089f8:	4a04      	ldr	r2, [pc, #16]	; (8008a0c <prvInitialiseTaskLists+0x70>)
 80089fa:	601a      	str	r2, [r3, #0]
}
 80089fc:	46c0      	nop			; (mov r8, r8)
 80089fe:	46bd      	mov	sp, r7
 8008a00:	b002      	add	sp, #8
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	200005ac 	.word	0x200005ac
 8008a08:	20000638 	.word	0x20000638
 8008a0c:	2000064c 	.word	0x2000064c
 8008a10:	20000668 	.word	0x20000668
 8008a14:	2000067c 	.word	0x2000067c
 8008a18:	20000694 	.word	0x20000694
 8008a1c:	20000660 	.word	0x20000660
 8008a20:	20000664 	.word	0x20000664

08008a24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a2a:	e01a      	b.n	8008a62 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8008a2c:	f000 f910 	bl	8008c50 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008a30:	4b10      	ldr	r3, [pc, #64]	; (8008a74 <prvCheckTasksWaitingTermination+0x50>)
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	3304      	adds	r3, #4
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f7ff fbb8 	bl	80081b2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a42:	4b0d      	ldr	r3, [pc, #52]	; (8008a78 <prvCheckTasksWaitingTermination+0x54>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	1e5a      	subs	r2, r3, #1
 8008a48:	4b0b      	ldr	r3, [pc, #44]	; (8008a78 <prvCheckTasksWaitingTermination+0x54>)
 8008a4a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a4c:	4b0b      	ldr	r3, [pc, #44]	; (8008a7c <prvCheckTasksWaitingTermination+0x58>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	1e5a      	subs	r2, r3, #1
 8008a52:	4b0a      	ldr	r3, [pc, #40]	; (8008a7c <prvCheckTasksWaitingTermination+0x58>)
 8008a54:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8008a56:	f000 f90d 	bl	8008c74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	f000 f80f 	bl	8008a80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a62:	4b06      	ldr	r3, [pc, #24]	; (8008a7c <prvCheckTasksWaitingTermination+0x58>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1e0      	bne.n	8008a2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008a6a:	46c0      	nop			; (mov r8, r8)
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	b002      	add	sp, #8
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	46c0      	nop			; (mov r8, r8)
 8008a74:	2000067c 	.word	0x2000067c
 8008a78:	200006a8 	.word	0x200006a8
 8008a7c:	20000690 	.word	0x20000690

08008a80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2251      	movs	r2, #81	; 0x51
 8008a8c:	5c9b      	ldrb	r3, [r3, r2]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d109      	bne.n	8008aa6 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a96:	0018      	movs	r0, r3
 8008a98:	f000 fa18 	bl	8008ecc <vPortFree>
				vPortFree( pxTCB );
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	0018      	movs	r0, r3
 8008aa0:	f000 fa14 	bl	8008ecc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008aa4:	e010      	b.n	8008ac8 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2251      	movs	r2, #81	; 0x51
 8008aaa:	5c9b      	ldrb	r3, [r3, r2]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d104      	bne.n	8008aba <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	0018      	movs	r0, r3
 8008ab4:	f000 fa0a 	bl	8008ecc <vPortFree>
	}
 8008ab8:	e006      	b.n	8008ac8 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2251      	movs	r2, #81	; 0x51
 8008abe:	5c9b      	ldrb	r3, [r3, r2]
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d001      	beq.n	8008ac8 <prvDeleteTCB+0x48>
 8008ac4:	b672      	cpsid	i
 8008ac6:	e7fe      	b.n	8008ac6 <prvDeleteTCB+0x46>
	}
 8008ac8:	46c0      	nop			; (mov r8, r8)
 8008aca:	46bd      	mov	sp, r7
 8008acc:	b002      	add	sp, #8
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ad6:	4b0e      	ldr	r3, [pc, #56]	; (8008b10 <prvResetNextTaskUnblockTime+0x40>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d101      	bne.n	8008ae4 <prvResetNextTaskUnblockTime+0x14>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e000      	b.n	8008ae6 <prvResetNextTaskUnblockTime+0x16>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d004      	beq.n	8008af4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008aea:	4b0a      	ldr	r3, [pc, #40]	; (8008b14 <prvResetNextTaskUnblockTime+0x44>)
 8008aec:	2201      	movs	r2, #1
 8008aee:	4252      	negs	r2, r2
 8008af0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008af2:	e008      	b.n	8008b06 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008af4:	4b06      	ldr	r3, [pc, #24]	; (8008b10 <prvResetNextTaskUnblockTime+0x40>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	685a      	ldr	r2, [r3, #4]
 8008b02:	4b04      	ldr	r3, [pc, #16]	; (8008b14 <prvResetNextTaskUnblockTime+0x44>)
 8008b04:	601a      	str	r2, [r3, #0]
}
 8008b06:	46c0      	nop			; (mov r8, r8)
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	b002      	add	sp, #8
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	46c0      	nop			; (mov r8, r8)
 8008b10:	20000660 	.word	0x20000660
 8008b14:	200006c8 	.word	0x200006c8

08008b18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	3b04      	subs	r3, #4
 8008b28:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2280      	movs	r2, #128	; 0x80
 8008b2e:	0452      	lsls	r2, r2, #17
 8008b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3b04      	subs	r3, #4
 8008b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	3b04      	subs	r3, #4
 8008b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b44:	4a08      	ldr	r2, [pc, #32]	; (8008b68 <pxPortInitialiseStack+0x50>)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	3b14      	subs	r3, #20
 8008b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	3b20      	subs	r3, #32
 8008b5a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
}
 8008b5e:	0018      	movs	r0, r3
 8008b60:	46bd      	mov	sp, r7
 8008b62:	b004      	add	sp, #16
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	46c0      	nop			; (mov r8, r8)
 8008b68:	08008b6d 	.word	0x08008b6d

08008b6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008b72:	2300      	movs	r3, #0
 8008b74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b76:	4b07      	ldr	r3, [pc, #28]	; (8008b94 <prvTaskExitError+0x28>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	d001      	beq.n	8008b82 <prvTaskExitError+0x16>
 8008b7e:	b672      	cpsid	i
 8008b80:	e7fe      	b.n	8008b80 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8008b82:	b672      	cpsid	i
	while( ulDummy == 0 )
 8008b84:	46c0      	nop			; (mov r8, r8)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d0fc      	beq.n	8008b86 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b8c:	46c0      	nop			; (mov r8, r8)
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	b002      	add	sp, #8
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	2000000c 	.word	0x2000000c

08008b98 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8008b9c:	46c0      	nop			; (mov r8, r8)
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
	...

08008bb0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8008bb0:	4a0b      	ldr	r2, [pc, #44]	; (8008be0 <pxCurrentTCBConst2>)
 8008bb2:	6813      	ldr	r3, [r2, #0]
 8008bb4:	6818      	ldr	r0, [r3, #0]
 8008bb6:	3020      	adds	r0, #32
 8008bb8:	f380 8809 	msr	PSP, r0
 8008bbc:	2002      	movs	r0, #2
 8008bbe:	f380 8814 	msr	CONTROL, r0
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8008bc8:	46ae      	mov	lr, r5
 8008bca:	bc08      	pop	{r3}
 8008bcc:	bc04      	pop	{r2}
 8008bce:	b662      	cpsie	i
 8008bd0:	4718      	bx	r3
 8008bd2:	46c0      	nop			; (mov r8, r8)
 8008bd4:	46c0      	nop			; (mov r8, r8)
 8008bd6:	46c0      	nop			; (mov r8, r8)
 8008bd8:	46c0      	nop			; (mov r8, r8)
 8008bda:	46c0      	nop			; (mov r8, r8)
 8008bdc:	46c0      	nop			; (mov r8, r8)
 8008bde:	46c0      	nop			; (mov r8, r8)

08008be0 <pxCurrentTCBConst2>:
 8008be0:	200005a8 	.word	0x200005a8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8008be4:	46c0      	nop			; (mov r8, r8)
 8008be6:	46c0      	nop			; (mov r8, r8)

08008be8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8008bec:	4b0e      	ldr	r3, [pc, #56]	; (8008c28 <xPortStartScheduler+0x40>)
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	4b0d      	ldr	r3, [pc, #52]	; (8008c28 <xPortStartScheduler+0x40>)
 8008bf2:	21ff      	movs	r1, #255	; 0xff
 8008bf4:	0409      	lsls	r1, r1, #16
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8008bfa:	4b0b      	ldr	r3, [pc, #44]	; (8008c28 <xPortStartScheduler+0x40>)
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	4b0a      	ldr	r3, [pc, #40]	; (8008c28 <xPortStartScheduler+0x40>)
 8008c00:	21ff      	movs	r1, #255	; 0xff
 8008c02:	0609      	lsls	r1, r1, #24
 8008c04:	430a      	orrs	r2, r1
 8008c06:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8008c08:	f000 f898 	bl	8008d3c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c0c:	4b07      	ldr	r3, [pc, #28]	; (8008c2c <xPortStartScheduler+0x44>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8008c12:	f7ff ffcd 	bl	8008bb0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c16:	f7ff fe5f 	bl	80088d8 <vTaskSwitchContext>
	prvTaskExitError();
 8008c1a:	f7ff ffa7 	bl	8008b6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	0018      	movs	r0, r3
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	46c0      	nop			; (mov r8, r8)
 8008c28:	e000ed20 	.word	0xe000ed20
 8008c2c:	2000000c 	.word	0x2000000c

08008c30 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8008c34:	4b05      	ldr	r3, [pc, #20]	; (8008c4c <vPortYield+0x1c>)
 8008c36:	2280      	movs	r2, #128	; 0x80
 8008c38:	0552      	lsls	r2, r2, #21
 8008c3a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8008c3c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008c40:	f3bf 8f6f 	isb	sy
}
 8008c44:	46c0      	nop			; (mov r8, r8)
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	46c0      	nop			; (mov r8, r8)
 8008c4c:	e000ed04 	.word	0xe000ed04

08008c50 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8008c54:	b672      	cpsid	i
    uxCriticalNesting++;
 8008c56:	4b06      	ldr	r3, [pc, #24]	; (8008c70 <vPortEnterCritical+0x20>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	1c5a      	adds	r2, r3, #1
 8008c5c:	4b04      	ldr	r3, [pc, #16]	; (8008c70 <vPortEnterCritical+0x20>)
 8008c5e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8008c60:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008c64:	f3bf 8f6f 	isb	sy
}
 8008c68:	46c0      	nop			; (mov r8, r8)
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	46c0      	nop			; (mov r8, r8)
 8008c70:	2000000c 	.word	0x2000000c

08008c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c78:	4b09      	ldr	r3, [pc, #36]	; (8008ca0 <vPortExitCritical+0x2c>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <vPortExitCritical+0x10>
 8008c80:	b672      	cpsid	i
 8008c82:	e7fe      	b.n	8008c82 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8008c84:	4b06      	ldr	r3, [pc, #24]	; (8008ca0 <vPortExitCritical+0x2c>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	1e5a      	subs	r2, r3, #1
 8008c8a:	4b05      	ldr	r3, [pc, #20]	; (8008ca0 <vPortExitCritical+0x2c>)
 8008c8c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8008c8e:	4b04      	ldr	r3, [pc, #16]	; (8008ca0 <vPortExitCritical+0x2c>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d100      	bne.n	8008c98 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8008c96:	b662      	cpsie	i
    }
}
 8008c98:	46c0      	nop			; (mov r8, r8)
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	46c0      	nop			; (mov r8, r8)
 8008ca0:	2000000c 	.word	0x2000000c

08008ca4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8008ca4:	f3ef 8010 	mrs	r0, PRIMASK
 8008ca8:	b672      	cpsid	i
 8008caa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8008cac:	46c0      	nop			; (mov r8, r8)
 8008cae:	0018      	movs	r0, r3

08008cb0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8008cb0:	f380 8810 	msr	PRIMASK, r0
 8008cb4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8008cb6:	46c0      	nop			; (mov r8, r8)
	...

08008cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008cc0:	f3ef 8009 	mrs	r0, PSP
 8008cc4:	4b0e      	ldr	r3, [pc, #56]	; (8008d00 <pxCurrentTCBConst>)
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	3820      	subs	r0, #32
 8008cca:	6010      	str	r0, [r2, #0]
 8008ccc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008cce:	4644      	mov	r4, r8
 8008cd0:	464d      	mov	r5, r9
 8008cd2:	4656      	mov	r6, sl
 8008cd4:	465f      	mov	r7, fp
 8008cd6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008cd8:	b508      	push	{r3, lr}
 8008cda:	b672      	cpsid	i
 8008cdc:	f7ff fdfc 	bl	80088d8 <vTaskSwitchContext>
 8008ce0:	b662      	cpsie	i
 8008ce2:	bc0c      	pop	{r2, r3}
 8008ce4:	6811      	ldr	r1, [r2, #0]
 8008ce6:	6808      	ldr	r0, [r1, #0]
 8008ce8:	3010      	adds	r0, #16
 8008cea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8008cec:	46a0      	mov	r8, r4
 8008cee:	46a9      	mov	r9, r5
 8008cf0:	46b2      	mov	sl, r6
 8008cf2:	46bb      	mov	fp, r7
 8008cf4:	f380 8809 	msr	PSP, r0
 8008cf8:	3820      	subs	r0, #32
 8008cfa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8008cfc:	4718      	bx	r3
 8008cfe:	46c0      	nop			; (mov r8, r8)

08008d00 <pxCurrentTCBConst>:
 8008d00:	200005a8 	.word	0x200005a8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8008d04:	46c0      	nop			; (mov r8, r8)
 8008d06:	46c0      	nop			; (mov r8, r8)

08008d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d0e:	f7ff ffc9 	bl	8008ca4 <ulSetInterruptMaskFromISR>
 8008d12:	0003      	movs	r3, r0
 8008d14:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d16:	f7ff fd2b 	bl	8008770 <xTaskIncrementTick>
 8008d1a:	1e03      	subs	r3, r0, #0
 8008d1c:	d003      	beq.n	8008d26 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8008d1e:	4b06      	ldr	r3, [pc, #24]	; (8008d38 <SysTick_Handler+0x30>)
 8008d20:	2280      	movs	r2, #128	; 0x80
 8008d22:	0552      	lsls	r2, r2, #21
 8008d24:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	0018      	movs	r0, r3
 8008d2a:	f7ff ffc1 	bl	8008cb0 <vClearInterruptMaskFromISR>
}
 8008d2e:	46c0      	nop			; (mov r8, r8)
 8008d30:	46bd      	mov	sp, r7
 8008d32:	b002      	add	sp, #8
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	46c0      	nop			; (mov r8, r8)
 8008d38:	e000ed04 	.word	0xe000ed04

08008d3c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8008d40:	4b0b      	ldr	r3, [pc, #44]	; (8008d70 <prvSetupTimerInterrupt+0x34>)
 8008d42:	2200      	movs	r2, #0
 8008d44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8008d46:	4b0b      	ldr	r3, [pc, #44]	; (8008d74 <prvSetupTimerInterrupt+0x38>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d4c:	4b0a      	ldr	r3, [pc, #40]	; (8008d78 <prvSetupTimerInterrupt+0x3c>)
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	23fa      	movs	r3, #250	; 0xfa
 8008d52:	0099      	lsls	r1, r3, #2
 8008d54:	0010      	movs	r0, r2
 8008d56:	f7f7 f9e9 	bl	800012c <__udivsi3>
 8008d5a:	0003      	movs	r3, r0
 8008d5c:	001a      	movs	r2, r3
 8008d5e:	4b07      	ldr	r3, [pc, #28]	; (8008d7c <prvSetupTimerInterrupt+0x40>)
 8008d60:	3a01      	subs	r2, #1
 8008d62:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8008d64:	4b02      	ldr	r3, [pc, #8]	; (8008d70 <prvSetupTimerInterrupt+0x34>)
 8008d66:	2207      	movs	r2, #7
 8008d68:	601a      	str	r2, [r3, #0]
}
 8008d6a:	46c0      	nop			; (mov r8, r8)
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	e000e010 	.word	0xe000e010
 8008d74:	e000e018 	.word	0xe000e018
 8008d78:	20000004 	.word	0x20000004
 8008d7c:	e000e014 	.word	0xe000e014

08008d80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8008d8c:	f7ff fc58 	bl	8008640 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d90:	4b49      	ldr	r3, [pc, #292]	; (8008eb8 <pvPortMalloc+0x138>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d98:	f000 f8e0 	bl	8008f5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d9c:	4b47      	ldr	r3, [pc, #284]	; (8008ebc <pvPortMalloc+0x13c>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	4013      	ands	r3, r2
 8008da4:	d000      	beq.n	8008da8 <pvPortMalloc+0x28>
 8008da6:	e079      	b.n	8008e9c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d012      	beq.n	8008dd4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8008dae:	2208      	movs	r2, #8
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	189b      	adds	r3, r3, r2
 8008db4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2207      	movs	r2, #7
 8008dba:	4013      	ands	r3, r2
 8008dbc:	d00a      	beq.n	8008dd4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2207      	movs	r2, #7
 8008dc2:	4393      	bics	r3, r2
 8008dc4:	3308      	adds	r3, #8
 8008dc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2207      	movs	r2, #7
 8008dcc:	4013      	ands	r3, r2
 8008dce:	d001      	beq.n	8008dd4 <pvPortMalloc+0x54>
 8008dd0:	b672      	cpsid	i
 8008dd2:	e7fe      	b.n	8008dd2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d060      	beq.n	8008e9c <pvPortMalloc+0x11c>
 8008dda:	4b39      	ldr	r3, [pc, #228]	; (8008ec0 <pvPortMalloc+0x140>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d85b      	bhi.n	8008e9c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008de4:	4b37      	ldr	r3, [pc, #220]	; (8008ec4 <pvPortMalloc+0x144>)
 8008de6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8008de8:	4b36      	ldr	r3, [pc, #216]	; (8008ec4 <pvPortMalloc+0x144>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dee:	e004      	b.n	8008dfa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d903      	bls.n	8008e0c <pvPortMalloc+0x8c>
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1f1      	bne.n	8008df0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e0c:	4b2a      	ldr	r3, [pc, #168]	; (8008eb8 <pvPortMalloc+0x138>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	697a      	ldr	r2, [r7, #20]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d042      	beq.n	8008e9c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2208      	movs	r2, #8
 8008e1c:	189b      	adds	r3, r3, r2
 8008e1e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	1ad2      	subs	r2, r2, r3
 8008e30:	2308      	movs	r3, #8
 8008e32:	005b      	lsls	r3, r3, #1
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d916      	bls.n	8008e66 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e38:	697a      	ldr	r2, [r7, #20]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	18d3      	adds	r3, r2, r3
 8008e3e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2207      	movs	r2, #7
 8008e44:	4013      	ands	r3, r2
 8008e46:	d001      	beq.n	8008e4c <pvPortMalloc+0xcc>
 8008e48:	b672      	cpsid	i
 8008e4a:	e7fe      	b.n	8008e4a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	685a      	ldr	r2, [r3, #4]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	1ad2      	subs	r2, r2, r3
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	0018      	movs	r0, r3
 8008e62:	f000 f8db 	bl	800901c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e66:	4b16      	ldr	r3, [pc, #88]	; (8008ec0 <pvPortMalloc+0x140>)
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	1ad2      	subs	r2, r2, r3
 8008e70:	4b13      	ldr	r3, [pc, #76]	; (8008ec0 <pvPortMalloc+0x140>)
 8008e72:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e74:	4b12      	ldr	r3, [pc, #72]	; (8008ec0 <pvPortMalloc+0x140>)
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	4b13      	ldr	r3, [pc, #76]	; (8008ec8 <pvPortMalloc+0x148>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d203      	bcs.n	8008e88 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e80:	4b0f      	ldr	r3, [pc, #60]	; (8008ec0 <pvPortMalloc+0x140>)
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	4b10      	ldr	r3, [pc, #64]	; (8008ec8 <pvPortMalloc+0x148>)
 8008e86:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	4b0b      	ldr	r3, [pc, #44]	; (8008ebc <pvPortMalloc+0x13c>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	431a      	orrs	r2, r3
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e9c:	f7ff fbdc 	bl	8008658 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2207      	movs	r2, #7
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	d001      	beq.n	8008eac <pvPortMalloc+0x12c>
 8008ea8:	b672      	cpsid	i
 8008eaa:	e7fe      	b.n	8008eaa <pvPortMalloc+0x12a>
	return pvReturn;
 8008eac:	68fb      	ldr	r3, [r7, #12]
}
 8008eae:	0018      	movs	r0, r3
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	b006      	add	sp, #24
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	46c0      	nop			; (mov r8, r8)
 8008eb8:	200012dc 	.word	0x200012dc
 8008ebc:	200012e8 	.word	0x200012e8
 8008ec0:	200012e0 	.word	0x200012e0
 8008ec4:	200012d4 	.word	0x200012d4
 8008ec8:	200012e4 	.word	0x200012e4

08008ecc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d035      	beq.n	8008f4a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ede:	2308      	movs	r3, #8
 8008ee0:	425b      	negs	r3, r3
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	18d3      	adds	r3, r2, r3
 8008ee6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	685a      	ldr	r2, [r3, #4]
 8008ef0:	4b18      	ldr	r3, [pc, #96]	; (8008f54 <vPortFree+0x88>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	d101      	bne.n	8008efc <vPortFree+0x30>
 8008ef8:	b672      	cpsid	i
 8008efa:	e7fe      	b.n	8008efa <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <vPortFree+0x3c>
 8008f04:	b672      	cpsid	i
 8008f06:	e7fe      	b.n	8008f06 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	4b11      	ldr	r3, [pc, #68]	; (8008f54 <vPortFree+0x88>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4013      	ands	r3, r2
 8008f12:	d01a      	beq.n	8008f4a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d116      	bne.n	8008f4a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	4b0c      	ldr	r3, [pc, #48]	; (8008f54 <vPortFree+0x88>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	43db      	mvns	r3, r3
 8008f26:	401a      	ands	r2, r3
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f2c:	f7ff fb88 	bl	8008640 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	685a      	ldr	r2, [r3, #4]
 8008f34:	4b08      	ldr	r3, [pc, #32]	; (8008f58 <vPortFree+0x8c>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	18d2      	adds	r2, r2, r3
 8008f3a:	4b07      	ldr	r3, [pc, #28]	; (8008f58 <vPortFree+0x8c>)
 8008f3c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	0018      	movs	r0, r3
 8008f42:	f000 f86b 	bl	800901c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008f46:	f7ff fb87 	bl	8008658 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f4a:	46c0      	nop			; (mov r8, r8)
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	b004      	add	sp, #16
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	46c0      	nop			; (mov r8, r8)
 8008f54:	200012e8 	.word	0x200012e8
 8008f58:	200012e0 	.word	0x200012e0

08008f5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f62:	23c0      	movs	r3, #192	; 0xc0
 8008f64:	011b      	lsls	r3, r3, #4
 8008f66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f68:	4b26      	ldr	r3, [pc, #152]	; (8009004 <prvHeapInit+0xa8>)
 8008f6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2207      	movs	r2, #7
 8008f70:	4013      	ands	r3, r2
 8008f72:	d00c      	beq.n	8008f8e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	3307      	adds	r3, #7
 8008f78:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2207      	movs	r2, #7
 8008f7e:	4393      	bics	r3, r2
 8008f80:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	1ad2      	subs	r2, r2, r3
 8008f88:	4b1e      	ldr	r3, [pc, #120]	; (8009004 <prvHeapInit+0xa8>)
 8008f8a:	18d3      	adds	r3, r2, r3
 8008f8c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f92:	4b1d      	ldr	r3, [pc, #116]	; (8009008 <prvHeapInit+0xac>)
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f98:	4b1b      	ldr	r3, [pc, #108]	; (8009008 <prvHeapInit+0xac>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68ba      	ldr	r2, [r7, #8]
 8008fa2:	18d3      	adds	r3, r2, r3
 8008fa4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008fa6:	2208      	movs	r2, #8
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	1a9b      	subs	r3, r3, r2
 8008fac:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2207      	movs	r2, #7
 8008fb2:	4393      	bics	r3, r2
 8008fb4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	4b14      	ldr	r3, [pc, #80]	; (800900c <prvHeapInit+0xb0>)
 8008fba:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8008fbc:	4b13      	ldr	r3, [pc, #76]	; (800900c <prvHeapInit+0xb0>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008fc4:	4b11      	ldr	r3, [pc, #68]	; (800900c <prvHeapInit+0xb0>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	1ad2      	subs	r2, r2, r3
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fda:	4b0c      	ldr	r3, [pc, #48]	; (800900c <prvHeapInit+0xb0>)
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	685a      	ldr	r2, [r3, #4]
 8008fe6:	4b0a      	ldr	r3, [pc, #40]	; (8009010 <prvHeapInit+0xb4>)
 8008fe8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	4b09      	ldr	r3, [pc, #36]	; (8009014 <prvHeapInit+0xb8>)
 8008ff0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ff2:	4b09      	ldr	r3, [pc, #36]	; (8009018 <prvHeapInit+0xbc>)
 8008ff4:	2280      	movs	r2, #128	; 0x80
 8008ff6:	0612      	lsls	r2, r2, #24
 8008ff8:	601a      	str	r2, [r3, #0]
}
 8008ffa:	46c0      	nop			; (mov r8, r8)
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	b004      	add	sp, #16
 8009000:	bd80      	pop	{r7, pc}
 8009002:	46c0      	nop			; (mov r8, r8)
 8009004:	200006d4 	.word	0x200006d4
 8009008:	200012d4 	.word	0x200012d4
 800900c:	200012dc 	.word	0x200012dc
 8009010:	200012e4 	.word	0x200012e4
 8009014:	200012e0 	.word	0x200012e0
 8009018:	200012e8 	.word	0x200012e8

0800901c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009024:	4b27      	ldr	r3, [pc, #156]	; (80090c4 <prvInsertBlockIntoFreeList+0xa8>)
 8009026:	60fb      	str	r3, [r7, #12]
 8009028:	e002      	b.n	8009030 <prvInsertBlockIntoFreeList+0x14>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	60fb      	str	r3, [r7, #12]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	429a      	cmp	r2, r3
 8009038:	d8f7      	bhi.n	800902a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	18d3      	adds	r3, r2, r3
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	429a      	cmp	r2, r3
 800904a:	d108      	bne.n	800905e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	18d2      	adds	r2, r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	18d2      	adds	r2, r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	429a      	cmp	r2, r3
 8009070:	d118      	bne.n	80090a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	4b14      	ldr	r3, [pc, #80]	; (80090c8 <prvInsertBlockIntoFreeList+0xac>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	429a      	cmp	r2, r3
 800907c:	d00d      	beq.n	800909a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685a      	ldr	r2, [r3, #4]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	18d2      	adds	r2, r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	601a      	str	r2, [r3, #0]
 8009098:	e008      	b.n	80090ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800909a:	4b0b      	ldr	r3, [pc, #44]	; (80090c8 <prvInsertBlockIntoFreeList+0xac>)
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	601a      	str	r2, [r3, #0]
 80090a2:	e003      	b.n	80090ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d002      	beq.n	80090ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090ba:	46c0      	nop			; (mov r8, r8)
 80090bc:	46bd      	mov	sp, r7
 80090be:	b004      	add	sp, #16
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	46c0      	nop			; (mov r8, r8)
 80090c4:	200012d4 	.word	0x200012d4
 80090c8:	200012dc 	.word	0x200012dc

080090cc <__errno>:
 80090cc:	4b01      	ldr	r3, [pc, #4]	; (80090d4 <__errno+0x8>)
 80090ce:	6818      	ldr	r0, [r3, #0]
 80090d0:	4770      	bx	lr
 80090d2:	46c0      	nop			; (mov r8, r8)
 80090d4:	20000010 	.word	0x20000010

080090d8 <__libc_init_array>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	2600      	movs	r6, #0
 80090dc:	4d0c      	ldr	r5, [pc, #48]	; (8009110 <__libc_init_array+0x38>)
 80090de:	4c0d      	ldr	r4, [pc, #52]	; (8009114 <__libc_init_array+0x3c>)
 80090e0:	1b64      	subs	r4, r4, r5
 80090e2:	10a4      	asrs	r4, r4, #2
 80090e4:	42a6      	cmp	r6, r4
 80090e6:	d109      	bne.n	80090fc <__libc_init_array+0x24>
 80090e8:	2600      	movs	r6, #0
 80090ea:	f002 f91b 	bl	800b324 <_init>
 80090ee:	4d0a      	ldr	r5, [pc, #40]	; (8009118 <__libc_init_array+0x40>)
 80090f0:	4c0a      	ldr	r4, [pc, #40]	; (800911c <__libc_init_array+0x44>)
 80090f2:	1b64      	subs	r4, r4, r5
 80090f4:	10a4      	asrs	r4, r4, #2
 80090f6:	42a6      	cmp	r6, r4
 80090f8:	d105      	bne.n	8009106 <__libc_init_array+0x2e>
 80090fa:	bd70      	pop	{r4, r5, r6, pc}
 80090fc:	00b3      	lsls	r3, r6, #2
 80090fe:	58eb      	ldr	r3, [r5, r3]
 8009100:	4798      	blx	r3
 8009102:	3601      	adds	r6, #1
 8009104:	e7ee      	b.n	80090e4 <__libc_init_array+0xc>
 8009106:	00b3      	lsls	r3, r6, #2
 8009108:	58eb      	ldr	r3, [r5, r3]
 800910a:	4798      	blx	r3
 800910c:	3601      	adds	r6, #1
 800910e:	e7f2      	b.n	80090f6 <__libc_init_array+0x1e>
 8009110:	0800b9f8 	.word	0x0800b9f8
 8009114:	0800b9f8 	.word	0x0800b9f8
 8009118:	0800b9f8 	.word	0x0800b9f8
 800911c:	0800b9fc 	.word	0x0800b9fc

08009120 <__itoa>:
 8009120:	1e93      	subs	r3, r2, #2
 8009122:	b510      	push	{r4, lr}
 8009124:	000c      	movs	r4, r1
 8009126:	2b22      	cmp	r3, #34	; 0x22
 8009128:	d904      	bls.n	8009134 <__itoa+0x14>
 800912a:	2300      	movs	r3, #0
 800912c:	001c      	movs	r4, r3
 800912e:	700b      	strb	r3, [r1, #0]
 8009130:	0020      	movs	r0, r4
 8009132:	bd10      	pop	{r4, pc}
 8009134:	2a0a      	cmp	r2, #10
 8009136:	d109      	bne.n	800914c <__itoa+0x2c>
 8009138:	2800      	cmp	r0, #0
 800913a:	da07      	bge.n	800914c <__itoa+0x2c>
 800913c:	232d      	movs	r3, #45	; 0x2d
 800913e:	700b      	strb	r3, [r1, #0]
 8009140:	2101      	movs	r1, #1
 8009142:	4240      	negs	r0, r0
 8009144:	1861      	adds	r1, r4, r1
 8009146:	f000 fcc3 	bl	8009ad0 <__utoa>
 800914a:	e7f1      	b.n	8009130 <__itoa+0x10>
 800914c:	2100      	movs	r1, #0
 800914e:	e7f9      	b.n	8009144 <__itoa+0x24>

08009150 <itoa>:
 8009150:	b510      	push	{r4, lr}
 8009152:	f7ff ffe5 	bl	8009120 <__itoa>
 8009156:	bd10      	pop	{r4, pc}

08009158 <memcpy>:
 8009158:	2300      	movs	r3, #0
 800915a:	b510      	push	{r4, lr}
 800915c:	429a      	cmp	r2, r3
 800915e:	d100      	bne.n	8009162 <memcpy+0xa>
 8009160:	bd10      	pop	{r4, pc}
 8009162:	5ccc      	ldrb	r4, [r1, r3]
 8009164:	54c4      	strb	r4, [r0, r3]
 8009166:	3301      	adds	r3, #1
 8009168:	e7f8      	b.n	800915c <memcpy+0x4>

0800916a <memset>:
 800916a:	0003      	movs	r3, r0
 800916c:	1812      	adds	r2, r2, r0
 800916e:	4293      	cmp	r3, r2
 8009170:	d100      	bne.n	8009174 <memset+0xa>
 8009172:	4770      	bx	lr
 8009174:	7019      	strb	r1, [r3, #0]
 8009176:	3301      	adds	r3, #1
 8009178:	e7f9      	b.n	800916e <memset+0x4>

0800917a <__cvt>:
 800917a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800917c:	b08b      	sub	sp, #44	; 0x2c
 800917e:	0014      	movs	r4, r2
 8009180:	1e1d      	subs	r5, r3, #0
 8009182:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009184:	da53      	bge.n	800922e <__cvt+0xb4>
 8009186:	2480      	movs	r4, #128	; 0x80
 8009188:	0624      	lsls	r4, r4, #24
 800918a:	191b      	adds	r3, r3, r4
 800918c:	001d      	movs	r5, r3
 800918e:	0014      	movs	r4, r2
 8009190:	232d      	movs	r3, #45	; 0x2d
 8009192:	700b      	strb	r3, [r1, #0]
 8009194:	2320      	movs	r3, #32
 8009196:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009198:	2203      	movs	r2, #3
 800919a:	439e      	bics	r6, r3
 800919c:	2e46      	cmp	r6, #70	; 0x46
 800919e:	d007      	beq.n	80091b0 <__cvt+0x36>
 80091a0:	0033      	movs	r3, r6
 80091a2:	3b45      	subs	r3, #69	; 0x45
 80091a4:	4259      	negs	r1, r3
 80091a6:	414b      	adcs	r3, r1
 80091a8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80091aa:	3a01      	subs	r2, #1
 80091ac:	18cb      	adds	r3, r1, r3
 80091ae:	9310      	str	r3, [sp, #64]	; 0x40
 80091b0:	ab09      	add	r3, sp, #36	; 0x24
 80091b2:	9304      	str	r3, [sp, #16]
 80091b4:	ab08      	add	r3, sp, #32
 80091b6:	9303      	str	r3, [sp, #12]
 80091b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091ba:	9200      	str	r2, [sp, #0]
 80091bc:	9302      	str	r3, [sp, #8]
 80091be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091c0:	0022      	movs	r2, r4
 80091c2:	9301      	str	r3, [sp, #4]
 80091c4:	002b      	movs	r3, r5
 80091c6:	f000 fd3b 	bl	8009c40 <_dtoa_r>
 80091ca:	0007      	movs	r7, r0
 80091cc:	2e47      	cmp	r6, #71	; 0x47
 80091ce:	d102      	bne.n	80091d6 <__cvt+0x5c>
 80091d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091d2:	07db      	lsls	r3, r3, #31
 80091d4:	d524      	bpl.n	8009220 <__cvt+0xa6>
 80091d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091d8:	18fb      	adds	r3, r7, r3
 80091da:	9307      	str	r3, [sp, #28]
 80091dc:	2e46      	cmp	r6, #70	; 0x46
 80091de:	d114      	bne.n	800920a <__cvt+0x90>
 80091e0:	783b      	ldrb	r3, [r7, #0]
 80091e2:	2b30      	cmp	r3, #48	; 0x30
 80091e4:	d10c      	bne.n	8009200 <__cvt+0x86>
 80091e6:	2200      	movs	r2, #0
 80091e8:	2300      	movs	r3, #0
 80091ea:	0020      	movs	r0, r4
 80091ec:	0029      	movs	r1, r5
 80091ee:	f7f7 f923 	bl	8000438 <__aeabi_dcmpeq>
 80091f2:	2800      	cmp	r0, #0
 80091f4:	d104      	bne.n	8009200 <__cvt+0x86>
 80091f6:	2301      	movs	r3, #1
 80091f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80091fa:	1a9b      	subs	r3, r3, r2
 80091fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80091fe:	6013      	str	r3, [r2, #0]
 8009200:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009202:	9a07      	ldr	r2, [sp, #28]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	18d3      	adds	r3, r2, r3
 8009208:	9307      	str	r3, [sp, #28]
 800920a:	2200      	movs	r2, #0
 800920c:	2300      	movs	r3, #0
 800920e:	0020      	movs	r0, r4
 8009210:	0029      	movs	r1, r5
 8009212:	f7f7 f911 	bl	8000438 <__aeabi_dcmpeq>
 8009216:	2230      	movs	r2, #48	; 0x30
 8009218:	2800      	cmp	r0, #0
 800921a:	d00d      	beq.n	8009238 <__cvt+0xbe>
 800921c:	9b07      	ldr	r3, [sp, #28]
 800921e:	9309      	str	r3, [sp, #36]	; 0x24
 8009220:	0038      	movs	r0, r7
 8009222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009224:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009226:	1bdb      	subs	r3, r3, r7
 8009228:	6013      	str	r3, [r2, #0]
 800922a:	b00b      	add	sp, #44	; 0x2c
 800922c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800922e:	2300      	movs	r3, #0
 8009230:	e7af      	b.n	8009192 <__cvt+0x18>
 8009232:	1c59      	adds	r1, r3, #1
 8009234:	9109      	str	r1, [sp, #36]	; 0x24
 8009236:	701a      	strb	r2, [r3, #0]
 8009238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800923a:	9907      	ldr	r1, [sp, #28]
 800923c:	428b      	cmp	r3, r1
 800923e:	d3f8      	bcc.n	8009232 <__cvt+0xb8>
 8009240:	e7ee      	b.n	8009220 <__cvt+0xa6>

08009242 <__exponent>:
 8009242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009244:	1c83      	adds	r3, r0, #2
 8009246:	b085      	sub	sp, #20
 8009248:	9301      	str	r3, [sp, #4]
 800924a:	0006      	movs	r6, r0
 800924c:	000c      	movs	r4, r1
 800924e:	7002      	strb	r2, [r0, #0]
 8009250:	232b      	movs	r3, #43	; 0x2b
 8009252:	2900      	cmp	r1, #0
 8009254:	da01      	bge.n	800925a <__exponent+0x18>
 8009256:	232d      	movs	r3, #45	; 0x2d
 8009258:	424c      	negs	r4, r1
 800925a:	7073      	strb	r3, [r6, #1]
 800925c:	2c09      	cmp	r4, #9
 800925e:	dd22      	ble.n	80092a6 <__exponent+0x64>
 8009260:	ab02      	add	r3, sp, #8
 8009262:	1ddd      	adds	r5, r3, #7
 8009264:	0020      	movs	r0, r4
 8009266:	210a      	movs	r1, #10
 8009268:	f7f7 f8d0 	bl	800040c <__aeabi_idivmod>
 800926c:	1e6f      	subs	r7, r5, #1
 800926e:	3130      	adds	r1, #48	; 0x30
 8009270:	7039      	strb	r1, [r7, #0]
 8009272:	0020      	movs	r0, r4
 8009274:	210a      	movs	r1, #10
 8009276:	f7f6 ffe3 	bl	8000240 <__divsi3>
 800927a:	0004      	movs	r4, r0
 800927c:	2809      	cmp	r0, #9
 800927e:	dc0b      	bgt.n	8009298 <__exponent+0x56>
 8009280:	3d02      	subs	r5, #2
 8009282:	3430      	adds	r4, #48	; 0x30
 8009284:	9b01      	ldr	r3, [sp, #4]
 8009286:	702c      	strb	r4, [r5, #0]
 8009288:	aa02      	add	r2, sp, #8
 800928a:	3207      	adds	r2, #7
 800928c:	0018      	movs	r0, r3
 800928e:	42aa      	cmp	r2, r5
 8009290:	d804      	bhi.n	800929c <__exponent+0x5a>
 8009292:	1b80      	subs	r0, r0, r6
 8009294:	b005      	add	sp, #20
 8009296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009298:	003d      	movs	r5, r7
 800929a:	e7e3      	b.n	8009264 <__exponent+0x22>
 800929c:	782a      	ldrb	r2, [r5, #0]
 800929e:	3501      	adds	r5, #1
 80092a0:	701a      	strb	r2, [r3, #0]
 80092a2:	3301      	adds	r3, #1
 80092a4:	e7f0      	b.n	8009288 <__exponent+0x46>
 80092a6:	2330      	movs	r3, #48	; 0x30
 80092a8:	18e4      	adds	r4, r4, r3
 80092aa:	70b3      	strb	r3, [r6, #2]
 80092ac:	1d30      	adds	r0, r6, #4
 80092ae:	70f4      	strb	r4, [r6, #3]
 80092b0:	e7ef      	b.n	8009292 <__exponent+0x50>
	...

080092b4 <_printf_float>:
 80092b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092b6:	b095      	sub	sp, #84	; 0x54
 80092b8:	000c      	movs	r4, r1
 80092ba:	920a      	str	r2, [sp, #40]	; 0x28
 80092bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80092be:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80092c0:	9009      	str	r0, [sp, #36]	; 0x24
 80092c2:	f001 fa9d 	bl	800a800 <_localeconv_r>
 80092c6:	6803      	ldr	r3, [r0, #0]
 80092c8:	0018      	movs	r0, r3
 80092ca:	930c      	str	r3, [sp, #48]	; 0x30
 80092cc:	f7f6 ff1c 	bl	8000108 <strlen>
 80092d0:	2300      	movs	r3, #0
 80092d2:	9312      	str	r3, [sp, #72]	; 0x48
 80092d4:	6823      	ldr	r3, [r4, #0]
 80092d6:	900e      	str	r0, [sp, #56]	; 0x38
 80092d8:	930d      	str	r3, [sp, #52]	; 0x34
 80092da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80092dc:	7e27      	ldrb	r7, [r4, #24]
 80092de:	682b      	ldr	r3, [r5, #0]
 80092e0:	2207      	movs	r2, #7
 80092e2:	05c9      	lsls	r1, r1, #23
 80092e4:	d545      	bpl.n	8009372 <_printf_float+0xbe>
 80092e6:	189b      	adds	r3, r3, r2
 80092e8:	4393      	bics	r3, r2
 80092ea:	001a      	movs	r2, r3
 80092ec:	3208      	adds	r2, #8
 80092ee:	602a      	str	r2, [r5, #0]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	64a2      	str	r2, [r4, #72]	; 0x48
 80092f6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80092f8:	2201      	movs	r2, #1
 80092fa:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80092fc:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80092fe:	006b      	lsls	r3, r5, #1
 8009300:	085b      	lsrs	r3, r3, #1
 8009302:	930f      	str	r3, [sp, #60]	; 0x3c
 8009304:	4252      	negs	r2, r2
 8009306:	4bac      	ldr	r3, [pc, #688]	; (80095b8 <_printf_float+0x304>)
 8009308:	0030      	movs	r0, r6
 800930a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800930c:	f7f8 fda2 	bl	8001e54 <__aeabi_dcmpun>
 8009310:	2800      	cmp	r0, #0
 8009312:	d130      	bne.n	8009376 <_printf_float+0xc2>
 8009314:	2201      	movs	r2, #1
 8009316:	4ba8      	ldr	r3, [pc, #672]	; (80095b8 <_printf_float+0x304>)
 8009318:	4252      	negs	r2, r2
 800931a:	0030      	movs	r0, r6
 800931c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800931e:	f7f7 f89b 	bl	8000458 <__aeabi_dcmple>
 8009322:	2800      	cmp	r0, #0
 8009324:	d127      	bne.n	8009376 <_printf_float+0xc2>
 8009326:	2200      	movs	r2, #0
 8009328:	2300      	movs	r3, #0
 800932a:	0030      	movs	r0, r6
 800932c:	0029      	movs	r1, r5
 800932e:	f7f7 f889 	bl	8000444 <__aeabi_dcmplt>
 8009332:	2800      	cmp	r0, #0
 8009334:	d003      	beq.n	800933e <_printf_float+0x8a>
 8009336:	0023      	movs	r3, r4
 8009338:	222d      	movs	r2, #45	; 0x2d
 800933a:	3343      	adds	r3, #67	; 0x43
 800933c:	701a      	strb	r2, [r3, #0]
 800933e:	4d9f      	ldr	r5, [pc, #636]	; (80095bc <_printf_float+0x308>)
 8009340:	2f47      	cmp	r7, #71	; 0x47
 8009342:	d800      	bhi.n	8009346 <_printf_float+0x92>
 8009344:	4d9e      	ldr	r5, [pc, #632]	; (80095c0 <_printf_float+0x30c>)
 8009346:	2303      	movs	r3, #3
 8009348:	2600      	movs	r6, #0
 800934a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800934c:	6123      	str	r3, [r4, #16]
 800934e:	3301      	adds	r3, #1
 8009350:	439a      	bics	r2, r3
 8009352:	6022      	str	r2, [r4, #0]
 8009354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009356:	aa13      	add	r2, sp, #76	; 0x4c
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	0021      	movs	r1, r4
 800935c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800935e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009360:	f000 f9f4 	bl	800974c <_printf_common>
 8009364:	1c43      	adds	r3, r0, #1
 8009366:	d000      	beq.n	800936a <_printf_float+0xb6>
 8009368:	e093      	b.n	8009492 <_printf_float+0x1de>
 800936a:	2001      	movs	r0, #1
 800936c:	4240      	negs	r0, r0
 800936e:	b015      	add	sp, #84	; 0x54
 8009370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009372:	3307      	adds	r3, #7
 8009374:	e7b8      	b.n	80092e8 <_printf_float+0x34>
 8009376:	0032      	movs	r2, r6
 8009378:	002b      	movs	r3, r5
 800937a:	0030      	movs	r0, r6
 800937c:	0029      	movs	r1, r5
 800937e:	f7f8 fd69 	bl	8001e54 <__aeabi_dcmpun>
 8009382:	2800      	cmp	r0, #0
 8009384:	d004      	beq.n	8009390 <_printf_float+0xdc>
 8009386:	4d8f      	ldr	r5, [pc, #572]	; (80095c4 <_printf_float+0x310>)
 8009388:	2f47      	cmp	r7, #71	; 0x47
 800938a:	d8dc      	bhi.n	8009346 <_printf_float+0x92>
 800938c:	4d8e      	ldr	r5, [pc, #568]	; (80095c8 <_printf_float+0x314>)
 800938e:	e7da      	b.n	8009346 <_printf_float+0x92>
 8009390:	2380      	movs	r3, #128	; 0x80
 8009392:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009394:	6862      	ldr	r2, [r4, #4]
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	430b      	orrs	r3, r1
 800939a:	1c51      	adds	r1, r2, #1
 800939c:	d143      	bne.n	8009426 <_printf_float+0x172>
 800939e:	3207      	adds	r2, #7
 80093a0:	6062      	str	r2, [r4, #4]
 80093a2:	aa12      	add	r2, sp, #72	; 0x48
 80093a4:	2100      	movs	r1, #0
 80093a6:	9205      	str	r2, [sp, #20]
 80093a8:	aa11      	add	r2, sp, #68	; 0x44
 80093aa:	9203      	str	r2, [sp, #12]
 80093ac:	2223      	movs	r2, #35	; 0x23
 80093ae:	6023      	str	r3, [r4, #0]
 80093b0:	9106      	str	r1, [sp, #24]
 80093b2:	9301      	str	r3, [sp, #4]
 80093b4:	a908      	add	r1, sp, #32
 80093b6:	6863      	ldr	r3, [r4, #4]
 80093b8:	1852      	adds	r2, r2, r1
 80093ba:	9202      	str	r2, [sp, #8]
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	0032      	movs	r2, r6
 80093c0:	002b      	movs	r3, r5
 80093c2:	9704      	str	r7, [sp, #16]
 80093c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093c6:	f7ff fed8 	bl	800917a <__cvt>
 80093ca:	2320      	movs	r3, #32
 80093cc:	003a      	movs	r2, r7
 80093ce:	0005      	movs	r5, r0
 80093d0:	439a      	bics	r2, r3
 80093d2:	2a47      	cmp	r2, #71	; 0x47
 80093d4:	d107      	bne.n	80093e6 <_printf_float+0x132>
 80093d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093d8:	1cda      	adds	r2, r3, #3
 80093da:	db02      	blt.n	80093e2 <_printf_float+0x12e>
 80093dc:	6862      	ldr	r2, [r4, #4]
 80093de:	4293      	cmp	r3, r2
 80093e0:	dd45      	ble.n	800946e <_printf_float+0x1ba>
 80093e2:	3f02      	subs	r7, #2
 80093e4:	b2ff      	uxtb	r7, r7
 80093e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80093e8:	2f65      	cmp	r7, #101	; 0x65
 80093ea:	d825      	bhi.n	8009438 <_printf_float+0x184>
 80093ec:	0020      	movs	r0, r4
 80093ee:	3901      	subs	r1, #1
 80093f0:	003a      	movs	r2, r7
 80093f2:	3050      	adds	r0, #80	; 0x50
 80093f4:	9111      	str	r1, [sp, #68]	; 0x44
 80093f6:	f7ff ff24 	bl	8009242 <__exponent>
 80093fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80093fc:	0006      	movs	r6, r0
 80093fe:	1813      	adds	r3, r2, r0
 8009400:	6123      	str	r3, [r4, #16]
 8009402:	2a01      	cmp	r2, #1
 8009404:	dc02      	bgt.n	800940c <_printf_float+0x158>
 8009406:	6822      	ldr	r2, [r4, #0]
 8009408:	07d2      	lsls	r2, r2, #31
 800940a:	d501      	bpl.n	8009410 <_printf_float+0x15c>
 800940c:	3301      	adds	r3, #1
 800940e:	6123      	str	r3, [r4, #16]
 8009410:	2323      	movs	r3, #35	; 0x23
 8009412:	aa08      	add	r2, sp, #32
 8009414:	189b      	adds	r3, r3, r2
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d09b      	beq.n	8009354 <_printf_float+0xa0>
 800941c:	0023      	movs	r3, r4
 800941e:	222d      	movs	r2, #45	; 0x2d
 8009420:	3343      	adds	r3, #67	; 0x43
 8009422:	701a      	strb	r2, [r3, #0]
 8009424:	e796      	b.n	8009354 <_printf_float+0xa0>
 8009426:	2f67      	cmp	r7, #103	; 0x67
 8009428:	d100      	bne.n	800942c <_printf_float+0x178>
 800942a:	e176      	b.n	800971a <_printf_float+0x466>
 800942c:	2f47      	cmp	r7, #71	; 0x47
 800942e:	d1b8      	bne.n	80093a2 <_printf_float+0xee>
 8009430:	2a00      	cmp	r2, #0
 8009432:	d1b6      	bne.n	80093a2 <_printf_float+0xee>
 8009434:	2201      	movs	r2, #1
 8009436:	e7b3      	b.n	80093a0 <_printf_float+0xec>
 8009438:	2f66      	cmp	r7, #102	; 0x66
 800943a:	d119      	bne.n	8009470 <_printf_float+0x1bc>
 800943c:	6863      	ldr	r3, [r4, #4]
 800943e:	2900      	cmp	r1, #0
 8009440:	dd0c      	ble.n	800945c <_printf_float+0x1a8>
 8009442:	6121      	str	r1, [r4, #16]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d102      	bne.n	800944e <_printf_float+0x19a>
 8009448:	6822      	ldr	r2, [r4, #0]
 800944a:	07d2      	lsls	r2, r2, #31
 800944c:	d502      	bpl.n	8009454 <_printf_float+0x1a0>
 800944e:	3301      	adds	r3, #1
 8009450:	185b      	adds	r3, r3, r1
 8009452:	6123      	str	r3, [r4, #16]
 8009454:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009456:	2600      	movs	r6, #0
 8009458:	65a3      	str	r3, [r4, #88]	; 0x58
 800945a:	e7d9      	b.n	8009410 <_printf_float+0x15c>
 800945c:	2b00      	cmp	r3, #0
 800945e:	d103      	bne.n	8009468 <_printf_float+0x1b4>
 8009460:	2201      	movs	r2, #1
 8009462:	6821      	ldr	r1, [r4, #0]
 8009464:	4211      	tst	r1, r2
 8009466:	d000      	beq.n	800946a <_printf_float+0x1b6>
 8009468:	1c9a      	adds	r2, r3, #2
 800946a:	6122      	str	r2, [r4, #16]
 800946c:	e7f2      	b.n	8009454 <_printf_float+0x1a0>
 800946e:	2767      	movs	r7, #103	; 0x67
 8009470:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009472:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009474:	4293      	cmp	r3, r2
 8009476:	db05      	blt.n	8009484 <_printf_float+0x1d0>
 8009478:	6822      	ldr	r2, [r4, #0]
 800947a:	6123      	str	r3, [r4, #16]
 800947c:	07d2      	lsls	r2, r2, #31
 800947e:	d5e9      	bpl.n	8009454 <_printf_float+0x1a0>
 8009480:	3301      	adds	r3, #1
 8009482:	e7e6      	b.n	8009452 <_printf_float+0x19e>
 8009484:	2101      	movs	r1, #1
 8009486:	2b00      	cmp	r3, #0
 8009488:	dc01      	bgt.n	800948e <_printf_float+0x1da>
 800948a:	1849      	adds	r1, r1, r1
 800948c:	1ac9      	subs	r1, r1, r3
 800948e:	1852      	adds	r2, r2, r1
 8009490:	e7eb      	b.n	800946a <_printf_float+0x1b6>
 8009492:	6822      	ldr	r2, [r4, #0]
 8009494:	0553      	lsls	r3, r2, #21
 8009496:	d408      	bmi.n	80094aa <_printf_float+0x1f6>
 8009498:	6923      	ldr	r3, [r4, #16]
 800949a:	002a      	movs	r2, r5
 800949c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800949e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094a0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80094a2:	47a8      	blx	r5
 80094a4:	1c43      	adds	r3, r0, #1
 80094a6:	d129      	bne.n	80094fc <_printf_float+0x248>
 80094a8:	e75f      	b.n	800936a <_printf_float+0xb6>
 80094aa:	2f65      	cmp	r7, #101	; 0x65
 80094ac:	d800      	bhi.n	80094b0 <_printf_float+0x1fc>
 80094ae:	e0e0      	b.n	8009672 <_printf_float+0x3be>
 80094b0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80094b2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80094b4:	2200      	movs	r2, #0
 80094b6:	2300      	movs	r3, #0
 80094b8:	f7f6 ffbe 	bl	8000438 <__aeabi_dcmpeq>
 80094bc:	2800      	cmp	r0, #0
 80094be:	d034      	beq.n	800952a <_printf_float+0x276>
 80094c0:	2301      	movs	r3, #1
 80094c2:	4a42      	ldr	r2, [pc, #264]	; (80095cc <_printf_float+0x318>)
 80094c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80094c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80094ca:	47a8      	blx	r5
 80094cc:	1c43      	adds	r3, r0, #1
 80094ce:	d100      	bne.n	80094d2 <_printf_float+0x21e>
 80094d0:	e74b      	b.n	800936a <_printf_float+0xb6>
 80094d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094d6:	4293      	cmp	r3, r2
 80094d8:	db02      	blt.n	80094e0 <_printf_float+0x22c>
 80094da:	6823      	ldr	r3, [r4, #0]
 80094dc:	07db      	lsls	r3, r3, #31
 80094de:	d50d      	bpl.n	80094fc <_printf_float+0x248>
 80094e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80094e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80094e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094ea:	47a8      	blx	r5
 80094ec:	2500      	movs	r5, #0
 80094ee:	1c43      	adds	r3, r0, #1
 80094f0:	d100      	bne.n	80094f4 <_printf_float+0x240>
 80094f2:	e73a      	b.n	800936a <_printf_float+0xb6>
 80094f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094f6:	3b01      	subs	r3, #1
 80094f8:	42ab      	cmp	r3, r5
 80094fa:	dc0a      	bgt.n	8009512 <_printf_float+0x25e>
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	079b      	lsls	r3, r3, #30
 8009500:	d500      	bpl.n	8009504 <_printf_float+0x250>
 8009502:	e108      	b.n	8009716 <_printf_float+0x462>
 8009504:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009506:	68e0      	ldr	r0, [r4, #12]
 8009508:	4298      	cmp	r0, r3
 800950a:	db00      	blt.n	800950e <_printf_float+0x25a>
 800950c:	e72f      	b.n	800936e <_printf_float+0xba>
 800950e:	0018      	movs	r0, r3
 8009510:	e72d      	b.n	800936e <_printf_float+0xba>
 8009512:	0022      	movs	r2, r4
 8009514:	2301      	movs	r3, #1
 8009516:	321a      	adds	r2, #26
 8009518:	990a      	ldr	r1, [sp, #40]	; 0x28
 800951a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800951c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800951e:	47b0      	blx	r6
 8009520:	1c43      	adds	r3, r0, #1
 8009522:	d100      	bne.n	8009526 <_printf_float+0x272>
 8009524:	e721      	b.n	800936a <_printf_float+0xb6>
 8009526:	3501      	adds	r5, #1
 8009528:	e7e4      	b.n	80094f4 <_printf_float+0x240>
 800952a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800952c:	2b00      	cmp	r3, #0
 800952e:	dc2d      	bgt.n	800958c <_printf_float+0x2d8>
 8009530:	2301      	movs	r3, #1
 8009532:	4a26      	ldr	r2, [pc, #152]	; (80095cc <_printf_float+0x318>)
 8009534:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009536:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009538:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800953a:	47b0      	blx	r6
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	d100      	bne.n	8009542 <_printf_float+0x28e>
 8009540:	e713      	b.n	800936a <_printf_float+0xb6>
 8009542:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009544:	2b00      	cmp	r3, #0
 8009546:	d105      	bne.n	8009554 <_printf_float+0x2a0>
 8009548:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800954a:	2b00      	cmp	r3, #0
 800954c:	d102      	bne.n	8009554 <_printf_float+0x2a0>
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	07db      	lsls	r3, r3, #31
 8009552:	d5d3      	bpl.n	80094fc <_printf_float+0x248>
 8009554:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800955a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800955c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800955e:	47b0      	blx	r6
 8009560:	2600      	movs	r6, #0
 8009562:	1c43      	adds	r3, r0, #1
 8009564:	d100      	bne.n	8009568 <_printf_float+0x2b4>
 8009566:	e700      	b.n	800936a <_printf_float+0xb6>
 8009568:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800956a:	425b      	negs	r3, r3
 800956c:	42b3      	cmp	r3, r6
 800956e:	dc01      	bgt.n	8009574 <_printf_float+0x2c0>
 8009570:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009572:	e792      	b.n	800949a <_printf_float+0x1e6>
 8009574:	0022      	movs	r2, r4
 8009576:	2301      	movs	r3, #1
 8009578:	321a      	adds	r2, #26
 800957a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800957c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800957e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009580:	47b8      	blx	r7
 8009582:	1c43      	adds	r3, r0, #1
 8009584:	d100      	bne.n	8009588 <_printf_float+0x2d4>
 8009586:	e6f0      	b.n	800936a <_printf_float+0xb6>
 8009588:	3601      	adds	r6, #1
 800958a:	e7ed      	b.n	8009568 <_printf_float+0x2b4>
 800958c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800958e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8009590:	429f      	cmp	r7, r3
 8009592:	dd00      	ble.n	8009596 <_printf_float+0x2e2>
 8009594:	001f      	movs	r7, r3
 8009596:	2f00      	cmp	r7, #0
 8009598:	dd08      	ble.n	80095ac <_printf_float+0x2f8>
 800959a:	003b      	movs	r3, r7
 800959c:	002a      	movs	r2, r5
 800959e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80095a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095a2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80095a4:	47b0      	blx	r6
 80095a6:	1c43      	adds	r3, r0, #1
 80095a8:	d100      	bne.n	80095ac <_printf_float+0x2f8>
 80095aa:	e6de      	b.n	800936a <_printf_float+0xb6>
 80095ac:	2300      	movs	r3, #0
 80095ae:	930d      	str	r3, [sp, #52]	; 0x34
 80095b0:	43fb      	mvns	r3, r7
 80095b2:	17db      	asrs	r3, r3, #31
 80095b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80095b6:	e018      	b.n	80095ea <_printf_float+0x336>
 80095b8:	7fefffff 	.word	0x7fefffff
 80095bc:	0800b778 	.word	0x0800b778
 80095c0:	0800b774 	.word	0x0800b774
 80095c4:	0800b780 	.word	0x0800b780
 80095c8:	0800b77c 	.word	0x0800b77c
 80095cc:	0800b784 	.word	0x0800b784
 80095d0:	0022      	movs	r2, r4
 80095d2:	2301      	movs	r3, #1
 80095d4:	321a      	adds	r2, #26
 80095d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80095d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095da:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80095dc:	47b0      	blx	r6
 80095de:	1c43      	adds	r3, r0, #1
 80095e0:	d100      	bne.n	80095e4 <_printf_float+0x330>
 80095e2:	e6c2      	b.n	800936a <_printf_float+0xb6>
 80095e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095e6:	3301      	adds	r3, #1
 80095e8:	930d      	str	r3, [sp, #52]	; 0x34
 80095ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095ec:	6da6      	ldr	r6, [r4, #88]	; 0x58
 80095ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095f0:	403b      	ands	r3, r7
 80095f2:	1af3      	subs	r3, r6, r3
 80095f4:	4293      	cmp	r3, r2
 80095f6:	dceb      	bgt.n	80095d0 <_printf_float+0x31c>
 80095f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095fc:	19ad      	adds	r5, r5, r6
 80095fe:	4293      	cmp	r3, r2
 8009600:	db10      	blt.n	8009624 <_printf_float+0x370>
 8009602:	6823      	ldr	r3, [r4, #0]
 8009604:	07db      	lsls	r3, r3, #31
 8009606:	d40d      	bmi.n	8009624 <_printf_float+0x370>
 8009608:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800960a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800960c:	1bbe      	subs	r6, r7, r6
 800960e:	1aff      	subs	r7, r7, r3
 8009610:	42b7      	cmp	r7, r6
 8009612:	dd00      	ble.n	8009616 <_printf_float+0x362>
 8009614:	0037      	movs	r7, r6
 8009616:	2f00      	cmp	r7, #0
 8009618:	dc0d      	bgt.n	8009636 <_printf_float+0x382>
 800961a:	43fe      	mvns	r6, r7
 800961c:	17f3      	asrs	r3, r6, #31
 800961e:	2500      	movs	r5, #0
 8009620:	930c      	str	r3, [sp, #48]	; 0x30
 8009622:	e01c      	b.n	800965e <_printf_float+0x3aa>
 8009624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009626:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009628:	990a      	ldr	r1, [sp, #40]	; 0x28
 800962a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800962c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800962e:	47b8      	blx	r7
 8009630:	1c43      	adds	r3, r0, #1
 8009632:	d1e9      	bne.n	8009608 <_printf_float+0x354>
 8009634:	e699      	b.n	800936a <_printf_float+0xb6>
 8009636:	003b      	movs	r3, r7
 8009638:	002a      	movs	r2, r5
 800963a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800963c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800963e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009640:	47a8      	blx	r5
 8009642:	1c43      	adds	r3, r0, #1
 8009644:	d1e9      	bne.n	800961a <_printf_float+0x366>
 8009646:	e690      	b.n	800936a <_printf_float+0xb6>
 8009648:	0022      	movs	r2, r4
 800964a:	2301      	movs	r3, #1
 800964c:	321a      	adds	r2, #26
 800964e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009652:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009654:	47b0      	blx	r6
 8009656:	1c43      	adds	r3, r0, #1
 8009658:	d100      	bne.n	800965c <_printf_float+0x3a8>
 800965a:	e686      	b.n	800936a <_printf_float+0xb6>
 800965c:	3501      	adds	r5, #1
 800965e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009660:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009662:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009664:	1a9b      	subs	r3, r3, r2
 8009666:	003a      	movs	r2, r7
 8009668:	400a      	ands	r2, r1
 800966a:	1a9b      	subs	r3, r3, r2
 800966c:	42ab      	cmp	r3, r5
 800966e:	dceb      	bgt.n	8009648 <_printf_float+0x394>
 8009670:	e744      	b.n	80094fc <_printf_float+0x248>
 8009672:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009674:	2b01      	cmp	r3, #1
 8009676:	dc02      	bgt.n	800967e <_printf_float+0x3ca>
 8009678:	2301      	movs	r3, #1
 800967a:	421a      	tst	r2, r3
 800967c:	d032      	beq.n	80096e4 <_printf_float+0x430>
 800967e:	2301      	movs	r3, #1
 8009680:	002a      	movs	r2, r5
 8009682:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009686:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009688:	47b8      	blx	r7
 800968a:	1c43      	adds	r3, r0, #1
 800968c:	d100      	bne.n	8009690 <_printf_float+0x3dc>
 800968e:	e66c      	b.n	800936a <_printf_float+0xb6>
 8009690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009692:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009694:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009696:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009698:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800969a:	3501      	adds	r5, #1
 800969c:	47b8      	blx	r7
 800969e:	1c43      	adds	r3, r0, #1
 80096a0:	d100      	bne.n	80096a4 <_printf_float+0x3f0>
 80096a2:	e662      	b.n	800936a <_printf_float+0xb6>
 80096a4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80096a6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80096a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096aa:	2200      	movs	r2, #0
 80096ac:	1e5f      	subs	r7, r3, #1
 80096ae:	2300      	movs	r3, #0
 80096b0:	f7f6 fec2 	bl	8000438 <__aeabi_dcmpeq>
 80096b4:	003b      	movs	r3, r7
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d014      	beq.n	80096e4 <_printf_float+0x430>
 80096ba:	2500      	movs	r5, #0
 80096bc:	e00a      	b.n	80096d4 <_printf_float+0x420>
 80096be:	0022      	movs	r2, r4
 80096c0:	2301      	movs	r3, #1
 80096c2:	321a      	adds	r2, #26
 80096c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096c8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80096ca:	47b8      	blx	r7
 80096cc:	1c43      	adds	r3, r0, #1
 80096ce:	d100      	bne.n	80096d2 <_printf_float+0x41e>
 80096d0:	e64b      	b.n	800936a <_printf_float+0xb6>
 80096d2:	3501      	adds	r5, #1
 80096d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096d6:	3b01      	subs	r3, #1
 80096d8:	42ab      	cmp	r3, r5
 80096da:	dcf0      	bgt.n	80096be <_printf_float+0x40a>
 80096dc:	0022      	movs	r2, r4
 80096de:	0033      	movs	r3, r6
 80096e0:	3250      	adds	r2, #80	; 0x50
 80096e2:	e6db      	b.n	800949c <_printf_float+0x1e8>
 80096e4:	002a      	movs	r2, r5
 80096e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80096ec:	47a8      	blx	r5
 80096ee:	1c43      	adds	r3, r0, #1
 80096f0:	d1f4      	bne.n	80096dc <_printf_float+0x428>
 80096f2:	e63a      	b.n	800936a <_printf_float+0xb6>
 80096f4:	0022      	movs	r2, r4
 80096f6:	2301      	movs	r3, #1
 80096f8:	3219      	adds	r2, #25
 80096fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096fe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009700:	47b0      	blx	r6
 8009702:	1c43      	adds	r3, r0, #1
 8009704:	d100      	bne.n	8009708 <_printf_float+0x454>
 8009706:	e630      	b.n	800936a <_printf_float+0xb6>
 8009708:	3501      	adds	r5, #1
 800970a:	68e3      	ldr	r3, [r4, #12]
 800970c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800970e:	1a9b      	subs	r3, r3, r2
 8009710:	42ab      	cmp	r3, r5
 8009712:	dcef      	bgt.n	80096f4 <_printf_float+0x440>
 8009714:	e6f6      	b.n	8009504 <_printf_float+0x250>
 8009716:	2500      	movs	r5, #0
 8009718:	e7f7      	b.n	800970a <_printf_float+0x456>
 800971a:	2a00      	cmp	r2, #0
 800971c:	d100      	bne.n	8009720 <_printf_float+0x46c>
 800971e:	e689      	b.n	8009434 <_printf_float+0x180>
 8009720:	2100      	movs	r1, #0
 8009722:	9106      	str	r1, [sp, #24]
 8009724:	a912      	add	r1, sp, #72	; 0x48
 8009726:	9105      	str	r1, [sp, #20]
 8009728:	a911      	add	r1, sp, #68	; 0x44
 800972a:	9103      	str	r1, [sp, #12]
 800972c:	2123      	movs	r1, #35	; 0x23
 800972e:	a808      	add	r0, sp, #32
 8009730:	1809      	adds	r1, r1, r0
 8009732:	6023      	str	r3, [r4, #0]
 8009734:	9301      	str	r3, [sp, #4]
 8009736:	9200      	str	r2, [sp, #0]
 8009738:	002b      	movs	r3, r5
 800973a:	9704      	str	r7, [sp, #16]
 800973c:	9102      	str	r1, [sp, #8]
 800973e:	0032      	movs	r2, r6
 8009740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009742:	f7ff fd1a 	bl	800917a <__cvt>
 8009746:	0005      	movs	r5, r0
 8009748:	e645      	b.n	80093d6 <_printf_float+0x122>
 800974a:	46c0      	nop			; (mov r8, r8)

0800974c <_printf_common>:
 800974c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800974e:	0015      	movs	r5, r2
 8009750:	9301      	str	r3, [sp, #4]
 8009752:	688a      	ldr	r2, [r1, #8]
 8009754:	690b      	ldr	r3, [r1, #16]
 8009756:	9000      	str	r0, [sp, #0]
 8009758:	000c      	movs	r4, r1
 800975a:	4293      	cmp	r3, r2
 800975c:	da00      	bge.n	8009760 <_printf_common+0x14>
 800975e:	0013      	movs	r3, r2
 8009760:	0022      	movs	r2, r4
 8009762:	602b      	str	r3, [r5, #0]
 8009764:	3243      	adds	r2, #67	; 0x43
 8009766:	7812      	ldrb	r2, [r2, #0]
 8009768:	2a00      	cmp	r2, #0
 800976a:	d001      	beq.n	8009770 <_printf_common+0x24>
 800976c:	3301      	adds	r3, #1
 800976e:	602b      	str	r3, [r5, #0]
 8009770:	6823      	ldr	r3, [r4, #0]
 8009772:	069b      	lsls	r3, r3, #26
 8009774:	d502      	bpl.n	800977c <_printf_common+0x30>
 8009776:	682b      	ldr	r3, [r5, #0]
 8009778:	3302      	adds	r3, #2
 800977a:	602b      	str	r3, [r5, #0]
 800977c:	2706      	movs	r7, #6
 800977e:	6823      	ldr	r3, [r4, #0]
 8009780:	401f      	ands	r7, r3
 8009782:	d027      	beq.n	80097d4 <_printf_common+0x88>
 8009784:	0023      	movs	r3, r4
 8009786:	3343      	adds	r3, #67	; 0x43
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	1e5a      	subs	r2, r3, #1
 800978c:	4193      	sbcs	r3, r2
 800978e:	6822      	ldr	r2, [r4, #0]
 8009790:	0692      	lsls	r2, r2, #26
 8009792:	d430      	bmi.n	80097f6 <_printf_common+0xaa>
 8009794:	0022      	movs	r2, r4
 8009796:	9901      	ldr	r1, [sp, #4]
 8009798:	3243      	adds	r2, #67	; 0x43
 800979a:	9800      	ldr	r0, [sp, #0]
 800979c:	9e08      	ldr	r6, [sp, #32]
 800979e:	47b0      	blx	r6
 80097a0:	1c43      	adds	r3, r0, #1
 80097a2:	d025      	beq.n	80097f0 <_printf_common+0xa4>
 80097a4:	2306      	movs	r3, #6
 80097a6:	6820      	ldr	r0, [r4, #0]
 80097a8:	682a      	ldr	r2, [r5, #0]
 80097aa:	68e1      	ldr	r1, [r4, #12]
 80097ac:	4003      	ands	r3, r0
 80097ae:	2500      	movs	r5, #0
 80097b0:	2b04      	cmp	r3, #4
 80097b2:	d103      	bne.n	80097bc <_printf_common+0x70>
 80097b4:	1a8d      	subs	r5, r1, r2
 80097b6:	43eb      	mvns	r3, r5
 80097b8:	17db      	asrs	r3, r3, #31
 80097ba:	401d      	ands	r5, r3
 80097bc:	68a3      	ldr	r3, [r4, #8]
 80097be:	6922      	ldr	r2, [r4, #16]
 80097c0:	4293      	cmp	r3, r2
 80097c2:	dd01      	ble.n	80097c8 <_printf_common+0x7c>
 80097c4:	1a9b      	subs	r3, r3, r2
 80097c6:	18ed      	adds	r5, r5, r3
 80097c8:	2700      	movs	r7, #0
 80097ca:	42bd      	cmp	r5, r7
 80097cc:	d120      	bne.n	8009810 <_printf_common+0xc4>
 80097ce:	2000      	movs	r0, #0
 80097d0:	e010      	b.n	80097f4 <_printf_common+0xa8>
 80097d2:	3701      	adds	r7, #1
 80097d4:	68e3      	ldr	r3, [r4, #12]
 80097d6:	682a      	ldr	r2, [r5, #0]
 80097d8:	1a9b      	subs	r3, r3, r2
 80097da:	42bb      	cmp	r3, r7
 80097dc:	ddd2      	ble.n	8009784 <_printf_common+0x38>
 80097de:	0022      	movs	r2, r4
 80097e0:	2301      	movs	r3, #1
 80097e2:	3219      	adds	r2, #25
 80097e4:	9901      	ldr	r1, [sp, #4]
 80097e6:	9800      	ldr	r0, [sp, #0]
 80097e8:	9e08      	ldr	r6, [sp, #32]
 80097ea:	47b0      	blx	r6
 80097ec:	1c43      	adds	r3, r0, #1
 80097ee:	d1f0      	bne.n	80097d2 <_printf_common+0x86>
 80097f0:	2001      	movs	r0, #1
 80097f2:	4240      	negs	r0, r0
 80097f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097f6:	2030      	movs	r0, #48	; 0x30
 80097f8:	18e1      	adds	r1, r4, r3
 80097fa:	3143      	adds	r1, #67	; 0x43
 80097fc:	7008      	strb	r0, [r1, #0]
 80097fe:	0021      	movs	r1, r4
 8009800:	1c5a      	adds	r2, r3, #1
 8009802:	3145      	adds	r1, #69	; 0x45
 8009804:	7809      	ldrb	r1, [r1, #0]
 8009806:	18a2      	adds	r2, r4, r2
 8009808:	3243      	adds	r2, #67	; 0x43
 800980a:	3302      	adds	r3, #2
 800980c:	7011      	strb	r1, [r2, #0]
 800980e:	e7c1      	b.n	8009794 <_printf_common+0x48>
 8009810:	0022      	movs	r2, r4
 8009812:	2301      	movs	r3, #1
 8009814:	321a      	adds	r2, #26
 8009816:	9901      	ldr	r1, [sp, #4]
 8009818:	9800      	ldr	r0, [sp, #0]
 800981a:	9e08      	ldr	r6, [sp, #32]
 800981c:	47b0      	blx	r6
 800981e:	1c43      	adds	r3, r0, #1
 8009820:	d0e6      	beq.n	80097f0 <_printf_common+0xa4>
 8009822:	3701      	adds	r7, #1
 8009824:	e7d1      	b.n	80097ca <_printf_common+0x7e>
	...

08009828 <_printf_i>:
 8009828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800982a:	b089      	sub	sp, #36	; 0x24
 800982c:	9204      	str	r2, [sp, #16]
 800982e:	000a      	movs	r2, r1
 8009830:	3243      	adds	r2, #67	; 0x43
 8009832:	9305      	str	r3, [sp, #20]
 8009834:	9003      	str	r0, [sp, #12]
 8009836:	9202      	str	r2, [sp, #8]
 8009838:	7e0a      	ldrb	r2, [r1, #24]
 800983a:	000c      	movs	r4, r1
 800983c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800983e:	2a6e      	cmp	r2, #110	; 0x6e
 8009840:	d100      	bne.n	8009844 <_printf_i+0x1c>
 8009842:	e086      	b.n	8009952 <_printf_i+0x12a>
 8009844:	d81f      	bhi.n	8009886 <_printf_i+0x5e>
 8009846:	2a63      	cmp	r2, #99	; 0x63
 8009848:	d033      	beq.n	80098b2 <_printf_i+0x8a>
 800984a:	d808      	bhi.n	800985e <_printf_i+0x36>
 800984c:	2a00      	cmp	r2, #0
 800984e:	d100      	bne.n	8009852 <_printf_i+0x2a>
 8009850:	e08c      	b.n	800996c <_printf_i+0x144>
 8009852:	2a58      	cmp	r2, #88	; 0x58
 8009854:	d04d      	beq.n	80098f2 <_printf_i+0xca>
 8009856:	0025      	movs	r5, r4
 8009858:	3542      	adds	r5, #66	; 0x42
 800985a:	702a      	strb	r2, [r5, #0]
 800985c:	e030      	b.n	80098c0 <_printf_i+0x98>
 800985e:	2a64      	cmp	r2, #100	; 0x64
 8009860:	d001      	beq.n	8009866 <_printf_i+0x3e>
 8009862:	2a69      	cmp	r2, #105	; 0x69
 8009864:	d1f7      	bne.n	8009856 <_printf_i+0x2e>
 8009866:	6819      	ldr	r1, [r3, #0]
 8009868:	6825      	ldr	r5, [r4, #0]
 800986a:	1d0a      	adds	r2, r1, #4
 800986c:	0628      	lsls	r0, r5, #24
 800986e:	d529      	bpl.n	80098c4 <_printf_i+0x9c>
 8009870:	6808      	ldr	r0, [r1, #0]
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	2800      	cmp	r0, #0
 8009876:	da03      	bge.n	8009880 <_printf_i+0x58>
 8009878:	232d      	movs	r3, #45	; 0x2d
 800987a:	9a02      	ldr	r2, [sp, #8]
 800987c:	4240      	negs	r0, r0
 800987e:	7013      	strb	r3, [r2, #0]
 8009880:	4e6b      	ldr	r6, [pc, #428]	; (8009a30 <_printf_i+0x208>)
 8009882:	270a      	movs	r7, #10
 8009884:	e04f      	b.n	8009926 <_printf_i+0xfe>
 8009886:	2a73      	cmp	r2, #115	; 0x73
 8009888:	d074      	beq.n	8009974 <_printf_i+0x14c>
 800988a:	d808      	bhi.n	800989e <_printf_i+0x76>
 800988c:	2a6f      	cmp	r2, #111	; 0x6f
 800988e:	d01f      	beq.n	80098d0 <_printf_i+0xa8>
 8009890:	2a70      	cmp	r2, #112	; 0x70
 8009892:	d1e0      	bne.n	8009856 <_printf_i+0x2e>
 8009894:	2220      	movs	r2, #32
 8009896:	6809      	ldr	r1, [r1, #0]
 8009898:	430a      	orrs	r2, r1
 800989a:	6022      	str	r2, [r4, #0]
 800989c:	e003      	b.n	80098a6 <_printf_i+0x7e>
 800989e:	2a75      	cmp	r2, #117	; 0x75
 80098a0:	d016      	beq.n	80098d0 <_printf_i+0xa8>
 80098a2:	2a78      	cmp	r2, #120	; 0x78
 80098a4:	d1d7      	bne.n	8009856 <_printf_i+0x2e>
 80098a6:	0022      	movs	r2, r4
 80098a8:	2178      	movs	r1, #120	; 0x78
 80098aa:	3245      	adds	r2, #69	; 0x45
 80098ac:	7011      	strb	r1, [r2, #0]
 80098ae:	4e61      	ldr	r6, [pc, #388]	; (8009a34 <_printf_i+0x20c>)
 80098b0:	e022      	b.n	80098f8 <_printf_i+0xd0>
 80098b2:	0025      	movs	r5, r4
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	3542      	adds	r5, #66	; 0x42
 80098b8:	1d11      	adds	r1, r2, #4
 80098ba:	6019      	str	r1, [r3, #0]
 80098bc:	6813      	ldr	r3, [r2, #0]
 80098be:	702b      	strb	r3, [r5, #0]
 80098c0:	2301      	movs	r3, #1
 80098c2:	e065      	b.n	8009990 <_printf_i+0x168>
 80098c4:	6808      	ldr	r0, [r1, #0]
 80098c6:	601a      	str	r2, [r3, #0]
 80098c8:	0669      	lsls	r1, r5, #25
 80098ca:	d5d3      	bpl.n	8009874 <_printf_i+0x4c>
 80098cc:	b200      	sxth	r0, r0
 80098ce:	e7d1      	b.n	8009874 <_printf_i+0x4c>
 80098d0:	6819      	ldr	r1, [r3, #0]
 80098d2:	6825      	ldr	r5, [r4, #0]
 80098d4:	1d08      	adds	r0, r1, #4
 80098d6:	6018      	str	r0, [r3, #0]
 80098d8:	6808      	ldr	r0, [r1, #0]
 80098da:	062e      	lsls	r6, r5, #24
 80098dc:	d505      	bpl.n	80098ea <_printf_i+0xc2>
 80098de:	4e54      	ldr	r6, [pc, #336]	; (8009a30 <_printf_i+0x208>)
 80098e0:	2708      	movs	r7, #8
 80098e2:	2a6f      	cmp	r2, #111	; 0x6f
 80098e4:	d01b      	beq.n	800991e <_printf_i+0xf6>
 80098e6:	270a      	movs	r7, #10
 80098e8:	e019      	b.n	800991e <_printf_i+0xf6>
 80098ea:	066d      	lsls	r5, r5, #25
 80098ec:	d5f7      	bpl.n	80098de <_printf_i+0xb6>
 80098ee:	b280      	uxth	r0, r0
 80098f0:	e7f5      	b.n	80098de <_printf_i+0xb6>
 80098f2:	3145      	adds	r1, #69	; 0x45
 80098f4:	4e4e      	ldr	r6, [pc, #312]	; (8009a30 <_printf_i+0x208>)
 80098f6:	700a      	strb	r2, [r1, #0]
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	6822      	ldr	r2, [r4, #0]
 80098fc:	1d01      	adds	r1, r0, #4
 80098fe:	6800      	ldr	r0, [r0, #0]
 8009900:	6019      	str	r1, [r3, #0]
 8009902:	0615      	lsls	r5, r2, #24
 8009904:	d521      	bpl.n	800994a <_printf_i+0x122>
 8009906:	07d3      	lsls	r3, r2, #31
 8009908:	d502      	bpl.n	8009910 <_printf_i+0xe8>
 800990a:	2320      	movs	r3, #32
 800990c:	431a      	orrs	r2, r3
 800990e:	6022      	str	r2, [r4, #0]
 8009910:	2710      	movs	r7, #16
 8009912:	2800      	cmp	r0, #0
 8009914:	d103      	bne.n	800991e <_printf_i+0xf6>
 8009916:	2320      	movs	r3, #32
 8009918:	6822      	ldr	r2, [r4, #0]
 800991a:	439a      	bics	r2, r3
 800991c:	6022      	str	r2, [r4, #0]
 800991e:	0023      	movs	r3, r4
 8009920:	2200      	movs	r2, #0
 8009922:	3343      	adds	r3, #67	; 0x43
 8009924:	701a      	strb	r2, [r3, #0]
 8009926:	6863      	ldr	r3, [r4, #4]
 8009928:	60a3      	str	r3, [r4, #8]
 800992a:	2b00      	cmp	r3, #0
 800992c:	db58      	blt.n	80099e0 <_printf_i+0x1b8>
 800992e:	2204      	movs	r2, #4
 8009930:	6821      	ldr	r1, [r4, #0]
 8009932:	4391      	bics	r1, r2
 8009934:	6021      	str	r1, [r4, #0]
 8009936:	2800      	cmp	r0, #0
 8009938:	d154      	bne.n	80099e4 <_printf_i+0x1bc>
 800993a:	9d02      	ldr	r5, [sp, #8]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d05a      	beq.n	80099f6 <_printf_i+0x1ce>
 8009940:	0025      	movs	r5, r4
 8009942:	7833      	ldrb	r3, [r6, #0]
 8009944:	3542      	adds	r5, #66	; 0x42
 8009946:	702b      	strb	r3, [r5, #0]
 8009948:	e055      	b.n	80099f6 <_printf_i+0x1ce>
 800994a:	0655      	lsls	r5, r2, #25
 800994c:	d5db      	bpl.n	8009906 <_printf_i+0xde>
 800994e:	b280      	uxth	r0, r0
 8009950:	e7d9      	b.n	8009906 <_printf_i+0xde>
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	680d      	ldr	r5, [r1, #0]
 8009956:	1d10      	adds	r0, r2, #4
 8009958:	6949      	ldr	r1, [r1, #20]
 800995a:	6018      	str	r0, [r3, #0]
 800995c:	6813      	ldr	r3, [r2, #0]
 800995e:	062e      	lsls	r6, r5, #24
 8009960:	d501      	bpl.n	8009966 <_printf_i+0x13e>
 8009962:	6019      	str	r1, [r3, #0]
 8009964:	e002      	b.n	800996c <_printf_i+0x144>
 8009966:	066d      	lsls	r5, r5, #25
 8009968:	d5fb      	bpl.n	8009962 <_printf_i+0x13a>
 800996a:	8019      	strh	r1, [r3, #0]
 800996c:	2300      	movs	r3, #0
 800996e:	9d02      	ldr	r5, [sp, #8]
 8009970:	6123      	str	r3, [r4, #16]
 8009972:	e04f      	b.n	8009a14 <_printf_i+0x1ec>
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	1d11      	adds	r1, r2, #4
 8009978:	6019      	str	r1, [r3, #0]
 800997a:	6815      	ldr	r5, [r2, #0]
 800997c:	2100      	movs	r1, #0
 800997e:	6862      	ldr	r2, [r4, #4]
 8009980:	0028      	movs	r0, r5
 8009982:	f000 ff53 	bl	800a82c <memchr>
 8009986:	2800      	cmp	r0, #0
 8009988:	d001      	beq.n	800998e <_printf_i+0x166>
 800998a:	1b40      	subs	r0, r0, r5
 800998c:	6060      	str	r0, [r4, #4]
 800998e:	6863      	ldr	r3, [r4, #4]
 8009990:	6123      	str	r3, [r4, #16]
 8009992:	2300      	movs	r3, #0
 8009994:	9a02      	ldr	r2, [sp, #8]
 8009996:	7013      	strb	r3, [r2, #0]
 8009998:	e03c      	b.n	8009a14 <_printf_i+0x1ec>
 800999a:	6923      	ldr	r3, [r4, #16]
 800999c:	002a      	movs	r2, r5
 800999e:	9904      	ldr	r1, [sp, #16]
 80099a0:	9803      	ldr	r0, [sp, #12]
 80099a2:	9d05      	ldr	r5, [sp, #20]
 80099a4:	47a8      	blx	r5
 80099a6:	1c43      	adds	r3, r0, #1
 80099a8:	d03e      	beq.n	8009a28 <_printf_i+0x200>
 80099aa:	6823      	ldr	r3, [r4, #0]
 80099ac:	079b      	lsls	r3, r3, #30
 80099ae:	d415      	bmi.n	80099dc <_printf_i+0x1b4>
 80099b0:	9b07      	ldr	r3, [sp, #28]
 80099b2:	68e0      	ldr	r0, [r4, #12]
 80099b4:	4298      	cmp	r0, r3
 80099b6:	da39      	bge.n	8009a2c <_printf_i+0x204>
 80099b8:	0018      	movs	r0, r3
 80099ba:	e037      	b.n	8009a2c <_printf_i+0x204>
 80099bc:	0022      	movs	r2, r4
 80099be:	2301      	movs	r3, #1
 80099c0:	3219      	adds	r2, #25
 80099c2:	9904      	ldr	r1, [sp, #16]
 80099c4:	9803      	ldr	r0, [sp, #12]
 80099c6:	9e05      	ldr	r6, [sp, #20]
 80099c8:	47b0      	blx	r6
 80099ca:	1c43      	adds	r3, r0, #1
 80099cc:	d02c      	beq.n	8009a28 <_printf_i+0x200>
 80099ce:	3501      	adds	r5, #1
 80099d0:	68e3      	ldr	r3, [r4, #12]
 80099d2:	9a07      	ldr	r2, [sp, #28]
 80099d4:	1a9b      	subs	r3, r3, r2
 80099d6:	42ab      	cmp	r3, r5
 80099d8:	dcf0      	bgt.n	80099bc <_printf_i+0x194>
 80099da:	e7e9      	b.n	80099b0 <_printf_i+0x188>
 80099dc:	2500      	movs	r5, #0
 80099de:	e7f7      	b.n	80099d0 <_printf_i+0x1a8>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d0ad      	beq.n	8009940 <_printf_i+0x118>
 80099e4:	9d02      	ldr	r5, [sp, #8]
 80099e6:	0039      	movs	r1, r7
 80099e8:	f7f6 fc26 	bl	8000238 <__aeabi_uidivmod>
 80099ec:	5c73      	ldrb	r3, [r6, r1]
 80099ee:	3d01      	subs	r5, #1
 80099f0:	702b      	strb	r3, [r5, #0]
 80099f2:	2800      	cmp	r0, #0
 80099f4:	d1f7      	bne.n	80099e6 <_printf_i+0x1be>
 80099f6:	2f08      	cmp	r7, #8
 80099f8:	d109      	bne.n	8009a0e <_printf_i+0x1e6>
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	07db      	lsls	r3, r3, #31
 80099fe:	d506      	bpl.n	8009a0e <_printf_i+0x1e6>
 8009a00:	6863      	ldr	r3, [r4, #4]
 8009a02:	6922      	ldr	r2, [r4, #16]
 8009a04:	4293      	cmp	r3, r2
 8009a06:	dc02      	bgt.n	8009a0e <_printf_i+0x1e6>
 8009a08:	2330      	movs	r3, #48	; 0x30
 8009a0a:	3d01      	subs	r5, #1
 8009a0c:	702b      	strb	r3, [r5, #0]
 8009a0e:	9b02      	ldr	r3, [sp, #8]
 8009a10:	1b5b      	subs	r3, r3, r5
 8009a12:	6123      	str	r3, [r4, #16]
 8009a14:	9b05      	ldr	r3, [sp, #20]
 8009a16:	aa07      	add	r2, sp, #28
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	0021      	movs	r1, r4
 8009a1c:	9b04      	ldr	r3, [sp, #16]
 8009a1e:	9803      	ldr	r0, [sp, #12]
 8009a20:	f7ff fe94 	bl	800974c <_printf_common>
 8009a24:	1c43      	adds	r3, r0, #1
 8009a26:	d1b8      	bne.n	800999a <_printf_i+0x172>
 8009a28:	2001      	movs	r0, #1
 8009a2a:	4240      	negs	r0, r0
 8009a2c:	b009      	add	sp, #36	; 0x24
 8009a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a30:	0800b786 	.word	0x0800b786
 8009a34:	0800b797 	.word	0x0800b797

08009a38 <sniprintf>:
 8009a38:	b40c      	push	{r2, r3}
 8009a3a:	b530      	push	{r4, r5, lr}
 8009a3c:	4b16      	ldr	r3, [pc, #88]	; (8009a98 <sniprintf+0x60>)
 8009a3e:	b09d      	sub	sp, #116	; 0x74
 8009a40:	1e0c      	subs	r4, r1, #0
 8009a42:	681d      	ldr	r5, [r3, #0]
 8009a44:	da08      	bge.n	8009a58 <sniprintf+0x20>
 8009a46:	238b      	movs	r3, #139	; 0x8b
 8009a48:	2001      	movs	r0, #1
 8009a4a:	602b      	str	r3, [r5, #0]
 8009a4c:	4240      	negs	r0, r0
 8009a4e:	b01d      	add	sp, #116	; 0x74
 8009a50:	bc30      	pop	{r4, r5}
 8009a52:	bc08      	pop	{r3}
 8009a54:	b002      	add	sp, #8
 8009a56:	4718      	bx	r3
 8009a58:	2382      	movs	r3, #130	; 0x82
 8009a5a:	a902      	add	r1, sp, #8
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	818b      	strh	r3, [r1, #12]
 8009a60:	2300      	movs	r3, #0
 8009a62:	9002      	str	r0, [sp, #8]
 8009a64:	6108      	str	r0, [r1, #16]
 8009a66:	429c      	cmp	r4, r3
 8009a68:	d000      	beq.n	8009a6c <sniprintf+0x34>
 8009a6a:	1e63      	subs	r3, r4, #1
 8009a6c:	608b      	str	r3, [r1, #8]
 8009a6e:	614b      	str	r3, [r1, #20]
 8009a70:	2301      	movs	r3, #1
 8009a72:	425b      	negs	r3, r3
 8009a74:	81cb      	strh	r3, [r1, #14]
 8009a76:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009a78:	ab21      	add	r3, sp, #132	; 0x84
 8009a7a:	0028      	movs	r0, r5
 8009a7c:	9301      	str	r3, [sp, #4]
 8009a7e:	f001 fadf 	bl	800b040 <_svfiprintf_r>
 8009a82:	1c43      	adds	r3, r0, #1
 8009a84:	da01      	bge.n	8009a8a <sniprintf+0x52>
 8009a86:	238b      	movs	r3, #139	; 0x8b
 8009a88:	602b      	str	r3, [r5, #0]
 8009a8a:	2c00      	cmp	r4, #0
 8009a8c:	d0df      	beq.n	8009a4e <sniprintf+0x16>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	9a02      	ldr	r2, [sp, #8]
 8009a92:	7013      	strb	r3, [r2, #0]
 8009a94:	e7db      	b.n	8009a4e <sniprintf+0x16>
 8009a96:	46c0      	nop			; (mov r8, r8)
 8009a98:	20000010 	.word	0x20000010

08009a9c <strstr>:
 8009a9c:	b510      	push	{r4, lr}
 8009a9e:	7803      	ldrb	r3, [r0, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10f      	bne.n	8009ac4 <strstr+0x28>
 8009aa4:	780b      	ldrb	r3, [r1, #0]
 8009aa6:	425a      	negs	r2, r3
 8009aa8:	4153      	adcs	r3, r2
 8009aaa:	425b      	negs	r3, r3
 8009aac:	4018      	ands	r0, r3
 8009aae:	bd10      	pop	{r4, pc}
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	5cca      	ldrb	r2, [r1, r3]
 8009ab4:	2a00      	cmp	r2, #0
 8009ab6:	d0fa      	beq.n	8009aae <strstr+0x12>
 8009ab8:	5cc4      	ldrb	r4, [r0, r3]
 8009aba:	4294      	cmp	r4, r2
 8009abc:	d101      	bne.n	8009ac2 <strstr+0x26>
 8009abe:	3301      	adds	r3, #1
 8009ac0:	e7f7      	b.n	8009ab2 <strstr+0x16>
 8009ac2:	3001      	adds	r0, #1
 8009ac4:	7803      	ldrb	r3, [r0, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1f2      	bne.n	8009ab0 <strstr+0x14>
 8009aca:	0018      	movs	r0, r3
 8009acc:	e7ef      	b.n	8009aae <strstr+0x12>
	...

08009ad0 <__utoa>:
 8009ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ad2:	0017      	movs	r7, r2
 8009ad4:	b08d      	sub	sp, #52	; 0x34
 8009ad6:	2225      	movs	r2, #37	; 0x25
 8009ad8:	0006      	movs	r6, r0
 8009ada:	000d      	movs	r5, r1
 8009adc:	a802      	add	r0, sp, #8
 8009ade:	4914      	ldr	r1, [pc, #80]	; (8009b30 <__utoa+0x60>)
 8009ae0:	f7ff fb3a 	bl	8009158 <memcpy>
 8009ae4:	aa02      	add	r2, sp, #8
 8009ae6:	1ebb      	subs	r3, r7, #2
 8009ae8:	2400      	movs	r4, #0
 8009aea:	9201      	str	r2, [sp, #4]
 8009aec:	2b22      	cmp	r3, #34	; 0x22
 8009aee:	d905      	bls.n	8009afc <__utoa+0x2c>
 8009af0:	702c      	strb	r4, [r5, #0]
 8009af2:	0025      	movs	r5, r4
 8009af4:	0028      	movs	r0, r5
 8009af6:	b00d      	add	sp, #52	; 0x34
 8009af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009afa:	0014      	movs	r4, r2
 8009afc:	0030      	movs	r0, r6
 8009afe:	0039      	movs	r1, r7
 8009b00:	f7f6 fb9a 	bl	8000238 <__aeabi_uidivmod>
 8009b04:	4684      	mov	ip, r0
 8009b06:	9801      	ldr	r0, [sp, #4]
 8009b08:	1c62      	adds	r2, r4, #1
 8009b0a:	18ab      	adds	r3, r5, r2
 8009b0c:	5c41      	ldrb	r1, [r0, r1]
 8009b0e:	1e5e      	subs	r6, r3, #1
 8009b10:	7031      	strb	r1, [r6, #0]
 8009b12:	4666      	mov	r6, ip
 8009b14:	2e00      	cmp	r6, #0
 8009b16:	d1f0      	bne.n	8009afa <__utoa+0x2a>
 8009b18:	701e      	strb	r6, [r3, #0]
 8009b1a:	002b      	movs	r3, r5
 8009b1c:	1b5a      	subs	r2, r3, r5
 8009b1e:	4294      	cmp	r4, r2
 8009b20:	dde8      	ble.n	8009af4 <__utoa+0x24>
 8009b22:	781a      	ldrb	r2, [r3, #0]
 8009b24:	5d29      	ldrb	r1, [r5, r4]
 8009b26:	7019      	strb	r1, [r3, #0]
 8009b28:	552a      	strb	r2, [r5, r4]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	3c01      	subs	r4, #1
 8009b2e:	e7f5      	b.n	8009b1c <__utoa+0x4c>
 8009b30:	0800b7a8 	.word	0x0800b7a8

08009b34 <quorem>:
 8009b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b36:	6903      	ldr	r3, [r0, #16]
 8009b38:	690c      	ldr	r4, [r1, #16]
 8009b3a:	b089      	sub	sp, #36	; 0x24
 8009b3c:	0007      	movs	r7, r0
 8009b3e:	9105      	str	r1, [sp, #20]
 8009b40:	2600      	movs	r6, #0
 8009b42:	42a3      	cmp	r3, r4
 8009b44:	db65      	blt.n	8009c12 <quorem+0xde>
 8009b46:	000b      	movs	r3, r1
 8009b48:	3c01      	subs	r4, #1
 8009b4a:	3314      	adds	r3, #20
 8009b4c:	00a5      	lsls	r5, r4, #2
 8009b4e:	9303      	str	r3, [sp, #12]
 8009b50:	195b      	adds	r3, r3, r5
 8009b52:	9304      	str	r3, [sp, #16]
 8009b54:	0003      	movs	r3, r0
 8009b56:	3314      	adds	r3, #20
 8009b58:	9302      	str	r3, [sp, #8]
 8009b5a:	195d      	adds	r5, r3, r5
 8009b5c:	9b04      	ldr	r3, [sp, #16]
 8009b5e:	6828      	ldr	r0, [r5, #0]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	1c59      	adds	r1, r3, #1
 8009b64:	9301      	str	r3, [sp, #4]
 8009b66:	f7f6 fae1 	bl	800012c <__udivsi3>
 8009b6a:	9001      	str	r0, [sp, #4]
 8009b6c:	42b0      	cmp	r0, r6
 8009b6e:	d029      	beq.n	8009bc4 <quorem+0x90>
 8009b70:	9b03      	ldr	r3, [sp, #12]
 8009b72:	9802      	ldr	r0, [sp, #8]
 8009b74:	469c      	mov	ip, r3
 8009b76:	9606      	str	r6, [sp, #24]
 8009b78:	4662      	mov	r2, ip
 8009b7a:	ca08      	ldmia	r2!, {r3}
 8009b7c:	4694      	mov	ip, r2
 8009b7e:	9a01      	ldr	r2, [sp, #4]
 8009b80:	b299      	uxth	r1, r3
 8009b82:	4351      	muls	r1, r2
 8009b84:	0c1b      	lsrs	r3, r3, #16
 8009b86:	4353      	muls	r3, r2
 8009b88:	1989      	adds	r1, r1, r6
 8009b8a:	0c0a      	lsrs	r2, r1, #16
 8009b8c:	189b      	adds	r3, r3, r2
 8009b8e:	9307      	str	r3, [sp, #28]
 8009b90:	0c1e      	lsrs	r6, r3, #16
 8009b92:	6803      	ldr	r3, [r0, #0]
 8009b94:	b289      	uxth	r1, r1
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	9b06      	ldr	r3, [sp, #24]
 8009b9a:	18d2      	adds	r2, r2, r3
 8009b9c:	6803      	ldr	r3, [r0, #0]
 8009b9e:	1a52      	subs	r2, r2, r1
 8009ba0:	0c19      	lsrs	r1, r3, #16
 8009ba2:	466b      	mov	r3, sp
 8009ba4:	8b9b      	ldrh	r3, [r3, #28]
 8009ba6:	1acb      	subs	r3, r1, r3
 8009ba8:	1411      	asrs	r1, r2, #16
 8009baa:	185b      	adds	r3, r3, r1
 8009bac:	1419      	asrs	r1, r3, #16
 8009bae:	b292      	uxth	r2, r2
 8009bb0:	041b      	lsls	r3, r3, #16
 8009bb2:	431a      	orrs	r2, r3
 8009bb4:	9b04      	ldr	r3, [sp, #16]
 8009bb6:	9106      	str	r1, [sp, #24]
 8009bb8:	c004      	stmia	r0!, {r2}
 8009bba:	4563      	cmp	r3, ip
 8009bbc:	d2dc      	bcs.n	8009b78 <quorem+0x44>
 8009bbe:	682b      	ldr	r3, [r5, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d02d      	beq.n	8009c20 <quorem+0xec>
 8009bc4:	9905      	ldr	r1, [sp, #20]
 8009bc6:	0038      	movs	r0, r7
 8009bc8:	f001 f850 	bl	800ac6c <__mcmp>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	db1f      	blt.n	8009c10 <quorem+0xdc>
 8009bd0:	2500      	movs	r5, #0
 8009bd2:	9b01      	ldr	r3, [sp, #4]
 8009bd4:	9802      	ldr	r0, [sp, #8]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	9903      	ldr	r1, [sp, #12]
 8009bda:	9301      	str	r3, [sp, #4]
 8009bdc:	6802      	ldr	r2, [r0, #0]
 8009bde:	c908      	ldmia	r1!, {r3}
 8009be0:	b292      	uxth	r2, r2
 8009be2:	1955      	adds	r5, r2, r5
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	1aaa      	subs	r2, r5, r2
 8009be8:	6805      	ldr	r5, [r0, #0]
 8009bea:	0c1b      	lsrs	r3, r3, #16
 8009bec:	0c2d      	lsrs	r5, r5, #16
 8009bee:	1aeb      	subs	r3, r5, r3
 8009bf0:	1415      	asrs	r5, r2, #16
 8009bf2:	195b      	adds	r3, r3, r5
 8009bf4:	141d      	asrs	r5, r3, #16
 8009bf6:	b292      	uxth	r2, r2
 8009bf8:	041b      	lsls	r3, r3, #16
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	c008      	stmia	r0!, {r3}
 8009bfe:	9b04      	ldr	r3, [sp, #16]
 8009c00:	428b      	cmp	r3, r1
 8009c02:	d2eb      	bcs.n	8009bdc <quorem+0xa8>
 8009c04:	9a02      	ldr	r2, [sp, #8]
 8009c06:	00a3      	lsls	r3, r4, #2
 8009c08:	18d3      	adds	r3, r2, r3
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	2a00      	cmp	r2, #0
 8009c0e:	d011      	beq.n	8009c34 <quorem+0x100>
 8009c10:	9e01      	ldr	r6, [sp, #4]
 8009c12:	0030      	movs	r0, r6
 8009c14:	b009      	add	sp, #36	; 0x24
 8009c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c18:	682b      	ldr	r3, [r5, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d104      	bne.n	8009c28 <quorem+0xf4>
 8009c1e:	3c01      	subs	r4, #1
 8009c20:	9b02      	ldr	r3, [sp, #8]
 8009c22:	3d04      	subs	r5, #4
 8009c24:	42ab      	cmp	r3, r5
 8009c26:	d3f7      	bcc.n	8009c18 <quorem+0xe4>
 8009c28:	613c      	str	r4, [r7, #16]
 8009c2a:	e7cb      	b.n	8009bc4 <quorem+0x90>
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	2a00      	cmp	r2, #0
 8009c30:	d104      	bne.n	8009c3c <quorem+0x108>
 8009c32:	3c01      	subs	r4, #1
 8009c34:	9a02      	ldr	r2, [sp, #8]
 8009c36:	3b04      	subs	r3, #4
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d3f7      	bcc.n	8009c2c <quorem+0xf8>
 8009c3c:	613c      	str	r4, [r7, #16]
 8009c3e:	e7e7      	b.n	8009c10 <quorem+0xdc>

08009c40 <_dtoa_r>:
 8009c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c42:	0016      	movs	r6, r2
 8009c44:	001f      	movs	r7, r3
 8009c46:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009c48:	b09b      	sub	sp, #108	; 0x6c
 8009c4a:	9002      	str	r0, [sp, #8]
 8009c4c:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8009c4e:	9606      	str	r6, [sp, #24]
 8009c50:	9707      	str	r7, [sp, #28]
 8009c52:	2c00      	cmp	r4, #0
 8009c54:	d108      	bne.n	8009c68 <_dtoa_r+0x28>
 8009c56:	2010      	movs	r0, #16
 8009c58:	f000 fdde 	bl	800a818 <malloc>
 8009c5c:	9b02      	ldr	r3, [sp, #8]
 8009c5e:	6258      	str	r0, [r3, #36]	; 0x24
 8009c60:	6044      	str	r4, [r0, #4]
 8009c62:	6084      	str	r4, [r0, #8]
 8009c64:	6004      	str	r4, [r0, #0]
 8009c66:	60c4      	str	r4, [r0, #12]
 8009c68:	9b02      	ldr	r3, [sp, #8]
 8009c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6c:	6819      	ldr	r1, [r3, #0]
 8009c6e:	2900      	cmp	r1, #0
 8009c70:	d00b      	beq.n	8009c8a <_dtoa_r+0x4a>
 8009c72:	685a      	ldr	r2, [r3, #4]
 8009c74:	2301      	movs	r3, #1
 8009c76:	4093      	lsls	r3, r2
 8009c78:	604a      	str	r2, [r1, #4]
 8009c7a:	608b      	str	r3, [r1, #8]
 8009c7c:	9802      	ldr	r0, [sp, #8]
 8009c7e:	f000 fe18 	bl	800a8b2 <_Bfree>
 8009c82:	2200      	movs	r2, #0
 8009c84:	9b02      	ldr	r3, [sp, #8]
 8009c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	2f00      	cmp	r7, #0
 8009c8c:	da20      	bge.n	8009cd0 <_dtoa_r+0x90>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	602b      	str	r3, [r5, #0]
 8009c92:	007b      	lsls	r3, r7, #1
 8009c94:	085b      	lsrs	r3, r3, #1
 8009c96:	9307      	str	r3, [sp, #28]
 8009c98:	9c07      	ldr	r4, [sp, #28]
 8009c9a:	4bb2      	ldr	r3, [pc, #712]	; (8009f64 <_dtoa_r+0x324>)
 8009c9c:	0022      	movs	r2, r4
 8009c9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009ca0:	401a      	ands	r2, r3
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d117      	bne.n	8009cd6 <_dtoa_r+0x96>
 8009ca6:	4bb0      	ldr	r3, [pc, #704]	; (8009f68 <_dtoa_r+0x328>)
 8009ca8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009caa:	6013      	str	r3, [r2, #0]
 8009cac:	9b06      	ldr	r3, [sp, #24]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d103      	bne.n	8009cba <_dtoa_r+0x7a>
 8009cb2:	0324      	lsls	r4, r4, #12
 8009cb4:	d101      	bne.n	8009cba <_dtoa_r+0x7a>
 8009cb6:	f000 fd87 	bl	800a7c8 <_dtoa_r+0xb88>
 8009cba:	4bac      	ldr	r3, [pc, #688]	; (8009f6c <_dtoa_r+0x32c>)
 8009cbc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009cbe:	9308      	str	r3, [sp, #32]
 8009cc0:	2a00      	cmp	r2, #0
 8009cc2:	d002      	beq.n	8009cca <_dtoa_r+0x8a>
 8009cc4:	4baa      	ldr	r3, [pc, #680]	; (8009f70 <_dtoa_r+0x330>)
 8009cc6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009cc8:	6013      	str	r3, [r2, #0]
 8009cca:	9808      	ldr	r0, [sp, #32]
 8009ccc:	b01b      	add	sp, #108	; 0x6c
 8009cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	602b      	str	r3, [r5, #0]
 8009cd4:	e7e0      	b.n	8009c98 <_dtoa_r+0x58>
 8009cd6:	9e06      	ldr	r6, [sp, #24]
 8009cd8:	9f07      	ldr	r7, [sp, #28]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	2300      	movs	r3, #0
 8009cde:	0030      	movs	r0, r6
 8009ce0:	0039      	movs	r1, r7
 8009ce2:	f7f6 fba9 	bl	8000438 <__aeabi_dcmpeq>
 8009ce6:	1e05      	subs	r5, r0, #0
 8009ce8:	d00b      	beq.n	8009d02 <_dtoa_r+0xc2>
 8009cea:	2301      	movs	r3, #1
 8009cec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009cee:	6013      	str	r3, [r2, #0]
 8009cf0:	4ba0      	ldr	r3, [pc, #640]	; (8009f74 <_dtoa_r+0x334>)
 8009cf2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009cf4:	9308      	str	r3, [sp, #32]
 8009cf6:	2a00      	cmp	r2, #0
 8009cf8:	d0e7      	beq.n	8009cca <_dtoa_r+0x8a>
 8009cfa:	4a9f      	ldr	r2, [pc, #636]	; (8009f78 <_dtoa_r+0x338>)
 8009cfc:	9924      	ldr	r1, [sp, #144]	; 0x90
 8009cfe:	600a      	str	r2, [r1, #0]
 8009d00:	e7e3      	b.n	8009cca <_dtoa_r+0x8a>
 8009d02:	ab18      	add	r3, sp, #96	; 0x60
 8009d04:	9301      	str	r3, [sp, #4]
 8009d06:	ab19      	add	r3, sp, #100	; 0x64
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	0032      	movs	r2, r6
 8009d0c:	003b      	movs	r3, r7
 8009d0e:	9802      	ldr	r0, [sp, #8]
 8009d10:	f001 f82a 	bl	800ad68 <__d2b>
 8009d14:	0063      	lsls	r3, r4, #1
 8009d16:	9003      	str	r0, [sp, #12]
 8009d18:	0d5b      	lsrs	r3, r3, #21
 8009d1a:	d074      	beq.n	8009e06 <_dtoa_r+0x1c6>
 8009d1c:	033a      	lsls	r2, r7, #12
 8009d1e:	4c97      	ldr	r4, [pc, #604]	; (8009f7c <_dtoa_r+0x33c>)
 8009d20:	0b12      	lsrs	r2, r2, #12
 8009d22:	4314      	orrs	r4, r2
 8009d24:	0021      	movs	r1, r4
 8009d26:	4a96      	ldr	r2, [pc, #600]	; (8009f80 <_dtoa_r+0x340>)
 8009d28:	0030      	movs	r0, r6
 8009d2a:	9516      	str	r5, [sp, #88]	; 0x58
 8009d2c:	189e      	adds	r6, r3, r2
 8009d2e:	2200      	movs	r2, #0
 8009d30:	4b94      	ldr	r3, [pc, #592]	; (8009f84 <_dtoa_r+0x344>)
 8009d32:	f7f7 fd47 	bl	80017c4 <__aeabi_dsub>
 8009d36:	4a94      	ldr	r2, [pc, #592]	; (8009f88 <_dtoa_r+0x348>)
 8009d38:	4b94      	ldr	r3, [pc, #592]	; (8009f8c <_dtoa_r+0x34c>)
 8009d3a:	f7f7 fad1 	bl	80012e0 <__aeabi_dmul>
 8009d3e:	4a94      	ldr	r2, [pc, #592]	; (8009f90 <_dtoa_r+0x350>)
 8009d40:	4b94      	ldr	r3, [pc, #592]	; (8009f94 <_dtoa_r+0x354>)
 8009d42:	f7f6 fba7 	bl	8000494 <__aeabi_dadd>
 8009d46:	0004      	movs	r4, r0
 8009d48:	0030      	movs	r0, r6
 8009d4a:	000d      	movs	r5, r1
 8009d4c:	f7f8 f8d4 	bl	8001ef8 <__aeabi_i2d>
 8009d50:	4a91      	ldr	r2, [pc, #580]	; (8009f98 <_dtoa_r+0x358>)
 8009d52:	4b92      	ldr	r3, [pc, #584]	; (8009f9c <_dtoa_r+0x35c>)
 8009d54:	f7f7 fac4 	bl	80012e0 <__aeabi_dmul>
 8009d58:	0002      	movs	r2, r0
 8009d5a:	000b      	movs	r3, r1
 8009d5c:	0020      	movs	r0, r4
 8009d5e:	0029      	movs	r1, r5
 8009d60:	f7f6 fb98 	bl	8000494 <__aeabi_dadd>
 8009d64:	0004      	movs	r4, r0
 8009d66:	000d      	movs	r5, r1
 8009d68:	f7f8 f890 	bl	8001e8c <__aeabi_d2iz>
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	0007      	movs	r7, r0
 8009d70:	2300      	movs	r3, #0
 8009d72:	0020      	movs	r0, r4
 8009d74:	0029      	movs	r1, r5
 8009d76:	f7f6 fb65 	bl	8000444 <__aeabi_dcmplt>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	d009      	beq.n	8009d92 <_dtoa_r+0x152>
 8009d7e:	0038      	movs	r0, r7
 8009d80:	f7f8 f8ba 	bl	8001ef8 <__aeabi_i2d>
 8009d84:	002b      	movs	r3, r5
 8009d86:	0022      	movs	r2, r4
 8009d88:	f7f6 fb56 	bl	8000438 <__aeabi_dcmpeq>
 8009d8c:	4243      	negs	r3, r0
 8009d8e:	4158      	adcs	r0, r3
 8009d90:	1a3f      	subs	r7, r7, r0
 8009d92:	2301      	movs	r3, #1
 8009d94:	9314      	str	r3, [sp, #80]	; 0x50
 8009d96:	2f16      	cmp	r7, #22
 8009d98:	d80d      	bhi.n	8009db6 <_dtoa_r+0x176>
 8009d9a:	4981      	ldr	r1, [pc, #516]	; (8009fa0 <_dtoa_r+0x360>)
 8009d9c:	00fb      	lsls	r3, r7, #3
 8009d9e:	18c9      	adds	r1, r1, r3
 8009da0:	6808      	ldr	r0, [r1, #0]
 8009da2:	6849      	ldr	r1, [r1, #4]
 8009da4:	9a06      	ldr	r2, [sp, #24]
 8009da6:	9b07      	ldr	r3, [sp, #28]
 8009da8:	f7f6 fb60 	bl	800046c <__aeabi_dcmpgt>
 8009dac:	2800      	cmp	r0, #0
 8009dae:	d046      	beq.n	8009e3e <_dtoa_r+0x1fe>
 8009db0:	2300      	movs	r3, #0
 8009db2:	3f01      	subs	r7, #1
 8009db4:	9314      	str	r3, [sp, #80]	; 0x50
 8009db6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009db8:	1b9e      	subs	r6, r3, r6
 8009dba:	2300      	movs	r3, #0
 8009dbc:	930a      	str	r3, [sp, #40]	; 0x28
 8009dbe:	0033      	movs	r3, r6
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009dc4:	d504      	bpl.n	8009dd0 <_dtoa_r+0x190>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	1b9b      	subs	r3, r3, r6
 8009dca:	930a      	str	r3, [sp, #40]	; 0x28
 8009dcc:	2300      	movs	r3, #0
 8009dce:	930b      	str	r3, [sp, #44]	; 0x2c
 8009dd0:	2f00      	cmp	r7, #0
 8009dd2:	db36      	blt.n	8009e42 <_dtoa_r+0x202>
 8009dd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dd6:	9711      	str	r7, [sp, #68]	; 0x44
 8009dd8:	19db      	adds	r3, r3, r7
 8009dda:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ddc:	2300      	movs	r3, #0
 8009dde:	9304      	str	r3, [sp, #16]
 8009de0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009de2:	2401      	movs	r4, #1
 8009de4:	2b09      	cmp	r3, #9
 8009de6:	d900      	bls.n	8009dea <_dtoa_r+0x1aa>
 8009de8:	e084      	b.n	8009ef4 <_dtoa_r+0x2b4>
 8009dea:	2b05      	cmp	r3, #5
 8009dec:	dd02      	ble.n	8009df4 <_dtoa_r+0x1b4>
 8009dee:	2400      	movs	r4, #0
 8009df0:	3b04      	subs	r3, #4
 8009df2:	9320      	str	r3, [sp, #128]	; 0x80
 8009df4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009df6:	1e98      	subs	r0, r3, #2
 8009df8:	2803      	cmp	r0, #3
 8009dfa:	d900      	bls.n	8009dfe <_dtoa_r+0x1be>
 8009dfc:	e084      	b.n	8009f08 <_dtoa_r+0x2c8>
 8009dfe:	f7f6 f98b 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009e02:	7775      	.short	0x7775
 8009e04:	6a28      	.short	0x6a28
 8009e06:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009e08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009e0a:	189e      	adds	r6, r3, r2
 8009e0c:	4b65      	ldr	r3, [pc, #404]	; (8009fa4 <_dtoa_r+0x364>)
 8009e0e:	18f2      	adds	r2, r6, r3
 8009e10:	2a20      	cmp	r2, #32
 8009e12:	dd0f      	ble.n	8009e34 <_dtoa_r+0x1f4>
 8009e14:	2340      	movs	r3, #64	; 0x40
 8009e16:	1a9b      	subs	r3, r3, r2
 8009e18:	409c      	lsls	r4, r3
 8009e1a:	4b63      	ldr	r3, [pc, #396]	; (8009fa8 <_dtoa_r+0x368>)
 8009e1c:	9806      	ldr	r0, [sp, #24]
 8009e1e:	18f3      	adds	r3, r6, r3
 8009e20:	40d8      	lsrs	r0, r3
 8009e22:	4320      	orrs	r0, r4
 8009e24:	f7f8 f8a2 	bl	8001f6c <__aeabi_ui2d>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	4c60      	ldr	r4, [pc, #384]	; (8009fac <_dtoa_r+0x36c>)
 8009e2c:	3e01      	subs	r6, #1
 8009e2e:	1909      	adds	r1, r1, r4
 8009e30:	9316      	str	r3, [sp, #88]	; 0x58
 8009e32:	e77c      	b.n	8009d2e <_dtoa_r+0xee>
 8009e34:	2320      	movs	r3, #32
 8009e36:	9806      	ldr	r0, [sp, #24]
 8009e38:	1a9b      	subs	r3, r3, r2
 8009e3a:	4098      	lsls	r0, r3
 8009e3c:	e7f2      	b.n	8009e24 <_dtoa_r+0x1e4>
 8009e3e:	9014      	str	r0, [sp, #80]	; 0x50
 8009e40:	e7b9      	b.n	8009db6 <_dtoa_r+0x176>
 8009e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e44:	1bdb      	subs	r3, r3, r7
 8009e46:	930a      	str	r3, [sp, #40]	; 0x28
 8009e48:	427b      	negs	r3, r7
 8009e4a:	9304      	str	r3, [sp, #16]
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	9311      	str	r3, [sp, #68]	; 0x44
 8009e50:	e7c6      	b.n	8009de0 <_dtoa_r+0x1a0>
 8009e52:	2301      	movs	r3, #1
 8009e54:	930d      	str	r3, [sp, #52]	; 0x34
 8009e56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	dd59      	ble.n	8009f10 <_dtoa_r+0x2d0>
 8009e5c:	930c      	str	r3, [sp, #48]	; 0x30
 8009e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e60:	9a02      	ldr	r2, [sp, #8]
 8009e62:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8009e64:	2200      	movs	r2, #0
 8009e66:	606a      	str	r2, [r5, #4]
 8009e68:	3204      	adds	r2, #4
 8009e6a:	0010      	movs	r0, r2
 8009e6c:	3014      	adds	r0, #20
 8009e6e:	6869      	ldr	r1, [r5, #4]
 8009e70:	4298      	cmp	r0, r3
 8009e72:	d952      	bls.n	8009f1a <_dtoa_r+0x2da>
 8009e74:	9802      	ldr	r0, [sp, #8]
 8009e76:	f000 fce4 	bl	800a842 <_Balloc>
 8009e7a:	9b02      	ldr	r3, [sp, #8]
 8009e7c:	6028      	str	r0, [r5, #0]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	9308      	str	r3, [sp, #32]
 8009e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e86:	2b0e      	cmp	r3, #14
 8009e88:	d900      	bls.n	8009e8c <_dtoa_r+0x24c>
 8009e8a:	e10a      	b.n	800a0a2 <_dtoa_r+0x462>
 8009e8c:	2c00      	cmp	r4, #0
 8009e8e:	d100      	bne.n	8009e92 <_dtoa_r+0x252>
 8009e90:	e107      	b.n	800a0a2 <_dtoa_r+0x462>
 8009e92:	9b06      	ldr	r3, [sp, #24]
 8009e94:	9c07      	ldr	r4, [sp, #28]
 8009e96:	9312      	str	r3, [sp, #72]	; 0x48
 8009e98:	9413      	str	r4, [sp, #76]	; 0x4c
 8009e9a:	2f00      	cmp	r7, #0
 8009e9c:	dc00      	bgt.n	8009ea0 <_dtoa_r+0x260>
 8009e9e:	e089      	b.n	8009fb4 <_dtoa_r+0x374>
 8009ea0:	210f      	movs	r1, #15
 8009ea2:	003a      	movs	r2, r7
 8009ea4:	4b3e      	ldr	r3, [pc, #248]	; (8009fa0 <_dtoa_r+0x360>)
 8009ea6:	400a      	ands	r2, r1
 8009ea8:	00d2      	lsls	r2, r2, #3
 8009eaa:	189b      	adds	r3, r3, r2
 8009eac:	681d      	ldr	r5, [r3, #0]
 8009eae:	685e      	ldr	r6, [r3, #4]
 8009eb0:	2302      	movs	r3, #2
 8009eb2:	113c      	asrs	r4, r7, #4
 8009eb4:	930e      	str	r3, [sp, #56]	; 0x38
 8009eb6:	06e3      	lsls	r3, r4, #27
 8009eb8:	d50b      	bpl.n	8009ed2 <_dtoa_r+0x292>
 8009eba:	4b3d      	ldr	r3, [pc, #244]	; (8009fb0 <_dtoa_r+0x370>)
 8009ebc:	400c      	ands	r4, r1
 8009ebe:	6a1a      	ldr	r2, [r3, #32]
 8009ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009ec4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009ec6:	f7f6 fe01 	bl	8000acc <__aeabi_ddiv>
 8009eca:	2303      	movs	r3, #3
 8009ecc:	9006      	str	r0, [sp, #24]
 8009ece:	9107      	str	r1, [sp, #28]
 8009ed0:	930e      	str	r3, [sp, #56]	; 0x38
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	e03a      	b.n	8009f4c <_dtoa_r+0x30c>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	930d      	str	r3, [sp, #52]	; 0x34
 8009eda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009edc:	18fb      	adds	r3, r7, r3
 8009ede:	930c      	str	r3, [sp, #48]	; 0x30
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	dcbb      	bgt.n	8009e60 <_dtoa_r+0x220>
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e7b9      	b.n	8009e60 <_dtoa_r+0x220>
 8009eec:	2300      	movs	r3, #0
 8009eee:	e7b1      	b.n	8009e54 <_dtoa_r+0x214>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	e7f1      	b.n	8009ed8 <_dtoa_r+0x298>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	940d      	str	r4, [sp, #52]	; 0x34
 8009ef8:	9320      	str	r3, [sp, #128]	; 0x80
 8009efa:	3b01      	subs	r3, #1
 8009efc:	2200      	movs	r2, #0
 8009efe:	930c      	str	r3, [sp, #48]	; 0x30
 8009f00:	9309      	str	r3, [sp, #36]	; 0x24
 8009f02:	3313      	adds	r3, #19
 8009f04:	9221      	str	r2, [sp, #132]	; 0x84
 8009f06:	e7ab      	b.n	8009e60 <_dtoa_r+0x220>
 8009f08:	2301      	movs	r3, #1
 8009f0a:	930d      	str	r3, [sp, #52]	; 0x34
 8009f0c:	3b02      	subs	r3, #2
 8009f0e:	e7f5      	b.n	8009efc <_dtoa_r+0x2bc>
 8009f10:	2301      	movs	r3, #1
 8009f12:	930c      	str	r3, [sp, #48]	; 0x30
 8009f14:	9309      	str	r3, [sp, #36]	; 0x24
 8009f16:	001a      	movs	r2, r3
 8009f18:	e7f4      	b.n	8009f04 <_dtoa_r+0x2c4>
 8009f1a:	3101      	adds	r1, #1
 8009f1c:	6069      	str	r1, [r5, #4]
 8009f1e:	0052      	lsls	r2, r2, #1
 8009f20:	e7a3      	b.n	8009e6a <_dtoa_r+0x22a>
 8009f22:	2301      	movs	r3, #1
 8009f24:	421c      	tst	r4, r3
 8009f26:	d00e      	beq.n	8009f46 <_dtoa_r+0x306>
 8009f28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f2a:	4a21      	ldr	r2, [pc, #132]	; (8009fb0 <_dtoa_r+0x370>)
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	930e      	str	r3, [sp, #56]	; 0x38
 8009f30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f32:	0028      	movs	r0, r5
 8009f34:	00db      	lsls	r3, r3, #3
 8009f36:	189b      	adds	r3, r3, r2
 8009f38:	0031      	movs	r1, r6
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	f7f7 f9cf 	bl	80012e0 <__aeabi_dmul>
 8009f42:	0005      	movs	r5, r0
 8009f44:	000e      	movs	r6, r1
 8009f46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f48:	1064      	asrs	r4, r4, #1
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	9310      	str	r3, [sp, #64]	; 0x40
 8009f4e:	2c00      	cmp	r4, #0
 8009f50:	d1e7      	bne.n	8009f22 <_dtoa_r+0x2e2>
 8009f52:	9806      	ldr	r0, [sp, #24]
 8009f54:	9907      	ldr	r1, [sp, #28]
 8009f56:	002a      	movs	r2, r5
 8009f58:	0033      	movs	r3, r6
 8009f5a:	f7f6 fdb7 	bl	8000acc <__aeabi_ddiv>
 8009f5e:	9006      	str	r0, [sp, #24]
 8009f60:	9107      	str	r1, [sp, #28]
 8009f62:	e042      	b.n	8009fea <_dtoa_r+0x3aa>
 8009f64:	7ff00000 	.word	0x7ff00000
 8009f68:	0000270f 	.word	0x0000270f
 8009f6c:	0800b7d6 	.word	0x0800b7d6
 8009f70:	0800b7d9 	.word	0x0800b7d9
 8009f74:	0800b784 	.word	0x0800b784
 8009f78:	0800b785 	.word	0x0800b785
 8009f7c:	3ff00000 	.word	0x3ff00000
 8009f80:	fffffc01 	.word	0xfffffc01
 8009f84:	3ff80000 	.word	0x3ff80000
 8009f88:	636f4361 	.word	0x636f4361
 8009f8c:	3fd287a7 	.word	0x3fd287a7
 8009f90:	8b60c8b3 	.word	0x8b60c8b3
 8009f94:	3fc68a28 	.word	0x3fc68a28
 8009f98:	509f79fb 	.word	0x509f79fb
 8009f9c:	3fd34413 	.word	0x3fd34413
 8009fa0:	0800b808 	.word	0x0800b808
 8009fa4:	00000432 	.word	0x00000432
 8009fa8:	00000412 	.word	0x00000412
 8009fac:	fe100000 	.word	0xfe100000
 8009fb0:	0800b7e0 	.word	0x0800b7e0
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	930e      	str	r3, [sp, #56]	; 0x38
 8009fb8:	2f00      	cmp	r7, #0
 8009fba:	d016      	beq.n	8009fea <_dtoa_r+0x3aa>
 8009fbc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009fbe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009fc0:	427c      	negs	r4, r7
 8009fc2:	330d      	adds	r3, #13
 8009fc4:	4023      	ands	r3, r4
 8009fc6:	4ace      	ldr	r2, [pc, #824]	; (800a300 <_dtoa_r+0x6c0>)
 8009fc8:	00db      	lsls	r3, r3, #3
 8009fca:	18d3      	adds	r3, r2, r3
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	f7f7 f986 	bl	80012e0 <__aeabi_dmul>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	2601      	movs	r6, #1
 8009fd8:	001d      	movs	r5, r3
 8009fda:	9006      	str	r0, [sp, #24]
 8009fdc:	9107      	str	r1, [sp, #28]
 8009fde:	1124      	asrs	r4, r4, #4
 8009fe0:	2c00      	cmp	r4, #0
 8009fe2:	d000      	beq.n	8009fe6 <_dtoa_r+0x3a6>
 8009fe4:	e08c      	b.n	800a100 <_dtoa_r+0x4c0>
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d1b9      	bne.n	8009f5e <_dtoa_r+0x31e>
 8009fea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d100      	bne.n	8009ff2 <_dtoa_r+0x3b2>
 8009ff0:	e096      	b.n	800a120 <_dtoa_r+0x4e0>
 8009ff2:	9c06      	ldr	r4, [sp, #24]
 8009ff4:	9d07      	ldr	r5, [sp, #28]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	4bc2      	ldr	r3, [pc, #776]	; (800a304 <_dtoa_r+0x6c4>)
 8009ffa:	0020      	movs	r0, r4
 8009ffc:	0029      	movs	r1, r5
 8009ffe:	f7f6 fa21 	bl	8000444 <__aeabi_dcmplt>
 800a002:	2800      	cmp	r0, #0
 800a004:	d100      	bne.n	800a008 <_dtoa_r+0x3c8>
 800a006:	e08b      	b.n	800a120 <_dtoa_r+0x4e0>
 800a008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d100      	bne.n	800a010 <_dtoa_r+0x3d0>
 800a00e:	e087      	b.n	800a120 <_dtoa_r+0x4e0>
 800a010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a012:	2b00      	cmp	r3, #0
 800a014:	dd41      	ble.n	800a09a <_dtoa_r+0x45a>
 800a016:	4bbc      	ldr	r3, [pc, #752]	; (800a308 <_dtoa_r+0x6c8>)
 800a018:	2200      	movs	r2, #0
 800a01a:	0020      	movs	r0, r4
 800a01c:	0029      	movs	r1, r5
 800a01e:	f7f7 f95f 	bl	80012e0 <__aeabi_dmul>
 800a022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a024:	9006      	str	r0, [sp, #24]
 800a026:	9107      	str	r1, [sp, #28]
 800a028:	3301      	adds	r3, #1
 800a02a:	930e      	str	r3, [sp, #56]	; 0x38
 800a02c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a02e:	1e7e      	subs	r6, r7, #1
 800a030:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a032:	9310      	str	r3, [sp, #64]	; 0x40
 800a034:	f7f7 ff60 	bl	8001ef8 <__aeabi_i2d>
 800a038:	9a06      	ldr	r2, [sp, #24]
 800a03a:	9b07      	ldr	r3, [sp, #28]
 800a03c:	f7f7 f950 	bl	80012e0 <__aeabi_dmul>
 800a040:	2200      	movs	r2, #0
 800a042:	4bb2      	ldr	r3, [pc, #712]	; (800a30c <_dtoa_r+0x6cc>)
 800a044:	f7f6 fa26 	bl	8000494 <__aeabi_dadd>
 800a048:	4ab1      	ldr	r2, [pc, #708]	; (800a310 <_dtoa_r+0x6d0>)
 800a04a:	900e      	str	r0, [sp, #56]	; 0x38
 800a04c:	910f      	str	r1, [sp, #60]	; 0x3c
 800a04e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800a050:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a052:	4694      	mov	ip, r2
 800a054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a056:	4463      	add	r3, ip
 800a058:	9315      	str	r3, [sp, #84]	; 0x54
 800a05a:	001d      	movs	r5, r3
 800a05c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d161      	bne.n	800a126 <_dtoa_r+0x4e6>
 800a062:	9806      	ldr	r0, [sp, #24]
 800a064:	9907      	ldr	r1, [sp, #28]
 800a066:	2200      	movs	r2, #0
 800a068:	4baa      	ldr	r3, [pc, #680]	; (800a314 <_dtoa_r+0x6d4>)
 800a06a:	f7f7 fbab 	bl	80017c4 <__aeabi_dsub>
 800a06e:	0022      	movs	r2, r4
 800a070:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a072:	9006      	str	r0, [sp, #24]
 800a074:	9107      	str	r1, [sp, #28]
 800a076:	f7f6 f9f9 	bl	800046c <__aeabi_dcmpgt>
 800a07a:	2800      	cmp	r0, #0
 800a07c:	d000      	beq.n	800a080 <_dtoa_r+0x440>
 800a07e:	e2a8      	b.n	800a5d2 <_dtoa_r+0x992>
 800a080:	48a5      	ldr	r0, [pc, #660]	; (800a318 <_dtoa_r+0x6d8>)
 800a082:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a084:	4684      	mov	ip, r0
 800a086:	4461      	add	r1, ip
 800a088:	000b      	movs	r3, r1
 800a08a:	9806      	ldr	r0, [sp, #24]
 800a08c:	9907      	ldr	r1, [sp, #28]
 800a08e:	0022      	movs	r2, r4
 800a090:	f7f6 f9d8 	bl	8000444 <__aeabi_dcmplt>
 800a094:	2800      	cmp	r0, #0
 800a096:	d000      	beq.n	800a09a <_dtoa_r+0x45a>
 800a098:	e295      	b.n	800a5c6 <_dtoa_r+0x986>
 800a09a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a09c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a09e:	9306      	str	r3, [sp, #24]
 800a0a0:	9407      	str	r4, [sp, #28]
 800a0a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	da00      	bge.n	800a0aa <_dtoa_r+0x46a>
 800a0a8:	e15c      	b.n	800a364 <_dtoa_r+0x724>
 800a0aa:	2f0e      	cmp	r7, #14
 800a0ac:	dd00      	ble.n	800a0b0 <_dtoa_r+0x470>
 800a0ae:	e159      	b.n	800a364 <_dtoa_r+0x724>
 800a0b0:	4b93      	ldr	r3, [pc, #588]	; (800a300 <_dtoa_r+0x6c0>)
 800a0b2:	00fa      	lsls	r2, r7, #3
 800a0b4:	189b      	adds	r3, r3, r2
 800a0b6:	685c      	ldr	r4, [r3, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	9304      	str	r3, [sp, #16]
 800a0bc:	9405      	str	r4, [sp, #20]
 800a0be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	db00      	blt.n	800a0c6 <_dtoa_r+0x486>
 800a0c4:	e0d8      	b.n	800a278 <_dtoa_r+0x638>
 800a0c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	dd00      	ble.n	800a0ce <_dtoa_r+0x48e>
 800a0cc:	e0d4      	b.n	800a278 <_dtoa_r+0x638>
 800a0ce:	d000      	beq.n	800a0d2 <_dtoa_r+0x492>
 800a0d0:	e27d      	b.n	800a5ce <_dtoa_r+0x98e>
 800a0d2:	9804      	ldr	r0, [sp, #16]
 800a0d4:	9905      	ldr	r1, [sp, #20]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	4b8e      	ldr	r3, [pc, #568]	; (800a314 <_dtoa_r+0x6d4>)
 800a0da:	f7f7 f901 	bl	80012e0 <__aeabi_dmul>
 800a0de:	9a06      	ldr	r2, [sp, #24]
 800a0e0:	9b07      	ldr	r3, [sp, #28]
 800a0e2:	f7f6 f9cd 	bl	8000480 <__aeabi_dcmpge>
 800a0e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e8:	9304      	str	r3, [sp, #16]
 800a0ea:	001e      	movs	r6, r3
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d000      	beq.n	800a0f2 <_dtoa_r+0x4b2>
 800a0f0:	e24f      	b.n	800a592 <_dtoa_r+0x952>
 800a0f2:	9b08      	ldr	r3, [sp, #32]
 800a0f4:	9a08      	ldr	r2, [sp, #32]
 800a0f6:	1c5d      	adds	r5, r3, #1
 800a0f8:	2331      	movs	r3, #49	; 0x31
 800a0fa:	3701      	adds	r7, #1
 800a0fc:	7013      	strb	r3, [r2, #0]
 800a0fe:	e24b      	b.n	800a598 <_dtoa_r+0x958>
 800a100:	4234      	tst	r4, r6
 800a102:	d00a      	beq.n	800a11a <_dtoa_r+0x4da>
 800a104:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a106:	4a85      	ldr	r2, [pc, #532]	; (800a31c <_dtoa_r+0x6dc>)
 800a108:	3301      	adds	r3, #1
 800a10a:	930e      	str	r3, [sp, #56]	; 0x38
 800a10c:	00eb      	lsls	r3, r5, #3
 800a10e:	189b      	adds	r3, r3, r2
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	f7f7 f8e4 	bl	80012e0 <__aeabi_dmul>
 800a118:	0033      	movs	r3, r6
 800a11a:	1064      	asrs	r4, r4, #1
 800a11c:	3501      	adds	r5, #1
 800a11e:	e75f      	b.n	8009fe0 <_dtoa_r+0x3a0>
 800a120:	003e      	movs	r6, r7
 800a122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a124:	e784      	b.n	800a030 <_dtoa_r+0x3f0>
 800a126:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a128:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a12a:	1e5a      	subs	r2, r3, #1
 800a12c:	4b74      	ldr	r3, [pc, #464]	; (800a300 <_dtoa_r+0x6c0>)
 800a12e:	00d2      	lsls	r2, r2, #3
 800a130:	189b      	adds	r3, r3, r2
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	2900      	cmp	r1, #0
 800a138:	d049      	beq.n	800a1ce <_dtoa_r+0x58e>
 800a13a:	2000      	movs	r0, #0
 800a13c:	4978      	ldr	r1, [pc, #480]	; (800a320 <_dtoa_r+0x6e0>)
 800a13e:	f7f6 fcc5 	bl	8000acc <__aeabi_ddiv>
 800a142:	002b      	movs	r3, r5
 800a144:	0022      	movs	r2, r4
 800a146:	f7f7 fb3d 	bl	80017c4 <__aeabi_dsub>
 800a14a:	9b08      	ldr	r3, [sp, #32]
 800a14c:	900e      	str	r0, [sp, #56]	; 0x38
 800a14e:	910f      	str	r1, [sp, #60]	; 0x3c
 800a150:	9315      	str	r3, [sp, #84]	; 0x54
 800a152:	9806      	ldr	r0, [sp, #24]
 800a154:	9907      	ldr	r1, [sp, #28]
 800a156:	f7f7 fe99 	bl	8001e8c <__aeabi_d2iz>
 800a15a:	0004      	movs	r4, r0
 800a15c:	f7f7 fecc 	bl	8001ef8 <__aeabi_i2d>
 800a160:	0002      	movs	r2, r0
 800a162:	000b      	movs	r3, r1
 800a164:	9806      	ldr	r0, [sp, #24]
 800a166:	9907      	ldr	r1, [sp, #28]
 800a168:	f7f7 fb2c 	bl	80017c4 <__aeabi_dsub>
 800a16c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a16e:	3430      	adds	r4, #48	; 0x30
 800a170:	1c5d      	adds	r5, r3, #1
 800a172:	701c      	strb	r4, [r3, #0]
 800a174:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a176:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a178:	9006      	str	r0, [sp, #24]
 800a17a:	9107      	str	r1, [sp, #28]
 800a17c:	f7f6 f962 	bl	8000444 <__aeabi_dcmplt>
 800a180:	2800      	cmp	r0, #0
 800a182:	d16c      	bne.n	800a25e <_dtoa_r+0x61e>
 800a184:	9a06      	ldr	r2, [sp, #24]
 800a186:	9b07      	ldr	r3, [sp, #28]
 800a188:	2000      	movs	r0, #0
 800a18a:	495e      	ldr	r1, [pc, #376]	; (800a304 <_dtoa_r+0x6c4>)
 800a18c:	f7f7 fb1a 	bl	80017c4 <__aeabi_dsub>
 800a190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a192:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a194:	f7f6 f956 	bl	8000444 <__aeabi_dcmplt>
 800a198:	2800      	cmp	r0, #0
 800a19a:	d000      	beq.n	800a19e <_dtoa_r+0x55e>
 800a19c:	e0c3      	b.n	800a326 <_dtoa_r+0x6e6>
 800a19e:	9b08      	ldr	r3, [sp, #32]
 800a1a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a1a2:	1aeb      	subs	r3, r5, r3
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	dc00      	bgt.n	800a1aa <_dtoa_r+0x56a>
 800a1a8:	e777      	b.n	800a09a <_dtoa_r+0x45a>
 800a1aa:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a1ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	4b55      	ldr	r3, [pc, #340]	; (800a308 <_dtoa_r+0x6c8>)
 800a1b2:	f7f7 f895 	bl	80012e0 <__aeabi_dmul>
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	900e      	str	r0, [sp, #56]	; 0x38
 800a1ba:	910f      	str	r1, [sp, #60]	; 0x3c
 800a1bc:	9806      	ldr	r0, [sp, #24]
 800a1be:	9907      	ldr	r1, [sp, #28]
 800a1c0:	4b51      	ldr	r3, [pc, #324]	; (800a308 <_dtoa_r+0x6c8>)
 800a1c2:	f7f7 f88d 	bl	80012e0 <__aeabi_dmul>
 800a1c6:	9515      	str	r5, [sp, #84]	; 0x54
 800a1c8:	9006      	str	r0, [sp, #24]
 800a1ca:	9107      	str	r1, [sp, #28]
 800a1cc:	e7c1      	b.n	800a152 <_dtoa_r+0x512>
 800a1ce:	0020      	movs	r0, r4
 800a1d0:	0029      	movs	r1, r5
 800a1d2:	f7f7 f885 	bl	80012e0 <__aeabi_dmul>
 800a1d6:	9c08      	ldr	r4, [sp, #32]
 800a1d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a1da:	0023      	movs	r3, r4
 800a1dc:	4694      	mov	ip, r2
 800a1de:	900e      	str	r0, [sp, #56]	; 0x38
 800a1e0:	910f      	str	r1, [sp, #60]	; 0x3c
 800a1e2:	4463      	add	r3, ip
 800a1e4:	9315      	str	r3, [sp, #84]	; 0x54
 800a1e6:	9806      	ldr	r0, [sp, #24]
 800a1e8:	9907      	ldr	r1, [sp, #28]
 800a1ea:	f7f7 fe4f 	bl	8001e8c <__aeabi_d2iz>
 800a1ee:	0005      	movs	r5, r0
 800a1f0:	f7f7 fe82 	bl	8001ef8 <__aeabi_i2d>
 800a1f4:	000b      	movs	r3, r1
 800a1f6:	0002      	movs	r2, r0
 800a1f8:	9806      	ldr	r0, [sp, #24]
 800a1fa:	9907      	ldr	r1, [sp, #28]
 800a1fc:	f7f7 fae2 	bl	80017c4 <__aeabi_dsub>
 800a200:	3530      	adds	r5, #48	; 0x30
 800a202:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a204:	7025      	strb	r5, [r4, #0]
 800a206:	3401      	adds	r4, #1
 800a208:	9006      	str	r0, [sp, #24]
 800a20a:	9107      	str	r1, [sp, #28]
 800a20c:	42a3      	cmp	r3, r4
 800a20e:	d12a      	bne.n	800a266 <_dtoa_r+0x626>
 800a210:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a212:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a214:	9a08      	ldr	r2, [sp, #32]
 800a216:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a218:	4694      	mov	ip, r2
 800a21a:	4463      	add	r3, ip
 800a21c:	2200      	movs	r2, #0
 800a21e:	001d      	movs	r5, r3
 800a220:	4b3f      	ldr	r3, [pc, #252]	; (800a320 <_dtoa_r+0x6e0>)
 800a222:	f7f6 f937 	bl	8000494 <__aeabi_dadd>
 800a226:	0002      	movs	r2, r0
 800a228:	000b      	movs	r3, r1
 800a22a:	9806      	ldr	r0, [sp, #24]
 800a22c:	9907      	ldr	r1, [sp, #28]
 800a22e:	f7f6 f91d 	bl	800046c <__aeabi_dcmpgt>
 800a232:	2800      	cmp	r0, #0
 800a234:	d000      	beq.n	800a238 <_dtoa_r+0x5f8>
 800a236:	e076      	b.n	800a326 <_dtoa_r+0x6e6>
 800a238:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a23a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a23c:	2000      	movs	r0, #0
 800a23e:	4938      	ldr	r1, [pc, #224]	; (800a320 <_dtoa_r+0x6e0>)
 800a240:	f7f7 fac0 	bl	80017c4 <__aeabi_dsub>
 800a244:	0002      	movs	r2, r0
 800a246:	000b      	movs	r3, r1
 800a248:	9806      	ldr	r0, [sp, #24]
 800a24a:	9907      	ldr	r1, [sp, #28]
 800a24c:	f7f6 f8fa 	bl	8000444 <__aeabi_dcmplt>
 800a250:	2800      	cmp	r0, #0
 800a252:	d100      	bne.n	800a256 <_dtoa_r+0x616>
 800a254:	e721      	b.n	800a09a <_dtoa_r+0x45a>
 800a256:	1e6b      	subs	r3, r5, #1
 800a258:	781a      	ldrb	r2, [r3, #0]
 800a25a:	2a30      	cmp	r2, #48	; 0x30
 800a25c:	d001      	beq.n	800a262 <_dtoa_r+0x622>
 800a25e:	0037      	movs	r7, r6
 800a260:	e03f      	b.n	800a2e2 <_dtoa_r+0x6a2>
 800a262:	001d      	movs	r5, r3
 800a264:	e7f7      	b.n	800a256 <_dtoa_r+0x616>
 800a266:	9806      	ldr	r0, [sp, #24]
 800a268:	9907      	ldr	r1, [sp, #28]
 800a26a:	2200      	movs	r2, #0
 800a26c:	4b26      	ldr	r3, [pc, #152]	; (800a308 <_dtoa_r+0x6c8>)
 800a26e:	f7f7 f837 	bl	80012e0 <__aeabi_dmul>
 800a272:	9006      	str	r0, [sp, #24]
 800a274:	9107      	str	r1, [sp, #28]
 800a276:	e7b6      	b.n	800a1e6 <_dtoa_r+0x5a6>
 800a278:	9e08      	ldr	r6, [sp, #32]
 800a27a:	9a04      	ldr	r2, [sp, #16]
 800a27c:	9b05      	ldr	r3, [sp, #20]
 800a27e:	9806      	ldr	r0, [sp, #24]
 800a280:	9907      	ldr	r1, [sp, #28]
 800a282:	f7f6 fc23 	bl	8000acc <__aeabi_ddiv>
 800a286:	f7f7 fe01 	bl	8001e8c <__aeabi_d2iz>
 800a28a:	0004      	movs	r4, r0
 800a28c:	f7f7 fe34 	bl	8001ef8 <__aeabi_i2d>
 800a290:	9a04      	ldr	r2, [sp, #16]
 800a292:	9b05      	ldr	r3, [sp, #20]
 800a294:	f7f7 f824 	bl	80012e0 <__aeabi_dmul>
 800a298:	0002      	movs	r2, r0
 800a29a:	000b      	movs	r3, r1
 800a29c:	9806      	ldr	r0, [sp, #24]
 800a29e:	9907      	ldr	r1, [sp, #28]
 800a2a0:	f7f7 fa90 	bl	80017c4 <__aeabi_dsub>
 800a2a4:	0023      	movs	r3, r4
 800a2a6:	3330      	adds	r3, #48	; 0x30
 800a2a8:	7033      	strb	r3, [r6, #0]
 800a2aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2ac:	9b08      	ldr	r3, [sp, #32]
 800a2ae:	1c75      	adds	r5, r6, #1
 800a2b0:	1aeb      	subs	r3, r5, r3
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d148      	bne.n	800a348 <_dtoa_r+0x708>
 800a2b6:	0002      	movs	r2, r0
 800a2b8:	000b      	movs	r3, r1
 800a2ba:	f7f6 f8eb 	bl	8000494 <__aeabi_dadd>
 800a2be:	9a04      	ldr	r2, [sp, #16]
 800a2c0:	9b05      	ldr	r3, [sp, #20]
 800a2c2:	9006      	str	r0, [sp, #24]
 800a2c4:	9107      	str	r1, [sp, #28]
 800a2c6:	f7f6 f8d1 	bl	800046c <__aeabi_dcmpgt>
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	d12a      	bne.n	800a324 <_dtoa_r+0x6e4>
 800a2ce:	9a04      	ldr	r2, [sp, #16]
 800a2d0:	9b05      	ldr	r3, [sp, #20]
 800a2d2:	9806      	ldr	r0, [sp, #24]
 800a2d4:	9907      	ldr	r1, [sp, #28]
 800a2d6:	f7f6 f8af 	bl	8000438 <__aeabi_dcmpeq>
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	d001      	beq.n	800a2e2 <_dtoa_r+0x6a2>
 800a2de:	07e3      	lsls	r3, r4, #31
 800a2e0:	d420      	bmi.n	800a324 <_dtoa_r+0x6e4>
 800a2e2:	9903      	ldr	r1, [sp, #12]
 800a2e4:	9802      	ldr	r0, [sp, #8]
 800a2e6:	f000 fae4 	bl	800a8b2 <_Bfree>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	702b      	strb	r3, [r5, #0]
 800a2ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2f0:	3701      	adds	r7, #1
 800a2f2:	601f      	str	r7, [r3, #0]
 800a2f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d100      	bne.n	800a2fc <_dtoa_r+0x6bc>
 800a2fa:	e4e6      	b.n	8009cca <_dtoa_r+0x8a>
 800a2fc:	601d      	str	r5, [r3, #0]
 800a2fe:	e4e4      	b.n	8009cca <_dtoa_r+0x8a>
 800a300:	0800b808 	.word	0x0800b808
 800a304:	3ff00000 	.word	0x3ff00000
 800a308:	40240000 	.word	0x40240000
 800a30c:	401c0000 	.word	0x401c0000
 800a310:	fcc00000 	.word	0xfcc00000
 800a314:	40140000 	.word	0x40140000
 800a318:	7cc00000 	.word	0x7cc00000
 800a31c:	0800b7e0 	.word	0x0800b7e0
 800a320:	3fe00000 	.word	0x3fe00000
 800a324:	003e      	movs	r6, r7
 800a326:	1e6b      	subs	r3, r5, #1
 800a328:	781a      	ldrb	r2, [r3, #0]
 800a32a:	2a39      	cmp	r2, #57	; 0x39
 800a32c:	d106      	bne.n	800a33c <_dtoa_r+0x6fc>
 800a32e:	9a08      	ldr	r2, [sp, #32]
 800a330:	429a      	cmp	r2, r3
 800a332:	d107      	bne.n	800a344 <_dtoa_r+0x704>
 800a334:	2330      	movs	r3, #48	; 0x30
 800a336:	7013      	strb	r3, [r2, #0]
 800a338:	0013      	movs	r3, r2
 800a33a:	3601      	adds	r6, #1
 800a33c:	781a      	ldrb	r2, [r3, #0]
 800a33e:	3201      	adds	r2, #1
 800a340:	701a      	strb	r2, [r3, #0]
 800a342:	e78c      	b.n	800a25e <_dtoa_r+0x61e>
 800a344:	001d      	movs	r5, r3
 800a346:	e7ee      	b.n	800a326 <_dtoa_r+0x6e6>
 800a348:	2200      	movs	r2, #0
 800a34a:	4ba4      	ldr	r3, [pc, #656]	; (800a5dc <_dtoa_r+0x99c>)
 800a34c:	f7f6 ffc8 	bl	80012e0 <__aeabi_dmul>
 800a350:	2200      	movs	r2, #0
 800a352:	2300      	movs	r3, #0
 800a354:	9006      	str	r0, [sp, #24]
 800a356:	9107      	str	r1, [sp, #28]
 800a358:	002e      	movs	r6, r5
 800a35a:	f7f6 f86d 	bl	8000438 <__aeabi_dcmpeq>
 800a35e:	2800      	cmp	r0, #0
 800a360:	d08b      	beq.n	800a27a <_dtoa_r+0x63a>
 800a362:	e7be      	b.n	800a2e2 <_dtoa_r+0x6a2>
 800a364:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a366:	2a00      	cmp	r2, #0
 800a368:	d100      	bne.n	800a36c <_dtoa_r+0x72c>
 800a36a:	e0da      	b.n	800a522 <_dtoa_r+0x8e2>
 800a36c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a36e:	2a01      	cmp	r2, #1
 800a370:	dd00      	ble.n	800a374 <_dtoa_r+0x734>
 800a372:	e0bd      	b.n	800a4f0 <_dtoa_r+0x8b0>
 800a374:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a376:	2a00      	cmp	r2, #0
 800a378:	d100      	bne.n	800a37c <_dtoa_r+0x73c>
 800a37a:	e0b5      	b.n	800a4e8 <_dtoa_r+0x8a8>
 800a37c:	4a98      	ldr	r2, [pc, #608]	; (800a5e0 <_dtoa_r+0x9a0>)
 800a37e:	189b      	adds	r3, r3, r2
 800a380:	9d04      	ldr	r5, [sp, #16]
 800a382:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a384:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a386:	2101      	movs	r1, #1
 800a388:	18d2      	adds	r2, r2, r3
 800a38a:	920a      	str	r2, [sp, #40]	; 0x28
 800a38c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a38e:	9802      	ldr	r0, [sp, #8]
 800a390:	18d3      	adds	r3, r2, r3
 800a392:	930b      	str	r3, [sp, #44]	; 0x2c
 800a394:	f000 fb2d 	bl	800a9f2 <__i2b>
 800a398:	0006      	movs	r6, r0
 800a39a:	2c00      	cmp	r4, #0
 800a39c:	dd0e      	ble.n	800a3bc <_dtoa_r+0x77c>
 800a39e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	dd0b      	ble.n	800a3bc <_dtoa_r+0x77c>
 800a3a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3a6:	0023      	movs	r3, r4
 800a3a8:	4294      	cmp	r4, r2
 800a3aa:	dd00      	ble.n	800a3ae <_dtoa_r+0x76e>
 800a3ac:	0013      	movs	r3, r2
 800a3ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3b0:	1ae4      	subs	r4, r4, r3
 800a3b2:	1ad2      	subs	r2, r2, r3
 800a3b4:	920a      	str	r2, [sp, #40]	; 0x28
 800a3b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3b8:	1ad3      	subs	r3, r2, r3
 800a3ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3bc:	9b04      	ldr	r3, [sp, #16]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d01f      	beq.n	800a402 <_dtoa_r+0x7c2>
 800a3c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d100      	bne.n	800a3ca <_dtoa_r+0x78a>
 800a3c8:	e0af      	b.n	800a52a <_dtoa_r+0x8ea>
 800a3ca:	2d00      	cmp	r5, #0
 800a3cc:	d011      	beq.n	800a3f2 <_dtoa_r+0x7b2>
 800a3ce:	0031      	movs	r1, r6
 800a3d0:	002a      	movs	r2, r5
 800a3d2:	9802      	ldr	r0, [sp, #8]
 800a3d4:	f000 fba6 	bl	800ab24 <__pow5mult>
 800a3d8:	9a03      	ldr	r2, [sp, #12]
 800a3da:	0001      	movs	r1, r0
 800a3dc:	0006      	movs	r6, r0
 800a3de:	9802      	ldr	r0, [sp, #8]
 800a3e0:	f000 fb10 	bl	800aa04 <__multiply>
 800a3e4:	9903      	ldr	r1, [sp, #12]
 800a3e6:	9010      	str	r0, [sp, #64]	; 0x40
 800a3e8:	9802      	ldr	r0, [sp, #8]
 800a3ea:	f000 fa62 	bl	800a8b2 <_Bfree>
 800a3ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3f0:	9303      	str	r3, [sp, #12]
 800a3f2:	9b04      	ldr	r3, [sp, #16]
 800a3f4:	1b5a      	subs	r2, r3, r5
 800a3f6:	d004      	beq.n	800a402 <_dtoa_r+0x7c2>
 800a3f8:	9903      	ldr	r1, [sp, #12]
 800a3fa:	9802      	ldr	r0, [sp, #8]
 800a3fc:	f000 fb92 	bl	800ab24 <__pow5mult>
 800a400:	9003      	str	r0, [sp, #12]
 800a402:	2101      	movs	r1, #1
 800a404:	9802      	ldr	r0, [sp, #8]
 800a406:	f000 faf4 	bl	800a9f2 <__i2b>
 800a40a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a40c:	9004      	str	r0, [sp, #16]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d100      	bne.n	800a414 <_dtoa_r+0x7d4>
 800a412:	e1e3      	b.n	800a7dc <_dtoa_r+0xb9c>
 800a414:	001a      	movs	r2, r3
 800a416:	0001      	movs	r1, r0
 800a418:	9802      	ldr	r0, [sp, #8]
 800a41a:	f000 fb83 	bl	800ab24 <__pow5mult>
 800a41e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a420:	9004      	str	r0, [sp, #16]
 800a422:	2b01      	cmp	r3, #1
 800a424:	dd00      	ble.n	800a428 <_dtoa_r+0x7e8>
 800a426:	e082      	b.n	800a52e <_dtoa_r+0x8ee>
 800a428:	2500      	movs	r5, #0
 800a42a:	9b06      	ldr	r3, [sp, #24]
 800a42c:	42ab      	cmp	r3, r5
 800a42e:	d10e      	bne.n	800a44e <_dtoa_r+0x80e>
 800a430:	9b07      	ldr	r3, [sp, #28]
 800a432:	031b      	lsls	r3, r3, #12
 800a434:	42ab      	cmp	r3, r5
 800a436:	d10a      	bne.n	800a44e <_dtoa_r+0x80e>
 800a438:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a43a:	9a07      	ldr	r2, [sp, #28]
 800a43c:	4213      	tst	r3, r2
 800a43e:	d006      	beq.n	800a44e <_dtoa_r+0x80e>
 800a440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a442:	3501      	adds	r5, #1
 800a444:	3301      	adds	r3, #1
 800a446:	930a      	str	r3, [sp, #40]	; 0x28
 800a448:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a44a:	3301      	adds	r3, #1
 800a44c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a44e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a450:	2001      	movs	r0, #1
 800a452:	2b00      	cmp	r3, #0
 800a454:	d16c      	bne.n	800a530 <_dtoa_r+0x8f0>
 800a456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a458:	1818      	adds	r0, r3, r0
 800a45a:	231f      	movs	r3, #31
 800a45c:	4018      	ands	r0, r3
 800a45e:	d07e      	beq.n	800a55e <_dtoa_r+0x91e>
 800a460:	3301      	adds	r3, #1
 800a462:	1a1b      	subs	r3, r3, r0
 800a464:	2b04      	cmp	r3, #4
 800a466:	dd70      	ble.n	800a54a <_dtoa_r+0x90a>
 800a468:	231c      	movs	r3, #28
 800a46a:	1a18      	subs	r0, r3, r0
 800a46c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a46e:	1824      	adds	r4, r4, r0
 800a470:	181b      	adds	r3, r3, r0
 800a472:	930a      	str	r3, [sp, #40]	; 0x28
 800a474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a476:	181b      	adds	r3, r3, r0
 800a478:	930b      	str	r3, [sp, #44]	; 0x2c
 800a47a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	dd05      	ble.n	800a48c <_dtoa_r+0x84c>
 800a480:	001a      	movs	r2, r3
 800a482:	9903      	ldr	r1, [sp, #12]
 800a484:	9802      	ldr	r0, [sp, #8]
 800a486:	f000 fb9f 	bl	800abc8 <__lshift>
 800a48a:	9003      	str	r0, [sp, #12]
 800a48c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a48e:	2b00      	cmp	r3, #0
 800a490:	dd05      	ble.n	800a49e <_dtoa_r+0x85e>
 800a492:	001a      	movs	r2, r3
 800a494:	9904      	ldr	r1, [sp, #16]
 800a496:	9802      	ldr	r0, [sp, #8]
 800a498:	f000 fb96 	bl	800abc8 <__lshift>
 800a49c:	9004      	str	r0, [sp, #16]
 800a49e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d05e      	beq.n	800a562 <_dtoa_r+0x922>
 800a4a4:	9904      	ldr	r1, [sp, #16]
 800a4a6:	9803      	ldr	r0, [sp, #12]
 800a4a8:	f000 fbe0 	bl	800ac6c <__mcmp>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	da58      	bge.n	800a562 <_dtoa_r+0x922>
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	220a      	movs	r2, #10
 800a4b4:	9903      	ldr	r1, [sp, #12]
 800a4b6:	9802      	ldr	r0, [sp, #8]
 800a4b8:	f000 fa14 	bl	800a8e4 <__multadd>
 800a4bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4be:	3f01      	subs	r7, #1
 800a4c0:	9003      	str	r0, [sp, #12]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d100      	bne.n	800a4c8 <_dtoa_r+0x888>
 800a4c6:	e190      	b.n	800a7ea <_dtoa_r+0xbaa>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	0031      	movs	r1, r6
 800a4cc:	220a      	movs	r2, #10
 800a4ce:	9802      	ldr	r0, [sp, #8]
 800a4d0:	f000 fa08 	bl	800a8e4 <__multadd>
 800a4d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4d6:	0006      	movs	r6, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	dd00      	ble.n	800a4de <_dtoa_r+0x89e>
 800a4dc:	e088      	b.n	800a5f0 <_dtoa_r+0x9b0>
 800a4de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	dc00      	bgt.n	800a4e6 <_dtoa_r+0x8a6>
 800a4e4:	e084      	b.n	800a5f0 <_dtoa_r+0x9b0>
 800a4e6:	e044      	b.n	800a572 <_dtoa_r+0x932>
 800a4e8:	2336      	movs	r3, #54	; 0x36
 800a4ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a4ec:	1a9b      	subs	r3, r3, r2
 800a4ee:	e747      	b.n	800a380 <_dtoa_r+0x740>
 800a4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f2:	1e5d      	subs	r5, r3, #1
 800a4f4:	9b04      	ldr	r3, [sp, #16]
 800a4f6:	42ab      	cmp	r3, r5
 800a4f8:	db08      	blt.n	800a50c <_dtoa_r+0x8cc>
 800a4fa:	1b5d      	subs	r5, r3, r5
 800a4fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	da0c      	bge.n	800a51c <_dtoa_r+0x8dc>
 800a502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a506:	1a9c      	subs	r4, r3, r2
 800a508:	2300      	movs	r3, #0
 800a50a:	e73b      	b.n	800a384 <_dtoa_r+0x744>
 800a50c:	9b04      	ldr	r3, [sp, #16]
 800a50e:	9504      	str	r5, [sp, #16]
 800a510:	1aea      	subs	r2, r5, r3
 800a512:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a514:	2500      	movs	r5, #0
 800a516:	189b      	adds	r3, r3, r2
 800a518:	9311      	str	r3, [sp, #68]	; 0x44
 800a51a:	e7ef      	b.n	800a4fc <_dtoa_r+0x8bc>
 800a51c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a51e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a520:	e730      	b.n	800a384 <_dtoa_r+0x744>
 800a522:	9d04      	ldr	r5, [sp, #16]
 800a524:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a526:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800a528:	e737      	b.n	800a39a <_dtoa_r+0x75a>
 800a52a:	9a04      	ldr	r2, [sp, #16]
 800a52c:	e764      	b.n	800a3f8 <_dtoa_r+0x7b8>
 800a52e:	2500      	movs	r5, #0
 800a530:	9b04      	ldr	r3, [sp, #16]
 800a532:	9a04      	ldr	r2, [sp, #16]
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	9310      	str	r3, [sp, #64]	; 0x40
 800a538:	3303      	adds	r3, #3
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	18d3      	adds	r3, r2, r3
 800a53e:	6858      	ldr	r0, [r3, #4]
 800a540:	f000 fa0e 	bl	800a960 <__hi0bits>
 800a544:	2320      	movs	r3, #32
 800a546:	1a18      	subs	r0, r3, r0
 800a548:	e785      	b.n	800a456 <_dtoa_r+0x816>
 800a54a:	2b04      	cmp	r3, #4
 800a54c:	d095      	beq.n	800a47a <_dtoa_r+0x83a>
 800a54e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a550:	331c      	adds	r3, #28
 800a552:	18d2      	adds	r2, r2, r3
 800a554:	920a      	str	r2, [sp, #40]	; 0x28
 800a556:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a558:	18e4      	adds	r4, r4, r3
 800a55a:	18d3      	adds	r3, r2, r3
 800a55c:	e78c      	b.n	800a478 <_dtoa_r+0x838>
 800a55e:	0003      	movs	r3, r0
 800a560:	e7f5      	b.n	800a54e <_dtoa_r+0x90e>
 800a562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a564:	2b00      	cmp	r3, #0
 800a566:	dc3d      	bgt.n	800a5e4 <_dtoa_r+0x9a4>
 800a568:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	dd3a      	ble.n	800a5e4 <_dtoa_r+0x9a4>
 800a56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a570:	930c      	str	r3, [sp, #48]	; 0x30
 800a572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10c      	bne.n	800a592 <_dtoa_r+0x952>
 800a578:	9904      	ldr	r1, [sp, #16]
 800a57a:	2205      	movs	r2, #5
 800a57c:	9802      	ldr	r0, [sp, #8]
 800a57e:	f000 f9b1 	bl	800a8e4 <__multadd>
 800a582:	9004      	str	r0, [sp, #16]
 800a584:	0001      	movs	r1, r0
 800a586:	9803      	ldr	r0, [sp, #12]
 800a588:	f000 fb70 	bl	800ac6c <__mcmp>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	dd00      	ble.n	800a592 <_dtoa_r+0x952>
 800a590:	e5af      	b.n	800a0f2 <_dtoa_r+0x4b2>
 800a592:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a594:	9d08      	ldr	r5, [sp, #32]
 800a596:	43df      	mvns	r7, r3
 800a598:	2300      	movs	r3, #0
 800a59a:	9309      	str	r3, [sp, #36]	; 0x24
 800a59c:	9904      	ldr	r1, [sp, #16]
 800a59e:	9802      	ldr	r0, [sp, #8]
 800a5a0:	f000 f987 	bl	800a8b2 <_Bfree>
 800a5a4:	2e00      	cmp	r6, #0
 800a5a6:	d100      	bne.n	800a5aa <_dtoa_r+0x96a>
 800a5a8:	e69b      	b.n	800a2e2 <_dtoa_r+0x6a2>
 800a5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d005      	beq.n	800a5bc <_dtoa_r+0x97c>
 800a5b0:	42b3      	cmp	r3, r6
 800a5b2:	d003      	beq.n	800a5bc <_dtoa_r+0x97c>
 800a5b4:	0019      	movs	r1, r3
 800a5b6:	9802      	ldr	r0, [sp, #8]
 800a5b8:	f000 f97b 	bl	800a8b2 <_Bfree>
 800a5bc:	0031      	movs	r1, r6
 800a5be:	9802      	ldr	r0, [sp, #8]
 800a5c0:	f000 f977 	bl	800a8b2 <_Bfree>
 800a5c4:	e68d      	b.n	800a2e2 <_dtoa_r+0x6a2>
 800a5c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5c8:	9304      	str	r3, [sp, #16]
 800a5ca:	001e      	movs	r6, r3
 800a5cc:	e7e1      	b.n	800a592 <_dtoa_r+0x952>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	e7fa      	b.n	800a5c8 <_dtoa_r+0x988>
 800a5d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5d4:	0037      	movs	r7, r6
 800a5d6:	9304      	str	r3, [sp, #16]
 800a5d8:	001e      	movs	r6, r3
 800a5da:	e58a      	b.n	800a0f2 <_dtoa_r+0x4b2>
 800a5dc:	40240000 	.word	0x40240000
 800a5e0:	00000433 	.word	0x00000433
 800a5e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d100      	bne.n	800a5ec <_dtoa_r+0x9ac>
 800a5ea:	e0b2      	b.n	800a752 <_dtoa_r+0xb12>
 800a5ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ee:	930c      	str	r3, [sp, #48]	; 0x30
 800a5f0:	2c00      	cmp	r4, #0
 800a5f2:	dd05      	ble.n	800a600 <_dtoa_r+0x9c0>
 800a5f4:	0031      	movs	r1, r6
 800a5f6:	0022      	movs	r2, r4
 800a5f8:	9802      	ldr	r0, [sp, #8]
 800a5fa:	f000 fae5 	bl	800abc8 <__lshift>
 800a5fe:	0006      	movs	r6, r0
 800a600:	0030      	movs	r0, r6
 800a602:	2d00      	cmp	r5, #0
 800a604:	d011      	beq.n	800a62a <_dtoa_r+0x9ea>
 800a606:	6871      	ldr	r1, [r6, #4]
 800a608:	9802      	ldr	r0, [sp, #8]
 800a60a:	f000 f91a 	bl	800a842 <_Balloc>
 800a60e:	0031      	movs	r1, r6
 800a610:	0004      	movs	r4, r0
 800a612:	6933      	ldr	r3, [r6, #16]
 800a614:	310c      	adds	r1, #12
 800a616:	1c9a      	adds	r2, r3, #2
 800a618:	0092      	lsls	r2, r2, #2
 800a61a:	300c      	adds	r0, #12
 800a61c:	f7fe fd9c 	bl	8009158 <memcpy>
 800a620:	2201      	movs	r2, #1
 800a622:	0021      	movs	r1, r4
 800a624:	9802      	ldr	r0, [sp, #8]
 800a626:	f000 facf 	bl	800abc8 <__lshift>
 800a62a:	9609      	str	r6, [sp, #36]	; 0x24
 800a62c:	0006      	movs	r6, r0
 800a62e:	9b08      	ldr	r3, [sp, #32]
 800a630:	930a      	str	r3, [sp, #40]	; 0x28
 800a632:	9904      	ldr	r1, [sp, #16]
 800a634:	9803      	ldr	r0, [sp, #12]
 800a636:	f7ff fa7d 	bl	8009b34 <quorem>
 800a63a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a63c:	900d      	str	r0, [sp, #52]	; 0x34
 800a63e:	0004      	movs	r4, r0
 800a640:	9803      	ldr	r0, [sp, #12]
 800a642:	f000 fb13 	bl	800ac6c <__mcmp>
 800a646:	0032      	movs	r2, r6
 800a648:	9010      	str	r0, [sp, #64]	; 0x40
 800a64a:	9904      	ldr	r1, [sp, #16]
 800a64c:	9802      	ldr	r0, [sp, #8]
 800a64e:	f000 fb27 	bl	800aca0 <__mdiff>
 800a652:	2301      	movs	r3, #1
 800a654:	930b      	str	r3, [sp, #44]	; 0x2c
 800a656:	68c3      	ldr	r3, [r0, #12]
 800a658:	3430      	adds	r4, #48	; 0x30
 800a65a:	0005      	movs	r5, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d104      	bne.n	800a66a <_dtoa_r+0xa2a>
 800a660:	0001      	movs	r1, r0
 800a662:	9803      	ldr	r0, [sp, #12]
 800a664:	f000 fb02 	bl	800ac6c <__mcmp>
 800a668:	900b      	str	r0, [sp, #44]	; 0x2c
 800a66a:	0029      	movs	r1, r5
 800a66c:	9802      	ldr	r0, [sp, #8]
 800a66e:	f000 f920 	bl	800a8b2 <_Bfree>
 800a672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a674:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a676:	4313      	orrs	r3, r2
 800a678:	d10e      	bne.n	800a698 <_dtoa_r+0xa58>
 800a67a:	9a06      	ldr	r2, [sp, #24]
 800a67c:	3301      	adds	r3, #1
 800a67e:	4213      	tst	r3, r2
 800a680:	d10a      	bne.n	800a698 <_dtoa_r+0xa58>
 800a682:	2c39      	cmp	r4, #57	; 0x39
 800a684:	d026      	beq.n	800a6d4 <_dtoa_r+0xa94>
 800a686:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a688:	2b00      	cmp	r3, #0
 800a68a:	dd01      	ble.n	800a690 <_dtoa_r+0xa50>
 800a68c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a68e:	3431      	adds	r4, #49	; 0x31
 800a690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a692:	1c5d      	adds	r5, r3, #1
 800a694:	701c      	strb	r4, [r3, #0]
 800a696:	e781      	b.n	800a59c <_dtoa_r+0x95c>
 800a698:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	db07      	blt.n	800a6ae <_dtoa_r+0xa6e>
 800a69e:	001d      	movs	r5, r3
 800a6a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a6a2:	431d      	orrs	r5, r3
 800a6a4:	d122      	bne.n	800a6ec <_dtoa_r+0xaac>
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	9a06      	ldr	r2, [sp, #24]
 800a6aa:	4213      	tst	r3, r2
 800a6ac:	d11e      	bne.n	800a6ec <_dtoa_r+0xaac>
 800a6ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	dded      	ble.n	800a690 <_dtoa_r+0xa50>
 800a6b4:	9903      	ldr	r1, [sp, #12]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	9802      	ldr	r0, [sp, #8]
 800a6ba:	f000 fa85 	bl	800abc8 <__lshift>
 800a6be:	9904      	ldr	r1, [sp, #16]
 800a6c0:	9003      	str	r0, [sp, #12]
 800a6c2:	f000 fad3 	bl	800ac6c <__mcmp>
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	dc02      	bgt.n	800a6d0 <_dtoa_r+0xa90>
 800a6ca:	d1e1      	bne.n	800a690 <_dtoa_r+0xa50>
 800a6cc:	07e3      	lsls	r3, r4, #31
 800a6ce:	d5df      	bpl.n	800a690 <_dtoa_r+0xa50>
 800a6d0:	2c39      	cmp	r4, #57	; 0x39
 800a6d2:	d1db      	bne.n	800a68c <_dtoa_r+0xa4c>
 800a6d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6d8:	1c5d      	adds	r5, r3, #1
 800a6da:	2339      	movs	r3, #57	; 0x39
 800a6dc:	7013      	strb	r3, [r2, #0]
 800a6de:	1e6b      	subs	r3, r5, #1
 800a6e0:	781a      	ldrb	r2, [r3, #0]
 800a6e2:	2a39      	cmp	r2, #57	; 0x39
 800a6e4:	d067      	beq.n	800a7b6 <_dtoa_r+0xb76>
 800a6e6:	3201      	adds	r2, #1
 800a6e8:	701a      	strb	r2, [r3, #0]
 800a6ea:	e757      	b.n	800a59c <_dtoa_r+0x95c>
 800a6ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6ee:	1c5d      	adds	r5, r3, #1
 800a6f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	dd04      	ble.n	800a700 <_dtoa_r+0xac0>
 800a6f6:	2c39      	cmp	r4, #57	; 0x39
 800a6f8:	d0ec      	beq.n	800a6d4 <_dtoa_r+0xa94>
 800a6fa:	3401      	adds	r4, #1
 800a6fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6fe:	e7c9      	b.n	800a694 <_dtoa_r+0xa54>
 800a700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a704:	701c      	strb	r4, [r3, #0]
 800a706:	9b08      	ldr	r3, [sp, #32]
 800a708:	1aeb      	subs	r3, r5, r3
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d03e      	beq.n	800a78c <_dtoa_r+0xb4c>
 800a70e:	2300      	movs	r3, #0
 800a710:	220a      	movs	r2, #10
 800a712:	9903      	ldr	r1, [sp, #12]
 800a714:	9802      	ldr	r0, [sp, #8]
 800a716:	f000 f8e5 	bl	800a8e4 <__multadd>
 800a71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a71c:	9003      	str	r0, [sp, #12]
 800a71e:	42b3      	cmp	r3, r6
 800a720:	d109      	bne.n	800a736 <_dtoa_r+0xaf6>
 800a722:	2300      	movs	r3, #0
 800a724:	220a      	movs	r2, #10
 800a726:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a728:	9802      	ldr	r0, [sp, #8]
 800a72a:	f000 f8db 	bl	800a8e4 <__multadd>
 800a72e:	9009      	str	r0, [sp, #36]	; 0x24
 800a730:	0006      	movs	r6, r0
 800a732:	950a      	str	r5, [sp, #40]	; 0x28
 800a734:	e77d      	b.n	800a632 <_dtoa_r+0x9f2>
 800a736:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a738:	2300      	movs	r3, #0
 800a73a:	220a      	movs	r2, #10
 800a73c:	9802      	ldr	r0, [sp, #8]
 800a73e:	f000 f8d1 	bl	800a8e4 <__multadd>
 800a742:	2300      	movs	r3, #0
 800a744:	9009      	str	r0, [sp, #36]	; 0x24
 800a746:	220a      	movs	r2, #10
 800a748:	0031      	movs	r1, r6
 800a74a:	9802      	ldr	r0, [sp, #8]
 800a74c:	f000 f8ca 	bl	800a8e4 <__multadd>
 800a750:	e7ee      	b.n	800a730 <_dtoa_r+0xaf0>
 800a752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a754:	930c      	str	r3, [sp, #48]	; 0x30
 800a756:	9b08      	ldr	r3, [sp, #32]
 800a758:	9306      	str	r3, [sp, #24]
 800a75a:	9904      	ldr	r1, [sp, #16]
 800a75c:	9803      	ldr	r0, [sp, #12]
 800a75e:	f7ff f9e9 	bl	8009b34 <quorem>
 800a762:	9b06      	ldr	r3, [sp, #24]
 800a764:	3030      	adds	r0, #48	; 0x30
 800a766:	1c5d      	adds	r5, r3, #1
 800a768:	7018      	strb	r0, [r3, #0]
 800a76a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a76c:	9b08      	ldr	r3, [sp, #32]
 800a76e:	0004      	movs	r4, r0
 800a770:	1aeb      	subs	r3, r5, r3
 800a772:	429a      	cmp	r2, r3
 800a774:	dd08      	ble.n	800a788 <_dtoa_r+0xb48>
 800a776:	2300      	movs	r3, #0
 800a778:	220a      	movs	r2, #10
 800a77a:	9903      	ldr	r1, [sp, #12]
 800a77c:	9802      	ldr	r0, [sp, #8]
 800a77e:	f000 f8b1 	bl	800a8e4 <__multadd>
 800a782:	9506      	str	r5, [sp, #24]
 800a784:	9003      	str	r0, [sp, #12]
 800a786:	e7e8      	b.n	800a75a <_dtoa_r+0xb1a>
 800a788:	2300      	movs	r3, #0
 800a78a:	9309      	str	r3, [sp, #36]	; 0x24
 800a78c:	9903      	ldr	r1, [sp, #12]
 800a78e:	2201      	movs	r2, #1
 800a790:	9802      	ldr	r0, [sp, #8]
 800a792:	f000 fa19 	bl	800abc8 <__lshift>
 800a796:	9904      	ldr	r1, [sp, #16]
 800a798:	9003      	str	r0, [sp, #12]
 800a79a:	f000 fa67 	bl	800ac6c <__mcmp>
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	dc9d      	bgt.n	800a6de <_dtoa_r+0xa9e>
 800a7a2:	d101      	bne.n	800a7a8 <_dtoa_r+0xb68>
 800a7a4:	07e3      	lsls	r3, r4, #31
 800a7a6:	d49a      	bmi.n	800a6de <_dtoa_r+0xa9e>
 800a7a8:	1e6b      	subs	r3, r5, #1
 800a7aa:	781a      	ldrb	r2, [r3, #0]
 800a7ac:	2a30      	cmp	r2, #48	; 0x30
 800a7ae:	d000      	beq.n	800a7b2 <_dtoa_r+0xb72>
 800a7b0:	e6f4      	b.n	800a59c <_dtoa_r+0x95c>
 800a7b2:	001d      	movs	r5, r3
 800a7b4:	e7f8      	b.n	800a7a8 <_dtoa_r+0xb68>
 800a7b6:	9a08      	ldr	r2, [sp, #32]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d103      	bne.n	800a7c4 <_dtoa_r+0xb84>
 800a7bc:	2331      	movs	r3, #49	; 0x31
 800a7be:	3701      	adds	r7, #1
 800a7c0:	7013      	strb	r3, [r2, #0]
 800a7c2:	e6eb      	b.n	800a59c <_dtoa_r+0x95c>
 800a7c4:	001d      	movs	r5, r3
 800a7c6:	e78a      	b.n	800a6de <_dtoa_r+0xa9e>
 800a7c8:	4b0b      	ldr	r3, [pc, #44]	; (800a7f8 <_dtoa_r+0xbb8>)
 800a7ca:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a7cc:	9308      	str	r3, [sp, #32]
 800a7ce:	4b0b      	ldr	r3, [pc, #44]	; (800a7fc <_dtoa_r+0xbbc>)
 800a7d0:	2a00      	cmp	r2, #0
 800a7d2:	d001      	beq.n	800a7d8 <_dtoa_r+0xb98>
 800a7d4:	f7ff fa77 	bl	8009cc6 <_dtoa_r+0x86>
 800a7d8:	f7ff fa77 	bl	8009cca <_dtoa_r+0x8a>
 800a7dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	dc00      	bgt.n	800a7e4 <_dtoa_r+0xba4>
 800a7e2:	e621      	b.n	800a428 <_dtoa_r+0x7e8>
 800a7e4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800a7e6:	2001      	movs	r0, #1
 800a7e8:	e635      	b.n	800a456 <_dtoa_r+0x816>
 800a7ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	dcb2      	bgt.n	800a756 <_dtoa_r+0xb16>
 800a7f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	ddaf      	ble.n	800a756 <_dtoa_r+0xb16>
 800a7f6:	e6bc      	b.n	800a572 <_dtoa_r+0x932>
 800a7f8:	0800b7cd 	.word	0x0800b7cd
 800a7fc:	0800b7d5 	.word	0x0800b7d5

0800a800 <_localeconv_r>:
 800a800:	4b03      	ldr	r3, [pc, #12]	; (800a810 <_localeconv_r+0x10>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	6a18      	ldr	r0, [r3, #32]
 800a806:	2800      	cmp	r0, #0
 800a808:	d100      	bne.n	800a80c <_localeconv_r+0xc>
 800a80a:	4802      	ldr	r0, [pc, #8]	; (800a814 <_localeconv_r+0x14>)
 800a80c:	30f0      	adds	r0, #240	; 0xf0
 800a80e:	4770      	bx	lr
 800a810:	20000010 	.word	0x20000010
 800a814:	20000074 	.word	0x20000074

0800a818 <malloc>:
 800a818:	b510      	push	{r4, lr}
 800a81a:	4b03      	ldr	r3, [pc, #12]	; (800a828 <malloc+0x10>)
 800a81c:	0001      	movs	r1, r0
 800a81e:	6818      	ldr	r0, [r3, #0]
 800a820:	f000 fb4e 	bl	800aec0 <_malloc_r>
 800a824:	bd10      	pop	{r4, pc}
 800a826:	46c0      	nop			; (mov r8, r8)
 800a828:	20000010 	.word	0x20000010

0800a82c <memchr>:
 800a82c:	b2c9      	uxtb	r1, r1
 800a82e:	1882      	adds	r2, r0, r2
 800a830:	4290      	cmp	r0, r2
 800a832:	d101      	bne.n	800a838 <memchr+0xc>
 800a834:	2000      	movs	r0, #0
 800a836:	4770      	bx	lr
 800a838:	7803      	ldrb	r3, [r0, #0]
 800a83a:	428b      	cmp	r3, r1
 800a83c:	d0fb      	beq.n	800a836 <memchr+0xa>
 800a83e:	3001      	adds	r0, #1
 800a840:	e7f6      	b.n	800a830 <memchr+0x4>

0800a842 <_Balloc>:
 800a842:	b570      	push	{r4, r5, r6, lr}
 800a844:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a846:	0004      	movs	r4, r0
 800a848:	000d      	movs	r5, r1
 800a84a:	2e00      	cmp	r6, #0
 800a84c:	d107      	bne.n	800a85e <_Balloc+0x1c>
 800a84e:	2010      	movs	r0, #16
 800a850:	f7ff ffe2 	bl	800a818 <malloc>
 800a854:	6260      	str	r0, [r4, #36]	; 0x24
 800a856:	6046      	str	r6, [r0, #4]
 800a858:	6086      	str	r6, [r0, #8]
 800a85a:	6006      	str	r6, [r0, #0]
 800a85c:	60c6      	str	r6, [r0, #12]
 800a85e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a860:	68f3      	ldr	r3, [r6, #12]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d013      	beq.n	800a88e <_Balloc+0x4c>
 800a866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a868:	00aa      	lsls	r2, r5, #2
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	189b      	adds	r3, r3, r2
 800a86e:	6818      	ldr	r0, [r3, #0]
 800a870:	2800      	cmp	r0, #0
 800a872:	d118      	bne.n	800a8a6 <_Balloc+0x64>
 800a874:	2101      	movs	r1, #1
 800a876:	000e      	movs	r6, r1
 800a878:	40ae      	lsls	r6, r5
 800a87a:	1d72      	adds	r2, r6, #5
 800a87c:	0092      	lsls	r2, r2, #2
 800a87e:	0020      	movs	r0, r4
 800a880:	f000 fac6 	bl	800ae10 <_calloc_r>
 800a884:	2800      	cmp	r0, #0
 800a886:	d00c      	beq.n	800a8a2 <_Balloc+0x60>
 800a888:	6045      	str	r5, [r0, #4]
 800a88a:	6086      	str	r6, [r0, #8]
 800a88c:	e00d      	b.n	800a8aa <_Balloc+0x68>
 800a88e:	2221      	movs	r2, #33	; 0x21
 800a890:	2104      	movs	r1, #4
 800a892:	0020      	movs	r0, r4
 800a894:	f000 fabc 	bl	800ae10 <_calloc_r>
 800a898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a89a:	60f0      	str	r0, [r6, #12]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1e1      	bne.n	800a866 <_Balloc+0x24>
 800a8a2:	2000      	movs	r0, #0
 800a8a4:	bd70      	pop	{r4, r5, r6, pc}
 800a8a6:	6802      	ldr	r2, [r0, #0]
 800a8a8:	601a      	str	r2, [r3, #0]
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	6103      	str	r3, [r0, #16]
 800a8ae:	60c3      	str	r3, [r0, #12]
 800a8b0:	e7f8      	b.n	800a8a4 <_Balloc+0x62>

0800a8b2 <_Bfree>:
 800a8b2:	b570      	push	{r4, r5, r6, lr}
 800a8b4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a8b6:	0006      	movs	r6, r0
 800a8b8:	000d      	movs	r5, r1
 800a8ba:	2c00      	cmp	r4, #0
 800a8bc:	d107      	bne.n	800a8ce <_Bfree+0x1c>
 800a8be:	2010      	movs	r0, #16
 800a8c0:	f7ff ffaa 	bl	800a818 <malloc>
 800a8c4:	6270      	str	r0, [r6, #36]	; 0x24
 800a8c6:	6044      	str	r4, [r0, #4]
 800a8c8:	6084      	str	r4, [r0, #8]
 800a8ca:	6004      	str	r4, [r0, #0]
 800a8cc:	60c4      	str	r4, [r0, #12]
 800a8ce:	2d00      	cmp	r5, #0
 800a8d0:	d007      	beq.n	800a8e2 <_Bfree+0x30>
 800a8d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a8d4:	686a      	ldr	r2, [r5, #4]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	0092      	lsls	r2, r2, #2
 800a8da:	189b      	adds	r3, r3, r2
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	602a      	str	r2, [r5, #0]
 800a8e0:	601d      	str	r5, [r3, #0]
 800a8e2:	bd70      	pop	{r4, r5, r6, pc}

0800a8e4 <__multadd>:
 800a8e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8e6:	001e      	movs	r6, r3
 800a8e8:	2314      	movs	r3, #20
 800a8ea:	469c      	mov	ip, r3
 800a8ec:	0007      	movs	r7, r0
 800a8ee:	000c      	movs	r4, r1
 800a8f0:	2000      	movs	r0, #0
 800a8f2:	690d      	ldr	r5, [r1, #16]
 800a8f4:	448c      	add	ip, r1
 800a8f6:	4663      	mov	r3, ip
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	3001      	adds	r0, #1
 800a8fc:	b299      	uxth	r1, r3
 800a8fe:	4663      	mov	r3, ip
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4351      	muls	r1, r2
 800a904:	0c1b      	lsrs	r3, r3, #16
 800a906:	4353      	muls	r3, r2
 800a908:	1989      	adds	r1, r1, r6
 800a90a:	0c0e      	lsrs	r6, r1, #16
 800a90c:	199b      	adds	r3, r3, r6
 800a90e:	b289      	uxth	r1, r1
 800a910:	0c1e      	lsrs	r6, r3, #16
 800a912:	041b      	lsls	r3, r3, #16
 800a914:	185b      	adds	r3, r3, r1
 800a916:	4661      	mov	r1, ip
 800a918:	c108      	stmia	r1!, {r3}
 800a91a:	468c      	mov	ip, r1
 800a91c:	4285      	cmp	r5, r0
 800a91e:	dcea      	bgt.n	800a8f6 <__multadd+0x12>
 800a920:	2e00      	cmp	r6, #0
 800a922:	d01b      	beq.n	800a95c <__multadd+0x78>
 800a924:	68a3      	ldr	r3, [r4, #8]
 800a926:	42ab      	cmp	r3, r5
 800a928:	dc12      	bgt.n	800a950 <__multadd+0x6c>
 800a92a:	6863      	ldr	r3, [r4, #4]
 800a92c:	0038      	movs	r0, r7
 800a92e:	1c59      	adds	r1, r3, #1
 800a930:	f7ff ff87 	bl	800a842 <_Balloc>
 800a934:	0021      	movs	r1, r4
 800a936:	6923      	ldr	r3, [r4, #16]
 800a938:	9001      	str	r0, [sp, #4]
 800a93a:	1c9a      	adds	r2, r3, #2
 800a93c:	0092      	lsls	r2, r2, #2
 800a93e:	310c      	adds	r1, #12
 800a940:	300c      	adds	r0, #12
 800a942:	f7fe fc09 	bl	8009158 <memcpy>
 800a946:	0021      	movs	r1, r4
 800a948:	0038      	movs	r0, r7
 800a94a:	f7ff ffb2 	bl	800a8b2 <_Bfree>
 800a94e:	9c01      	ldr	r4, [sp, #4]
 800a950:	1d2b      	adds	r3, r5, #4
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	18e3      	adds	r3, r4, r3
 800a956:	3501      	adds	r5, #1
 800a958:	605e      	str	r6, [r3, #4]
 800a95a:	6125      	str	r5, [r4, #16]
 800a95c:	0020      	movs	r0, r4
 800a95e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800a960 <__hi0bits>:
 800a960:	0003      	movs	r3, r0
 800a962:	0c02      	lsrs	r2, r0, #16
 800a964:	2000      	movs	r0, #0
 800a966:	4282      	cmp	r2, r0
 800a968:	d101      	bne.n	800a96e <__hi0bits+0xe>
 800a96a:	041b      	lsls	r3, r3, #16
 800a96c:	3010      	adds	r0, #16
 800a96e:	0e1a      	lsrs	r2, r3, #24
 800a970:	d101      	bne.n	800a976 <__hi0bits+0x16>
 800a972:	3008      	adds	r0, #8
 800a974:	021b      	lsls	r3, r3, #8
 800a976:	0f1a      	lsrs	r2, r3, #28
 800a978:	d101      	bne.n	800a97e <__hi0bits+0x1e>
 800a97a:	3004      	adds	r0, #4
 800a97c:	011b      	lsls	r3, r3, #4
 800a97e:	0f9a      	lsrs	r2, r3, #30
 800a980:	d101      	bne.n	800a986 <__hi0bits+0x26>
 800a982:	3002      	adds	r0, #2
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	2b00      	cmp	r3, #0
 800a988:	db03      	blt.n	800a992 <__hi0bits+0x32>
 800a98a:	3001      	adds	r0, #1
 800a98c:	005b      	lsls	r3, r3, #1
 800a98e:	d400      	bmi.n	800a992 <__hi0bits+0x32>
 800a990:	2020      	movs	r0, #32
 800a992:	4770      	bx	lr

0800a994 <__lo0bits>:
 800a994:	2207      	movs	r2, #7
 800a996:	6803      	ldr	r3, [r0, #0]
 800a998:	b510      	push	{r4, lr}
 800a99a:	0001      	movs	r1, r0
 800a99c:	401a      	ands	r2, r3
 800a99e:	d00d      	beq.n	800a9bc <__lo0bits+0x28>
 800a9a0:	2401      	movs	r4, #1
 800a9a2:	2000      	movs	r0, #0
 800a9a4:	4223      	tst	r3, r4
 800a9a6:	d105      	bne.n	800a9b4 <__lo0bits+0x20>
 800a9a8:	3002      	adds	r0, #2
 800a9aa:	4203      	tst	r3, r0
 800a9ac:	d003      	beq.n	800a9b6 <__lo0bits+0x22>
 800a9ae:	40e3      	lsrs	r3, r4
 800a9b0:	0020      	movs	r0, r4
 800a9b2:	600b      	str	r3, [r1, #0]
 800a9b4:	bd10      	pop	{r4, pc}
 800a9b6:	089b      	lsrs	r3, r3, #2
 800a9b8:	600b      	str	r3, [r1, #0]
 800a9ba:	e7fb      	b.n	800a9b4 <__lo0bits+0x20>
 800a9bc:	b29c      	uxth	r4, r3
 800a9be:	0010      	movs	r0, r2
 800a9c0:	2c00      	cmp	r4, #0
 800a9c2:	d101      	bne.n	800a9c8 <__lo0bits+0x34>
 800a9c4:	2010      	movs	r0, #16
 800a9c6:	0c1b      	lsrs	r3, r3, #16
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	2a00      	cmp	r2, #0
 800a9cc:	d101      	bne.n	800a9d2 <__lo0bits+0x3e>
 800a9ce:	3008      	adds	r0, #8
 800a9d0:	0a1b      	lsrs	r3, r3, #8
 800a9d2:	071a      	lsls	r2, r3, #28
 800a9d4:	d101      	bne.n	800a9da <__lo0bits+0x46>
 800a9d6:	3004      	adds	r0, #4
 800a9d8:	091b      	lsrs	r3, r3, #4
 800a9da:	079a      	lsls	r2, r3, #30
 800a9dc:	d101      	bne.n	800a9e2 <__lo0bits+0x4e>
 800a9de:	3002      	adds	r0, #2
 800a9e0:	089b      	lsrs	r3, r3, #2
 800a9e2:	07da      	lsls	r2, r3, #31
 800a9e4:	d4e8      	bmi.n	800a9b8 <__lo0bits+0x24>
 800a9e6:	085b      	lsrs	r3, r3, #1
 800a9e8:	d001      	beq.n	800a9ee <__lo0bits+0x5a>
 800a9ea:	3001      	adds	r0, #1
 800a9ec:	e7e4      	b.n	800a9b8 <__lo0bits+0x24>
 800a9ee:	2020      	movs	r0, #32
 800a9f0:	e7e0      	b.n	800a9b4 <__lo0bits+0x20>

0800a9f2 <__i2b>:
 800a9f2:	b510      	push	{r4, lr}
 800a9f4:	000c      	movs	r4, r1
 800a9f6:	2101      	movs	r1, #1
 800a9f8:	f7ff ff23 	bl	800a842 <_Balloc>
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	6144      	str	r4, [r0, #20]
 800aa00:	6103      	str	r3, [r0, #16]
 800aa02:	bd10      	pop	{r4, pc}

0800aa04 <__multiply>:
 800aa04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa06:	690b      	ldr	r3, [r1, #16]
 800aa08:	0014      	movs	r4, r2
 800aa0a:	6912      	ldr	r2, [r2, #16]
 800aa0c:	b089      	sub	sp, #36	; 0x24
 800aa0e:	000d      	movs	r5, r1
 800aa10:	4293      	cmp	r3, r2
 800aa12:	da01      	bge.n	800aa18 <__multiply+0x14>
 800aa14:	0025      	movs	r5, r4
 800aa16:	000c      	movs	r4, r1
 800aa18:	692f      	ldr	r7, [r5, #16]
 800aa1a:	6926      	ldr	r6, [r4, #16]
 800aa1c:	6869      	ldr	r1, [r5, #4]
 800aa1e:	19bb      	adds	r3, r7, r6
 800aa20:	9302      	str	r3, [sp, #8]
 800aa22:	68ab      	ldr	r3, [r5, #8]
 800aa24:	19ba      	adds	r2, r7, r6
 800aa26:	4293      	cmp	r3, r2
 800aa28:	da00      	bge.n	800aa2c <__multiply+0x28>
 800aa2a:	3101      	adds	r1, #1
 800aa2c:	f7ff ff09 	bl	800a842 <_Balloc>
 800aa30:	0002      	movs	r2, r0
 800aa32:	19bb      	adds	r3, r7, r6
 800aa34:	3214      	adds	r2, #20
 800aa36:	009b      	lsls	r3, r3, #2
 800aa38:	18d3      	adds	r3, r2, r3
 800aa3a:	469c      	mov	ip, r3
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	0013      	movs	r3, r2
 800aa40:	9004      	str	r0, [sp, #16]
 800aa42:	4563      	cmp	r3, ip
 800aa44:	d31d      	bcc.n	800aa82 <__multiply+0x7e>
 800aa46:	3514      	adds	r5, #20
 800aa48:	00bf      	lsls	r7, r7, #2
 800aa4a:	19eb      	adds	r3, r5, r7
 800aa4c:	3414      	adds	r4, #20
 800aa4e:	00b6      	lsls	r6, r6, #2
 800aa50:	9305      	str	r3, [sp, #20]
 800aa52:	19a3      	adds	r3, r4, r6
 800aa54:	9503      	str	r5, [sp, #12]
 800aa56:	9401      	str	r4, [sp, #4]
 800aa58:	9307      	str	r3, [sp, #28]
 800aa5a:	9b07      	ldr	r3, [sp, #28]
 800aa5c:	9901      	ldr	r1, [sp, #4]
 800aa5e:	4299      	cmp	r1, r3
 800aa60:	d311      	bcc.n	800aa86 <__multiply+0x82>
 800aa62:	9b02      	ldr	r3, [sp, #8]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	dd06      	ble.n	800aa76 <__multiply+0x72>
 800aa68:	2304      	movs	r3, #4
 800aa6a:	425b      	negs	r3, r3
 800aa6c:	449c      	add	ip, r3
 800aa6e:	4663      	mov	r3, ip
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d051      	beq.n	800ab1a <__multiply+0x116>
 800aa76:	9b04      	ldr	r3, [sp, #16]
 800aa78:	9a02      	ldr	r2, [sp, #8]
 800aa7a:	0018      	movs	r0, r3
 800aa7c:	611a      	str	r2, [r3, #16]
 800aa7e:	b009      	add	sp, #36	; 0x24
 800aa80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa82:	c302      	stmia	r3!, {r1}
 800aa84:	e7dd      	b.n	800aa42 <__multiply+0x3e>
 800aa86:	9b01      	ldr	r3, [sp, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	b298      	uxth	r0, r3
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	d01c      	beq.n	800aaca <__multiply+0xc6>
 800aa90:	0015      	movs	r5, r2
 800aa92:	2600      	movs	r6, #0
 800aa94:	9f03      	ldr	r7, [sp, #12]
 800aa96:	cf02      	ldmia	r7!, {r1}
 800aa98:	682c      	ldr	r4, [r5, #0]
 800aa9a:	b28b      	uxth	r3, r1
 800aa9c:	4343      	muls	r3, r0
 800aa9e:	0c09      	lsrs	r1, r1, #16
 800aaa0:	4341      	muls	r1, r0
 800aaa2:	b2a4      	uxth	r4, r4
 800aaa4:	191b      	adds	r3, r3, r4
 800aaa6:	199b      	adds	r3, r3, r6
 800aaa8:	000e      	movs	r6, r1
 800aaaa:	6829      	ldr	r1, [r5, #0]
 800aaac:	9506      	str	r5, [sp, #24]
 800aaae:	0c09      	lsrs	r1, r1, #16
 800aab0:	1871      	adds	r1, r6, r1
 800aab2:	0c1e      	lsrs	r6, r3, #16
 800aab4:	1989      	adds	r1, r1, r6
 800aab6:	0c0e      	lsrs	r6, r1, #16
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	0409      	lsls	r1, r1, #16
 800aabc:	430b      	orrs	r3, r1
 800aabe:	c508      	stmia	r5!, {r3}
 800aac0:	9b05      	ldr	r3, [sp, #20]
 800aac2:	42bb      	cmp	r3, r7
 800aac4:	d8e7      	bhi.n	800aa96 <__multiply+0x92>
 800aac6:	9b06      	ldr	r3, [sp, #24]
 800aac8:	605e      	str	r6, [r3, #4]
 800aaca:	9b01      	ldr	r3, [sp, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	0c1d      	lsrs	r5, r3, #16
 800aad0:	d01e      	beq.n	800ab10 <__multiply+0x10c>
 800aad2:	0010      	movs	r0, r2
 800aad4:	2700      	movs	r7, #0
 800aad6:	6813      	ldr	r3, [r2, #0]
 800aad8:	9e03      	ldr	r6, [sp, #12]
 800aada:	6831      	ldr	r1, [r6, #0]
 800aadc:	6804      	ldr	r4, [r0, #0]
 800aade:	b289      	uxth	r1, r1
 800aae0:	4369      	muls	r1, r5
 800aae2:	0c24      	lsrs	r4, r4, #16
 800aae4:	1909      	adds	r1, r1, r4
 800aae6:	19c9      	adds	r1, r1, r7
 800aae8:	040f      	lsls	r7, r1, #16
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	433b      	orrs	r3, r7
 800aaee:	6003      	str	r3, [r0, #0]
 800aaf0:	ce80      	ldmia	r6!, {r7}
 800aaf2:	6843      	ldr	r3, [r0, #4]
 800aaf4:	0c3f      	lsrs	r7, r7, #16
 800aaf6:	436f      	muls	r7, r5
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	18fb      	adds	r3, r7, r3
 800aafc:	0c09      	lsrs	r1, r1, #16
 800aafe:	185b      	adds	r3, r3, r1
 800ab00:	9905      	ldr	r1, [sp, #20]
 800ab02:	9006      	str	r0, [sp, #24]
 800ab04:	0c1f      	lsrs	r7, r3, #16
 800ab06:	3004      	adds	r0, #4
 800ab08:	42b1      	cmp	r1, r6
 800ab0a:	d8e6      	bhi.n	800aada <__multiply+0xd6>
 800ab0c:	9906      	ldr	r1, [sp, #24]
 800ab0e:	604b      	str	r3, [r1, #4]
 800ab10:	9b01      	ldr	r3, [sp, #4]
 800ab12:	3204      	adds	r2, #4
 800ab14:	3304      	adds	r3, #4
 800ab16:	9301      	str	r3, [sp, #4]
 800ab18:	e79f      	b.n	800aa5a <__multiply+0x56>
 800ab1a:	9b02      	ldr	r3, [sp, #8]
 800ab1c:	3b01      	subs	r3, #1
 800ab1e:	9302      	str	r3, [sp, #8]
 800ab20:	e79f      	b.n	800aa62 <__multiply+0x5e>
	...

0800ab24 <__pow5mult>:
 800ab24:	2303      	movs	r3, #3
 800ab26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab28:	4013      	ands	r3, r2
 800ab2a:	0005      	movs	r5, r0
 800ab2c:	000e      	movs	r6, r1
 800ab2e:	0014      	movs	r4, r2
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d008      	beq.n	800ab46 <__pow5mult+0x22>
 800ab34:	4922      	ldr	r1, [pc, #136]	; (800abc0 <__pow5mult+0x9c>)
 800ab36:	3b01      	subs	r3, #1
 800ab38:	009a      	lsls	r2, r3, #2
 800ab3a:	5852      	ldr	r2, [r2, r1]
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	0031      	movs	r1, r6
 800ab40:	f7ff fed0 	bl	800a8e4 <__multadd>
 800ab44:	0006      	movs	r6, r0
 800ab46:	10a3      	asrs	r3, r4, #2
 800ab48:	9301      	str	r3, [sp, #4]
 800ab4a:	d036      	beq.n	800abba <__pow5mult+0x96>
 800ab4c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800ab4e:	2c00      	cmp	r4, #0
 800ab50:	d107      	bne.n	800ab62 <__pow5mult+0x3e>
 800ab52:	2010      	movs	r0, #16
 800ab54:	f7ff fe60 	bl	800a818 <malloc>
 800ab58:	6268      	str	r0, [r5, #36]	; 0x24
 800ab5a:	6044      	str	r4, [r0, #4]
 800ab5c:	6084      	str	r4, [r0, #8]
 800ab5e:	6004      	str	r4, [r0, #0]
 800ab60:	60c4      	str	r4, [r0, #12]
 800ab62:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800ab64:	68bc      	ldr	r4, [r7, #8]
 800ab66:	2c00      	cmp	r4, #0
 800ab68:	d107      	bne.n	800ab7a <__pow5mult+0x56>
 800ab6a:	4916      	ldr	r1, [pc, #88]	; (800abc4 <__pow5mult+0xa0>)
 800ab6c:	0028      	movs	r0, r5
 800ab6e:	f7ff ff40 	bl	800a9f2 <__i2b>
 800ab72:	2300      	movs	r3, #0
 800ab74:	0004      	movs	r4, r0
 800ab76:	60b8      	str	r0, [r7, #8]
 800ab78:	6003      	str	r3, [r0, #0]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	9b01      	ldr	r3, [sp, #4]
 800ab7e:	4213      	tst	r3, r2
 800ab80:	d00a      	beq.n	800ab98 <__pow5mult+0x74>
 800ab82:	0031      	movs	r1, r6
 800ab84:	0022      	movs	r2, r4
 800ab86:	0028      	movs	r0, r5
 800ab88:	f7ff ff3c 	bl	800aa04 <__multiply>
 800ab8c:	0007      	movs	r7, r0
 800ab8e:	0031      	movs	r1, r6
 800ab90:	0028      	movs	r0, r5
 800ab92:	f7ff fe8e 	bl	800a8b2 <_Bfree>
 800ab96:	003e      	movs	r6, r7
 800ab98:	9b01      	ldr	r3, [sp, #4]
 800ab9a:	105b      	asrs	r3, r3, #1
 800ab9c:	9301      	str	r3, [sp, #4]
 800ab9e:	d00c      	beq.n	800abba <__pow5mult+0x96>
 800aba0:	6820      	ldr	r0, [r4, #0]
 800aba2:	2800      	cmp	r0, #0
 800aba4:	d107      	bne.n	800abb6 <__pow5mult+0x92>
 800aba6:	0022      	movs	r2, r4
 800aba8:	0021      	movs	r1, r4
 800abaa:	0028      	movs	r0, r5
 800abac:	f7ff ff2a 	bl	800aa04 <__multiply>
 800abb0:	2300      	movs	r3, #0
 800abb2:	6020      	str	r0, [r4, #0]
 800abb4:	6003      	str	r3, [r0, #0]
 800abb6:	0004      	movs	r4, r0
 800abb8:	e7df      	b.n	800ab7a <__pow5mult+0x56>
 800abba:	0030      	movs	r0, r6
 800abbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800abbe:	46c0      	nop			; (mov r8, r8)
 800abc0:	0800b8d0 	.word	0x0800b8d0
 800abc4:	00000271 	.word	0x00000271

0800abc8 <__lshift>:
 800abc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abca:	000d      	movs	r5, r1
 800abcc:	0017      	movs	r7, r2
 800abce:	692b      	ldr	r3, [r5, #16]
 800abd0:	1154      	asrs	r4, r2, #5
 800abd2:	b085      	sub	sp, #20
 800abd4:	18e3      	adds	r3, r4, r3
 800abd6:	9301      	str	r3, [sp, #4]
 800abd8:	3301      	adds	r3, #1
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	6849      	ldr	r1, [r1, #4]
 800abde:	68ab      	ldr	r3, [r5, #8]
 800abe0:	9002      	str	r0, [sp, #8]
 800abe2:	9a00      	ldr	r2, [sp, #0]
 800abe4:	4293      	cmp	r3, r2
 800abe6:	db35      	blt.n	800ac54 <__lshift+0x8c>
 800abe8:	9802      	ldr	r0, [sp, #8]
 800abea:	f7ff fe2a 	bl	800a842 <_Balloc>
 800abee:	2300      	movs	r3, #0
 800abf0:	0002      	movs	r2, r0
 800abf2:	0006      	movs	r6, r0
 800abf4:	0019      	movs	r1, r3
 800abf6:	3214      	adds	r2, #20
 800abf8:	42a3      	cmp	r3, r4
 800abfa:	db2e      	blt.n	800ac5a <__lshift+0x92>
 800abfc:	43e3      	mvns	r3, r4
 800abfe:	17db      	asrs	r3, r3, #31
 800ac00:	401c      	ands	r4, r3
 800ac02:	002b      	movs	r3, r5
 800ac04:	00a4      	lsls	r4, r4, #2
 800ac06:	1914      	adds	r4, r2, r4
 800ac08:	692a      	ldr	r2, [r5, #16]
 800ac0a:	3314      	adds	r3, #20
 800ac0c:	0092      	lsls	r2, r2, #2
 800ac0e:	189a      	adds	r2, r3, r2
 800ac10:	4694      	mov	ip, r2
 800ac12:	221f      	movs	r2, #31
 800ac14:	4017      	ands	r7, r2
 800ac16:	d024      	beq.n	800ac62 <__lshift+0x9a>
 800ac18:	3201      	adds	r2, #1
 800ac1a:	1bd2      	subs	r2, r2, r7
 800ac1c:	9203      	str	r2, [sp, #12]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	6819      	ldr	r1, [r3, #0]
 800ac22:	0020      	movs	r0, r4
 800ac24:	40b9      	lsls	r1, r7
 800ac26:	430a      	orrs	r2, r1
 800ac28:	c404      	stmia	r4!, {r2}
 800ac2a:	cb04      	ldmia	r3!, {r2}
 800ac2c:	9903      	ldr	r1, [sp, #12]
 800ac2e:	40ca      	lsrs	r2, r1
 800ac30:	459c      	cmp	ip, r3
 800ac32:	d8f5      	bhi.n	800ac20 <__lshift+0x58>
 800ac34:	6042      	str	r2, [r0, #4]
 800ac36:	2a00      	cmp	r2, #0
 800ac38:	d002      	beq.n	800ac40 <__lshift+0x78>
 800ac3a:	9b01      	ldr	r3, [sp, #4]
 800ac3c:	3302      	adds	r3, #2
 800ac3e:	9300      	str	r3, [sp, #0]
 800ac40:	9b00      	ldr	r3, [sp, #0]
 800ac42:	9802      	ldr	r0, [sp, #8]
 800ac44:	3b01      	subs	r3, #1
 800ac46:	6133      	str	r3, [r6, #16]
 800ac48:	0029      	movs	r1, r5
 800ac4a:	f7ff fe32 	bl	800a8b2 <_Bfree>
 800ac4e:	0030      	movs	r0, r6
 800ac50:	b005      	add	sp, #20
 800ac52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac54:	3101      	adds	r1, #1
 800ac56:	005b      	lsls	r3, r3, #1
 800ac58:	e7c3      	b.n	800abe2 <__lshift+0x1a>
 800ac5a:	0098      	lsls	r0, r3, #2
 800ac5c:	5011      	str	r1, [r2, r0]
 800ac5e:	3301      	adds	r3, #1
 800ac60:	e7ca      	b.n	800abf8 <__lshift+0x30>
 800ac62:	cb04      	ldmia	r3!, {r2}
 800ac64:	c404      	stmia	r4!, {r2}
 800ac66:	459c      	cmp	ip, r3
 800ac68:	d8fb      	bhi.n	800ac62 <__lshift+0x9a>
 800ac6a:	e7e9      	b.n	800ac40 <__lshift+0x78>

0800ac6c <__mcmp>:
 800ac6c:	690a      	ldr	r2, [r1, #16]
 800ac6e:	6903      	ldr	r3, [r0, #16]
 800ac70:	b530      	push	{r4, r5, lr}
 800ac72:	1a9b      	subs	r3, r3, r2
 800ac74:	d10d      	bne.n	800ac92 <__mcmp+0x26>
 800ac76:	0092      	lsls	r2, r2, #2
 800ac78:	3014      	adds	r0, #20
 800ac7a:	3114      	adds	r1, #20
 800ac7c:	1884      	adds	r4, r0, r2
 800ac7e:	1889      	adds	r1, r1, r2
 800ac80:	3c04      	subs	r4, #4
 800ac82:	3904      	subs	r1, #4
 800ac84:	6825      	ldr	r5, [r4, #0]
 800ac86:	680a      	ldr	r2, [r1, #0]
 800ac88:	4295      	cmp	r5, r2
 800ac8a:	d004      	beq.n	800ac96 <__mcmp+0x2a>
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	4295      	cmp	r5, r2
 800ac90:	d304      	bcc.n	800ac9c <__mcmp+0x30>
 800ac92:	0018      	movs	r0, r3
 800ac94:	bd30      	pop	{r4, r5, pc}
 800ac96:	42a0      	cmp	r0, r4
 800ac98:	d3f2      	bcc.n	800ac80 <__mcmp+0x14>
 800ac9a:	e7fa      	b.n	800ac92 <__mcmp+0x26>
 800ac9c:	425b      	negs	r3, r3
 800ac9e:	e7f8      	b.n	800ac92 <__mcmp+0x26>

0800aca0 <__mdiff>:
 800aca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aca2:	000d      	movs	r5, r1
 800aca4:	b085      	sub	sp, #20
 800aca6:	0007      	movs	r7, r0
 800aca8:	0011      	movs	r1, r2
 800acaa:	0028      	movs	r0, r5
 800acac:	0014      	movs	r4, r2
 800acae:	f7ff ffdd 	bl	800ac6c <__mcmp>
 800acb2:	1e06      	subs	r6, r0, #0
 800acb4:	d108      	bne.n	800acc8 <__mdiff+0x28>
 800acb6:	0001      	movs	r1, r0
 800acb8:	0038      	movs	r0, r7
 800acba:	f7ff fdc2 	bl	800a842 <_Balloc>
 800acbe:	2301      	movs	r3, #1
 800acc0:	6146      	str	r6, [r0, #20]
 800acc2:	6103      	str	r3, [r0, #16]
 800acc4:	b005      	add	sp, #20
 800acc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acc8:	2301      	movs	r3, #1
 800acca:	9301      	str	r3, [sp, #4]
 800accc:	2800      	cmp	r0, #0
 800acce:	db04      	blt.n	800acda <__mdiff+0x3a>
 800acd0:	0023      	movs	r3, r4
 800acd2:	002c      	movs	r4, r5
 800acd4:	001d      	movs	r5, r3
 800acd6:	2300      	movs	r3, #0
 800acd8:	9301      	str	r3, [sp, #4]
 800acda:	6861      	ldr	r1, [r4, #4]
 800acdc:	0038      	movs	r0, r7
 800acde:	f7ff fdb0 	bl	800a842 <_Balloc>
 800ace2:	002f      	movs	r7, r5
 800ace4:	2200      	movs	r2, #0
 800ace6:	9b01      	ldr	r3, [sp, #4]
 800ace8:	6926      	ldr	r6, [r4, #16]
 800acea:	60c3      	str	r3, [r0, #12]
 800acec:	3414      	adds	r4, #20
 800acee:	00b3      	lsls	r3, r6, #2
 800acf0:	18e3      	adds	r3, r4, r3
 800acf2:	9302      	str	r3, [sp, #8]
 800acf4:	692b      	ldr	r3, [r5, #16]
 800acf6:	3714      	adds	r7, #20
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	18fb      	adds	r3, r7, r3
 800acfc:	9303      	str	r3, [sp, #12]
 800acfe:	0003      	movs	r3, r0
 800ad00:	4694      	mov	ip, r2
 800ad02:	3314      	adds	r3, #20
 800ad04:	cc20      	ldmia	r4!, {r5}
 800ad06:	cf04      	ldmia	r7!, {r2}
 800ad08:	9201      	str	r2, [sp, #4]
 800ad0a:	b2aa      	uxth	r2, r5
 800ad0c:	4494      	add	ip, r2
 800ad0e:	466a      	mov	r2, sp
 800ad10:	4661      	mov	r1, ip
 800ad12:	8892      	ldrh	r2, [r2, #4]
 800ad14:	0c2d      	lsrs	r5, r5, #16
 800ad16:	1a8a      	subs	r2, r1, r2
 800ad18:	9901      	ldr	r1, [sp, #4]
 800ad1a:	0c09      	lsrs	r1, r1, #16
 800ad1c:	1a69      	subs	r1, r5, r1
 800ad1e:	1415      	asrs	r5, r2, #16
 800ad20:	1949      	adds	r1, r1, r5
 800ad22:	140d      	asrs	r5, r1, #16
 800ad24:	b292      	uxth	r2, r2
 800ad26:	0409      	lsls	r1, r1, #16
 800ad28:	430a      	orrs	r2, r1
 800ad2a:	601a      	str	r2, [r3, #0]
 800ad2c:	9a03      	ldr	r2, [sp, #12]
 800ad2e:	46ac      	mov	ip, r5
 800ad30:	3304      	adds	r3, #4
 800ad32:	42ba      	cmp	r2, r7
 800ad34:	d8e6      	bhi.n	800ad04 <__mdiff+0x64>
 800ad36:	9902      	ldr	r1, [sp, #8]
 800ad38:	001a      	movs	r2, r3
 800ad3a:	428c      	cmp	r4, r1
 800ad3c:	d305      	bcc.n	800ad4a <__mdiff+0xaa>
 800ad3e:	3a04      	subs	r2, #4
 800ad40:	6813      	ldr	r3, [r2, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00e      	beq.n	800ad64 <__mdiff+0xc4>
 800ad46:	6106      	str	r6, [r0, #16]
 800ad48:	e7bc      	b.n	800acc4 <__mdiff+0x24>
 800ad4a:	cc04      	ldmia	r4!, {r2}
 800ad4c:	b291      	uxth	r1, r2
 800ad4e:	4461      	add	r1, ip
 800ad50:	140d      	asrs	r5, r1, #16
 800ad52:	0c12      	lsrs	r2, r2, #16
 800ad54:	1952      	adds	r2, r2, r5
 800ad56:	1415      	asrs	r5, r2, #16
 800ad58:	b289      	uxth	r1, r1
 800ad5a:	0412      	lsls	r2, r2, #16
 800ad5c:	430a      	orrs	r2, r1
 800ad5e:	46ac      	mov	ip, r5
 800ad60:	c304      	stmia	r3!, {r2}
 800ad62:	e7e8      	b.n	800ad36 <__mdiff+0x96>
 800ad64:	3e01      	subs	r6, #1
 800ad66:	e7ea      	b.n	800ad3e <__mdiff+0x9e>

0800ad68 <__d2b>:
 800ad68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad6a:	001d      	movs	r5, r3
 800ad6c:	2101      	movs	r1, #1
 800ad6e:	0014      	movs	r4, r2
 800ad70:	9f08      	ldr	r7, [sp, #32]
 800ad72:	f7ff fd66 	bl	800a842 <_Balloc>
 800ad76:	032b      	lsls	r3, r5, #12
 800ad78:	006d      	lsls	r5, r5, #1
 800ad7a:	0006      	movs	r6, r0
 800ad7c:	0b1b      	lsrs	r3, r3, #12
 800ad7e:	0d6d      	lsrs	r5, r5, #21
 800ad80:	d124      	bne.n	800adcc <__d2b+0x64>
 800ad82:	9301      	str	r3, [sp, #4]
 800ad84:	2c00      	cmp	r4, #0
 800ad86:	d027      	beq.n	800add8 <__d2b+0x70>
 800ad88:	4668      	mov	r0, sp
 800ad8a:	9400      	str	r4, [sp, #0]
 800ad8c:	f7ff fe02 	bl	800a994 <__lo0bits>
 800ad90:	9c00      	ldr	r4, [sp, #0]
 800ad92:	2800      	cmp	r0, #0
 800ad94:	d01e      	beq.n	800add4 <__d2b+0x6c>
 800ad96:	9b01      	ldr	r3, [sp, #4]
 800ad98:	2120      	movs	r1, #32
 800ad9a:	001a      	movs	r2, r3
 800ad9c:	1a09      	subs	r1, r1, r0
 800ad9e:	408a      	lsls	r2, r1
 800ada0:	40c3      	lsrs	r3, r0
 800ada2:	4322      	orrs	r2, r4
 800ada4:	6172      	str	r2, [r6, #20]
 800ada6:	9301      	str	r3, [sp, #4]
 800ada8:	9c01      	ldr	r4, [sp, #4]
 800adaa:	61b4      	str	r4, [r6, #24]
 800adac:	1e63      	subs	r3, r4, #1
 800adae:	419c      	sbcs	r4, r3
 800adb0:	3401      	adds	r4, #1
 800adb2:	6134      	str	r4, [r6, #16]
 800adb4:	2d00      	cmp	r5, #0
 800adb6:	d018      	beq.n	800adea <__d2b+0x82>
 800adb8:	4b12      	ldr	r3, [pc, #72]	; (800ae04 <__d2b+0x9c>)
 800adba:	18ed      	adds	r5, r5, r3
 800adbc:	2335      	movs	r3, #53	; 0x35
 800adbe:	182d      	adds	r5, r5, r0
 800adc0:	603d      	str	r5, [r7, #0]
 800adc2:	1a18      	subs	r0, r3, r0
 800adc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adc6:	6018      	str	r0, [r3, #0]
 800adc8:	0030      	movs	r0, r6
 800adca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800adcc:	2280      	movs	r2, #128	; 0x80
 800adce:	0352      	lsls	r2, r2, #13
 800add0:	4313      	orrs	r3, r2
 800add2:	e7d6      	b.n	800ad82 <__d2b+0x1a>
 800add4:	6174      	str	r4, [r6, #20]
 800add6:	e7e7      	b.n	800ada8 <__d2b+0x40>
 800add8:	a801      	add	r0, sp, #4
 800adda:	f7ff fddb 	bl	800a994 <__lo0bits>
 800adde:	2401      	movs	r4, #1
 800ade0:	9b01      	ldr	r3, [sp, #4]
 800ade2:	6134      	str	r4, [r6, #16]
 800ade4:	6173      	str	r3, [r6, #20]
 800ade6:	3020      	adds	r0, #32
 800ade8:	e7e4      	b.n	800adb4 <__d2b+0x4c>
 800adea:	4b07      	ldr	r3, [pc, #28]	; (800ae08 <__d2b+0xa0>)
 800adec:	18c0      	adds	r0, r0, r3
 800adee:	4b07      	ldr	r3, [pc, #28]	; (800ae0c <__d2b+0xa4>)
 800adf0:	6038      	str	r0, [r7, #0]
 800adf2:	18e3      	adds	r3, r4, r3
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	18f3      	adds	r3, r6, r3
 800adf8:	6958      	ldr	r0, [r3, #20]
 800adfa:	f7ff fdb1 	bl	800a960 <__hi0bits>
 800adfe:	0164      	lsls	r4, r4, #5
 800ae00:	1a20      	subs	r0, r4, r0
 800ae02:	e7df      	b.n	800adc4 <__d2b+0x5c>
 800ae04:	fffffbcd 	.word	0xfffffbcd
 800ae08:	fffffbce 	.word	0xfffffbce
 800ae0c:	3fffffff 	.word	0x3fffffff

0800ae10 <_calloc_r>:
 800ae10:	434a      	muls	r2, r1
 800ae12:	b570      	push	{r4, r5, r6, lr}
 800ae14:	0011      	movs	r1, r2
 800ae16:	0014      	movs	r4, r2
 800ae18:	f000 f852 	bl	800aec0 <_malloc_r>
 800ae1c:	1e05      	subs	r5, r0, #0
 800ae1e:	d003      	beq.n	800ae28 <_calloc_r+0x18>
 800ae20:	0022      	movs	r2, r4
 800ae22:	2100      	movs	r1, #0
 800ae24:	f7fe f9a1 	bl	800916a <memset>
 800ae28:	0028      	movs	r0, r5
 800ae2a:	bd70      	pop	{r4, r5, r6, pc}

0800ae2c <_free_r>:
 800ae2c:	b570      	push	{r4, r5, r6, lr}
 800ae2e:	0005      	movs	r5, r0
 800ae30:	2900      	cmp	r1, #0
 800ae32:	d010      	beq.n	800ae56 <_free_r+0x2a>
 800ae34:	1f0c      	subs	r4, r1, #4
 800ae36:	6823      	ldr	r3, [r4, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	da00      	bge.n	800ae3e <_free_r+0x12>
 800ae3c:	18e4      	adds	r4, r4, r3
 800ae3e:	0028      	movs	r0, r5
 800ae40:	f000 fa33 	bl	800b2aa <__malloc_lock>
 800ae44:	4a1d      	ldr	r2, [pc, #116]	; (800aebc <_free_r+0x90>)
 800ae46:	6813      	ldr	r3, [r2, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d105      	bne.n	800ae58 <_free_r+0x2c>
 800ae4c:	6063      	str	r3, [r4, #4]
 800ae4e:	6014      	str	r4, [r2, #0]
 800ae50:	0028      	movs	r0, r5
 800ae52:	f000 fa2b 	bl	800b2ac <__malloc_unlock>
 800ae56:	bd70      	pop	{r4, r5, r6, pc}
 800ae58:	42a3      	cmp	r3, r4
 800ae5a:	d909      	bls.n	800ae70 <_free_r+0x44>
 800ae5c:	6821      	ldr	r1, [r4, #0]
 800ae5e:	1860      	adds	r0, r4, r1
 800ae60:	4283      	cmp	r3, r0
 800ae62:	d1f3      	bne.n	800ae4c <_free_r+0x20>
 800ae64:	6818      	ldr	r0, [r3, #0]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	1841      	adds	r1, r0, r1
 800ae6a:	6021      	str	r1, [r4, #0]
 800ae6c:	e7ee      	b.n	800ae4c <_free_r+0x20>
 800ae6e:	0013      	movs	r3, r2
 800ae70:	685a      	ldr	r2, [r3, #4]
 800ae72:	2a00      	cmp	r2, #0
 800ae74:	d001      	beq.n	800ae7a <_free_r+0x4e>
 800ae76:	42a2      	cmp	r2, r4
 800ae78:	d9f9      	bls.n	800ae6e <_free_r+0x42>
 800ae7a:	6819      	ldr	r1, [r3, #0]
 800ae7c:	1858      	adds	r0, r3, r1
 800ae7e:	42a0      	cmp	r0, r4
 800ae80:	d10b      	bne.n	800ae9a <_free_r+0x6e>
 800ae82:	6820      	ldr	r0, [r4, #0]
 800ae84:	1809      	adds	r1, r1, r0
 800ae86:	1858      	adds	r0, r3, r1
 800ae88:	6019      	str	r1, [r3, #0]
 800ae8a:	4282      	cmp	r2, r0
 800ae8c:	d1e0      	bne.n	800ae50 <_free_r+0x24>
 800ae8e:	6810      	ldr	r0, [r2, #0]
 800ae90:	6852      	ldr	r2, [r2, #4]
 800ae92:	1841      	adds	r1, r0, r1
 800ae94:	6019      	str	r1, [r3, #0]
 800ae96:	605a      	str	r2, [r3, #4]
 800ae98:	e7da      	b.n	800ae50 <_free_r+0x24>
 800ae9a:	42a0      	cmp	r0, r4
 800ae9c:	d902      	bls.n	800aea4 <_free_r+0x78>
 800ae9e:	230c      	movs	r3, #12
 800aea0:	602b      	str	r3, [r5, #0]
 800aea2:	e7d5      	b.n	800ae50 <_free_r+0x24>
 800aea4:	6821      	ldr	r1, [r4, #0]
 800aea6:	1860      	adds	r0, r4, r1
 800aea8:	4282      	cmp	r2, r0
 800aeaa:	d103      	bne.n	800aeb4 <_free_r+0x88>
 800aeac:	6810      	ldr	r0, [r2, #0]
 800aeae:	6852      	ldr	r2, [r2, #4]
 800aeb0:	1841      	adds	r1, r0, r1
 800aeb2:	6021      	str	r1, [r4, #0]
 800aeb4:	6062      	str	r2, [r4, #4]
 800aeb6:	605c      	str	r4, [r3, #4]
 800aeb8:	e7ca      	b.n	800ae50 <_free_r+0x24>
 800aeba:	46c0      	nop			; (mov r8, r8)
 800aebc:	200012ec 	.word	0x200012ec

0800aec0 <_malloc_r>:
 800aec0:	2303      	movs	r3, #3
 800aec2:	b570      	push	{r4, r5, r6, lr}
 800aec4:	1ccd      	adds	r5, r1, #3
 800aec6:	439d      	bics	r5, r3
 800aec8:	3508      	adds	r5, #8
 800aeca:	0006      	movs	r6, r0
 800aecc:	2d0c      	cmp	r5, #12
 800aece:	d21e      	bcs.n	800af0e <_malloc_r+0x4e>
 800aed0:	250c      	movs	r5, #12
 800aed2:	42a9      	cmp	r1, r5
 800aed4:	d81d      	bhi.n	800af12 <_malloc_r+0x52>
 800aed6:	0030      	movs	r0, r6
 800aed8:	f000 f9e7 	bl	800b2aa <__malloc_lock>
 800aedc:	4a25      	ldr	r2, [pc, #148]	; (800af74 <_malloc_r+0xb4>)
 800aede:	6814      	ldr	r4, [r2, #0]
 800aee0:	0021      	movs	r1, r4
 800aee2:	2900      	cmp	r1, #0
 800aee4:	d119      	bne.n	800af1a <_malloc_r+0x5a>
 800aee6:	4c24      	ldr	r4, [pc, #144]	; (800af78 <_malloc_r+0xb8>)
 800aee8:	6823      	ldr	r3, [r4, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d103      	bne.n	800aef6 <_malloc_r+0x36>
 800aeee:	0030      	movs	r0, r6
 800aef0:	f000 f9a4 	bl	800b23c <_sbrk_r>
 800aef4:	6020      	str	r0, [r4, #0]
 800aef6:	0029      	movs	r1, r5
 800aef8:	0030      	movs	r0, r6
 800aefa:	f000 f99f 	bl	800b23c <_sbrk_r>
 800aefe:	1c43      	adds	r3, r0, #1
 800af00:	d12b      	bne.n	800af5a <_malloc_r+0x9a>
 800af02:	230c      	movs	r3, #12
 800af04:	0030      	movs	r0, r6
 800af06:	6033      	str	r3, [r6, #0]
 800af08:	f000 f9d0 	bl	800b2ac <__malloc_unlock>
 800af0c:	e003      	b.n	800af16 <_malloc_r+0x56>
 800af0e:	2d00      	cmp	r5, #0
 800af10:	dadf      	bge.n	800aed2 <_malloc_r+0x12>
 800af12:	230c      	movs	r3, #12
 800af14:	6033      	str	r3, [r6, #0]
 800af16:	2000      	movs	r0, #0
 800af18:	bd70      	pop	{r4, r5, r6, pc}
 800af1a:	680b      	ldr	r3, [r1, #0]
 800af1c:	1b5b      	subs	r3, r3, r5
 800af1e:	d419      	bmi.n	800af54 <_malloc_r+0x94>
 800af20:	2b0b      	cmp	r3, #11
 800af22:	d903      	bls.n	800af2c <_malloc_r+0x6c>
 800af24:	600b      	str	r3, [r1, #0]
 800af26:	18cc      	adds	r4, r1, r3
 800af28:	6025      	str	r5, [r4, #0]
 800af2a:	e003      	b.n	800af34 <_malloc_r+0x74>
 800af2c:	684b      	ldr	r3, [r1, #4]
 800af2e:	428c      	cmp	r4, r1
 800af30:	d10d      	bne.n	800af4e <_malloc_r+0x8e>
 800af32:	6013      	str	r3, [r2, #0]
 800af34:	0030      	movs	r0, r6
 800af36:	f000 f9b9 	bl	800b2ac <__malloc_unlock>
 800af3a:	0020      	movs	r0, r4
 800af3c:	2207      	movs	r2, #7
 800af3e:	300b      	adds	r0, #11
 800af40:	1d23      	adds	r3, r4, #4
 800af42:	4390      	bics	r0, r2
 800af44:	1ac3      	subs	r3, r0, r3
 800af46:	d0e7      	beq.n	800af18 <_malloc_r+0x58>
 800af48:	425a      	negs	r2, r3
 800af4a:	50e2      	str	r2, [r4, r3]
 800af4c:	e7e4      	b.n	800af18 <_malloc_r+0x58>
 800af4e:	6063      	str	r3, [r4, #4]
 800af50:	000c      	movs	r4, r1
 800af52:	e7ef      	b.n	800af34 <_malloc_r+0x74>
 800af54:	000c      	movs	r4, r1
 800af56:	6849      	ldr	r1, [r1, #4]
 800af58:	e7c3      	b.n	800aee2 <_malloc_r+0x22>
 800af5a:	2303      	movs	r3, #3
 800af5c:	1cc4      	adds	r4, r0, #3
 800af5e:	439c      	bics	r4, r3
 800af60:	42a0      	cmp	r0, r4
 800af62:	d0e1      	beq.n	800af28 <_malloc_r+0x68>
 800af64:	1a21      	subs	r1, r4, r0
 800af66:	0030      	movs	r0, r6
 800af68:	f000 f968 	bl	800b23c <_sbrk_r>
 800af6c:	1c43      	adds	r3, r0, #1
 800af6e:	d1db      	bne.n	800af28 <_malloc_r+0x68>
 800af70:	e7c7      	b.n	800af02 <_malloc_r+0x42>
 800af72:	46c0      	nop			; (mov r8, r8)
 800af74:	200012ec 	.word	0x200012ec
 800af78:	200012f0 	.word	0x200012f0

0800af7c <__ssputs_r>:
 800af7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af7e:	688e      	ldr	r6, [r1, #8]
 800af80:	b085      	sub	sp, #20
 800af82:	0007      	movs	r7, r0
 800af84:	000c      	movs	r4, r1
 800af86:	9203      	str	r2, [sp, #12]
 800af88:	9301      	str	r3, [sp, #4]
 800af8a:	429e      	cmp	r6, r3
 800af8c:	d83c      	bhi.n	800b008 <__ssputs_r+0x8c>
 800af8e:	2390      	movs	r3, #144	; 0x90
 800af90:	898a      	ldrh	r2, [r1, #12]
 800af92:	00db      	lsls	r3, r3, #3
 800af94:	421a      	tst	r2, r3
 800af96:	d034      	beq.n	800b002 <__ssputs_r+0x86>
 800af98:	2503      	movs	r5, #3
 800af9a:	6909      	ldr	r1, [r1, #16]
 800af9c:	6823      	ldr	r3, [r4, #0]
 800af9e:	1a5b      	subs	r3, r3, r1
 800afa0:	9302      	str	r3, [sp, #8]
 800afa2:	6963      	ldr	r3, [r4, #20]
 800afa4:	9802      	ldr	r0, [sp, #8]
 800afa6:	435d      	muls	r5, r3
 800afa8:	0feb      	lsrs	r3, r5, #31
 800afaa:	195d      	adds	r5, r3, r5
 800afac:	9b01      	ldr	r3, [sp, #4]
 800afae:	106d      	asrs	r5, r5, #1
 800afb0:	3301      	adds	r3, #1
 800afb2:	181b      	adds	r3, r3, r0
 800afb4:	42ab      	cmp	r3, r5
 800afb6:	d900      	bls.n	800afba <__ssputs_r+0x3e>
 800afb8:	001d      	movs	r5, r3
 800afba:	0553      	lsls	r3, r2, #21
 800afbc:	d532      	bpl.n	800b024 <__ssputs_r+0xa8>
 800afbe:	0029      	movs	r1, r5
 800afc0:	0038      	movs	r0, r7
 800afc2:	f7ff ff7d 	bl	800aec0 <_malloc_r>
 800afc6:	1e06      	subs	r6, r0, #0
 800afc8:	d109      	bne.n	800afde <__ssputs_r+0x62>
 800afca:	230c      	movs	r3, #12
 800afcc:	603b      	str	r3, [r7, #0]
 800afce:	2340      	movs	r3, #64	; 0x40
 800afd0:	2001      	movs	r0, #1
 800afd2:	89a2      	ldrh	r2, [r4, #12]
 800afd4:	4240      	negs	r0, r0
 800afd6:	4313      	orrs	r3, r2
 800afd8:	81a3      	strh	r3, [r4, #12]
 800afda:	b005      	add	sp, #20
 800afdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afde:	9a02      	ldr	r2, [sp, #8]
 800afe0:	6921      	ldr	r1, [r4, #16]
 800afe2:	f7fe f8b9 	bl	8009158 <memcpy>
 800afe6:	89a3      	ldrh	r3, [r4, #12]
 800afe8:	4a14      	ldr	r2, [pc, #80]	; (800b03c <__ssputs_r+0xc0>)
 800afea:	401a      	ands	r2, r3
 800afec:	2380      	movs	r3, #128	; 0x80
 800afee:	4313      	orrs	r3, r2
 800aff0:	81a3      	strh	r3, [r4, #12]
 800aff2:	9b02      	ldr	r3, [sp, #8]
 800aff4:	6126      	str	r6, [r4, #16]
 800aff6:	18f6      	adds	r6, r6, r3
 800aff8:	6026      	str	r6, [r4, #0]
 800affa:	6165      	str	r5, [r4, #20]
 800affc:	9e01      	ldr	r6, [sp, #4]
 800affe:	1aed      	subs	r5, r5, r3
 800b000:	60a5      	str	r5, [r4, #8]
 800b002:	9b01      	ldr	r3, [sp, #4]
 800b004:	429e      	cmp	r6, r3
 800b006:	d900      	bls.n	800b00a <__ssputs_r+0x8e>
 800b008:	9e01      	ldr	r6, [sp, #4]
 800b00a:	0032      	movs	r2, r6
 800b00c:	9903      	ldr	r1, [sp, #12]
 800b00e:	6820      	ldr	r0, [r4, #0]
 800b010:	f000 f938 	bl	800b284 <memmove>
 800b014:	68a3      	ldr	r3, [r4, #8]
 800b016:	2000      	movs	r0, #0
 800b018:	1b9b      	subs	r3, r3, r6
 800b01a:	60a3      	str	r3, [r4, #8]
 800b01c:	6823      	ldr	r3, [r4, #0]
 800b01e:	199e      	adds	r6, r3, r6
 800b020:	6026      	str	r6, [r4, #0]
 800b022:	e7da      	b.n	800afda <__ssputs_r+0x5e>
 800b024:	002a      	movs	r2, r5
 800b026:	0038      	movs	r0, r7
 800b028:	f000 f941 	bl	800b2ae <_realloc_r>
 800b02c:	1e06      	subs	r6, r0, #0
 800b02e:	d1e0      	bne.n	800aff2 <__ssputs_r+0x76>
 800b030:	6921      	ldr	r1, [r4, #16]
 800b032:	0038      	movs	r0, r7
 800b034:	f7ff fefa 	bl	800ae2c <_free_r>
 800b038:	e7c7      	b.n	800afca <__ssputs_r+0x4e>
 800b03a:	46c0      	nop			; (mov r8, r8)
 800b03c:	fffffb7f 	.word	0xfffffb7f

0800b040 <_svfiprintf_r>:
 800b040:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b042:	b0a1      	sub	sp, #132	; 0x84
 800b044:	9003      	str	r0, [sp, #12]
 800b046:	001d      	movs	r5, r3
 800b048:	898b      	ldrh	r3, [r1, #12]
 800b04a:	000f      	movs	r7, r1
 800b04c:	0016      	movs	r6, r2
 800b04e:	061b      	lsls	r3, r3, #24
 800b050:	d511      	bpl.n	800b076 <_svfiprintf_r+0x36>
 800b052:	690b      	ldr	r3, [r1, #16]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10e      	bne.n	800b076 <_svfiprintf_r+0x36>
 800b058:	2140      	movs	r1, #64	; 0x40
 800b05a:	f7ff ff31 	bl	800aec0 <_malloc_r>
 800b05e:	6038      	str	r0, [r7, #0]
 800b060:	6138      	str	r0, [r7, #16]
 800b062:	2800      	cmp	r0, #0
 800b064:	d105      	bne.n	800b072 <_svfiprintf_r+0x32>
 800b066:	230c      	movs	r3, #12
 800b068:	9a03      	ldr	r2, [sp, #12]
 800b06a:	3801      	subs	r0, #1
 800b06c:	6013      	str	r3, [r2, #0]
 800b06e:	b021      	add	sp, #132	; 0x84
 800b070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b072:	2340      	movs	r3, #64	; 0x40
 800b074:	617b      	str	r3, [r7, #20]
 800b076:	2300      	movs	r3, #0
 800b078:	ac08      	add	r4, sp, #32
 800b07a:	6163      	str	r3, [r4, #20]
 800b07c:	3320      	adds	r3, #32
 800b07e:	7663      	strb	r3, [r4, #25]
 800b080:	3310      	adds	r3, #16
 800b082:	76a3      	strb	r3, [r4, #26]
 800b084:	9507      	str	r5, [sp, #28]
 800b086:	0035      	movs	r5, r6
 800b088:	782b      	ldrb	r3, [r5, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d001      	beq.n	800b092 <_svfiprintf_r+0x52>
 800b08e:	2b25      	cmp	r3, #37	; 0x25
 800b090:	d146      	bne.n	800b120 <_svfiprintf_r+0xe0>
 800b092:	1bab      	subs	r3, r5, r6
 800b094:	9305      	str	r3, [sp, #20]
 800b096:	d00c      	beq.n	800b0b2 <_svfiprintf_r+0x72>
 800b098:	0032      	movs	r2, r6
 800b09a:	0039      	movs	r1, r7
 800b09c:	9803      	ldr	r0, [sp, #12]
 800b09e:	f7ff ff6d 	bl	800af7c <__ssputs_r>
 800b0a2:	1c43      	adds	r3, r0, #1
 800b0a4:	d100      	bne.n	800b0a8 <_svfiprintf_r+0x68>
 800b0a6:	e0ae      	b.n	800b206 <_svfiprintf_r+0x1c6>
 800b0a8:	6962      	ldr	r2, [r4, #20]
 800b0aa:	9b05      	ldr	r3, [sp, #20]
 800b0ac:	4694      	mov	ip, r2
 800b0ae:	4463      	add	r3, ip
 800b0b0:	6163      	str	r3, [r4, #20]
 800b0b2:	782b      	ldrb	r3, [r5, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d100      	bne.n	800b0ba <_svfiprintf_r+0x7a>
 800b0b8:	e0a5      	b.n	800b206 <_svfiprintf_r+0x1c6>
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	2300      	movs	r3, #0
 800b0be:	4252      	negs	r2, r2
 800b0c0:	6062      	str	r2, [r4, #4]
 800b0c2:	a904      	add	r1, sp, #16
 800b0c4:	3254      	adds	r2, #84	; 0x54
 800b0c6:	1852      	adds	r2, r2, r1
 800b0c8:	1c6e      	adds	r6, r5, #1
 800b0ca:	6023      	str	r3, [r4, #0]
 800b0cc:	60e3      	str	r3, [r4, #12]
 800b0ce:	60a3      	str	r3, [r4, #8]
 800b0d0:	7013      	strb	r3, [r2, #0]
 800b0d2:	65a3      	str	r3, [r4, #88]	; 0x58
 800b0d4:	7831      	ldrb	r1, [r6, #0]
 800b0d6:	2205      	movs	r2, #5
 800b0d8:	4853      	ldr	r0, [pc, #332]	; (800b228 <_svfiprintf_r+0x1e8>)
 800b0da:	f7ff fba7 	bl	800a82c <memchr>
 800b0de:	1c75      	adds	r5, r6, #1
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	d11f      	bne.n	800b124 <_svfiprintf_r+0xe4>
 800b0e4:	6822      	ldr	r2, [r4, #0]
 800b0e6:	06d3      	lsls	r3, r2, #27
 800b0e8:	d504      	bpl.n	800b0f4 <_svfiprintf_r+0xb4>
 800b0ea:	2353      	movs	r3, #83	; 0x53
 800b0ec:	a904      	add	r1, sp, #16
 800b0ee:	185b      	adds	r3, r3, r1
 800b0f0:	2120      	movs	r1, #32
 800b0f2:	7019      	strb	r1, [r3, #0]
 800b0f4:	0713      	lsls	r3, r2, #28
 800b0f6:	d504      	bpl.n	800b102 <_svfiprintf_r+0xc2>
 800b0f8:	2353      	movs	r3, #83	; 0x53
 800b0fa:	a904      	add	r1, sp, #16
 800b0fc:	185b      	adds	r3, r3, r1
 800b0fe:	212b      	movs	r1, #43	; 0x2b
 800b100:	7019      	strb	r1, [r3, #0]
 800b102:	7833      	ldrb	r3, [r6, #0]
 800b104:	2b2a      	cmp	r3, #42	; 0x2a
 800b106:	d016      	beq.n	800b136 <_svfiprintf_r+0xf6>
 800b108:	0035      	movs	r5, r6
 800b10a:	2100      	movs	r1, #0
 800b10c:	200a      	movs	r0, #10
 800b10e:	68e3      	ldr	r3, [r4, #12]
 800b110:	782a      	ldrb	r2, [r5, #0]
 800b112:	1c6e      	adds	r6, r5, #1
 800b114:	3a30      	subs	r2, #48	; 0x30
 800b116:	2a09      	cmp	r2, #9
 800b118:	d94e      	bls.n	800b1b8 <_svfiprintf_r+0x178>
 800b11a:	2900      	cmp	r1, #0
 800b11c:	d018      	beq.n	800b150 <_svfiprintf_r+0x110>
 800b11e:	e010      	b.n	800b142 <_svfiprintf_r+0x102>
 800b120:	3501      	adds	r5, #1
 800b122:	e7b1      	b.n	800b088 <_svfiprintf_r+0x48>
 800b124:	4b40      	ldr	r3, [pc, #256]	; (800b228 <_svfiprintf_r+0x1e8>)
 800b126:	6822      	ldr	r2, [r4, #0]
 800b128:	1ac0      	subs	r0, r0, r3
 800b12a:	2301      	movs	r3, #1
 800b12c:	4083      	lsls	r3, r0
 800b12e:	4313      	orrs	r3, r2
 800b130:	6023      	str	r3, [r4, #0]
 800b132:	002e      	movs	r6, r5
 800b134:	e7ce      	b.n	800b0d4 <_svfiprintf_r+0x94>
 800b136:	9b07      	ldr	r3, [sp, #28]
 800b138:	1d19      	adds	r1, r3, #4
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	9107      	str	r1, [sp, #28]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	db01      	blt.n	800b146 <_svfiprintf_r+0x106>
 800b142:	930b      	str	r3, [sp, #44]	; 0x2c
 800b144:	e004      	b.n	800b150 <_svfiprintf_r+0x110>
 800b146:	425b      	negs	r3, r3
 800b148:	60e3      	str	r3, [r4, #12]
 800b14a:	2302      	movs	r3, #2
 800b14c:	4313      	orrs	r3, r2
 800b14e:	6023      	str	r3, [r4, #0]
 800b150:	782b      	ldrb	r3, [r5, #0]
 800b152:	2b2e      	cmp	r3, #46	; 0x2e
 800b154:	d10a      	bne.n	800b16c <_svfiprintf_r+0x12c>
 800b156:	786b      	ldrb	r3, [r5, #1]
 800b158:	2b2a      	cmp	r3, #42	; 0x2a
 800b15a:	d135      	bne.n	800b1c8 <_svfiprintf_r+0x188>
 800b15c:	9b07      	ldr	r3, [sp, #28]
 800b15e:	3502      	adds	r5, #2
 800b160:	1d1a      	adds	r2, r3, #4
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	9207      	str	r2, [sp, #28]
 800b166:	2b00      	cmp	r3, #0
 800b168:	db2b      	blt.n	800b1c2 <_svfiprintf_r+0x182>
 800b16a:	9309      	str	r3, [sp, #36]	; 0x24
 800b16c:	4e2f      	ldr	r6, [pc, #188]	; (800b22c <_svfiprintf_r+0x1ec>)
 800b16e:	7829      	ldrb	r1, [r5, #0]
 800b170:	2203      	movs	r2, #3
 800b172:	0030      	movs	r0, r6
 800b174:	f7ff fb5a 	bl	800a82c <memchr>
 800b178:	2800      	cmp	r0, #0
 800b17a:	d006      	beq.n	800b18a <_svfiprintf_r+0x14a>
 800b17c:	2340      	movs	r3, #64	; 0x40
 800b17e:	1b80      	subs	r0, r0, r6
 800b180:	4083      	lsls	r3, r0
 800b182:	6822      	ldr	r2, [r4, #0]
 800b184:	3501      	adds	r5, #1
 800b186:	4313      	orrs	r3, r2
 800b188:	6023      	str	r3, [r4, #0]
 800b18a:	7829      	ldrb	r1, [r5, #0]
 800b18c:	2206      	movs	r2, #6
 800b18e:	4828      	ldr	r0, [pc, #160]	; (800b230 <_svfiprintf_r+0x1f0>)
 800b190:	1c6e      	adds	r6, r5, #1
 800b192:	7621      	strb	r1, [r4, #24]
 800b194:	f7ff fb4a 	bl	800a82c <memchr>
 800b198:	2800      	cmp	r0, #0
 800b19a:	d03c      	beq.n	800b216 <_svfiprintf_r+0x1d6>
 800b19c:	4b25      	ldr	r3, [pc, #148]	; (800b234 <_svfiprintf_r+0x1f4>)
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d125      	bne.n	800b1ee <_svfiprintf_r+0x1ae>
 800b1a2:	2207      	movs	r2, #7
 800b1a4:	9b07      	ldr	r3, [sp, #28]
 800b1a6:	3307      	adds	r3, #7
 800b1a8:	4393      	bics	r3, r2
 800b1aa:	3308      	adds	r3, #8
 800b1ac:	9307      	str	r3, [sp, #28]
 800b1ae:	6963      	ldr	r3, [r4, #20]
 800b1b0:	9a04      	ldr	r2, [sp, #16]
 800b1b2:	189b      	adds	r3, r3, r2
 800b1b4:	6163      	str	r3, [r4, #20]
 800b1b6:	e766      	b.n	800b086 <_svfiprintf_r+0x46>
 800b1b8:	4343      	muls	r3, r0
 800b1ba:	2101      	movs	r1, #1
 800b1bc:	189b      	adds	r3, r3, r2
 800b1be:	0035      	movs	r5, r6
 800b1c0:	e7a6      	b.n	800b110 <_svfiprintf_r+0xd0>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	425b      	negs	r3, r3
 800b1c6:	e7d0      	b.n	800b16a <_svfiprintf_r+0x12a>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	200a      	movs	r0, #10
 800b1cc:	001a      	movs	r2, r3
 800b1ce:	3501      	adds	r5, #1
 800b1d0:	6063      	str	r3, [r4, #4]
 800b1d2:	7829      	ldrb	r1, [r5, #0]
 800b1d4:	1c6e      	adds	r6, r5, #1
 800b1d6:	3930      	subs	r1, #48	; 0x30
 800b1d8:	2909      	cmp	r1, #9
 800b1da:	d903      	bls.n	800b1e4 <_svfiprintf_r+0x1a4>
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d0c5      	beq.n	800b16c <_svfiprintf_r+0x12c>
 800b1e0:	9209      	str	r2, [sp, #36]	; 0x24
 800b1e2:	e7c3      	b.n	800b16c <_svfiprintf_r+0x12c>
 800b1e4:	4342      	muls	r2, r0
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	1852      	adds	r2, r2, r1
 800b1ea:	0035      	movs	r5, r6
 800b1ec:	e7f1      	b.n	800b1d2 <_svfiprintf_r+0x192>
 800b1ee:	ab07      	add	r3, sp, #28
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	003a      	movs	r2, r7
 800b1f4:	4b10      	ldr	r3, [pc, #64]	; (800b238 <_svfiprintf_r+0x1f8>)
 800b1f6:	0021      	movs	r1, r4
 800b1f8:	9803      	ldr	r0, [sp, #12]
 800b1fa:	f7fe f85b 	bl	80092b4 <_printf_float>
 800b1fe:	9004      	str	r0, [sp, #16]
 800b200:	9b04      	ldr	r3, [sp, #16]
 800b202:	3301      	adds	r3, #1
 800b204:	d1d3      	bne.n	800b1ae <_svfiprintf_r+0x16e>
 800b206:	89bb      	ldrh	r3, [r7, #12]
 800b208:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b20a:	065b      	lsls	r3, r3, #25
 800b20c:	d400      	bmi.n	800b210 <_svfiprintf_r+0x1d0>
 800b20e:	e72e      	b.n	800b06e <_svfiprintf_r+0x2e>
 800b210:	2001      	movs	r0, #1
 800b212:	4240      	negs	r0, r0
 800b214:	e72b      	b.n	800b06e <_svfiprintf_r+0x2e>
 800b216:	ab07      	add	r3, sp, #28
 800b218:	9300      	str	r3, [sp, #0]
 800b21a:	003a      	movs	r2, r7
 800b21c:	4b06      	ldr	r3, [pc, #24]	; (800b238 <_svfiprintf_r+0x1f8>)
 800b21e:	0021      	movs	r1, r4
 800b220:	9803      	ldr	r0, [sp, #12]
 800b222:	f7fe fb01 	bl	8009828 <_printf_i>
 800b226:	e7ea      	b.n	800b1fe <_svfiprintf_r+0x1be>
 800b228:	0800b8dc 	.word	0x0800b8dc
 800b22c:	0800b8e2 	.word	0x0800b8e2
 800b230:	0800b8e6 	.word	0x0800b8e6
 800b234:	080092b5 	.word	0x080092b5
 800b238:	0800af7d 	.word	0x0800af7d

0800b23c <_sbrk_r>:
 800b23c:	2300      	movs	r3, #0
 800b23e:	b570      	push	{r4, r5, r6, lr}
 800b240:	4c06      	ldr	r4, [pc, #24]	; (800b25c <_sbrk_r+0x20>)
 800b242:	0005      	movs	r5, r0
 800b244:	0008      	movs	r0, r1
 800b246:	6023      	str	r3, [r4, #0]
 800b248:	f7f8 ff18 	bl	800407c <_sbrk>
 800b24c:	1c43      	adds	r3, r0, #1
 800b24e:	d103      	bne.n	800b258 <_sbrk_r+0x1c>
 800b250:	6823      	ldr	r3, [r4, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d000      	beq.n	800b258 <_sbrk_r+0x1c>
 800b256:	602b      	str	r3, [r5, #0]
 800b258:	bd70      	pop	{r4, r5, r6, pc}
 800b25a:	46c0      	nop			; (mov r8, r8)
 800b25c:	200018d8 	.word	0x200018d8

0800b260 <__ascii_mbtowc>:
 800b260:	b082      	sub	sp, #8
 800b262:	2900      	cmp	r1, #0
 800b264:	d100      	bne.n	800b268 <__ascii_mbtowc+0x8>
 800b266:	a901      	add	r1, sp, #4
 800b268:	1e10      	subs	r0, r2, #0
 800b26a:	d006      	beq.n	800b27a <__ascii_mbtowc+0x1a>
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d006      	beq.n	800b27e <__ascii_mbtowc+0x1e>
 800b270:	7813      	ldrb	r3, [r2, #0]
 800b272:	600b      	str	r3, [r1, #0]
 800b274:	7810      	ldrb	r0, [r2, #0]
 800b276:	1e43      	subs	r3, r0, #1
 800b278:	4198      	sbcs	r0, r3
 800b27a:	b002      	add	sp, #8
 800b27c:	4770      	bx	lr
 800b27e:	2002      	movs	r0, #2
 800b280:	4240      	negs	r0, r0
 800b282:	e7fa      	b.n	800b27a <__ascii_mbtowc+0x1a>

0800b284 <memmove>:
 800b284:	b510      	push	{r4, lr}
 800b286:	4288      	cmp	r0, r1
 800b288:	d902      	bls.n	800b290 <memmove+0xc>
 800b28a:	188b      	adds	r3, r1, r2
 800b28c:	4298      	cmp	r0, r3
 800b28e:	d303      	bcc.n	800b298 <memmove+0x14>
 800b290:	2300      	movs	r3, #0
 800b292:	e007      	b.n	800b2a4 <memmove+0x20>
 800b294:	5c8b      	ldrb	r3, [r1, r2]
 800b296:	5483      	strb	r3, [r0, r2]
 800b298:	3a01      	subs	r2, #1
 800b29a:	d2fb      	bcs.n	800b294 <memmove+0x10>
 800b29c:	bd10      	pop	{r4, pc}
 800b29e:	5ccc      	ldrb	r4, [r1, r3]
 800b2a0:	54c4      	strb	r4, [r0, r3]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d1fa      	bne.n	800b29e <memmove+0x1a>
 800b2a8:	e7f8      	b.n	800b29c <memmove+0x18>

0800b2aa <__malloc_lock>:
 800b2aa:	4770      	bx	lr

0800b2ac <__malloc_unlock>:
 800b2ac:	4770      	bx	lr

0800b2ae <_realloc_r>:
 800b2ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2b0:	0007      	movs	r7, r0
 800b2b2:	000d      	movs	r5, r1
 800b2b4:	0016      	movs	r6, r2
 800b2b6:	2900      	cmp	r1, #0
 800b2b8:	d105      	bne.n	800b2c6 <_realloc_r+0x18>
 800b2ba:	0011      	movs	r1, r2
 800b2bc:	f7ff fe00 	bl	800aec0 <_malloc_r>
 800b2c0:	0004      	movs	r4, r0
 800b2c2:	0020      	movs	r0, r4
 800b2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2c6:	2a00      	cmp	r2, #0
 800b2c8:	d103      	bne.n	800b2d2 <_realloc_r+0x24>
 800b2ca:	f7ff fdaf 	bl	800ae2c <_free_r>
 800b2ce:	0034      	movs	r4, r6
 800b2d0:	e7f7      	b.n	800b2c2 <_realloc_r+0x14>
 800b2d2:	f000 f81e 	bl	800b312 <_malloc_usable_size_r>
 800b2d6:	002c      	movs	r4, r5
 800b2d8:	42b0      	cmp	r0, r6
 800b2da:	d2f2      	bcs.n	800b2c2 <_realloc_r+0x14>
 800b2dc:	0031      	movs	r1, r6
 800b2de:	0038      	movs	r0, r7
 800b2e0:	f7ff fdee 	bl	800aec0 <_malloc_r>
 800b2e4:	1e04      	subs	r4, r0, #0
 800b2e6:	d0ec      	beq.n	800b2c2 <_realloc_r+0x14>
 800b2e8:	0029      	movs	r1, r5
 800b2ea:	0032      	movs	r2, r6
 800b2ec:	f7fd ff34 	bl	8009158 <memcpy>
 800b2f0:	0029      	movs	r1, r5
 800b2f2:	0038      	movs	r0, r7
 800b2f4:	f7ff fd9a 	bl	800ae2c <_free_r>
 800b2f8:	e7e3      	b.n	800b2c2 <_realloc_r+0x14>

0800b2fa <__ascii_wctomb>:
 800b2fa:	1e0b      	subs	r3, r1, #0
 800b2fc:	d004      	beq.n	800b308 <__ascii_wctomb+0xe>
 800b2fe:	2aff      	cmp	r2, #255	; 0xff
 800b300:	d904      	bls.n	800b30c <__ascii_wctomb+0x12>
 800b302:	238a      	movs	r3, #138	; 0x8a
 800b304:	6003      	str	r3, [r0, #0]
 800b306:	3b8b      	subs	r3, #139	; 0x8b
 800b308:	0018      	movs	r0, r3
 800b30a:	4770      	bx	lr
 800b30c:	700a      	strb	r2, [r1, #0]
 800b30e:	2301      	movs	r3, #1
 800b310:	e7fa      	b.n	800b308 <__ascii_wctomb+0xe>

0800b312 <_malloc_usable_size_r>:
 800b312:	1f0b      	subs	r3, r1, #4
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	1f18      	subs	r0, r3, #4
 800b318:	2b00      	cmp	r3, #0
 800b31a:	da01      	bge.n	800b320 <_malloc_usable_size_r+0xe>
 800b31c:	580b      	ldr	r3, [r1, r0]
 800b31e:	18c0      	adds	r0, r0, r3
 800b320:	4770      	bx	lr
	...

0800b324 <_init>:
 800b324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b326:	46c0      	nop			; (mov r8, r8)
 800b328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b32a:	bc08      	pop	{r3}
 800b32c:	469e      	mov	lr, r3
 800b32e:	4770      	bx	lr

0800b330 <_fini>:
 800b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b332:	46c0      	nop			; (mov r8, r8)
 800b334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b336:	bc08      	pop	{r3}
 800b338:	469e      	mov	lr, r3
 800b33a:	4770      	bx	lr
