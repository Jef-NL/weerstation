
Weerstation-Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008178  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08008238  08008238  00018238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008548  08008548  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008548  08008548  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008548  08008548  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008548  08008548  00018548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800854c  0800854c  0001854c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001280  200001dc  0800872c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000145c  0800872c  0002145c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016fa7  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033d4  00000000  00000000  000371ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001548  00000000  00000000  0003a580  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013a0  00000000  00000000  0003bac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010b29  00000000  00000000  0003ce68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001178d  00000000  00000000  0004d991  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005cd28  00000000  00000000  0005f11e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bbe46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005444  00000000  00000000  000bbec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008220 	.word	0x08008220

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08008220 	.word	0x08008220

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 fef1 	bl	8001210 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fe49 	bl	80010d0 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fee3 	bl	8001210 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fed9 	bl	8001210 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fe6b 	bl	8001148 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe61 	bl	8001148 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dadd>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	464f      	mov	r7, r9
 8000498:	4646      	mov	r6, r8
 800049a:	46d6      	mov	lr, sl
 800049c:	000c      	movs	r4, r1
 800049e:	0309      	lsls	r1, r1, #12
 80004a0:	b5c0      	push	{r6, r7, lr}
 80004a2:	0a49      	lsrs	r1, r1, #9
 80004a4:	0f47      	lsrs	r7, r0, #29
 80004a6:	005e      	lsls	r6, r3, #1
 80004a8:	4339      	orrs	r1, r7
 80004aa:	031f      	lsls	r7, r3, #12
 80004ac:	0fdb      	lsrs	r3, r3, #31
 80004ae:	469c      	mov	ip, r3
 80004b0:	0065      	lsls	r5, r4, #1
 80004b2:	0a7b      	lsrs	r3, r7, #9
 80004b4:	0f57      	lsrs	r7, r2, #29
 80004b6:	431f      	orrs	r7, r3
 80004b8:	0d6d      	lsrs	r5, r5, #21
 80004ba:	0fe4      	lsrs	r4, r4, #31
 80004bc:	0d76      	lsrs	r6, r6, #21
 80004be:	46a1      	mov	r9, r4
 80004c0:	00c0      	lsls	r0, r0, #3
 80004c2:	46b8      	mov	r8, r7
 80004c4:	00d2      	lsls	r2, r2, #3
 80004c6:	1bab      	subs	r3, r5, r6
 80004c8:	4564      	cmp	r4, ip
 80004ca:	d07b      	beq.n	80005c4 <__aeabi_dadd+0x130>
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	dd5f      	ble.n	8000590 <__aeabi_dadd+0xfc>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d000      	beq.n	80004d6 <__aeabi_dadd+0x42>
 80004d4:	e0a4      	b.n	8000620 <__aeabi_dadd+0x18c>
 80004d6:	003e      	movs	r6, r7
 80004d8:	4316      	orrs	r6, r2
 80004da:	d100      	bne.n	80004de <__aeabi_dadd+0x4a>
 80004dc:	e112      	b.n	8000704 <__aeabi_dadd+0x270>
 80004de:	1e5e      	subs	r6, r3, #1
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d000      	beq.n	80004e6 <__aeabi_dadd+0x52>
 80004e4:	e19e      	b.n	8000824 <__aeabi_dadd+0x390>
 80004e6:	1a87      	subs	r7, r0, r2
 80004e8:	4643      	mov	r3, r8
 80004ea:	42b8      	cmp	r0, r7
 80004ec:	4180      	sbcs	r0, r0
 80004ee:	2501      	movs	r5, #1
 80004f0:	1ac9      	subs	r1, r1, r3
 80004f2:	4240      	negs	r0, r0
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	020b      	lsls	r3, r1, #8
 80004f8:	d400      	bmi.n	80004fc <__aeabi_dadd+0x68>
 80004fa:	e131      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80004fc:	0249      	lsls	r1, r1, #9
 80004fe:	0a4e      	lsrs	r6, r1, #9
 8000500:	2e00      	cmp	r6, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x72>
 8000504:	e16e      	b.n	80007e4 <__aeabi_dadd+0x350>
 8000506:	0030      	movs	r0, r6
 8000508:	f001 fd62 	bl	8001fd0 <__clzsi2>
 800050c:	0003      	movs	r3, r0
 800050e:	3b08      	subs	r3, #8
 8000510:	2b1f      	cmp	r3, #31
 8000512:	dd00      	ble.n	8000516 <__aeabi_dadd+0x82>
 8000514:	e161      	b.n	80007da <__aeabi_dadd+0x346>
 8000516:	2220      	movs	r2, #32
 8000518:	0039      	movs	r1, r7
 800051a:	1ad2      	subs	r2, r2, r3
 800051c:	409e      	lsls	r6, r3
 800051e:	40d1      	lsrs	r1, r2
 8000520:	409f      	lsls	r7, r3
 8000522:	430e      	orrs	r6, r1
 8000524:	429d      	cmp	r5, r3
 8000526:	dd00      	ble.n	800052a <__aeabi_dadd+0x96>
 8000528:	e151      	b.n	80007ce <__aeabi_dadd+0x33a>
 800052a:	1b5d      	subs	r5, r3, r5
 800052c:	1c6b      	adds	r3, r5, #1
 800052e:	2b1f      	cmp	r3, #31
 8000530:	dd00      	ble.n	8000534 <__aeabi_dadd+0xa0>
 8000532:	e17c      	b.n	800082e <__aeabi_dadd+0x39a>
 8000534:	2120      	movs	r1, #32
 8000536:	1ac9      	subs	r1, r1, r3
 8000538:	003d      	movs	r5, r7
 800053a:	0030      	movs	r0, r6
 800053c:	408f      	lsls	r7, r1
 800053e:	4088      	lsls	r0, r1
 8000540:	40dd      	lsrs	r5, r3
 8000542:	1e79      	subs	r1, r7, #1
 8000544:	418f      	sbcs	r7, r1
 8000546:	0031      	movs	r1, r6
 8000548:	2207      	movs	r2, #7
 800054a:	4328      	orrs	r0, r5
 800054c:	40d9      	lsrs	r1, r3
 800054e:	2500      	movs	r5, #0
 8000550:	4307      	orrs	r7, r0
 8000552:	403a      	ands	r2, r7
 8000554:	2a00      	cmp	r2, #0
 8000556:	d009      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000558:	230f      	movs	r3, #15
 800055a:	403b      	ands	r3, r7
 800055c:	2b04      	cmp	r3, #4
 800055e:	d005      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	42bb      	cmp	r3, r7
 8000564:	41bf      	sbcs	r7, r7
 8000566:	427f      	negs	r7, r7
 8000568:	19c9      	adds	r1, r1, r7
 800056a:	001f      	movs	r7, r3
 800056c:	020b      	lsls	r3, r1, #8
 800056e:	d400      	bmi.n	8000572 <__aeabi_dadd+0xde>
 8000570:	e226      	b.n	80009c0 <__aeabi_dadd+0x52c>
 8000572:	1c6a      	adds	r2, r5, #1
 8000574:	4bc6      	ldr	r3, [pc, #792]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000576:	0555      	lsls	r5, r2, #21
 8000578:	0d6d      	lsrs	r5, r5, #21
 800057a:	429a      	cmp	r2, r3
 800057c:	d100      	bne.n	8000580 <__aeabi_dadd+0xec>
 800057e:	e106      	b.n	800078e <__aeabi_dadd+0x2fa>
 8000580:	4ac4      	ldr	r2, [pc, #784]	; (8000894 <__aeabi_dadd+0x400>)
 8000582:	08ff      	lsrs	r7, r7, #3
 8000584:	400a      	ands	r2, r1
 8000586:	0753      	lsls	r3, r2, #29
 8000588:	0252      	lsls	r2, r2, #9
 800058a:	433b      	orrs	r3, r7
 800058c:	0b12      	lsrs	r2, r2, #12
 800058e:	e08e      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000590:	2b00      	cmp	r3, #0
 8000592:	d000      	beq.n	8000596 <__aeabi_dadd+0x102>
 8000594:	e0b8      	b.n	8000708 <__aeabi_dadd+0x274>
 8000596:	1c6b      	adds	r3, r5, #1
 8000598:	055b      	lsls	r3, r3, #21
 800059a:	0d5b      	lsrs	r3, r3, #21
 800059c:	2b01      	cmp	r3, #1
 800059e:	dc00      	bgt.n	80005a2 <__aeabi_dadd+0x10e>
 80005a0:	e130      	b.n	8000804 <__aeabi_dadd+0x370>
 80005a2:	1a87      	subs	r7, r0, r2
 80005a4:	4643      	mov	r3, r8
 80005a6:	42b8      	cmp	r0, r7
 80005a8:	41b6      	sbcs	r6, r6
 80005aa:	1acb      	subs	r3, r1, r3
 80005ac:	4276      	negs	r6, r6
 80005ae:	1b9e      	subs	r6, r3, r6
 80005b0:	0233      	lsls	r3, r6, #8
 80005b2:	d500      	bpl.n	80005b6 <__aeabi_dadd+0x122>
 80005b4:	e14c      	b.n	8000850 <__aeabi_dadd+0x3bc>
 80005b6:	003b      	movs	r3, r7
 80005b8:	4333      	orrs	r3, r6
 80005ba:	d1a1      	bne.n	8000500 <__aeabi_dadd+0x6c>
 80005bc:	2200      	movs	r2, #0
 80005be:	2400      	movs	r4, #0
 80005c0:	2500      	movs	r5, #0
 80005c2:	e070      	b.n	80006a6 <__aeabi_dadd+0x212>
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dc00      	bgt.n	80005ca <__aeabi_dadd+0x136>
 80005c8:	e0e5      	b.n	8000796 <__aeabi_dadd+0x302>
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d100      	bne.n	80005d0 <__aeabi_dadd+0x13c>
 80005ce:	e083      	b.n	80006d8 <__aeabi_dadd+0x244>
 80005d0:	4eaf      	ldr	r6, [pc, #700]	; (8000890 <__aeabi_dadd+0x3fc>)
 80005d2:	42b5      	cmp	r5, r6
 80005d4:	d060      	beq.n	8000698 <__aeabi_dadd+0x204>
 80005d6:	2680      	movs	r6, #128	; 0x80
 80005d8:	0436      	lsls	r6, r6, #16
 80005da:	4337      	orrs	r7, r6
 80005dc:	46b8      	mov	r8, r7
 80005de:	2b38      	cmp	r3, #56	; 0x38
 80005e0:	dc00      	bgt.n	80005e4 <__aeabi_dadd+0x150>
 80005e2:	e13e      	b.n	8000862 <__aeabi_dadd+0x3ce>
 80005e4:	4643      	mov	r3, r8
 80005e6:	4313      	orrs	r3, r2
 80005e8:	001f      	movs	r7, r3
 80005ea:	1e7a      	subs	r2, r7, #1
 80005ec:	4197      	sbcs	r7, r2
 80005ee:	183f      	adds	r7, r7, r0
 80005f0:	4287      	cmp	r7, r0
 80005f2:	4180      	sbcs	r0, r0
 80005f4:	4240      	negs	r0, r0
 80005f6:	1809      	adds	r1, r1, r0
 80005f8:	020b      	lsls	r3, r1, #8
 80005fa:	d400      	bmi.n	80005fe <__aeabi_dadd+0x16a>
 80005fc:	e0b0      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80005fe:	4ba4      	ldr	r3, [pc, #656]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000600:	3501      	adds	r5, #1
 8000602:	429d      	cmp	r5, r3
 8000604:	d100      	bne.n	8000608 <__aeabi_dadd+0x174>
 8000606:	e0c3      	b.n	8000790 <__aeabi_dadd+0x2fc>
 8000608:	4aa2      	ldr	r2, [pc, #648]	; (8000894 <__aeabi_dadd+0x400>)
 800060a:	087b      	lsrs	r3, r7, #1
 800060c:	400a      	ands	r2, r1
 800060e:	2101      	movs	r1, #1
 8000610:	400f      	ands	r7, r1
 8000612:	431f      	orrs	r7, r3
 8000614:	0851      	lsrs	r1, r2, #1
 8000616:	07d3      	lsls	r3, r2, #31
 8000618:	2207      	movs	r2, #7
 800061a:	431f      	orrs	r7, r3
 800061c:	403a      	ands	r2, r7
 800061e:	e799      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000620:	4e9b      	ldr	r6, [pc, #620]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000622:	42b5      	cmp	r5, r6
 8000624:	d038      	beq.n	8000698 <__aeabi_dadd+0x204>
 8000626:	2680      	movs	r6, #128	; 0x80
 8000628:	0436      	lsls	r6, r6, #16
 800062a:	4337      	orrs	r7, r6
 800062c:	46b8      	mov	r8, r7
 800062e:	2b38      	cmp	r3, #56	; 0x38
 8000630:	dd00      	ble.n	8000634 <__aeabi_dadd+0x1a0>
 8000632:	e0dc      	b.n	80007ee <__aeabi_dadd+0x35a>
 8000634:	2b1f      	cmp	r3, #31
 8000636:	dc00      	bgt.n	800063a <__aeabi_dadd+0x1a6>
 8000638:	e130      	b.n	800089c <__aeabi_dadd+0x408>
 800063a:	001e      	movs	r6, r3
 800063c:	4647      	mov	r7, r8
 800063e:	3e20      	subs	r6, #32
 8000640:	40f7      	lsrs	r7, r6
 8000642:	46bc      	mov	ip, r7
 8000644:	2b20      	cmp	r3, #32
 8000646:	d004      	beq.n	8000652 <__aeabi_dadd+0x1be>
 8000648:	2640      	movs	r6, #64	; 0x40
 800064a:	1af3      	subs	r3, r6, r3
 800064c:	4646      	mov	r6, r8
 800064e:	409e      	lsls	r6, r3
 8000650:	4332      	orrs	r2, r6
 8000652:	0017      	movs	r7, r2
 8000654:	4663      	mov	r3, ip
 8000656:	1e7a      	subs	r2, r7, #1
 8000658:	4197      	sbcs	r7, r2
 800065a:	431f      	orrs	r7, r3
 800065c:	e0cc      	b.n	80007f8 <__aeabi_dadd+0x364>
 800065e:	2b00      	cmp	r3, #0
 8000660:	d100      	bne.n	8000664 <__aeabi_dadd+0x1d0>
 8000662:	e204      	b.n	8000a6e <__aeabi_dadd+0x5da>
 8000664:	4643      	mov	r3, r8
 8000666:	4313      	orrs	r3, r2
 8000668:	d100      	bne.n	800066c <__aeabi_dadd+0x1d8>
 800066a:	e159      	b.n	8000920 <__aeabi_dadd+0x48c>
 800066c:	074b      	lsls	r3, r1, #29
 800066e:	08c0      	lsrs	r0, r0, #3
 8000670:	4318      	orrs	r0, r3
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	08c9      	lsrs	r1, r1, #3
 8000676:	031b      	lsls	r3, r3, #12
 8000678:	4219      	tst	r1, r3
 800067a:	d008      	beq.n	800068e <__aeabi_dadd+0x1fa>
 800067c:	4645      	mov	r5, r8
 800067e:	08ed      	lsrs	r5, r5, #3
 8000680:	421d      	tst	r5, r3
 8000682:	d104      	bne.n	800068e <__aeabi_dadd+0x1fa>
 8000684:	4643      	mov	r3, r8
 8000686:	08d0      	lsrs	r0, r2, #3
 8000688:	0759      	lsls	r1, r3, #29
 800068a:	4308      	orrs	r0, r1
 800068c:	0029      	movs	r1, r5
 800068e:	0f42      	lsrs	r2, r0, #29
 8000690:	00c9      	lsls	r1, r1, #3
 8000692:	4d7f      	ldr	r5, [pc, #508]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000694:	4311      	orrs	r1, r2
 8000696:	00c0      	lsls	r0, r0, #3
 8000698:	074b      	lsls	r3, r1, #29
 800069a:	08ca      	lsrs	r2, r1, #3
 800069c:	497c      	ldr	r1, [pc, #496]	; (8000890 <__aeabi_dadd+0x3fc>)
 800069e:	08c0      	lsrs	r0, r0, #3
 80006a0:	4303      	orrs	r3, r0
 80006a2:	428d      	cmp	r5, r1
 80006a4:	d068      	beq.n	8000778 <__aeabi_dadd+0x2e4>
 80006a6:	0312      	lsls	r2, r2, #12
 80006a8:	056d      	lsls	r5, r5, #21
 80006aa:	0b12      	lsrs	r2, r2, #12
 80006ac:	0d6d      	lsrs	r5, r5, #21
 80006ae:	2100      	movs	r1, #0
 80006b0:	0312      	lsls	r2, r2, #12
 80006b2:	0018      	movs	r0, r3
 80006b4:	0b13      	lsrs	r3, r2, #12
 80006b6:	0d0a      	lsrs	r2, r1, #20
 80006b8:	0512      	lsls	r2, r2, #20
 80006ba:	431a      	orrs	r2, r3
 80006bc:	4b76      	ldr	r3, [pc, #472]	; (8000898 <__aeabi_dadd+0x404>)
 80006be:	052d      	lsls	r5, r5, #20
 80006c0:	4013      	ands	r3, r2
 80006c2:	432b      	orrs	r3, r5
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	07e4      	lsls	r4, r4, #31
 80006c8:	085b      	lsrs	r3, r3, #1
 80006ca:	4323      	orrs	r3, r4
 80006cc:	0019      	movs	r1, r3
 80006ce:	bc1c      	pop	{r2, r3, r4}
 80006d0:	4690      	mov	r8, r2
 80006d2:	4699      	mov	r9, r3
 80006d4:	46a2      	mov	sl, r4
 80006d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d8:	003e      	movs	r6, r7
 80006da:	4316      	orrs	r6, r2
 80006dc:	d012      	beq.n	8000704 <__aeabi_dadd+0x270>
 80006de:	1e5e      	subs	r6, r3, #1
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x252>
 80006e4:	e100      	b.n	80008e8 <__aeabi_dadd+0x454>
 80006e6:	1887      	adds	r7, r0, r2
 80006e8:	4287      	cmp	r7, r0
 80006ea:	4180      	sbcs	r0, r0
 80006ec:	4441      	add	r1, r8
 80006ee:	4240      	negs	r0, r0
 80006f0:	1809      	adds	r1, r1, r0
 80006f2:	2501      	movs	r5, #1
 80006f4:	020b      	lsls	r3, r1, #8
 80006f6:	d533      	bpl.n	8000760 <__aeabi_dadd+0x2cc>
 80006f8:	2502      	movs	r5, #2
 80006fa:	e785      	b.n	8000608 <__aeabi_dadd+0x174>
 80006fc:	4664      	mov	r4, ip
 80006fe:	0033      	movs	r3, r6
 8000700:	4641      	mov	r1, r8
 8000702:	0010      	movs	r0, r2
 8000704:	001d      	movs	r5, r3
 8000706:	e7c7      	b.n	8000698 <__aeabi_dadd+0x204>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d000      	beq.n	800070e <__aeabi_dadd+0x27a>
 800070c:	e0da      	b.n	80008c4 <__aeabi_dadd+0x430>
 800070e:	000c      	movs	r4, r1
 8000710:	4304      	orrs	r4, r0
 8000712:	d0f3      	beq.n	80006fc <__aeabi_dadd+0x268>
 8000714:	1c5c      	adds	r4, r3, #1
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x286>
 8000718:	e19f      	b.n	8000a5a <__aeabi_dadd+0x5c6>
 800071a:	4c5d      	ldr	r4, [pc, #372]	; (8000890 <__aeabi_dadd+0x3fc>)
 800071c:	42a6      	cmp	r6, r4
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x28e>
 8000720:	e12f      	b.n	8000982 <__aeabi_dadd+0x4ee>
 8000722:	43db      	mvns	r3, r3
 8000724:	2b38      	cmp	r3, #56	; 0x38
 8000726:	dd00      	ble.n	800072a <__aeabi_dadd+0x296>
 8000728:	e166      	b.n	80009f8 <__aeabi_dadd+0x564>
 800072a:	2b1f      	cmp	r3, #31
 800072c:	dd00      	ble.n	8000730 <__aeabi_dadd+0x29c>
 800072e:	e183      	b.n	8000a38 <__aeabi_dadd+0x5a4>
 8000730:	2420      	movs	r4, #32
 8000732:	0005      	movs	r5, r0
 8000734:	1ae4      	subs	r4, r4, r3
 8000736:	000f      	movs	r7, r1
 8000738:	40dd      	lsrs	r5, r3
 800073a:	40d9      	lsrs	r1, r3
 800073c:	40a0      	lsls	r0, r4
 800073e:	4643      	mov	r3, r8
 8000740:	40a7      	lsls	r7, r4
 8000742:	1a5b      	subs	r3, r3, r1
 8000744:	1e44      	subs	r4, r0, #1
 8000746:	41a0      	sbcs	r0, r4
 8000748:	4698      	mov	r8, r3
 800074a:	432f      	orrs	r7, r5
 800074c:	4338      	orrs	r0, r7
 800074e:	1a17      	subs	r7, r2, r0
 8000750:	42ba      	cmp	r2, r7
 8000752:	4192      	sbcs	r2, r2
 8000754:	4643      	mov	r3, r8
 8000756:	4252      	negs	r2, r2
 8000758:	1a99      	subs	r1, r3, r2
 800075a:	4664      	mov	r4, ip
 800075c:	0035      	movs	r5, r6
 800075e:	e6ca      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000760:	2207      	movs	r2, #7
 8000762:	403a      	ands	r2, r7
 8000764:	2a00      	cmp	r2, #0
 8000766:	d000      	beq.n	800076a <__aeabi_dadd+0x2d6>
 8000768:	e6f6      	b.n	8000558 <__aeabi_dadd+0xc4>
 800076a:	074b      	lsls	r3, r1, #29
 800076c:	08ca      	lsrs	r2, r1, #3
 800076e:	4948      	ldr	r1, [pc, #288]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000770:	08ff      	lsrs	r7, r7, #3
 8000772:	433b      	orrs	r3, r7
 8000774:	428d      	cmp	r5, r1
 8000776:	d196      	bne.n	80006a6 <__aeabi_dadd+0x212>
 8000778:	0019      	movs	r1, r3
 800077a:	4311      	orrs	r1, r2
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0x2ec>
 800077e:	e19e      	b.n	8000abe <__aeabi_dadd+0x62a>
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	0309      	lsls	r1, r1, #12
 8000784:	430a      	orrs	r2, r1
 8000786:	0312      	lsls	r2, r2, #12
 8000788:	0b12      	lsrs	r2, r2, #12
 800078a:	4d41      	ldr	r5, [pc, #260]	; (8000890 <__aeabi_dadd+0x3fc>)
 800078c:	e78f      	b.n	80006ae <__aeabi_dadd+0x21a>
 800078e:	0015      	movs	r5, r2
 8000790:	2200      	movs	r2, #0
 8000792:	2300      	movs	r3, #0
 8000794:	e78b      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000796:	2b00      	cmp	r3, #0
 8000798:	d000      	beq.n	800079c <__aeabi_dadd+0x308>
 800079a:	e0c7      	b.n	800092c <__aeabi_dadd+0x498>
 800079c:	1c6b      	adds	r3, r5, #1
 800079e:	055f      	lsls	r7, r3, #21
 80007a0:	0d7f      	lsrs	r7, r7, #21
 80007a2:	2f01      	cmp	r7, #1
 80007a4:	dc00      	bgt.n	80007a8 <__aeabi_dadd+0x314>
 80007a6:	e0f1      	b.n	800098c <__aeabi_dadd+0x4f8>
 80007a8:	4d39      	ldr	r5, [pc, #228]	; (8000890 <__aeabi_dadd+0x3fc>)
 80007aa:	42ab      	cmp	r3, r5
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x31c>
 80007ae:	e0b9      	b.n	8000924 <__aeabi_dadd+0x490>
 80007b0:	1885      	adds	r5, r0, r2
 80007b2:	000a      	movs	r2, r1
 80007b4:	4285      	cmp	r5, r0
 80007b6:	4189      	sbcs	r1, r1
 80007b8:	4442      	add	r2, r8
 80007ba:	4249      	negs	r1, r1
 80007bc:	1851      	adds	r1, r2, r1
 80007be:	2207      	movs	r2, #7
 80007c0:	07cf      	lsls	r7, r1, #31
 80007c2:	086d      	lsrs	r5, r5, #1
 80007c4:	432f      	orrs	r7, r5
 80007c6:	0849      	lsrs	r1, r1, #1
 80007c8:	403a      	ands	r2, r7
 80007ca:	001d      	movs	r5, r3
 80007cc:	e6c2      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007ce:	2207      	movs	r2, #7
 80007d0:	4930      	ldr	r1, [pc, #192]	; (8000894 <__aeabi_dadd+0x400>)
 80007d2:	1aed      	subs	r5, r5, r3
 80007d4:	4031      	ands	r1, r6
 80007d6:	403a      	ands	r2, r7
 80007d8:	e6bc      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007da:	003e      	movs	r6, r7
 80007dc:	3828      	subs	r0, #40	; 0x28
 80007de:	4086      	lsls	r6, r0
 80007e0:	2700      	movs	r7, #0
 80007e2:	e69f      	b.n	8000524 <__aeabi_dadd+0x90>
 80007e4:	0038      	movs	r0, r7
 80007e6:	f001 fbf3 	bl	8001fd0 <__clzsi2>
 80007ea:	3020      	adds	r0, #32
 80007ec:	e68e      	b.n	800050c <__aeabi_dadd+0x78>
 80007ee:	4643      	mov	r3, r8
 80007f0:	4313      	orrs	r3, r2
 80007f2:	001f      	movs	r7, r3
 80007f4:	1e7a      	subs	r2, r7, #1
 80007f6:	4197      	sbcs	r7, r2
 80007f8:	1bc7      	subs	r7, r0, r7
 80007fa:	42b8      	cmp	r0, r7
 80007fc:	4180      	sbcs	r0, r0
 80007fe:	4240      	negs	r0, r0
 8000800:	1a09      	subs	r1, r1, r0
 8000802:	e678      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000804:	000e      	movs	r6, r1
 8000806:	003b      	movs	r3, r7
 8000808:	4306      	orrs	r6, r0
 800080a:	4313      	orrs	r3, r2
 800080c:	2d00      	cmp	r5, #0
 800080e:	d161      	bne.n	80008d4 <__aeabi_dadd+0x440>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_dadd+0x382>
 8000814:	e0f4      	b.n	8000a00 <__aeabi_dadd+0x56c>
 8000816:	2b00      	cmp	r3, #0
 8000818:	d100      	bne.n	800081c <__aeabi_dadd+0x388>
 800081a:	e11b      	b.n	8000a54 <__aeabi_dadd+0x5c0>
 800081c:	4664      	mov	r4, ip
 800081e:	0039      	movs	r1, r7
 8000820:	0010      	movs	r0, r2
 8000822:	e739      	b.n	8000698 <__aeabi_dadd+0x204>
 8000824:	4f1a      	ldr	r7, [pc, #104]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000826:	42bb      	cmp	r3, r7
 8000828:	d07a      	beq.n	8000920 <__aeabi_dadd+0x48c>
 800082a:	0033      	movs	r3, r6
 800082c:	e6ff      	b.n	800062e <__aeabi_dadd+0x19a>
 800082e:	0030      	movs	r0, r6
 8000830:	3d1f      	subs	r5, #31
 8000832:	40e8      	lsrs	r0, r5
 8000834:	2b20      	cmp	r3, #32
 8000836:	d003      	beq.n	8000840 <__aeabi_dadd+0x3ac>
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	1acb      	subs	r3, r1, r3
 800083c:	409e      	lsls	r6, r3
 800083e:	4337      	orrs	r7, r6
 8000840:	1e7b      	subs	r3, r7, #1
 8000842:	419f      	sbcs	r7, r3
 8000844:	2207      	movs	r2, #7
 8000846:	4307      	orrs	r7, r0
 8000848:	403a      	ands	r2, r7
 800084a:	2100      	movs	r1, #0
 800084c:	2500      	movs	r5, #0
 800084e:	e789      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000850:	1a17      	subs	r7, r2, r0
 8000852:	4643      	mov	r3, r8
 8000854:	42ba      	cmp	r2, r7
 8000856:	41b6      	sbcs	r6, r6
 8000858:	1a59      	subs	r1, r3, r1
 800085a:	4276      	negs	r6, r6
 800085c:	1b8e      	subs	r6, r1, r6
 800085e:	4664      	mov	r4, ip
 8000860:	e64e      	b.n	8000500 <__aeabi_dadd+0x6c>
 8000862:	2b1f      	cmp	r3, #31
 8000864:	dd00      	ble.n	8000868 <__aeabi_dadd+0x3d4>
 8000866:	e0ad      	b.n	80009c4 <__aeabi_dadd+0x530>
 8000868:	2620      	movs	r6, #32
 800086a:	4647      	mov	r7, r8
 800086c:	1af6      	subs	r6, r6, r3
 800086e:	40b7      	lsls	r7, r6
 8000870:	46b9      	mov	r9, r7
 8000872:	0017      	movs	r7, r2
 8000874:	46b2      	mov	sl, r6
 8000876:	40df      	lsrs	r7, r3
 8000878:	464e      	mov	r6, r9
 800087a:	433e      	orrs	r6, r7
 800087c:	0037      	movs	r7, r6
 800087e:	4656      	mov	r6, sl
 8000880:	40b2      	lsls	r2, r6
 8000882:	1e56      	subs	r6, r2, #1
 8000884:	41b2      	sbcs	r2, r6
 8000886:	4317      	orrs	r7, r2
 8000888:	4642      	mov	r2, r8
 800088a:	40da      	lsrs	r2, r3
 800088c:	1889      	adds	r1, r1, r2
 800088e:	e6ae      	b.n	80005ee <__aeabi_dadd+0x15a>
 8000890:	000007ff 	.word	0x000007ff
 8000894:	ff7fffff 	.word	0xff7fffff
 8000898:	800fffff 	.word	0x800fffff
 800089c:	2620      	movs	r6, #32
 800089e:	4647      	mov	r7, r8
 80008a0:	1af6      	subs	r6, r6, r3
 80008a2:	40b7      	lsls	r7, r6
 80008a4:	46b9      	mov	r9, r7
 80008a6:	0017      	movs	r7, r2
 80008a8:	46b2      	mov	sl, r6
 80008aa:	40df      	lsrs	r7, r3
 80008ac:	464e      	mov	r6, r9
 80008ae:	433e      	orrs	r6, r7
 80008b0:	0037      	movs	r7, r6
 80008b2:	4656      	mov	r6, sl
 80008b4:	40b2      	lsls	r2, r6
 80008b6:	1e56      	subs	r6, r2, #1
 80008b8:	41b2      	sbcs	r2, r6
 80008ba:	4317      	orrs	r7, r2
 80008bc:	4642      	mov	r2, r8
 80008be:	40da      	lsrs	r2, r3
 80008c0:	1a89      	subs	r1, r1, r2
 80008c2:	e799      	b.n	80007f8 <__aeabi_dadd+0x364>
 80008c4:	4c7f      	ldr	r4, [pc, #508]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008c6:	42a6      	cmp	r6, r4
 80008c8:	d05b      	beq.n	8000982 <__aeabi_dadd+0x4ee>
 80008ca:	2480      	movs	r4, #128	; 0x80
 80008cc:	0424      	lsls	r4, r4, #16
 80008ce:	425b      	negs	r3, r3
 80008d0:	4321      	orrs	r1, r4
 80008d2:	e727      	b.n	8000724 <__aeabi_dadd+0x290>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d10c      	bne.n	80008f2 <__aeabi_dadd+0x45e>
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x44a>
 80008dc:	e0cb      	b.n	8000a76 <__aeabi_dadd+0x5e2>
 80008de:	4664      	mov	r4, ip
 80008e0:	0039      	movs	r1, r7
 80008e2:	0010      	movs	r0, r2
 80008e4:	4d77      	ldr	r5, [pc, #476]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008e6:	e6d7      	b.n	8000698 <__aeabi_dadd+0x204>
 80008e8:	4f76      	ldr	r7, [pc, #472]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008ea:	42bb      	cmp	r3, r7
 80008ec:	d018      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008ee:	0033      	movs	r3, r6
 80008f0:	e675      	b.n	80005de <__aeabi_dadd+0x14a>
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d014      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008f6:	074b      	lsls	r3, r1, #29
 80008f8:	08c0      	lsrs	r0, r0, #3
 80008fa:	4318      	orrs	r0, r3
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	08c9      	lsrs	r1, r1, #3
 8000900:	031b      	lsls	r3, r3, #12
 8000902:	4219      	tst	r1, r3
 8000904:	d007      	beq.n	8000916 <__aeabi_dadd+0x482>
 8000906:	08fc      	lsrs	r4, r7, #3
 8000908:	421c      	tst	r4, r3
 800090a:	d104      	bne.n	8000916 <__aeabi_dadd+0x482>
 800090c:	0779      	lsls	r1, r7, #29
 800090e:	08d0      	lsrs	r0, r2, #3
 8000910:	4308      	orrs	r0, r1
 8000912:	46e1      	mov	r9, ip
 8000914:	0021      	movs	r1, r4
 8000916:	464c      	mov	r4, r9
 8000918:	0f42      	lsrs	r2, r0, #29
 800091a:	00c9      	lsls	r1, r1, #3
 800091c:	4311      	orrs	r1, r2
 800091e:	00c0      	lsls	r0, r0, #3
 8000920:	4d68      	ldr	r5, [pc, #416]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000922:	e6b9      	b.n	8000698 <__aeabi_dadd+0x204>
 8000924:	001d      	movs	r5, r3
 8000926:	2200      	movs	r2, #0
 8000928:	2300      	movs	r3, #0
 800092a:	e6c0      	b.n	80006ae <__aeabi_dadd+0x21a>
 800092c:	2d00      	cmp	r5, #0
 800092e:	d15b      	bne.n	80009e8 <__aeabi_dadd+0x554>
 8000930:	000d      	movs	r5, r1
 8000932:	4305      	orrs	r5, r0
 8000934:	d100      	bne.n	8000938 <__aeabi_dadd+0x4a4>
 8000936:	e6e2      	b.n	80006fe <__aeabi_dadd+0x26a>
 8000938:	1c5d      	adds	r5, r3, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x4aa>
 800093c:	e0b0      	b.n	8000aa0 <__aeabi_dadd+0x60c>
 800093e:	4d61      	ldr	r5, [pc, #388]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000940:	42ae      	cmp	r6, r5
 8000942:	d01f      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 8000944:	43db      	mvns	r3, r3
 8000946:	2b38      	cmp	r3, #56	; 0x38
 8000948:	dc71      	bgt.n	8000a2e <__aeabi_dadd+0x59a>
 800094a:	2b1f      	cmp	r3, #31
 800094c:	dd00      	ble.n	8000950 <__aeabi_dadd+0x4bc>
 800094e:	e096      	b.n	8000a7e <__aeabi_dadd+0x5ea>
 8000950:	2520      	movs	r5, #32
 8000952:	000f      	movs	r7, r1
 8000954:	1aed      	subs	r5, r5, r3
 8000956:	40af      	lsls	r7, r5
 8000958:	46b9      	mov	r9, r7
 800095a:	0007      	movs	r7, r0
 800095c:	46aa      	mov	sl, r5
 800095e:	40df      	lsrs	r7, r3
 8000960:	464d      	mov	r5, r9
 8000962:	433d      	orrs	r5, r7
 8000964:	002f      	movs	r7, r5
 8000966:	4655      	mov	r5, sl
 8000968:	40a8      	lsls	r0, r5
 800096a:	40d9      	lsrs	r1, r3
 800096c:	1e45      	subs	r5, r0, #1
 800096e:	41a8      	sbcs	r0, r5
 8000970:	4488      	add	r8, r1
 8000972:	4307      	orrs	r7, r0
 8000974:	18bf      	adds	r7, r7, r2
 8000976:	4297      	cmp	r7, r2
 8000978:	4192      	sbcs	r2, r2
 800097a:	4251      	negs	r1, r2
 800097c:	4441      	add	r1, r8
 800097e:	0035      	movs	r5, r6
 8000980:	e63a      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000982:	4664      	mov	r4, ip
 8000984:	0035      	movs	r5, r6
 8000986:	4641      	mov	r1, r8
 8000988:	0010      	movs	r0, r2
 800098a:	e685      	b.n	8000698 <__aeabi_dadd+0x204>
 800098c:	000b      	movs	r3, r1
 800098e:	4303      	orrs	r3, r0
 8000990:	2d00      	cmp	r5, #0
 8000992:	d000      	beq.n	8000996 <__aeabi_dadd+0x502>
 8000994:	e663      	b.n	800065e <__aeabi_dadd+0x1ca>
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0f5      	beq.n	8000986 <__aeabi_dadd+0x4f2>
 800099a:	4643      	mov	r3, r8
 800099c:	4313      	orrs	r3, r2
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0x50e>
 80009a0:	e67a      	b.n	8000698 <__aeabi_dadd+0x204>
 80009a2:	1887      	adds	r7, r0, r2
 80009a4:	4287      	cmp	r7, r0
 80009a6:	4180      	sbcs	r0, r0
 80009a8:	2207      	movs	r2, #7
 80009aa:	4441      	add	r1, r8
 80009ac:	4240      	negs	r0, r0
 80009ae:	1809      	adds	r1, r1, r0
 80009b0:	403a      	ands	r2, r7
 80009b2:	020b      	lsls	r3, r1, #8
 80009b4:	d400      	bmi.n	80009b8 <__aeabi_dadd+0x524>
 80009b6:	e6d5      	b.n	8000764 <__aeabi_dadd+0x2d0>
 80009b8:	4b43      	ldr	r3, [pc, #268]	; (8000ac8 <__aeabi_dadd+0x634>)
 80009ba:	3501      	adds	r5, #1
 80009bc:	4019      	ands	r1, r3
 80009be:	e5c9      	b.n	8000554 <__aeabi_dadd+0xc0>
 80009c0:	0038      	movs	r0, r7
 80009c2:	e669      	b.n	8000698 <__aeabi_dadd+0x204>
 80009c4:	001e      	movs	r6, r3
 80009c6:	4647      	mov	r7, r8
 80009c8:	3e20      	subs	r6, #32
 80009ca:	40f7      	lsrs	r7, r6
 80009cc:	46bc      	mov	ip, r7
 80009ce:	2b20      	cmp	r3, #32
 80009d0:	d004      	beq.n	80009dc <__aeabi_dadd+0x548>
 80009d2:	2640      	movs	r6, #64	; 0x40
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	4646      	mov	r6, r8
 80009d8:	409e      	lsls	r6, r3
 80009da:	4332      	orrs	r2, r6
 80009dc:	0017      	movs	r7, r2
 80009de:	4663      	mov	r3, ip
 80009e0:	1e7a      	subs	r2, r7, #1
 80009e2:	4197      	sbcs	r7, r2
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e602      	b.n	80005ee <__aeabi_dadd+0x15a>
 80009e8:	4d36      	ldr	r5, [pc, #216]	; (8000ac4 <__aeabi_dadd+0x630>)
 80009ea:	42ae      	cmp	r6, r5
 80009ec:	d0ca      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 80009ee:	2580      	movs	r5, #128	; 0x80
 80009f0:	042d      	lsls	r5, r5, #16
 80009f2:	425b      	negs	r3, r3
 80009f4:	4329      	orrs	r1, r5
 80009f6:	e7a6      	b.n	8000946 <__aeabi_dadd+0x4b2>
 80009f8:	4308      	orrs	r0, r1
 80009fa:	1e41      	subs	r1, r0, #1
 80009fc:	4188      	sbcs	r0, r1
 80009fe:	e6a6      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d100      	bne.n	8000a06 <__aeabi_dadd+0x572>
 8000a04:	e648      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a06:	1a87      	subs	r7, r0, r2
 8000a08:	4643      	mov	r3, r8
 8000a0a:	42b8      	cmp	r0, r7
 8000a0c:	41b6      	sbcs	r6, r6
 8000a0e:	1acb      	subs	r3, r1, r3
 8000a10:	4276      	negs	r6, r6
 8000a12:	1b9e      	subs	r6, r3, r6
 8000a14:	0233      	lsls	r3, r6, #8
 8000a16:	d54b      	bpl.n	8000ab0 <__aeabi_dadd+0x61c>
 8000a18:	1a17      	subs	r7, r2, r0
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	42ba      	cmp	r2, r7
 8000a1e:	4192      	sbcs	r2, r2
 8000a20:	1a59      	subs	r1, r3, r1
 8000a22:	4252      	negs	r2, r2
 8000a24:	1a89      	subs	r1, r1, r2
 8000a26:	2207      	movs	r2, #7
 8000a28:	4664      	mov	r4, ip
 8000a2a:	403a      	ands	r2, r7
 8000a2c:	e592      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000a2e:	4301      	orrs	r1, r0
 8000a30:	000f      	movs	r7, r1
 8000a32:	1e79      	subs	r1, r7, #1
 8000a34:	418f      	sbcs	r7, r1
 8000a36:	e79d      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000a38:	001c      	movs	r4, r3
 8000a3a:	000f      	movs	r7, r1
 8000a3c:	3c20      	subs	r4, #32
 8000a3e:	40e7      	lsrs	r7, r4
 8000a40:	2b20      	cmp	r3, #32
 8000a42:	d003      	beq.n	8000a4c <__aeabi_dadd+0x5b8>
 8000a44:	2440      	movs	r4, #64	; 0x40
 8000a46:	1ae3      	subs	r3, r4, r3
 8000a48:	4099      	lsls	r1, r3
 8000a4a:	4308      	orrs	r0, r1
 8000a4c:	1e41      	subs	r1, r0, #1
 8000a4e:	4188      	sbcs	r0, r1
 8000a50:	4338      	orrs	r0, r7
 8000a52:	e67c      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a54:	2200      	movs	r2, #0
 8000a56:	2400      	movs	r4, #0
 8000a58:	e625      	b.n	80006a6 <__aeabi_dadd+0x212>
 8000a5a:	1a17      	subs	r7, r2, r0
 8000a5c:	4643      	mov	r3, r8
 8000a5e:	42ba      	cmp	r2, r7
 8000a60:	4192      	sbcs	r2, r2
 8000a62:	1a59      	subs	r1, r3, r1
 8000a64:	4252      	negs	r2, r2
 8000a66:	1a89      	subs	r1, r1, r2
 8000a68:	4664      	mov	r4, ip
 8000a6a:	0035      	movs	r5, r6
 8000a6c:	e543      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000a6e:	4641      	mov	r1, r8
 8000a70:	0010      	movs	r0, r2
 8000a72:	4d14      	ldr	r5, [pc, #80]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000a74:	e610      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	2400      	movs	r4, #0
 8000a7a:	0312      	lsls	r2, r2, #12
 8000a7c:	e680      	b.n	8000780 <__aeabi_dadd+0x2ec>
 8000a7e:	001d      	movs	r5, r3
 8000a80:	000f      	movs	r7, r1
 8000a82:	3d20      	subs	r5, #32
 8000a84:	40ef      	lsrs	r7, r5
 8000a86:	46bc      	mov	ip, r7
 8000a88:	2b20      	cmp	r3, #32
 8000a8a:	d003      	beq.n	8000a94 <__aeabi_dadd+0x600>
 8000a8c:	2540      	movs	r5, #64	; 0x40
 8000a8e:	1aeb      	subs	r3, r5, r3
 8000a90:	4099      	lsls	r1, r3
 8000a92:	4308      	orrs	r0, r1
 8000a94:	0007      	movs	r7, r0
 8000a96:	4663      	mov	r3, ip
 8000a98:	1e78      	subs	r0, r7, #1
 8000a9a:	4187      	sbcs	r7, r0
 8000a9c:	431f      	orrs	r7, r3
 8000a9e:	e769      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000aa0:	1887      	adds	r7, r0, r2
 8000aa2:	4297      	cmp	r7, r2
 8000aa4:	419b      	sbcs	r3, r3
 8000aa6:	4441      	add	r1, r8
 8000aa8:	425b      	negs	r3, r3
 8000aaa:	18c9      	adds	r1, r1, r3
 8000aac:	0035      	movs	r5, r6
 8000aae:	e5a3      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	4333      	orrs	r3, r6
 8000ab4:	d0ce      	beq.n	8000a54 <__aeabi_dadd+0x5c0>
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	0031      	movs	r1, r6
 8000aba:	403a      	ands	r2, r7
 8000abc:	e652      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	e5f4      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000ac4:	000007ff 	.word	0x000007ff
 8000ac8:	ff7fffff 	.word	0xff7fffff

08000acc <__aeabi_ddiv>:
 8000acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ace:	4657      	mov	r7, sl
 8000ad0:	46de      	mov	lr, fp
 8000ad2:	464e      	mov	r6, r9
 8000ad4:	4645      	mov	r5, r8
 8000ad6:	b5e0      	push	{r5, r6, r7, lr}
 8000ad8:	4683      	mov	fp, r0
 8000ada:	0007      	movs	r7, r0
 8000adc:	030e      	lsls	r6, r1, #12
 8000ade:	0048      	lsls	r0, r1, #1
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	4692      	mov	sl, r2
 8000ae4:	001c      	movs	r4, r3
 8000ae6:	0b36      	lsrs	r6, r6, #12
 8000ae8:	0d40      	lsrs	r0, r0, #21
 8000aea:	0fcd      	lsrs	r5, r1, #31
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d100      	bne.n	8000af2 <__aeabi_ddiv+0x26>
 8000af0:	e09d      	b.n	8000c2e <__aeabi_ddiv+0x162>
 8000af2:	4b95      	ldr	r3, [pc, #596]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000af4:	4298      	cmp	r0, r3
 8000af6:	d039      	beq.n	8000b6c <__aeabi_ddiv+0xa0>
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	00f6      	lsls	r6, r6, #3
 8000afc:	041b      	lsls	r3, r3, #16
 8000afe:	431e      	orrs	r6, r3
 8000b00:	4a92      	ldr	r2, [pc, #584]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b02:	0f7b      	lsrs	r3, r7, #29
 8000b04:	4333      	orrs	r3, r6
 8000b06:	4699      	mov	r9, r3
 8000b08:	4694      	mov	ip, r2
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	4463      	add	r3, ip
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	2600      	movs	r6, #0
 8000b14:	00ff      	lsls	r7, r7, #3
 8000b16:	9302      	str	r3, [sp, #8]
 8000b18:	0323      	lsls	r3, r4, #12
 8000b1a:	0b1b      	lsrs	r3, r3, #12
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	0063      	lsls	r3, r4, #1
 8000b20:	0fe4      	lsrs	r4, r4, #31
 8000b22:	4652      	mov	r2, sl
 8000b24:	0d5b      	lsrs	r3, r3, #21
 8000b26:	9401      	str	r4, [sp, #4]
 8000b28:	d100      	bne.n	8000b2c <__aeabi_ddiv+0x60>
 8000b2a:	e0b3      	b.n	8000c94 <__aeabi_ddiv+0x1c8>
 8000b2c:	4986      	ldr	r1, [pc, #536]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_ddiv+0x68>
 8000b32:	e09e      	b.n	8000c72 <__aeabi_ddiv+0x1a6>
 8000b34:	4642      	mov	r2, r8
 8000b36:	00d1      	lsls	r1, r2, #3
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	0412      	lsls	r2, r2, #16
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	4651      	mov	r1, sl
 8000b40:	0f49      	lsrs	r1, r1, #29
 8000b42:	4311      	orrs	r1, r2
 8000b44:	468b      	mov	fp, r1
 8000b46:	4981      	ldr	r1, [pc, #516]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b48:	4652      	mov	r2, sl
 8000b4a:	468c      	mov	ip, r1
 8000b4c:	9900      	ldr	r1, [sp, #0]
 8000b4e:	4463      	add	r3, ip
 8000b50:	1acb      	subs	r3, r1, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	00d2      	lsls	r2, r2, #3
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	002b      	movs	r3, r5
 8000b5a:	4063      	eors	r3, r4
 8000b5c:	469a      	mov	sl, r3
 8000b5e:	2e0f      	cmp	r6, #15
 8000b60:	d900      	bls.n	8000b64 <__aeabi_ddiv+0x98>
 8000b62:	e105      	b.n	8000d70 <__aeabi_ddiv+0x2a4>
 8000b64:	4b7a      	ldr	r3, [pc, #488]	; (8000d50 <__aeabi_ddiv+0x284>)
 8000b66:	00b6      	lsls	r6, r6, #2
 8000b68:	599b      	ldr	r3, [r3, r6]
 8000b6a:	469f      	mov	pc, r3
 8000b6c:	465b      	mov	r3, fp
 8000b6e:	4333      	orrs	r3, r6
 8000b70:	4699      	mov	r9, r3
 8000b72:	d000      	beq.n	8000b76 <__aeabi_ddiv+0xaa>
 8000b74:	e0b8      	b.n	8000ce8 <__aeabi_ddiv+0x21c>
 8000b76:	2302      	movs	r3, #2
 8000b78:	2608      	movs	r6, #8
 8000b7a:	2700      	movs	r7, #0
 8000b7c:	9000      	str	r0, [sp, #0]
 8000b7e:	9302      	str	r3, [sp, #8]
 8000b80:	e7ca      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000b82:	46cb      	mov	fp, r9
 8000b84:	003a      	movs	r2, r7
 8000b86:	9902      	ldr	r1, [sp, #8]
 8000b88:	9501      	str	r5, [sp, #4]
 8000b8a:	9b01      	ldr	r3, [sp, #4]
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	2902      	cmp	r1, #2
 8000b90:	d027      	beq.n	8000be2 <__aeabi_ddiv+0x116>
 8000b92:	2903      	cmp	r1, #3
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0xcc>
 8000b96:	e280      	b.n	800109a <__aeabi_ddiv+0x5ce>
 8000b98:	2901      	cmp	r1, #1
 8000b9a:	d044      	beq.n	8000c26 <__aeabi_ddiv+0x15a>
 8000b9c:	496d      	ldr	r1, [pc, #436]	; (8000d54 <__aeabi_ddiv+0x288>)
 8000b9e:	9b00      	ldr	r3, [sp, #0]
 8000ba0:	468c      	mov	ip, r1
 8000ba2:	4463      	add	r3, ip
 8000ba4:	001c      	movs	r4, r3
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	dd38      	ble.n	8000c1c <__aeabi_ddiv+0x150>
 8000baa:	0753      	lsls	r3, r2, #29
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000bae:	e213      	b.n	8000fd8 <__aeabi_ddiv+0x50c>
 8000bb0:	08d2      	lsrs	r2, r2, #3
 8000bb2:	465b      	mov	r3, fp
 8000bb4:	01db      	lsls	r3, r3, #7
 8000bb6:	d509      	bpl.n	8000bcc <__aeabi_ddiv+0x100>
 8000bb8:	4659      	mov	r1, fp
 8000bba:	4b67      	ldr	r3, [pc, #412]	; (8000d58 <__aeabi_ddiv+0x28c>)
 8000bbc:	4019      	ands	r1, r3
 8000bbe:	468b      	mov	fp, r1
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	00c9      	lsls	r1, r1, #3
 8000bc4:	468c      	mov	ip, r1
 8000bc6:	9b00      	ldr	r3, [sp, #0]
 8000bc8:	4463      	add	r3, ip
 8000bca:	001c      	movs	r4, r3
 8000bcc:	4b63      	ldr	r3, [pc, #396]	; (8000d5c <__aeabi_ddiv+0x290>)
 8000bce:	429c      	cmp	r4, r3
 8000bd0:	dc07      	bgt.n	8000be2 <__aeabi_ddiv+0x116>
 8000bd2:	465b      	mov	r3, fp
 8000bd4:	0564      	lsls	r4, r4, #21
 8000bd6:	075f      	lsls	r7, r3, #29
 8000bd8:	025b      	lsls	r3, r3, #9
 8000bda:	4317      	orrs	r7, r2
 8000bdc:	0b1b      	lsrs	r3, r3, #12
 8000bde:	0d62      	lsrs	r2, r4, #21
 8000be0:	e002      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000be2:	2300      	movs	r3, #0
 8000be4:	2700      	movs	r7, #0
 8000be6:	4a58      	ldr	r2, [pc, #352]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	031b      	lsls	r3, r3, #12
 8000bec:	0b1c      	lsrs	r4, r3, #12
 8000bee:	0d0b      	lsrs	r3, r1, #20
 8000bf0:	051b      	lsls	r3, r3, #20
 8000bf2:	4323      	orrs	r3, r4
 8000bf4:	0514      	lsls	r4, r2, #20
 8000bf6:	4a5a      	ldr	r2, [pc, #360]	; (8000d60 <__aeabi_ddiv+0x294>)
 8000bf8:	0038      	movs	r0, r7
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	431c      	orrs	r4, r3
 8000bfe:	4653      	mov	r3, sl
 8000c00:	0064      	lsls	r4, r4, #1
 8000c02:	07db      	lsls	r3, r3, #31
 8000c04:	0864      	lsrs	r4, r4, #1
 8000c06:	431c      	orrs	r4, r3
 8000c08:	0021      	movs	r1, r4
 8000c0a:	b005      	add	sp, #20
 8000c0c:	bc3c      	pop	{r2, r3, r4, r5}
 8000c0e:	4690      	mov	r8, r2
 8000c10:	4699      	mov	r9, r3
 8000c12:	46a2      	mov	sl, r4
 8000c14:	46ab      	mov	fp, r5
 8000c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4252      	negs	r2, r2
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	1b1b      	subs	r3, r3, r4
 8000c20:	2b38      	cmp	r3, #56	; 0x38
 8000c22:	dc00      	bgt.n	8000c26 <__aeabi_ddiv+0x15a>
 8000c24:	e1ad      	b.n	8000f82 <__aeabi_ddiv+0x4b6>
 8000c26:	2200      	movs	r2, #0
 8000c28:	2300      	movs	r3, #0
 8000c2a:	2700      	movs	r7, #0
 8000c2c:	e7dc      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000c2e:	465b      	mov	r3, fp
 8000c30:	4333      	orrs	r3, r6
 8000c32:	4699      	mov	r9, r3
 8000c34:	d05e      	beq.n	8000cf4 <__aeabi_ddiv+0x228>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_ddiv+0x170>
 8000c3a:	e18a      	b.n	8000f52 <__aeabi_ddiv+0x486>
 8000c3c:	0030      	movs	r0, r6
 8000c3e:	f001 f9c7 	bl	8001fd0 <__clzsi2>
 8000c42:	0003      	movs	r3, r0
 8000c44:	3b0b      	subs	r3, #11
 8000c46:	2b1c      	cmp	r3, #28
 8000c48:	dd00      	ble.n	8000c4c <__aeabi_ddiv+0x180>
 8000c4a:	e17b      	b.n	8000f44 <__aeabi_ddiv+0x478>
 8000c4c:	221d      	movs	r2, #29
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	465a      	mov	r2, fp
 8000c52:	0001      	movs	r1, r0
 8000c54:	40da      	lsrs	r2, r3
 8000c56:	3908      	subs	r1, #8
 8000c58:	408e      	lsls	r6, r1
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	465f      	mov	r7, fp
 8000c5e:	4333      	orrs	r3, r6
 8000c60:	4699      	mov	r9, r3
 8000c62:	408f      	lsls	r7, r1
 8000c64:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <__aeabi_ddiv+0x298>)
 8000c66:	2600      	movs	r6, #0
 8000c68:	1a1b      	subs	r3, r3, r0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9302      	str	r3, [sp, #8]
 8000c70:	e752      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000c72:	4641      	mov	r1, r8
 8000c74:	4653      	mov	r3, sl
 8000c76:	430b      	orrs	r3, r1
 8000c78:	493b      	ldr	r1, [pc, #236]	; (8000d68 <__aeabi_ddiv+0x29c>)
 8000c7a:	469b      	mov	fp, r3
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	9b00      	ldr	r3, [sp, #0]
 8000c80:	4463      	add	r3, ip
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	465b      	mov	r3, fp
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d13b      	bne.n	8000d02 <__aeabi_ddiv+0x236>
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	431e      	orrs	r6, r3
 8000c90:	2102      	movs	r1, #2
 8000c92:	e761      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000c94:	4643      	mov	r3, r8
 8000c96:	4313      	orrs	r3, r2
 8000c98:	469b      	mov	fp, r3
 8000c9a:	d037      	beq.n	8000d0c <__aeabi_ddiv+0x240>
 8000c9c:	4643      	mov	r3, r8
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_ddiv+0x1d8>
 8000ca2:	e162      	b.n	8000f6a <__aeabi_ddiv+0x49e>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	f001 f993 	bl	8001fd0 <__clzsi2>
 8000caa:	0003      	movs	r3, r0
 8000cac:	3b0b      	subs	r3, #11
 8000cae:	2b1c      	cmp	r3, #28
 8000cb0:	dd00      	ble.n	8000cb4 <__aeabi_ddiv+0x1e8>
 8000cb2:	e153      	b.n	8000f5c <__aeabi_ddiv+0x490>
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	4641      	mov	r1, r8
 8000cb8:	3a08      	subs	r2, #8
 8000cba:	4091      	lsls	r1, r2
 8000cbc:	4688      	mov	r8, r1
 8000cbe:	211d      	movs	r1, #29
 8000cc0:	1acb      	subs	r3, r1, r3
 8000cc2:	4651      	mov	r1, sl
 8000cc4:	40d9      	lsrs	r1, r3
 8000cc6:	000b      	movs	r3, r1
 8000cc8:	4641      	mov	r1, r8
 8000cca:	430b      	orrs	r3, r1
 8000ccc:	469b      	mov	fp, r3
 8000cce:	4653      	mov	r3, sl
 8000cd0:	4093      	lsls	r3, r2
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	9b00      	ldr	r3, [sp, #0]
 8000cd6:	4925      	ldr	r1, [pc, #148]	; (8000d6c <__aeabi_ddiv+0x2a0>)
 8000cd8:	469c      	mov	ip, r3
 8000cda:	4460      	add	r0, ip
 8000cdc:	0003      	movs	r3, r0
 8000cde:	468c      	mov	ip, r1
 8000ce0:	4463      	add	r3, ip
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	e737      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	46b1      	mov	r9, r6
 8000cec:	9000      	str	r0, [sp, #0]
 8000cee:	260c      	movs	r6, #12
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	e711      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	2604      	movs	r6, #4
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	e70a      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000d02:	2303      	movs	r3, #3
 8000d04:	46c3      	mov	fp, r8
 8000d06:	431e      	orrs	r6, r3
 8000d08:	2103      	movs	r1, #3
 8000d0a:	e725      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	431e      	orrs	r6, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	2101      	movs	r1, #1
 8000d14:	e720      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d16:	2300      	movs	r3, #0
 8000d18:	469a      	mov	sl, r3
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	031b      	lsls	r3, r3, #12
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d22:	e761      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	4649      	mov	r1, r9
 8000d28:	031b      	lsls	r3, r3, #12
 8000d2a:	4219      	tst	r1, r3
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x264>
 8000d2e:	e0e2      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d30:	4659      	mov	r1, fp
 8000d32:	4219      	tst	r1, r3
 8000d34:	d000      	beq.n	8000d38 <__aeabi_ddiv+0x26c>
 8000d36:	e0de      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d38:	430b      	orrs	r3, r1
 8000d3a:	031b      	lsls	r3, r3, #12
 8000d3c:	0017      	movs	r7, r2
 8000d3e:	0b1b      	lsrs	r3, r3, #12
 8000d40:	46a2      	mov	sl, r4
 8000d42:	4a01      	ldr	r2, [pc, #4]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d44:	e750      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	000007ff 	.word	0x000007ff
 8000d4c:	fffffc01 	.word	0xfffffc01
 8000d50:	08008288 	.word	0x08008288
 8000d54:	000003ff 	.word	0x000003ff
 8000d58:	feffffff 	.word	0xfeffffff
 8000d5c:	000007fe 	.word	0x000007fe
 8000d60:	800fffff 	.word	0x800fffff
 8000d64:	fffffc0d 	.word	0xfffffc0d
 8000d68:	fffff801 	.word	0xfffff801
 8000d6c:	000003f3 	.word	0x000003f3
 8000d70:	45d9      	cmp	r9, fp
 8000d72:	d900      	bls.n	8000d76 <__aeabi_ddiv+0x2aa>
 8000d74:	e0cb      	b.n	8000f0e <__aeabi_ddiv+0x442>
 8000d76:	d100      	bne.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000d78:	e0c6      	b.n	8000f08 <__aeabi_ddiv+0x43c>
 8000d7a:	003c      	movs	r4, r7
 8000d7c:	4648      	mov	r0, r9
 8000d7e:	2700      	movs	r7, #0
 8000d80:	9b00      	ldr	r3, [sp, #0]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	465b      	mov	r3, fp
 8000d88:	0e16      	lsrs	r6, r2, #24
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	0213      	lsls	r3, r2, #8
 8000d90:	4698      	mov	r8, r3
 8000d92:	0433      	lsls	r3, r6, #16
 8000d94:	0c1b      	lsrs	r3, r3, #16
 8000d96:	4699      	mov	r9, r3
 8000d98:	0c31      	lsrs	r1, r6, #16
 8000d9a:	9101      	str	r1, [sp, #4]
 8000d9c:	f7ff fa4c 	bl	8000238 <__aeabi_uidivmod>
 8000da0:	464a      	mov	r2, r9
 8000da2:	4342      	muls	r2, r0
 8000da4:	040b      	lsls	r3, r1, #16
 8000da6:	0c21      	lsrs	r1, r4, #16
 8000da8:	0005      	movs	r5, r0
 8000daa:	4319      	orrs	r1, r3
 8000dac:	428a      	cmp	r2, r1
 8000dae:	d907      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db0:	1989      	adds	r1, r1, r6
 8000db2:	3d01      	subs	r5, #1
 8000db4:	428e      	cmp	r6, r1
 8000db6:	d803      	bhi.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db8:	428a      	cmp	r2, r1
 8000dba:	d901      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000dbc:	1e85      	subs	r5, r0, #2
 8000dbe:	1989      	adds	r1, r1, r6
 8000dc0:	1a88      	subs	r0, r1, r2
 8000dc2:	9901      	ldr	r1, [sp, #4]
 8000dc4:	f7ff fa38 	bl	8000238 <__aeabi_uidivmod>
 8000dc8:	0409      	lsls	r1, r1, #16
 8000dca:	468c      	mov	ip, r1
 8000dcc:	464a      	mov	r2, r9
 8000dce:	0421      	lsls	r1, r4, #16
 8000dd0:	4664      	mov	r4, ip
 8000dd2:	4342      	muls	r2, r0
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	4321      	orrs	r1, r4
 8000dda:	428a      	cmp	r2, r1
 8000ddc:	d904      	bls.n	8000de8 <__aeabi_ddiv+0x31c>
 8000dde:	1989      	adds	r1, r1, r6
 8000de0:	3b01      	subs	r3, #1
 8000de2:	428e      	cmp	r6, r1
 8000de4:	d800      	bhi.n	8000de8 <__aeabi_ddiv+0x31c>
 8000de6:	e0f1      	b.n	8000fcc <__aeabi_ddiv+0x500>
 8000de8:	042d      	lsls	r5, r5, #16
 8000dea:	431d      	orrs	r5, r3
 8000dec:	46ab      	mov	fp, r5
 8000dee:	4643      	mov	r3, r8
 8000df0:	1a89      	subs	r1, r1, r2
 8000df2:	4642      	mov	r2, r8
 8000df4:	0c28      	lsrs	r0, r5, #16
 8000df6:	0412      	lsls	r2, r2, #16
 8000df8:	0c1d      	lsrs	r5, r3, #16
 8000dfa:	465b      	mov	r3, fp
 8000dfc:	0c14      	lsrs	r4, r2, #16
 8000dfe:	0022      	movs	r2, r4
 8000e00:	041b      	lsls	r3, r3, #16
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	435a      	muls	r2, r3
 8000e06:	9403      	str	r4, [sp, #12]
 8000e08:	436b      	muls	r3, r5
 8000e0a:	4344      	muls	r4, r0
 8000e0c:	9502      	str	r5, [sp, #8]
 8000e0e:	4368      	muls	r0, r5
 8000e10:	191b      	adds	r3, r3, r4
 8000e12:	0c15      	lsrs	r5, r2, #16
 8000e14:	18eb      	adds	r3, r5, r3
 8000e16:	429c      	cmp	r4, r3
 8000e18:	d903      	bls.n	8000e22 <__aeabi_ddiv+0x356>
 8000e1a:	2480      	movs	r4, #128	; 0x80
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	46a4      	mov	ip, r4
 8000e20:	4460      	add	r0, ip
 8000e22:	0c1c      	lsrs	r4, r3, #16
 8000e24:	0415      	lsls	r5, r2, #16
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	0c2d      	lsrs	r5, r5, #16
 8000e2a:	1820      	adds	r0, r4, r0
 8000e2c:	195d      	adds	r5, r3, r5
 8000e2e:	4281      	cmp	r1, r0
 8000e30:	d377      	bcc.n	8000f22 <__aeabi_ddiv+0x456>
 8000e32:	d073      	beq.n	8000f1c <__aeabi_ddiv+0x450>
 8000e34:	1a0c      	subs	r4, r1, r0
 8000e36:	4aa2      	ldr	r2, [pc, #648]	; (80010c0 <__aeabi_ddiv+0x5f4>)
 8000e38:	1b7d      	subs	r5, r7, r5
 8000e3a:	42af      	cmp	r7, r5
 8000e3c:	41bf      	sbcs	r7, r7
 8000e3e:	4694      	mov	ip, r2
 8000e40:	9b00      	ldr	r3, [sp, #0]
 8000e42:	427f      	negs	r7, r7
 8000e44:	4463      	add	r3, ip
 8000e46:	1be0      	subs	r0, r4, r7
 8000e48:	001c      	movs	r4, r3
 8000e4a:	4286      	cmp	r6, r0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_ddiv+0x384>
 8000e4e:	e0db      	b.n	8001008 <__aeabi_ddiv+0x53c>
 8000e50:	9901      	ldr	r1, [sp, #4]
 8000e52:	f7ff f9f1 	bl	8000238 <__aeabi_uidivmod>
 8000e56:	464a      	mov	r2, r9
 8000e58:	4342      	muls	r2, r0
 8000e5a:	040b      	lsls	r3, r1, #16
 8000e5c:	0c29      	lsrs	r1, r5, #16
 8000e5e:	0007      	movs	r7, r0
 8000e60:	4319      	orrs	r1, r3
 8000e62:	428a      	cmp	r2, r1
 8000e64:	d907      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e66:	1989      	adds	r1, r1, r6
 8000e68:	3f01      	subs	r7, #1
 8000e6a:	428e      	cmp	r6, r1
 8000e6c:	d803      	bhi.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d901      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e72:	1e87      	subs	r7, r0, #2
 8000e74:	1989      	adds	r1, r1, r6
 8000e76:	1a88      	subs	r0, r1, r2
 8000e78:	9901      	ldr	r1, [sp, #4]
 8000e7a:	f7ff f9dd 	bl	8000238 <__aeabi_uidivmod>
 8000e7e:	0409      	lsls	r1, r1, #16
 8000e80:	464a      	mov	r2, r9
 8000e82:	4689      	mov	r9, r1
 8000e84:	0429      	lsls	r1, r5, #16
 8000e86:	464d      	mov	r5, r9
 8000e88:	4342      	muls	r2, r0
 8000e8a:	0c09      	lsrs	r1, r1, #16
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	4329      	orrs	r1, r5
 8000e90:	428a      	cmp	r2, r1
 8000e92:	d907      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e94:	1989      	adds	r1, r1, r6
 8000e96:	3b01      	subs	r3, #1
 8000e98:	428e      	cmp	r6, r1
 8000e9a:	d803      	bhi.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d901      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000ea0:	1e83      	subs	r3, r0, #2
 8000ea2:	1989      	adds	r1, r1, r6
 8000ea4:	043f      	lsls	r7, r7, #16
 8000ea6:	1a89      	subs	r1, r1, r2
 8000ea8:	003a      	movs	r2, r7
 8000eaa:	9f03      	ldr	r7, [sp, #12]
 8000eac:	431a      	orrs	r2, r3
 8000eae:	0038      	movs	r0, r7
 8000eb0:	0413      	lsls	r3, r2, #16
 8000eb2:	0c1b      	lsrs	r3, r3, #16
 8000eb4:	4358      	muls	r0, r3
 8000eb6:	4681      	mov	r9, r0
 8000eb8:	9802      	ldr	r0, [sp, #8]
 8000eba:	0c15      	lsrs	r5, r2, #16
 8000ebc:	436f      	muls	r7, r5
 8000ebe:	4343      	muls	r3, r0
 8000ec0:	4345      	muls	r5, r0
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	0c00      	lsrs	r0, r0, #16
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	19db      	adds	r3, r3, r7
 8000eca:	4463      	add	r3, ip
 8000ecc:	429f      	cmp	r7, r3
 8000ece:	d903      	bls.n	8000ed8 <__aeabi_ddiv+0x40c>
 8000ed0:	2080      	movs	r0, #128	; 0x80
 8000ed2:	0240      	lsls	r0, r0, #9
 8000ed4:	4684      	mov	ip, r0
 8000ed6:	4465      	add	r5, ip
 8000ed8:	4648      	mov	r0, r9
 8000eda:	0c1f      	lsrs	r7, r3, #16
 8000edc:	0400      	lsls	r0, r0, #16
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	0c00      	lsrs	r0, r0, #16
 8000ee2:	197d      	adds	r5, r7, r5
 8000ee4:	1818      	adds	r0, r3, r0
 8000ee6:	42a9      	cmp	r1, r5
 8000ee8:	d200      	bcs.n	8000eec <__aeabi_ddiv+0x420>
 8000eea:	e084      	b.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_ddiv+0x424>
 8000eee:	e07f      	b.n	8000ff0 <__aeabi_ddiv+0x524>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	e657      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	464a      	mov	r2, r9
 8000efa:	031b      	lsls	r3, r3, #12
 8000efc:	4313      	orrs	r3, r2
 8000efe:	031b      	lsls	r3, r3, #12
 8000f00:	0b1b      	lsrs	r3, r3, #12
 8000f02:	46aa      	mov	sl, r5
 8000f04:	4a6f      	ldr	r2, [pc, #444]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 8000f06:	e66f      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000f08:	42ba      	cmp	r2, r7
 8000f0a:	d900      	bls.n	8000f0e <__aeabi_ddiv+0x442>
 8000f0c:	e735      	b.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000f0e:	464b      	mov	r3, r9
 8000f10:	07dc      	lsls	r4, r3, #31
 8000f12:	0858      	lsrs	r0, r3, #1
 8000f14:	087b      	lsrs	r3, r7, #1
 8000f16:	431c      	orrs	r4, r3
 8000f18:	07ff      	lsls	r7, r7, #31
 8000f1a:	e734      	b.n	8000d86 <__aeabi_ddiv+0x2ba>
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	42af      	cmp	r7, r5
 8000f20:	d289      	bcs.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f22:	4447      	add	r7, r8
 8000f24:	4547      	cmp	r7, r8
 8000f26:	41a4      	sbcs	r4, r4
 8000f28:	465b      	mov	r3, fp
 8000f2a:	4264      	negs	r4, r4
 8000f2c:	19a4      	adds	r4, r4, r6
 8000f2e:	1864      	adds	r4, r4, r1
 8000f30:	3b01      	subs	r3, #1
 8000f32:	42a6      	cmp	r6, r4
 8000f34:	d21e      	bcs.n	8000f74 <__aeabi_ddiv+0x4a8>
 8000f36:	42a0      	cmp	r0, r4
 8000f38:	d86d      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f3c:	e0b6      	b.n	80010ac <__aeabi_ddiv+0x5e0>
 8000f3e:	1a24      	subs	r4, r4, r0
 8000f40:	469b      	mov	fp, r3
 8000f42:	e778      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f44:	0003      	movs	r3, r0
 8000f46:	465a      	mov	r2, fp
 8000f48:	3b28      	subs	r3, #40	; 0x28
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	2700      	movs	r7, #0
 8000f4e:	4691      	mov	r9, r2
 8000f50:	e688      	b.n	8000c64 <__aeabi_ddiv+0x198>
 8000f52:	4658      	mov	r0, fp
 8000f54:	f001 f83c 	bl	8001fd0 <__clzsi2>
 8000f58:	3020      	adds	r0, #32
 8000f5a:	e672      	b.n	8000c42 <__aeabi_ddiv+0x176>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	4652      	mov	r2, sl
 8000f60:	3b28      	subs	r3, #40	; 0x28
 8000f62:	409a      	lsls	r2, r3
 8000f64:	4693      	mov	fp, r2
 8000f66:	2200      	movs	r2, #0
 8000f68:	e6b4      	b.n	8000cd4 <__aeabi_ddiv+0x208>
 8000f6a:	4650      	mov	r0, sl
 8000f6c:	f001 f830 	bl	8001fd0 <__clzsi2>
 8000f70:	3020      	adds	r0, #32
 8000f72:	e69a      	b.n	8000caa <__aeabi_ddiv+0x1de>
 8000f74:	42a6      	cmp	r6, r4
 8000f76:	d1e2      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f78:	45b8      	cmp	r8, r7
 8000f7a:	d9dc      	bls.n	8000f36 <__aeabi_ddiv+0x46a>
 8000f7c:	1a34      	subs	r4, r6, r0
 8000f7e:	469b      	mov	fp, r3
 8000f80:	e759      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f82:	2b1f      	cmp	r3, #31
 8000f84:	dc65      	bgt.n	8001052 <__aeabi_ddiv+0x586>
 8000f86:	4c50      	ldr	r4, [pc, #320]	; (80010c8 <__aeabi_ddiv+0x5fc>)
 8000f88:	9900      	ldr	r1, [sp, #0]
 8000f8a:	46a4      	mov	ip, r4
 8000f8c:	465c      	mov	r4, fp
 8000f8e:	4461      	add	r1, ip
 8000f90:	0008      	movs	r0, r1
 8000f92:	408c      	lsls	r4, r1
 8000f94:	0011      	movs	r1, r2
 8000f96:	4082      	lsls	r2, r0
 8000f98:	40d9      	lsrs	r1, r3
 8000f9a:	1e50      	subs	r0, r2, #1
 8000f9c:	4182      	sbcs	r2, r0
 8000f9e:	430c      	orrs	r4, r1
 8000fa0:	4314      	orrs	r4, r2
 8000fa2:	465a      	mov	r2, fp
 8000fa4:	40da      	lsrs	r2, r3
 8000fa6:	0013      	movs	r3, r2
 8000fa8:	0762      	lsls	r2, r4, #29
 8000faa:	d009      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fac:	220f      	movs	r2, #15
 8000fae:	4022      	ands	r2, r4
 8000fb0:	2a04      	cmp	r2, #4
 8000fb2:	d005      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fb4:	0022      	movs	r2, r4
 8000fb6:	1d14      	adds	r4, r2, #4
 8000fb8:	4294      	cmp	r4, r2
 8000fba:	4189      	sbcs	r1, r1
 8000fbc:	4249      	negs	r1, r1
 8000fbe:	185b      	adds	r3, r3, r1
 8000fc0:	021a      	lsls	r2, r3, #8
 8000fc2:	d562      	bpl.n	800108a <__aeabi_ddiv+0x5be>
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	2700      	movs	r7, #0
 8000fca:	e60d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000fcc:	428a      	cmp	r2, r1
 8000fce:	d800      	bhi.n	8000fd2 <__aeabi_ddiv+0x506>
 8000fd0:	e70a      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd2:	1e83      	subs	r3, r0, #2
 8000fd4:	1989      	adds	r1, r1, r6
 8000fd6:	e707      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd8:	230f      	movs	r3, #15
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_ddiv+0x516>
 8000fe0:	e5e6      	b.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000fe2:	1d17      	adds	r7, r2, #4
 8000fe4:	4297      	cmp	r7, r2
 8000fe6:	4192      	sbcs	r2, r2
 8000fe8:	4253      	negs	r3, r2
 8000fea:	449b      	add	fp, r3
 8000fec:	08fa      	lsrs	r2, r7, #3
 8000fee:	e5e0      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000ff4:	e5d7      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ff6:	1871      	adds	r1, r6, r1
 8000ff8:	1e53      	subs	r3, r2, #1
 8000ffa:	42b1      	cmp	r1, r6
 8000ffc:	d327      	bcc.n	800104e <__aeabi_ddiv+0x582>
 8000ffe:	42a9      	cmp	r1, r5
 8001000:	d315      	bcc.n	800102e <__aeabi_ddiv+0x562>
 8001002:	d058      	beq.n	80010b6 <__aeabi_ddiv+0x5ea>
 8001004:	001a      	movs	r2, r3
 8001006:	e773      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001008:	2b00      	cmp	r3, #0
 800100a:	dc00      	bgt.n	800100e <__aeabi_ddiv+0x542>
 800100c:	e604      	b.n	8000c18 <__aeabi_ddiv+0x14c>
 800100e:	2301      	movs	r3, #1
 8001010:	2200      	movs	r2, #0
 8001012:	449b      	add	fp, r3
 8001014:	e5cd      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8001016:	2302      	movs	r3, #2
 8001018:	4447      	add	r7, r8
 800101a:	4547      	cmp	r7, r8
 800101c:	4189      	sbcs	r1, r1
 800101e:	425b      	negs	r3, r3
 8001020:	469c      	mov	ip, r3
 8001022:	4249      	negs	r1, r1
 8001024:	1989      	adds	r1, r1, r6
 8001026:	190c      	adds	r4, r1, r4
 8001028:	44e3      	add	fp, ip
 800102a:	1a24      	subs	r4, r4, r0
 800102c:	e703      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 800102e:	4643      	mov	r3, r8
 8001030:	005f      	lsls	r7, r3, #1
 8001032:	4547      	cmp	r7, r8
 8001034:	419b      	sbcs	r3, r3
 8001036:	46b8      	mov	r8, r7
 8001038:	425b      	negs	r3, r3
 800103a:	199e      	adds	r6, r3, r6
 800103c:	3a02      	subs	r2, #2
 800103e:	1989      	adds	r1, r1, r6
 8001040:	42a9      	cmp	r1, r5
 8001042:	d000      	beq.n	8001046 <__aeabi_ddiv+0x57a>
 8001044:	e754      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001046:	4540      	cmp	r0, r8
 8001048:	d000      	beq.n	800104c <__aeabi_ddiv+0x580>
 800104a:	e751      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 800104c:	e5ab      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 800104e:	001a      	movs	r2, r3
 8001050:	e7f6      	b.n	8001040 <__aeabi_ddiv+0x574>
 8001052:	211f      	movs	r1, #31
 8001054:	465f      	mov	r7, fp
 8001056:	4249      	negs	r1, r1
 8001058:	1b0c      	subs	r4, r1, r4
 800105a:	40e7      	lsrs	r7, r4
 800105c:	2b20      	cmp	r3, #32
 800105e:	d007      	beq.n	8001070 <__aeabi_ddiv+0x5a4>
 8001060:	491a      	ldr	r1, [pc, #104]	; (80010cc <__aeabi_ddiv+0x600>)
 8001062:	9b00      	ldr	r3, [sp, #0]
 8001064:	468c      	mov	ip, r1
 8001066:	4463      	add	r3, ip
 8001068:	0018      	movs	r0, r3
 800106a:	465b      	mov	r3, fp
 800106c:	4083      	lsls	r3, r0
 800106e:	431a      	orrs	r2, r3
 8001070:	1e50      	subs	r0, r2, #1
 8001072:	4182      	sbcs	r2, r0
 8001074:	433a      	orrs	r2, r7
 8001076:	2707      	movs	r7, #7
 8001078:	2300      	movs	r3, #0
 800107a:	4017      	ands	r7, r2
 800107c:	d009      	beq.n	8001092 <__aeabi_ddiv+0x5c6>
 800107e:	210f      	movs	r1, #15
 8001080:	2300      	movs	r3, #0
 8001082:	4011      	ands	r1, r2
 8001084:	0014      	movs	r4, r2
 8001086:	2904      	cmp	r1, #4
 8001088:	d195      	bne.n	8000fb6 <__aeabi_ddiv+0x4ea>
 800108a:	0022      	movs	r2, r4
 800108c:	075f      	lsls	r7, r3, #29
 800108e:	025b      	lsls	r3, r3, #9
 8001090:	0b1b      	lsrs	r3, r3, #12
 8001092:	08d2      	lsrs	r2, r2, #3
 8001094:	4317      	orrs	r7, r2
 8001096:	2200      	movs	r2, #0
 8001098:	e5a6      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	4659      	mov	r1, fp
 800109e:	031b      	lsls	r3, r3, #12
 80010a0:	430b      	orrs	r3, r1
 80010a2:	031b      	lsls	r3, r3, #12
 80010a4:	0017      	movs	r7, r2
 80010a6:	0b1b      	lsrs	r3, r3, #12
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 80010aa:	e59d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 80010ac:	42bd      	cmp	r5, r7
 80010ae:	d8b2      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 80010b0:	469b      	mov	fp, r3
 80010b2:	2400      	movs	r4, #0
 80010b4:	e6bf      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 80010b6:	4580      	cmp	r8, r0
 80010b8:	d3b9      	bcc.n	800102e <__aeabi_ddiv+0x562>
 80010ba:	001a      	movs	r2, r3
 80010bc:	e7c3      	b.n	8001046 <__aeabi_ddiv+0x57a>
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	000003ff 	.word	0x000003ff
 80010c4:	000007ff 	.word	0x000007ff
 80010c8:	0000041e 	.word	0x0000041e
 80010cc:	0000043e 	.word	0x0000043e

080010d0 <__eqdf2>:
 80010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d2:	464f      	mov	r7, r9
 80010d4:	4646      	mov	r6, r8
 80010d6:	46d6      	mov	lr, sl
 80010d8:	4684      	mov	ip, r0
 80010da:	b5c0      	push	{r6, r7, lr}
 80010dc:	4680      	mov	r8, r0
 80010de:	4e19      	ldr	r6, [pc, #100]	; (8001144 <__eqdf2+0x74>)
 80010e0:	0318      	lsls	r0, r3, #12
 80010e2:	030f      	lsls	r7, r1, #12
 80010e4:	004d      	lsls	r5, r1, #1
 80010e6:	0b00      	lsrs	r0, r0, #12
 80010e8:	005c      	lsls	r4, r3, #1
 80010ea:	4682      	mov	sl, r0
 80010ec:	0b3f      	lsrs	r7, r7, #12
 80010ee:	0d6d      	lsrs	r5, r5, #21
 80010f0:	0fc9      	lsrs	r1, r1, #31
 80010f2:	4691      	mov	r9, r2
 80010f4:	0d64      	lsrs	r4, r4, #21
 80010f6:	0fdb      	lsrs	r3, r3, #31
 80010f8:	2001      	movs	r0, #1
 80010fa:	42b5      	cmp	r5, r6
 80010fc:	d00a      	beq.n	8001114 <__eqdf2+0x44>
 80010fe:	42b4      	cmp	r4, r6
 8001100:	d003      	beq.n	800110a <__eqdf2+0x3a>
 8001102:	42a5      	cmp	r5, r4
 8001104:	d101      	bne.n	800110a <__eqdf2+0x3a>
 8001106:	4557      	cmp	r7, sl
 8001108:	d00c      	beq.n	8001124 <__eqdf2+0x54>
 800110a:	bc1c      	pop	{r2, r3, r4}
 800110c:	4690      	mov	r8, r2
 800110e:	4699      	mov	r9, r3
 8001110:	46a2      	mov	sl, r4
 8001112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001114:	4666      	mov	r6, ip
 8001116:	433e      	orrs	r6, r7
 8001118:	d1f7      	bne.n	800110a <__eqdf2+0x3a>
 800111a:	42ac      	cmp	r4, r5
 800111c:	d1f5      	bne.n	800110a <__eqdf2+0x3a>
 800111e:	4654      	mov	r4, sl
 8001120:	4314      	orrs	r4, r2
 8001122:	d1f2      	bne.n	800110a <__eqdf2+0x3a>
 8001124:	2001      	movs	r0, #1
 8001126:	45c8      	cmp	r8, r9
 8001128:	d1ef      	bne.n	800110a <__eqdf2+0x3a>
 800112a:	4299      	cmp	r1, r3
 800112c:	d007      	beq.n	800113e <__eqdf2+0x6e>
 800112e:	2d00      	cmp	r5, #0
 8001130:	d1eb      	bne.n	800110a <__eqdf2+0x3a>
 8001132:	4663      	mov	r3, ip
 8001134:	431f      	orrs	r7, r3
 8001136:	0038      	movs	r0, r7
 8001138:	1e47      	subs	r7, r0, #1
 800113a:	41b8      	sbcs	r0, r7
 800113c:	e7e5      	b.n	800110a <__eqdf2+0x3a>
 800113e:	2000      	movs	r0, #0
 8001140:	e7e3      	b.n	800110a <__eqdf2+0x3a>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	000007ff 	.word	0x000007ff

08001148 <__gedf2>:
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	464f      	mov	r7, r9
 800114c:	4646      	mov	r6, r8
 800114e:	46d6      	mov	lr, sl
 8001150:	004d      	lsls	r5, r1, #1
 8001152:	b5c0      	push	{r6, r7, lr}
 8001154:	030e      	lsls	r6, r1, #12
 8001156:	0fc9      	lsrs	r1, r1, #31
 8001158:	468a      	mov	sl, r1
 800115a:	492c      	ldr	r1, [pc, #176]	; (800120c <__gedf2+0xc4>)
 800115c:	031f      	lsls	r7, r3, #12
 800115e:	005c      	lsls	r4, r3, #1
 8001160:	4680      	mov	r8, r0
 8001162:	0b36      	lsrs	r6, r6, #12
 8001164:	0d6d      	lsrs	r5, r5, #21
 8001166:	4691      	mov	r9, r2
 8001168:	0b3f      	lsrs	r7, r7, #12
 800116a:	0d64      	lsrs	r4, r4, #21
 800116c:	0fdb      	lsrs	r3, r3, #31
 800116e:	428d      	cmp	r5, r1
 8001170:	d01e      	beq.n	80011b0 <__gedf2+0x68>
 8001172:	428c      	cmp	r4, r1
 8001174:	d016      	beq.n	80011a4 <__gedf2+0x5c>
 8001176:	2d00      	cmp	r5, #0
 8001178:	d11e      	bne.n	80011b8 <__gedf2+0x70>
 800117a:	4330      	orrs	r0, r6
 800117c:	4684      	mov	ip, r0
 800117e:	2c00      	cmp	r4, #0
 8001180:	d101      	bne.n	8001186 <__gedf2+0x3e>
 8001182:	433a      	orrs	r2, r7
 8001184:	d023      	beq.n	80011ce <__gedf2+0x86>
 8001186:	4662      	mov	r2, ip
 8001188:	2a00      	cmp	r2, #0
 800118a:	d01a      	beq.n	80011c2 <__gedf2+0x7a>
 800118c:	459a      	cmp	sl, r3
 800118e:	d029      	beq.n	80011e4 <__gedf2+0x9c>
 8001190:	4651      	mov	r1, sl
 8001192:	2002      	movs	r0, #2
 8001194:	3901      	subs	r1, #1
 8001196:	4008      	ands	r0, r1
 8001198:	3801      	subs	r0, #1
 800119a:	bc1c      	pop	{r2, r3, r4}
 800119c:	4690      	mov	r8, r2
 800119e:	4699      	mov	r9, r3
 80011a0:	46a2      	mov	sl, r4
 80011a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a4:	0039      	movs	r1, r7
 80011a6:	4311      	orrs	r1, r2
 80011a8:	d0e5      	beq.n	8001176 <__gedf2+0x2e>
 80011aa:	2002      	movs	r0, #2
 80011ac:	4240      	negs	r0, r0
 80011ae:	e7f4      	b.n	800119a <__gedf2+0x52>
 80011b0:	4330      	orrs	r0, r6
 80011b2:	d1fa      	bne.n	80011aa <__gedf2+0x62>
 80011b4:	42ac      	cmp	r4, r5
 80011b6:	d00f      	beq.n	80011d8 <__gedf2+0x90>
 80011b8:	2c00      	cmp	r4, #0
 80011ba:	d10f      	bne.n	80011dc <__gedf2+0x94>
 80011bc:	433a      	orrs	r2, r7
 80011be:	d0e7      	beq.n	8001190 <__gedf2+0x48>
 80011c0:	e00c      	b.n	80011dc <__gedf2+0x94>
 80011c2:	2201      	movs	r2, #1
 80011c4:	3b01      	subs	r3, #1
 80011c6:	4393      	bics	r3, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	3001      	adds	r0, #1
 80011cc:	e7e5      	b.n	800119a <__gedf2+0x52>
 80011ce:	4663      	mov	r3, ip
 80011d0:	2000      	movs	r0, #0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0e1      	beq.n	800119a <__gedf2+0x52>
 80011d6:	e7db      	b.n	8001190 <__gedf2+0x48>
 80011d8:	433a      	orrs	r2, r7
 80011da:	d1e6      	bne.n	80011aa <__gedf2+0x62>
 80011dc:	459a      	cmp	sl, r3
 80011de:	d1d7      	bne.n	8001190 <__gedf2+0x48>
 80011e0:	42a5      	cmp	r5, r4
 80011e2:	dcd5      	bgt.n	8001190 <__gedf2+0x48>
 80011e4:	42a5      	cmp	r5, r4
 80011e6:	db05      	blt.n	80011f4 <__gedf2+0xac>
 80011e8:	42be      	cmp	r6, r7
 80011ea:	d8d1      	bhi.n	8001190 <__gedf2+0x48>
 80011ec:	d008      	beq.n	8001200 <__gedf2+0xb8>
 80011ee:	2000      	movs	r0, #0
 80011f0:	42be      	cmp	r6, r7
 80011f2:	d2d2      	bcs.n	800119a <__gedf2+0x52>
 80011f4:	4650      	mov	r0, sl
 80011f6:	2301      	movs	r3, #1
 80011f8:	3801      	subs	r0, #1
 80011fa:	4398      	bics	r0, r3
 80011fc:	3001      	adds	r0, #1
 80011fe:	e7cc      	b.n	800119a <__gedf2+0x52>
 8001200:	45c8      	cmp	r8, r9
 8001202:	d8c5      	bhi.n	8001190 <__gedf2+0x48>
 8001204:	2000      	movs	r0, #0
 8001206:	45c8      	cmp	r8, r9
 8001208:	d3f4      	bcc.n	80011f4 <__gedf2+0xac>
 800120a:	e7c6      	b.n	800119a <__gedf2+0x52>
 800120c:	000007ff 	.word	0x000007ff

08001210 <__ledf2>:
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	464f      	mov	r7, r9
 8001214:	4646      	mov	r6, r8
 8001216:	46d6      	mov	lr, sl
 8001218:	004d      	lsls	r5, r1, #1
 800121a:	b5c0      	push	{r6, r7, lr}
 800121c:	030e      	lsls	r6, r1, #12
 800121e:	0fc9      	lsrs	r1, r1, #31
 8001220:	468a      	mov	sl, r1
 8001222:	492e      	ldr	r1, [pc, #184]	; (80012dc <__ledf2+0xcc>)
 8001224:	031f      	lsls	r7, r3, #12
 8001226:	005c      	lsls	r4, r3, #1
 8001228:	4680      	mov	r8, r0
 800122a:	0b36      	lsrs	r6, r6, #12
 800122c:	0d6d      	lsrs	r5, r5, #21
 800122e:	4691      	mov	r9, r2
 8001230:	0b3f      	lsrs	r7, r7, #12
 8001232:	0d64      	lsrs	r4, r4, #21
 8001234:	0fdb      	lsrs	r3, r3, #31
 8001236:	428d      	cmp	r5, r1
 8001238:	d018      	beq.n	800126c <__ledf2+0x5c>
 800123a:	428c      	cmp	r4, r1
 800123c:	d011      	beq.n	8001262 <__ledf2+0x52>
 800123e:	2d00      	cmp	r5, #0
 8001240:	d118      	bne.n	8001274 <__ledf2+0x64>
 8001242:	4330      	orrs	r0, r6
 8001244:	4684      	mov	ip, r0
 8001246:	2c00      	cmp	r4, #0
 8001248:	d11e      	bne.n	8001288 <__ledf2+0x78>
 800124a:	433a      	orrs	r2, r7
 800124c:	d11c      	bne.n	8001288 <__ledf2+0x78>
 800124e:	4663      	mov	r3, ip
 8001250:	2000      	movs	r0, #0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d030      	beq.n	80012b8 <__ledf2+0xa8>
 8001256:	4651      	mov	r1, sl
 8001258:	2002      	movs	r0, #2
 800125a:	3901      	subs	r1, #1
 800125c:	4008      	ands	r0, r1
 800125e:	3801      	subs	r0, #1
 8001260:	e02a      	b.n	80012b8 <__ledf2+0xa8>
 8001262:	0039      	movs	r1, r7
 8001264:	4311      	orrs	r1, r2
 8001266:	d0ea      	beq.n	800123e <__ledf2+0x2e>
 8001268:	2002      	movs	r0, #2
 800126a:	e025      	b.n	80012b8 <__ledf2+0xa8>
 800126c:	4330      	orrs	r0, r6
 800126e:	d1fb      	bne.n	8001268 <__ledf2+0x58>
 8001270:	42ac      	cmp	r4, r5
 8001272:	d026      	beq.n	80012c2 <__ledf2+0xb2>
 8001274:	2c00      	cmp	r4, #0
 8001276:	d126      	bne.n	80012c6 <__ledf2+0xb6>
 8001278:	433a      	orrs	r2, r7
 800127a:	d124      	bne.n	80012c6 <__ledf2+0xb6>
 800127c:	4651      	mov	r1, sl
 800127e:	2002      	movs	r0, #2
 8001280:	3901      	subs	r1, #1
 8001282:	4008      	ands	r0, r1
 8001284:	3801      	subs	r0, #1
 8001286:	e017      	b.n	80012b8 <__ledf2+0xa8>
 8001288:	4662      	mov	r2, ip
 800128a:	2a00      	cmp	r2, #0
 800128c:	d00f      	beq.n	80012ae <__ledf2+0x9e>
 800128e:	459a      	cmp	sl, r3
 8001290:	d1e1      	bne.n	8001256 <__ledf2+0x46>
 8001292:	42a5      	cmp	r5, r4
 8001294:	db05      	blt.n	80012a2 <__ledf2+0x92>
 8001296:	42be      	cmp	r6, r7
 8001298:	d8dd      	bhi.n	8001256 <__ledf2+0x46>
 800129a:	d019      	beq.n	80012d0 <__ledf2+0xc0>
 800129c:	2000      	movs	r0, #0
 800129e:	42be      	cmp	r6, r7
 80012a0:	d20a      	bcs.n	80012b8 <__ledf2+0xa8>
 80012a2:	4650      	mov	r0, sl
 80012a4:	2301      	movs	r3, #1
 80012a6:	3801      	subs	r0, #1
 80012a8:	4398      	bics	r0, r3
 80012aa:	3001      	adds	r0, #1
 80012ac:	e004      	b.n	80012b8 <__ledf2+0xa8>
 80012ae:	2201      	movs	r2, #1
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4393      	bics	r3, r2
 80012b4:	0018      	movs	r0, r3
 80012b6:	3001      	adds	r0, #1
 80012b8:	bc1c      	pop	{r2, r3, r4}
 80012ba:	4690      	mov	r8, r2
 80012bc:	4699      	mov	r9, r3
 80012be:	46a2      	mov	sl, r4
 80012c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c2:	433a      	orrs	r2, r7
 80012c4:	d1d0      	bne.n	8001268 <__ledf2+0x58>
 80012c6:	459a      	cmp	sl, r3
 80012c8:	d1c5      	bne.n	8001256 <__ledf2+0x46>
 80012ca:	42a5      	cmp	r5, r4
 80012cc:	dcc3      	bgt.n	8001256 <__ledf2+0x46>
 80012ce:	e7e0      	b.n	8001292 <__ledf2+0x82>
 80012d0:	45c8      	cmp	r8, r9
 80012d2:	d8c0      	bhi.n	8001256 <__ledf2+0x46>
 80012d4:	2000      	movs	r0, #0
 80012d6:	45c8      	cmp	r8, r9
 80012d8:	d3e3      	bcc.n	80012a2 <__ledf2+0x92>
 80012da:	e7ed      	b.n	80012b8 <__ledf2+0xa8>
 80012dc:	000007ff 	.word	0x000007ff

080012e0 <__aeabi_dmul>:
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	4657      	mov	r7, sl
 80012e4:	46de      	mov	lr, fp
 80012e6:	464e      	mov	r6, r9
 80012e8:	4645      	mov	r5, r8
 80012ea:	b5e0      	push	{r5, r6, r7, lr}
 80012ec:	4683      	mov	fp, r0
 80012ee:	0006      	movs	r6, r0
 80012f0:	030f      	lsls	r7, r1, #12
 80012f2:	0048      	lsls	r0, r1, #1
 80012f4:	b087      	sub	sp, #28
 80012f6:	4692      	mov	sl, r2
 80012f8:	001d      	movs	r5, r3
 80012fa:	0b3f      	lsrs	r7, r7, #12
 80012fc:	0d40      	lsrs	r0, r0, #21
 80012fe:	0fcc      	lsrs	r4, r1, #31
 8001300:	2800      	cmp	r0, #0
 8001302:	d100      	bne.n	8001306 <__aeabi_dmul+0x26>
 8001304:	e06f      	b.n	80013e6 <__aeabi_dmul+0x106>
 8001306:	4bde      	ldr	r3, [pc, #888]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001308:	4298      	cmp	r0, r3
 800130a:	d038      	beq.n	800137e <__aeabi_dmul+0x9e>
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	00ff      	lsls	r7, r7, #3
 8001310:	041b      	lsls	r3, r3, #16
 8001312:	431f      	orrs	r7, r3
 8001314:	0f73      	lsrs	r3, r6, #29
 8001316:	433b      	orrs	r3, r7
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	4bda      	ldr	r3, [pc, #872]	; (8001684 <__aeabi_dmul+0x3a4>)
 800131c:	2700      	movs	r7, #0
 800131e:	4699      	mov	r9, r3
 8001320:	2300      	movs	r3, #0
 8001322:	469b      	mov	fp, r3
 8001324:	00f6      	lsls	r6, r6, #3
 8001326:	4481      	add	r9, r0
 8001328:	032b      	lsls	r3, r5, #12
 800132a:	0069      	lsls	r1, r5, #1
 800132c:	0b1b      	lsrs	r3, r3, #12
 800132e:	4652      	mov	r2, sl
 8001330:	4698      	mov	r8, r3
 8001332:	0d49      	lsrs	r1, r1, #21
 8001334:	0fed      	lsrs	r5, r5, #31
 8001336:	2900      	cmp	r1, #0
 8001338:	d100      	bne.n	800133c <__aeabi_dmul+0x5c>
 800133a:	e085      	b.n	8001448 <__aeabi_dmul+0x168>
 800133c:	4bd0      	ldr	r3, [pc, #832]	; (8001680 <__aeabi_dmul+0x3a0>)
 800133e:	4299      	cmp	r1, r3
 8001340:	d100      	bne.n	8001344 <__aeabi_dmul+0x64>
 8001342:	e073      	b.n	800142c <__aeabi_dmul+0x14c>
 8001344:	4643      	mov	r3, r8
 8001346:	00da      	lsls	r2, r3, #3
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	4313      	orrs	r3, r2
 800134e:	4652      	mov	r2, sl
 8001350:	48cc      	ldr	r0, [pc, #816]	; (8001684 <__aeabi_dmul+0x3a4>)
 8001352:	0f52      	lsrs	r2, r2, #29
 8001354:	4684      	mov	ip, r0
 8001356:	4313      	orrs	r3, r2
 8001358:	4652      	mov	r2, sl
 800135a:	2000      	movs	r0, #0
 800135c:	4461      	add	r1, ip
 800135e:	00d2      	lsls	r2, r2, #3
 8001360:	4489      	add	r9, r1
 8001362:	0021      	movs	r1, r4
 8001364:	4069      	eors	r1, r5
 8001366:	9100      	str	r1, [sp, #0]
 8001368:	468c      	mov	ip, r1
 800136a:	2101      	movs	r1, #1
 800136c:	4449      	add	r1, r9
 800136e:	468a      	mov	sl, r1
 8001370:	2f0f      	cmp	r7, #15
 8001372:	d900      	bls.n	8001376 <__aeabi_dmul+0x96>
 8001374:	e090      	b.n	8001498 <__aeabi_dmul+0x1b8>
 8001376:	49c4      	ldr	r1, [pc, #784]	; (8001688 <__aeabi_dmul+0x3a8>)
 8001378:	00bf      	lsls	r7, r7, #2
 800137a:	59cf      	ldr	r7, [r1, r7]
 800137c:	46bf      	mov	pc, r7
 800137e:	465b      	mov	r3, fp
 8001380:	433b      	orrs	r3, r7
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	d000      	beq.n	8001388 <__aeabi_dmul+0xa8>
 8001386:	e16a      	b.n	800165e <__aeabi_dmul+0x37e>
 8001388:	2302      	movs	r3, #2
 800138a:	2708      	movs	r7, #8
 800138c:	2600      	movs	r6, #0
 800138e:	4681      	mov	r9, r0
 8001390:	469b      	mov	fp, r3
 8001392:	e7c9      	b.n	8001328 <__aeabi_dmul+0x48>
 8001394:	0032      	movs	r2, r6
 8001396:	4658      	mov	r0, fp
 8001398:	9b01      	ldr	r3, [sp, #4]
 800139a:	4661      	mov	r1, ip
 800139c:	9100      	str	r1, [sp, #0]
 800139e:	2802      	cmp	r0, #2
 80013a0:	d100      	bne.n	80013a4 <__aeabi_dmul+0xc4>
 80013a2:	e075      	b.n	8001490 <__aeabi_dmul+0x1b0>
 80013a4:	2803      	cmp	r0, #3
 80013a6:	d100      	bne.n	80013aa <__aeabi_dmul+0xca>
 80013a8:	e1fe      	b.n	80017a8 <__aeabi_dmul+0x4c8>
 80013aa:	2801      	cmp	r0, #1
 80013ac:	d000      	beq.n	80013b0 <__aeabi_dmul+0xd0>
 80013ae:	e12c      	b.n	800160a <__aeabi_dmul+0x32a>
 80013b0:	2300      	movs	r3, #0
 80013b2:	2700      	movs	r7, #0
 80013b4:	2600      	movs	r6, #0
 80013b6:	2500      	movs	r5, #0
 80013b8:	033f      	lsls	r7, r7, #12
 80013ba:	0d2a      	lsrs	r2, r5, #20
 80013bc:	0b3f      	lsrs	r7, r7, #12
 80013be:	48b3      	ldr	r0, [pc, #716]	; (800168c <__aeabi_dmul+0x3ac>)
 80013c0:	0512      	lsls	r2, r2, #20
 80013c2:	433a      	orrs	r2, r7
 80013c4:	4002      	ands	r2, r0
 80013c6:	051b      	lsls	r3, r3, #20
 80013c8:	4313      	orrs	r3, r2
 80013ca:	9a00      	ldr	r2, [sp, #0]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	07d1      	lsls	r1, r2, #31
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	430b      	orrs	r3, r1
 80013d4:	0030      	movs	r0, r6
 80013d6:	0019      	movs	r1, r3
 80013d8:	b007      	add	sp, #28
 80013da:	bc3c      	pop	{r2, r3, r4, r5}
 80013dc:	4690      	mov	r8, r2
 80013de:	4699      	mov	r9, r3
 80013e0:	46a2      	mov	sl, r4
 80013e2:	46ab      	mov	fp, r5
 80013e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e6:	465b      	mov	r3, fp
 80013e8:	433b      	orrs	r3, r7
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dmul+0x110>
 80013ee:	e12f      	b.n	8001650 <__aeabi_dmul+0x370>
 80013f0:	2f00      	cmp	r7, #0
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dmul+0x116>
 80013f4:	e1a5      	b.n	8001742 <__aeabi_dmul+0x462>
 80013f6:	0038      	movs	r0, r7
 80013f8:	f000 fdea 	bl	8001fd0 <__clzsi2>
 80013fc:	0003      	movs	r3, r0
 80013fe:	3b0b      	subs	r3, #11
 8001400:	2b1c      	cmp	r3, #28
 8001402:	dd00      	ble.n	8001406 <__aeabi_dmul+0x126>
 8001404:	e196      	b.n	8001734 <__aeabi_dmul+0x454>
 8001406:	221d      	movs	r2, #29
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	465a      	mov	r2, fp
 800140c:	0001      	movs	r1, r0
 800140e:	40da      	lsrs	r2, r3
 8001410:	465e      	mov	r6, fp
 8001412:	3908      	subs	r1, #8
 8001414:	408f      	lsls	r7, r1
 8001416:	0013      	movs	r3, r2
 8001418:	408e      	lsls	r6, r1
 800141a:	433b      	orrs	r3, r7
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	4b9c      	ldr	r3, [pc, #624]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001420:	2700      	movs	r7, #0
 8001422:	1a1b      	subs	r3, r3, r0
 8001424:	4699      	mov	r9, r3
 8001426:	2300      	movs	r3, #0
 8001428:	469b      	mov	fp, r3
 800142a:	e77d      	b.n	8001328 <__aeabi_dmul+0x48>
 800142c:	4641      	mov	r1, r8
 800142e:	4653      	mov	r3, sl
 8001430:	430b      	orrs	r3, r1
 8001432:	4993      	ldr	r1, [pc, #588]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001434:	468c      	mov	ip, r1
 8001436:	44e1      	add	r9, ip
 8001438:	2b00      	cmp	r3, #0
 800143a:	d000      	beq.n	800143e <__aeabi_dmul+0x15e>
 800143c:	e11a      	b.n	8001674 <__aeabi_dmul+0x394>
 800143e:	2202      	movs	r2, #2
 8001440:	2002      	movs	r0, #2
 8001442:	4317      	orrs	r7, r2
 8001444:	2200      	movs	r2, #0
 8001446:	e78c      	b.n	8001362 <__aeabi_dmul+0x82>
 8001448:	4313      	orrs	r3, r2
 800144a:	d100      	bne.n	800144e <__aeabi_dmul+0x16e>
 800144c:	e10d      	b.n	800166a <__aeabi_dmul+0x38a>
 800144e:	4643      	mov	r3, r8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x176>
 8001454:	e181      	b.n	800175a <__aeabi_dmul+0x47a>
 8001456:	4640      	mov	r0, r8
 8001458:	f000 fdba 	bl	8001fd0 <__clzsi2>
 800145c:	0002      	movs	r2, r0
 800145e:	3a0b      	subs	r2, #11
 8001460:	2a1c      	cmp	r2, #28
 8001462:	dd00      	ble.n	8001466 <__aeabi_dmul+0x186>
 8001464:	e172      	b.n	800174c <__aeabi_dmul+0x46c>
 8001466:	0001      	movs	r1, r0
 8001468:	4643      	mov	r3, r8
 800146a:	3908      	subs	r1, #8
 800146c:	408b      	lsls	r3, r1
 800146e:	4698      	mov	r8, r3
 8001470:	231d      	movs	r3, #29
 8001472:	1a9a      	subs	r2, r3, r2
 8001474:	4653      	mov	r3, sl
 8001476:	40d3      	lsrs	r3, r2
 8001478:	001a      	movs	r2, r3
 800147a:	4643      	mov	r3, r8
 800147c:	4313      	orrs	r3, r2
 800147e:	4652      	mov	r2, sl
 8001480:	408a      	lsls	r2, r1
 8001482:	4649      	mov	r1, r9
 8001484:	1a08      	subs	r0, r1, r0
 8001486:	4982      	ldr	r1, [pc, #520]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001488:	4689      	mov	r9, r1
 800148a:	4481      	add	r9, r0
 800148c:	2000      	movs	r0, #0
 800148e:	e768      	b.n	8001362 <__aeabi_dmul+0x82>
 8001490:	4b7b      	ldr	r3, [pc, #492]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001492:	2700      	movs	r7, #0
 8001494:	2600      	movs	r6, #0
 8001496:	e78e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001498:	0c14      	lsrs	r4, r2, #16
 800149a:	0412      	lsls	r2, r2, #16
 800149c:	0c12      	lsrs	r2, r2, #16
 800149e:	0011      	movs	r1, r2
 80014a0:	0c37      	lsrs	r7, r6, #16
 80014a2:	0436      	lsls	r6, r6, #16
 80014a4:	0c35      	lsrs	r5, r6, #16
 80014a6:	4379      	muls	r1, r7
 80014a8:	0028      	movs	r0, r5
 80014aa:	468c      	mov	ip, r1
 80014ac:	002e      	movs	r6, r5
 80014ae:	4360      	muls	r0, r4
 80014b0:	4460      	add	r0, ip
 80014b2:	4683      	mov	fp, r0
 80014b4:	4356      	muls	r6, r2
 80014b6:	0021      	movs	r1, r4
 80014b8:	0c30      	lsrs	r0, r6, #16
 80014ba:	4680      	mov	r8, r0
 80014bc:	4658      	mov	r0, fp
 80014be:	4379      	muls	r1, r7
 80014c0:	4440      	add	r0, r8
 80014c2:	9102      	str	r1, [sp, #8]
 80014c4:	4584      	cmp	ip, r0
 80014c6:	d906      	bls.n	80014d6 <__aeabi_dmul+0x1f6>
 80014c8:	4688      	mov	r8, r1
 80014ca:	2180      	movs	r1, #128	; 0x80
 80014cc:	0249      	lsls	r1, r1, #9
 80014ce:	468c      	mov	ip, r1
 80014d0:	44e0      	add	r8, ip
 80014d2:	4641      	mov	r1, r8
 80014d4:	9102      	str	r1, [sp, #8]
 80014d6:	0436      	lsls	r6, r6, #16
 80014d8:	0c01      	lsrs	r1, r0, #16
 80014da:	0c36      	lsrs	r6, r6, #16
 80014dc:	0400      	lsls	r0, r0, #16
 80014de:	468b      	mov	fp, r1
 80014e0:	1981      	adds	r1, r0, r6
 80014e2:	0c1e      	lsrs	r6, r3, #16
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	9103      	str	r1, [sp, #12]
 80014ea:	0019      	movs	r1, r3
 80014ec:	4379      	muls	r1, r7
 80014ee:	468c      	mov	ip, r1
 80014f0:	0028      	movs	r0, r5
 80014f2:	4375      	muls	r5, r6
 80014f4:	4465      	add	r5, ip
 80014f6:	46a8      	mov	r8, r5
 80014f8:	4358      	muls	r0, r3
 80014fa:	0c05      	lsrs	r5, r0, #16
 80014fc:	4445      	add	r5, r8
 80014fe:	4377      	muls	r7, r6
 8001500:	42a9      	cmp	r1, r5
 8001502:	d903      	bls.n	800150c <__aeabi_dmul+0x22c>
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	0249      	lsls	r1, r1, #9
 8001508:	468c      	mov	ip, r1
 800150a:	4467      	add	r7, ip
 800150c:	0c29      	lsrs	r1, r5, #16
 800150e:	468c      	mov	ip, r1
 8001510:	0039      	movs	r1, r7
 8001512:	0400      	lsls	r0, r0, #16
 8001514:	0c00      	lsrs	r0, r0, #16
 8001516:	042d      	lsls	r5, r5, #16
 8001518:	182d      	adds	r5, r5, r0
 800151a:	4461      	add	r1, ip
 800151c:	44ab      	add	fp, r5
 800151e:	9105      	str	r1, [sp, #20]
 8001520:	4659      	mov	r1, fp
 8001522:	9104      	str	r1, [sp, #16]
 8001524:	9901      	ldr	r1, [sp, #4]
 8001526:	040f      	lsls	r7, r1, #16
 8001528:	0c3f      	lsrs	r7, r7, #16
 800152a:	0c08      	lsrs	r0, r1, #16
 800152c:	0039      	movs	r1, r7
 800152e:	4351      	muls	r1, r2
 8001530:	4342      	muls	r2, r0
 8001532:	4690      	mov	r8, r2
 8001534:	0002      	movs	r2, r0
 8001536:	468c      	mov	ip, r1
 8001538:	0c09      	lsrs	r1, r1, #16
 800153a:	468b      	mov	fp, r1
 800153c:	4362      	muls	r2, r4
 800153e:	437c      	muls	r4, r7
 8001540:	4444      	add	r4, r8
 8001542:	445c      	add	r4, fp
 8001544:	45a0      	cmp	r8, r4
 8001546:	d903      	bls.n	8001550 <__aeabi_dmul+0x270>
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	0249      	lsls	r1, r1, #9
 800154c:	4688      	mov	r8, r1
 800154e:	4442      	add	r2, r8
 8001550:	0c21      	lsrs	r1, r4, #16
 8001552:	4688      	mov	r8, r1
 8001554:	4661      	mov	r1, ip
 8001556:	0409      	lsls	r1, r1, #16
 8001558:	0c09      	lsrs	r1, r1, #16
 800155a:	468c      	mov	ip, r1
 800155c:	0039      	movs	r1, r7
 800155e:	4359      	muls	r1, r3
 8001560:	4343      	muls	r3, r0
 8001562:	4370      	muls	r0, r6
 8001564:	437e      	muls	r6, r7
 8001566:	0c0f      	lsrs	r7, r1, #16
 8001568:	18f6      	adds	r6, r6, r3
 800156a:	0424      	lsls	r4, r4, #16
 800156c:	19be      	adds	r6, r7, r6
 800156e:	4464      	add	r4, ip
 8001570:	4442      	add	r2, r8
 8001572:	468c      	mov	ip, r1
 8001574:	42b3      	cmp	r3, r6
 8001576:	d903      	bls.n	8001580 <__aeabi_dmul+0x2a0>
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	4698      	mov	r8, r3
 800157e:	4440      	add	r0, r8
 8001580:	9b02      	ldr	r3, [sp, #8]
 8001582:	4661      	mov	r1, ip
 8001584:	4698      	mov	r8, r3
 8001586:	9b04      	ldr	r3, [sp, #16]
 8001588:	0437      	lsls	r7, r6, #16
 800158a:	4443      	add	r3, r8
 800158c:	469b      	mov	fp, r3
 800158e:	45ab      	cmp	fp, r5
 8001590:	41ad      	sbcs	r5, r5
 8001592:	426b      	negs	r3, r5
 8001594:	040d      	lsls	r5, r1, #16
 8001596:	9905      	ldr	r1, [sp, #20]
 8001598:	0c2d      	lsrs	r5, r5, #16
 800159a:	468c      	mov	ip, r1
 800159c:	197f      	adds	r7, r7, r5
 800159e:	4467      	add	r7, ip
 80015a0:	18fd      	adds	r5, r7, r3
 80015a2:	46a8      	mov	r8, r5
 80015a4:	465d      	mov	r5, fp
 80015a6:	192d      	adds	r5, r5, r4
 80015a8:	42a5      	cmp	r5, r4
 80015aa:	41a4      	sbcs	r4, r4
 80015ac:	4693      	mov	fp, r2
 80015ae:	4264      	negs	r4, r4
 80015b0:	46a4      	mov	ip, r4
 80015b2:	44c3      	add	fp, r8
 80015b4:	44dc      	add	ip, fp
 80015b6:	428f      	cmp	r7, r1
 80015b8:	41bf      	sbcs	r7, r7
 80015ba:	4598      	cmp	r8, r3
 80015bc:	419b      	sbcs	r3, r3
 80015be:	4593      	cmp	fp, r2
 80015c0:	4192      	sbcs	r2, r2
 80015c2:	45a4      	cmp	ip, r4
 80015c4:	41a4      	sbcs	r4, r4
 80015c6:	425b      	negs	r3, r3
 80015c8:	427f      	negs	r7, r7
 80015ca:	431f      	orrs	r7, r3
 80015cc:	0c36      	lsrs	r6, r6, #16
 80015ce:	4252      	negs	r2, r2
 80015d0:	4264      	negs	r4, r4
 80015d2:	19bf      	adds	r7, r7, r6
 80015d4:	4322      	orrs	r2, r4
 80015d6:	18bf      	adds	r7, r7, r2
 80015d8:	4662      	mov	r2, ip
 80015da:	1838      	adds	r0, r7, r0
 80015dc:	0243      	lsls	r3, r0, #9
 80015de:	0dd2      	lsrs	r2, r2, #23
 80015e0:	9903      	ldr	r1, [sp, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	026a      	lsls	r2, r5, #9
 80015e6:	430a      	orrs	r2, r1
 80015e8:	1e50      	subs	r0, r2, #1
 80015ea:	4182      	sbcs	r2, r0
 80015ec:	4661      	mov	r1, ip
 80015ee:	0ded      	lsrs	r5, r5, #23
 80015f0:	432a      	orrs	r2, r5
 80015f2:	024e      	lsls	r6, r1, #9
 80015f4:	4332      	orrs	r2, r6
 80015f6:	01d9      	lsls	r1, r3, #7
 80015f8:	d400      	bmi.n	80015fc <__aeabi_dmul+0x31c>
 80015fa:	e0b3      	b.n	8001764 <__aeabi_dmul+0x484>
 80015fc:	2601      	movs	r6, #1
 80015fe:	0850      	lsrs	r0, r2, #1
 8001600:	4032      	ands	r2, r6
 8001602:	4302      	orrs	r2, r0
 8001604:	07de      	lsls	r6, r3, #31
 8001606:	4332      	orrs	r2, r6
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	4c22      	ldr	r4, [pc, #136]	; (8001694 <__aeabi_dmul+0x3b4>)
 800160c:	4454      	add	r4, sl
 800160e:	2c00      	cmp	r4, #0
 8001610:	dd62      	ble.n	80016d8 <__aeabi_dmul+0x3f8>
 8001612:	0751      	lsls	r1, r2, #29
 8001614:	d009      	beq.n	800162a <__aeabi_dmul+0x34a>
 8001616:	200f      	movs	r0, #15
 8001618:	4010      	ands	r0, r2
 800161a:	2804      	cmp	r0, #4
 800161c:	d005      	beq.n	800162a <__aeabi_dmul+0x34a>
 800161e:	1d10      	adds	r0, r2, #4
 8001620:	4290      	cmp	r0, r2
 8001622:	4192      	sbcs	r2, r2
 8001624:	4252      	negs	r2, r2
 8001626:	189b      	adds	r3, r3, r2
 8001628:	0002      	movs	r2, r0
 800162a:	01d9      	lsls	r1, r3, #7
 800162c:	d504      	bpl.n	8001638 <__aeabi_dmul+0x358>
 800162e:	2480      	movs	r4, #128	; 0x80
 8001630:	4819      	ldr	r0, [pc, #100]	; (8001698 <__aeabi_dmul+0x3b8>)
 8001632:	00e4      	lsls	r4, r4, #3
 8001634:	4003      	ands	r3, r0
 8001636:	4454      	add	r4, sl
 8001638:	4818      	ldr	r0, [pc, #96]	; (800169c <__aeabi_dmul+0x3bc>)
 800163a:	4284      	cmp	r4, r0
 800163c:	dd00      	ble.n	8001640 <__aeabi_dmul+0x360>
 800163e:	e727      	b.n	8001490 <__aeabi_dmul+0x1b0>
 8001640:	075e      	lsls	r6, r3, #29
 8001642:	025b      	lsls	r3, r3, #9
 8001644:	08d2      	lsrs	r2, r2, #3
 8001646:	0b1f      	lsrs	r7, r3, #12
 8001648:	0563      	lsls	r3, r4, #21
 800164a:	4316      	orrs	r6, r2
 800164c:	0d5b      	lsrs	r3, r3, #21
 800164e:	e6b2      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001650:	2300      	movs	r3, #0
 8001652:	4699      	mov	r9, r3
 8001654:	3301      	adds	r3, #1
 8001656:	2704      	movs	r7, #4
 8001658:	2600      	movs	r6, #0
 800165a:	469b      	mov	fp, r3
 800165c:	e664      	b.n	8001328 <__aeabi_dmul+0x48>
 800165e:	2303      	movs	r3, #3
 8001660:	9701      	str	r7, [sp, #4]
 8001662:	4681      	mov	r9, r0
 8001664:	270c      	movs	r7, #12
 8001666:	469b      	mov	fp, r3
 8001668:	e65e      	b.n	8001328 <__aeabi_dmul+0x48>
 800166a:	2201      	movs	r2, #1
 800166c:	2001      	movs	r0, #1
 800166e:	4317      	orrs	r7, r2
 8001670:	2200      	movs	r2, #0
 8001672:	e676      	b.n	8001362 <__aeabi_dmul+0x82>
 8001674:	2303      	movs	r3, #3
 8001676:	2003      	movs	r0, #3
 8001678:	431f      	orrs	r7, r3
 800167a:	4643      	mov	r3, r8
 800167c:	e671      	b.n	8001362 <__aeabi_dmul+0x82>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	000007ff 	.word	0x000007ff
 8001684:	fffffc01 	.word	0xfffffc01
 8001688:	080082c8 	.word	0x080082c8
 800168c:	800fffff 	.word	0x800fffff
 8001690:	fffffc0d 	.word	0xfffffc0d
 8001694:	000003ff 	.word	0x000003ff
 8001698:	feffffff 	.word	0xfeffffff
 800169c:	000007fe 	.word	0x000007fe
 80016a0:	2300      	movs	r3, #0
 80016a2:	2780      	movs	r7, #128	; 0x80
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	033f      	lsls	r7, r7, #12
 80016a8:	2600      	movs	r6, #0
 80016aa:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016ac:	e683      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016ae:	9b01      	ldr	r3, [sp, #4]
 80016b0:	0032      	movs	r2, r6
 80016b2:	46a4      	mov	ip, r4
 80016b4:	4658      	mov	r0, fp
 80016b6:	e670      	b.n	800139a <__aeabi_dmul+0xba>
 80016b8:	46ac      	mov	ip, r5
 80016ba:	e66e      	b.n	800139a <__aeabi_dmul+0xba>
 80016bc:	2780      	movs	r7, #128	; 0x80
 80016be:	9901      	ldr	r1, [sp, #4]
 80016c0:	033f      	lsls	r7, r7, #12
 80016c2:	4239      	tst	r1, r7
 80016c4:	d02d      	beq.n	8001722 <__aeabi_dmul+0x442>
 80016c6:	423b      	tst	r3, r7
 80016c8:	d12b      	bne.n	8001722 <__aeabi_dmul+0x442>
 80016ca:	431f      	orrs	r7, r3
 80016cc:	033f      	lsls	r7, r7, #12
 80016ce:	0b3f      	lsrs	r7, r7, #12
 80016d0:	9500      	str	r5, [sp, #0]
 80016d2:	0016      	movs	r6, r2
 80016d4:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016d6:	e66e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016d8:	2501      	movs	r5, #1
 80016da:	1b2d      	subs	r5, r5, r4
 80016dc:	2d38      	cmp	r5, #56	; 0x38
 80016de:	dd00      	ble.n	80016e2 <__aeabi_dmul+0x402>
 80016e0:	e666      	b.n	80013b0 <__aeabi_dmul+0xd0>
 80016e2:	2d1f      	cmp	r5, #31
 80016e4:	dc40      	bgt.n	8001768 <__aeabi_dmul+0x488>
 80016e6:	4835      	ldr	r0, [pc, #212]	; (80017bc <__aeabi_dmul+0x4dc>)
 80016e8:	001c      	movs	r4, r3
 80016ea:	4450      	add	r0, sl
 80016ec:	0016      	movs	r6, r2
 80016ee:	4082      	lsls	r2, r0
 80016f0:	4084      	lsls	r4, r0
 80016f2:	40ee      	lsrs	r6, r5
 80016f4:	1e50      	subs	r0, r2, #1
 80016f6:	4182      	sbcs	r2, r0
 80016f8:	4334      	orrs	r4, r6
 80016fa:	4314      	orrs	r4, r2
 80016fc:	40eb      	lsrs	r3, r5
 80016fe:	0762      	lsls	r2, r4, #29
 8001700:	d009      	beq.n	8001716 <__aeabi_dmul+0x436>
 8001702:	220f      	movs	r2, #15
 8001704:	4022      	ands	r2, r4
 8001706:	2a04      	cmp	r2, #4
 8001708:	d005      	beq.n	8001716 <__aeabi_dmul+0x436>
 800170a:	0022      	movs	r2, r4
 800170c:	1d14      	adds	r4, r2, #4
 800170e:	4294      	cmp	r4, r2
 8001710:	4180      	sbcs	r0, r0
 8001712:	4240      	negs	r0, r0
 8001714:	181b      	adds	r3, r3, r0
 8001716:	021a      	lsls	r2, r3, #8
 8001718:	d53e      	bpl.n	8001798 <__aeabi_dmul+0x4b8>
 800171a:	2301      	movs	r3, #1
 800171c:	2700      	movs	r7, #0
 800171e:	2600      	movs	r6, #0
 8001720:	e649      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001722:	2780      	movs	r7, #128	; 0x80
 8001724:	9b01      	ldr	r3, [sp, #4]
 8001726:	033f      	lsls	r7, r7, #12
 8001728:	431f      	orrs	r7, r3
 800172a:	033f      	lsls	r7, r7, #12
 800172c:	0b3f      	lsrs	r7, r7, #12
 800172e:	9400      	str	r4, [sp, #0]
 8001730:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <__aeabi_dmul+0x4d8>)
 8001732:	e640      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001734:	0003      	movs	r3, r0
 8001736:	465a      	mov	r2, fp
 8001738:	3b28      	subs	r3, #40	; 0x28
 800173a:	409a      	lsls	r2, r3
 800173c:	2600      	movs	r6, #0
 800173e:	9201      	str	r2, [sp, #4]
 8001740:	e66d      	b.n	800141e <__aeabi_dmul+0x13e>
 8001742:	4658      	mov	r0, fp
 8001744:	f000 fc44 	bl	8001fd0 <__clzsi2>
 8001748:	3020      	adds	r0, #32
 800174a:	e657      	b.n	80013fc <__aeabi_dmul+0x11c>
 800174c:	0003      	movs	r3, r0
 800174e:	4652      	mov	r2, sl
 8001750:	3b28      	subs	r3, #40	; 0x28
 8001752:	409a      	lsls	r2, r3
 8001754:	0013      	movs	r3, r2
 8001756:	2200      	movs	r2, #0
 8001758:	e693      	b.n	8001482 <__aeabi_dmul+0x1a2>
 800175a:	4650      	mov	r0, sl
 800175c:	f000 fc38 	bl	8001fd0 <__clzsi2>
 8001760:	3020      	adds	r0, #32
 8001762:	e67b      	b.n	800145c <__aeabi_dmul+0x17c>
 8001764:	46ca      	mov	sl, r9
 8001766:	e750      	b.n	800160a <__aeabi_dmul+0x32a>
 8001768:	201f      	movs	r0, #31
 800176a:	001e      	movs	r6, r3
 800176c:	4240      	negs	r0, r0
 800176e:	1b04      	subs	r4, r0, r4
 8001770:	40e6      	lsrs	r6, r4
 8001772:	2d20      	cmp	r5, #32
 8001774:	d003      	beq.n	800177e <__aeabi_dmul+0x49e>
 8001776:	4c12      	ldr	r4, [pc, #72]	; (80017c0 <__aeabi_dmul+0x4e0>)
 8001778:	4454      	add	r4, sl
 800177a:	40a3      	lsls	r3, r4
 800177c:	431a      	orrs	r2, r3
 800177e:	1e50      	subs	r0, r2, #1
 8001780:	4182      	sbcs	r2, r0
 8001782:	4332      	orrs	r2, r6
 8001784:	2607      	movs	r6, #7
 8001786:	2700      	movs	r7, #0
 8001788:	4016      	ands	r6, r2
 800178a:	d009      	beq.n	80017a0 <__aeabi_dmul+0x4c0>
 800178c:	200f      	movs	r0, #15
 800178e:	2300      	movs	r3, #0
 8001790:	4010      	ands	r0, r2
 8001792:	0014      	movs	r4, r2
 8001794:	2804      	cmp	r0, #4
 8001796:	d1b9      	bne.n	800170c <__aeabi_dmul+0x42c>
 8001798:	0022      	movs	r2, r4
 800179a:	075e      	lsls	r6, r3, #29
 800179c:	025b      	lsls	r3, r3, #9
 800179e:	0b1f      	lsrs	r7, r3, #12
 80017a0:	08d2      	lsrs	r2, r2, #3
 80017a2:	4316      	orrs	r6, r2
 80017a4:	2300      	movs	r3, #0
 80017a6:	e606      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017a8:	2780      	movs	r7, #128	; 0x80
 80017aa:	033f      	lsls	r7, r7, #12
 80017ac:	431f      	orrs	r7, r3
 80017ae:	033f      	lsls	r7, r7, #12
 80017b0:	0b3f      	lsrs	r7, r7, #12
 80017b2:	0016      	movs	r6, r2
 80017b4:	4b00      	ldr	r3, [pc, #0]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80017b6:	e5fe      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017b8:	000007ff 	.word	0x000007ff
 80017bc:	0000041e 	.word	0x0000041e
 80017c0:	0000043e 	.word	0x0000043e

080017c4 <__aeabi_dsub>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	4657      	mov	r7, sl
 80017c8:	464e      	mov	r6, r9
 80017ca:	4645      	mov	r5, r8
 80017cc:	46de      	mov	lr, fp
 80017ce:	000c      	movs	r4, r1
 80017d0:	0309      	lsls	r1, r1, #12
 80017d2:	b5e0      	push	{r5, r6, r7, lr}
 80017d4:	0a49      	lsrs	r1, r1, #9
 80017d6:	0f46      	lsrs	r6, r0, #29
 80017d8:	005f      	lsls	r7, r3, #1
 80017da:	4331      	orrs	r1, r6
 80017dc:	031e      	lsls	r6, r3, #12
 80017de:	0fdb      	lsrs	r3, r3, #31
 80017e0:	0a76      	lsrs	r6, r6, #9
 80017e2:	469b      	mov	fp, r3
 80017e4:	0f53      	lsrs	r3, r2, #29
 80017e6:	4333      	orrs	r3, r6
 80017e8:	4ec8      	ldr	r6, [pc, #800]	; (8001b0c <__aeabi_dsub+0x348>)
 80017ea:	0065      	lsls	r5, r4, #1
 80017ec:	00c0      	lsls	r0, r0, #3
 80017ee:	0fe4      	lsrs	r4, r4, #31
 80017f0:	00d2      	lsls	r2, r2, #3
 80017f2:	0d6d      	lsrs	r5, r5, #21
 80017f4:	46a2      	mov	sl, r4
 80017f6:	4681      	mov	r9, r0
 80017f8:	0d7f      	lsrs	r7, r7, #21
 80017fa:	469c      	mov	ip, r3
 80017fc:	4690      	mov	r8, r2
 80017fe:	42b7      	cmp	r7, r6
 8001800:	d100      	bne.n	8001804 <__aeabi_dsub+0x40>
 8001802:	e0b9      	b.n	8001978 <__aeabi_dsub+0x1b4>
 8001804:	465b      	mov	r3, fp
 8001806:	2601      	movs	r6, #1
 8001808:	4073      	eors	r3, r6
 800180a:	469b      	mov	fp, r3
 800180c:	1bee      	subs	r6, r5, r7
 800180e:	45a3      	cmp	fp, r4
 8001810:	d100      	bne.n	8001814 <__aeabi_dsub+0x50>
 8001812:	e083      	b.n	800191c <__aeabi_dsub+0x158>
 8001814:	2e00      	cmp	r6, #0
 8001816:	dd63      	ble.n	80018e0 <__aeabi_dsub+0x11c>
 8001818:	2f00      	cmp	r7, #0
 800181a:	d000      	beq.n	800181e <__aeabi_dsub+0x5a>
 800181c:	e0b1      	b.n	8001982 <__aeabi_dsub+0x1be>
 800181e:	4663      	mov	r3, ip
 8001820:	4313      	orrs	r3, r2
 8001822:	d100      	bne.n	8001826 <__aeabi_dsub+0x62>
 8001824:	e123      	b.n	8001a6e <__aeabi_dsub+0x2aa>
 8001826:	1e73      	subs	r3, r6, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d000      	beq.n	800182e <__aeabi_dsub+0x6a>
 800182c:	e1ba      	b.n	8001ba4 <__aeabi_dsub+0x3e0>
 800182e:	1a86      	subs	r6, r0, r2
 8001830:	4663      	mov	r3, ip
 8001832:	42b0      	cmp	r0, r6
 8001834:	4180      	sbcs	r0, r0
 8001836:	2501      	movs	r5, #1
 8001838:	1ac9      	subs	r1, r1, r3
 800183a:	4240      	negs	r0, r0
 800183c:	1a09      	subs	r1, r1, r0
 800183e:	020b      	lsls	r3, r1, #8
 8001840:	d400      	bmi.n	8001844 <__aeabi_dsub+0x80>
 8001842:	e147      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001844:	0249      	lsls	r1, r1, #9
 8001846:	0a4b      	lsrs	r3, r1, #9
 8001848:	4698      	mov	r8, r3
 800184a:	4643      	mov	r3, r8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d100      	bne.n	8001852 <__aeabi_dsub+0x8e>
 8001850:	e189      	b.n	8001b66 <__aeabi_dsub+0x3a2>
 8001852:	4640      	mov	r0, r8
 8001854:	f000 fbbc 	bl	8001fd0 <__clzsi2>
 8001858:	0003      	movs	r3, r0
 800185a:	3b08      	subs	r3, #8
 800185c:	2b1f      	cmp	r3, #31
 800185e:	dd00      	ble.n	8001862 <__aeabi_dsub+0x9e>
 8001860:	e17c      	b.n	8001b5c <__aeabi_dsub+0x398>
 8001862:	2220      	movs	r2, #32
 8001864:	0030      	movs	r0, r6
 8001866:	1ad2      	subs	r2, r2, r3
 8001868:	4641      	mov	r1, r8
 800186a:	40d0      	lsrs	r0, r2
 800186c:	4099      	lsls	r1, r3
 800186e:	0002      	movs	r2, r0
 8001870:	409e      	lsls	r6, r3
 8001872:	430a      	orrs	r2, r1
 8001874:	429d      	cmp	r5, r3
 8001876:	dd00      	ble.n	800187a <__aeabi_dsub+0xb6>
 8001878:	e16a      	b.n	8001b50 <__aeabi_dsub+0x38c>
 800187a:	1b5d      	subs	r5, r3, r5
 800187c:	1c6b      	adds	r3, r5, #1
 800187e:	2b1f      	cmp	r3, #31
 8001880:	dd00      	ble.n	8001884 <__aeabi_dsub+0xc0>
 8001882:	e194      	b.n	8001bae <__aeabi_dsub+0x3ea>
 8001884:	2120      	movs	r1, #32
 8001886:	0010      	movs	r0, r2
 8001888:	0035      	movs	r5, r6
 800188a:	1ac9      	subs	r1, r1, r3
 800188c:	408e      	lsls	r6, r1
 800188e:	40da      	lsrs	r2, r3
 8001890:	4088      	lsls	r0, r1
 8001892:	40dd      	lsrs	r5, r3
 8001894:	1e71      	subs	r1, r6, #1
 8001896:	418e      	sbcs	r6, r1
 8001898:	0011      	movs	r1, r2
 800189a:	2207      	movs	r2, #7
 800189c:	4328      	orrs	r0, r5
 800189e:	2500      	movs	r5, #0
 80018a0:	4306      	orrs	r6, r0
 80018a2:	4032      	ands	r2, r6
 80018a4:	2a00      	cmp	r2, #0
 80018a6:	d009      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018a8:	230f      	movs	r3, #15
 80018aa:	4033      	ands	r3, r6
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d005      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018b0:	1d33      	adds	r3, r6, #4
 80018b2:	42b3      	cmp	r3, r6
 80018b4:	41b6      	sbcs	r6, r6
 80018b6:	4276      	negs	r6, r6
 80018b8:	1989      	adds	r1, r1, r6
 80018ba:	001e      	movs	r6, r3
 80018bc:	020b      	lsls	r3, r1, #8
 80018be:	d400      	bmi.n	80018c2 <__aeabi_dsub+0xfe>
 80018c0:	e23d      	b.n	8001d3e <__aeabi_dsub+0x57a>
 80018c2:	1c6a      	adds	r2, r5, #1
 80018c4:	4b91      	ldr	r3, [pc, #580]	; (8001b0c <__aeabi_dsub+0x348>)
 80018c6:	0555      	lsls	r5, r2, #21
 80018c8:	0d6d      	lsrs	r5, r5, #21
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dsub+0x10c>
 80018ce:	e119      	b.n	8001b04 <__aeabi_dsub+0x340>
 80018d0:	4a8f      	ldr	r2, [pc, #572]	; (8001b10 <__aeabi_dsub+0x34c>)
 80018d2:	08f6      	lsrs	r6, r6, #3
 80018d4:	400a      	ands	r2, r1
 80018d6:	0757      	lsls	r7, r2, #29
 80018d8:	0252      	lsls	r2, r2, #9
 80018da:	4337      	orrs	r7, r6
 80018dc:	0b12      	lsrs	r2, r2, #12
 80018de:	e09b      	b.n	8001a18 <__aeabi_dsub+0x254>
 80018e0:	2e00      	cmp	r6, #0
 80018e2:	d000      	beq.n	80018e6 <__aeabi_dsub+0x122>
 80018e4:	e0c5      	b.n	8001a72 <__aeabi_dsub+0x2ae>
 80018e6:	1c6e      	adds	r6, r5, #1
 80018e8:	0576      	lsls	r6, r6, #21
 80018ea:	0d76      	lsrs	r6, r6, #21
 80018ec:	2e01      	cmp	r6, #1
 80018ee:	dc00      	bgt.n	80018f2 <__aeabi_dsub+0x12e>
 80018f0:	e148      	b.n	8001b84 <__aeabi_dsub+0x3c0>
 80018f2:	4667      	mov	r7, ip
 80018f4:	1a86      	subs	r6, r0, r2
 80018f6:	1bcb      	subs	r3, r1, r7
 80018f8:	42b0      	cmp	r0, r6
 80018fa:	41bf      	sbcs	r7, r7
 80018fc:	427f      	negs	r7, r7
 80018fe:	46b8      	mov	r8, r7
 8001900:	001f      	movs	r7, r3
 8001902:	4643      	mov	r3, r8
 8001904:	1aff      	subs	r7, r7, r3
 8001906:	003b      	movs	r3, r7
 8001908:	46b8      	mov	r8, r7
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	d500      	bpl.n	8001910 <__aeabi_dsub+0x14c>
 800190e:	e15f      	b.n	8001bd0 <__aeabi_dsub+0x40c>
 8001910:	4337      	orrs	r7, r6
 8001912:	d19a      	bne.n	800184a <__aeabi_dsub+0x86>
 8001914:	2200      	movs	r2, #0
 8001916:	2400      	movs	r4, #0
 8001918:	2500      	movs	r5, #0
 800191a:	e079      	b.n	8001a10 <__aeabi_dsub+0x24c>
 800191c:	2e00      	cmp	r6, #0
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dsub+0x15e>
 8001920:	e0fa      	b.n	8001b18 <__aeabi_dsub+0x354>
 8001922:	2f00      	cmp	r7, #0
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x164>
 8001926:	e08d      	b.n	8001a44 <__aeabi_dsub+0x280>
 8001928:	4b78      	ldr	r3, [pc, #480]	; (8001b0c <__aeabi_dsub+0x348>)
 800192a:	429d      	cmp	r5, r3
 800192c:	d067      	beq.n	80019fe <__aeabi_dsub+0x23a>
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	4667      	mov	r7, ip
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	431f      	orrs	r7, r3
 8001936:	46bc      	mov	ip, r7
 8001938:	2e38      	cmp	r6, #56	; 0x38
 800193a:	dc00      	bgt.n	800193e <__aeabi_dsub+0x17a>
 800193c:	e152      	b.n	8001be4 <__aeabi_dsub+0x420>
 800193e:	4663      	mov	r3, ip
 8001940:	4313      	orrs	r3, r2
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	4193      	sbcs	r3, r2
 8001946:	181e      	adds	r6, r3, r0
 8001948:	4286      	cmp	r6, r0
 800194a:	4180      	sbcs	r0, r0
 800194c:	4240      	negs	r0, r0
 800194e:	1809      	adds	r1, r1, r0
 8001950:	020b      	lsls	r3, r1, #8
 8001952:	d400      	bmi.n	8001956 <__aeabi_dsub+0x192>
 8001954:	e0be      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001956:	4b6d      	ldr	r3, [pc, #436]	; (8001b0c <__aeabi_dsub+0x348>)
 8001958:	3501      	adds	r5, #1
 800195a:	429d      	cmp	r5, r3
 800195c:	d100      	bne.n	8001960 <__aeabi_dsub+0x19c>
 800195e:	e0d2      	b.n	8001b06 <__aeabi_dsub+0x342>
 8001960:	4a6b      	ldr	r2, [pc, #428]	; (8001b10 <__aeabi_dsub+0x34c>)
 8001962:	0873      	lsrs	r3, r6, #1
 8001964:	400a      	ands	r2, r1
 8001966:	2101      	movs	r1, #1
 8001968:	400e      	ands	r6, r1
 800196a:	431e      	orrs	r6, r3
 800196c:	0851      	lsrs	r1, r2, #1
 800196e:	07d3      	lsls	r3, r2, #31
 8001970:	2207      	movs	r2, #7
 8001972:	431e      	orrs	r6, r3
 8001974:	4032      	ands	r2, r6
 8001976:	e795      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001978:	001e      	movs	r6, r3
 800197a:	4316      	orrs	r6, r2
 800197c:	d000      	beq.n	8001980 <__aeabi_dsub+0x1bc>
 800197e:	e745      	b.n	800180c <__aeabi_dsub+0x48>
 8001980:	e740      	b.n	8001804 <__aeabi_dsub+0x40>
 8001982:	4b62      	ldr	r3, [pc, #392]	; (8001b0c <__aeabi_dsub+0x348>)
 8001984:	429d      	cmp	r5, r3
 8001986:	d03a      	beq.n	80019fe <__aeabi_dsub+0x23a>
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	4667      	mov	r7, ip
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	431f      	orrs	r7, r3
 8001990:	46bc      	mov	ip, r7
 8001992:	2e38      	cmp	r6, #56	; 0x38
 8001994:	dd00      	ble.n	8001998 <__aeabi_dsub+0x1d4>
 8001996:	e0eb      	b.n	8001b70 <__aeabi_dsub+0x3ac>
 8001998:	2e1f      	cmp	r6, #31
 800199a:	dc00      	bgt.n	800199e <__aeabi_dsub+0x1da>
 800199c:	e13a      	b.n	8001c14 <__aeabi_dsub+0x450>
 800199e:	0033      	movs	r3, r6
 80019a0:	4667      	mov	r7, ip
 80019a2:	3b20      	subs	r3, #32
 80019a4:	40df      	lsrs	r7, r3
 80019a6:	003b      	movs	r3, r7
 80019a8:	2e20      	cmp	r6, #32
 80019aa:	d005      	beq.n	80019b8 <__aeabi_dsub+0x1f4>
 80019ac:	2740      	movs	r7, #64	; 0x40
 80019ae:	1bbf      	subs	r7, r7, r6
 80019b0:	4666      	mov	r6, ip
 80019b2:	40be      	lsls	r6, r7
 80019b4:	4332      	orrs	r2, r6
 80019b6:	4690      	mov	r8, r2
 80019b8:	4646      	mov	r6, r8
 80019ba:	1e72      	subs	r2, r6, #1
 80019bc:	4196      	sbcs	r6, r2
 80019be:	4333      	orrs	r3, r6
 80019c0:	e0da      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x204>
 80019c6:	e214      	b.n	8001df2 <__aeabi_dsub+0x62e>
 80019c8:	4663      	mov	r3, ip
 80019ca:	4313      	orrs	r3, r2
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x20c>
 80019ce:	e168      	b.n	8001ca2 <__aeabi_dsub+0x4de>
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	074e      	lsls	r6, r1, #29
 80019d4:	08c0      	lsrs	r0, r0, #3
 80019d6:	08c9      	lsrs	r1, r1, #3
 80019d8:	031b      	lsls	r3, r3, #12
 80019da:	4306      	orrs	r6, r0
 80019dc:	4219      	tst	r1, r3
 80019de:	d008      	beq.n	80019f2 <__aeabi_dsub+0x22e>
 80019e0:	4660      	mov	r0, ip
 80019e2:	08c0      	lsrs	r0, r0, #3
 80019e4:	4218      	tst	r0, r3
 80019e6:	d104      	bne.n	80019f2 <__aeabi_dsub+0x22e>
 80019e8:	4663      	mov	r3, ip
 80019ea:	0001      	movs	r1, r0
 80019ec:	08d2      	lsrs	r2, r2, #3
 80019ee:	075e      	lsls	r6, r3, #29
 80019f0:	4316      	orrs	r6, r2
 80019f2:	00f3      	lsls	r3, r6, #3
 80019f4:	4699      	mov	r9, r3
 80019f6:	00c9      	lsls	r1, r1, #3
 80019f8:	0f72      	lsrs	r2, r6, #29
 80019fa:	4d44      	ldr	r5, [pc, #272]	; (8001b0c <__aeabi_dsub+0x348>)
 80019fc:	4311      	orrs	r1, r2
 80019fe:	464b      	mov	r3, r9
 8001a00:	08de      	lsrs	r6, r3, #3
 8001a02:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a04:	074f      	lsls	r7, r1, #29
 8001a06:	4337      	orrs	r7, r6
 8001a08:	08ca      	lsrs	r2, r1, #3
 8001a0a:	429d      	cmp	r5, r3
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x24c>
 8001a0e:	e06e      	b.n	8001aee <__aeabi_dsub+0x32a>
 8001a10:	0312      	lsls	r2, r2, #12
 8001a12:	056d      	lsls	r5, r5, #21
 8001a14:	0b12      	lsrs	r2, r2, #12
 8001a16:	0d6d      	lsrs	r5, r5, #21
 8001a18:	2100      	movs	r1, #0
 8001a1a:	0312      	lsls	r2, r2, #12
 8001a1c:	0b13      	lsrs	r3, r2, #12
 8001a1e:	0d0a      	lsrs	r2, r1, #20
 8001a20:	0512      	lsls	r2, r2, #20
 8001a22:	431a      	orrs	r2, r3
 8001a24:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <__aeabi_dsub+0x350>)
 8001a26:	052d      	lsls	r5, r5, #20
 8001a28:	4013      	ands	r3, r2
 8001a2a:	432b      	orrs	r3, r5
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	07e4      	lsls	r4, r4, #31
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	4323      	orrs	r3, r4
 8001a34:	0038      	movs	r0, r7
 8001a36:	0019      	movs	r1, r3
 8001a38:	bc3c      	pop	{r2, r3, r4, r5}
 8001a3a:	4690      	mov	r8, r2
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	46a2      	mov	sl, r4
 8001a40:	46ab      	mov	fp, r5
 8001a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a44:	4663      	mov	r3, ip
 8001a46:	4313      	orrs	r3, r2
 8001a48:	d011      	beq.n	8001a6e <__aeabi_dsub+0x2aa>
 8001a4a:	1e73      	subs	r3, r6, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d000      	beq.n	8001a52 <__aeabi_dsub+0x28e>
 8001a50:	e107      	b.n	8001c62 <__aeabi_dsub+0x49e>
 8001a52:	1886      	adds	r6, r0, r2
 8001a54:	4286      	cmp	r6, r0
 8001a56:	4180      	sbcs	r0, r0
 8001a58:	4461      	add	r1, ip
 8001a5a:	4240      	negs	r0, r0
 8001a5c:	1809      	adds	r1, r1, r0
 8001a5e:	2501      	movs	r5, #1
 8001a60:	020b      	lsls	r3, r1, #8
 8001a62:	d537      	bpl.n	8001ad4 <__aeabi_dsub+0x310>
 8001a64:	2502      	movs	r5, #2
 8001a66:	e77b      	b.n	8001960 <__aeabi_dsub+0x19c>
 8001a68:	003e      	movs	r6, r7
 8001a6a:	4661      	mov	r1, ip
 8001a6c:	4691      	mov	r9, r2
 8001a6e:	0035      	movs	r5, r6
 8001a70:	e7c5      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001a72:	465c      	mov	r4, fp
 8001a74:	2d00      	cmp	r5, #0
 8001a76:	d000      	beq.n	8001a7a <__aeabi_dsub+0x2b6>
 8001a78:	e0e1      	b.n	8001c3e <__aeabi_dsub+0x47a>
 8001a7a:	000b      	movs	r3, r1
 8001a7c:	4303      	orrs	r3, r0
 8001a7e:	d0f3      	beq.n	8001a68 <__aeabi_dsub+0x2a4>
 8001a80:	1c73      	adds	r3, r6, #1
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0x2c2>
 8001a84:	e1ac      	b.n	8001de0 <__aeabi_dsub+0x61c>
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a88:	429f      	cmp	r7, r3
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dsub+0x2ca>
 8001a8c:	e13a      	b.n	8001d04 <__aeabi_dsub+0x540>
 8001a8e:	43f3      	mvns	r3, r6
 8001a90:	2b38      	cmp	r3, #56	; 0x38
 8001a92:	dd00      	ble.n	8001a96 <__aeabi_dsub+0x2d2>
 8001a94:	e16f      	b.n	8001d76 <__aeabi_dsub+0x5b2>
 8001a96:	2b1f      	cmp	r3, #31
 8001a98:	dd00      	ble.n	8001a9c <__aeabi_dsub+0x2d8>
 8001a9a:	e18c      	b.n	8001db6 <__aeabi_dsub+0x5f2>
 8001a9c:	2520      	movs	r5, #32
 8001a9e:	000e      	movs	r6, r1
 8001aa0:	1aed      	subs	r5, r5, r3
 8001aa2:	40ae      	lsls	r6, r5
 8001aa4:	46b0      	mov	r8, r6
 8001aa6:	0006      	movs	r6, r0
 8001aa8:	46aa      	mov	sl, r5
 8001aaa:	40de      	lsrs	r6, r3
 8001aac:	4645      	mov	r5, r8
 8001aae:	4335      	orrs	r5, r6
 8001ab0:	002e      	movs	r6, r5
 8001ab2:	4655      	mov	r5, sl
 8001ab4:	40d9      	lsrs	r1, r3
 8001ab6:	40a8      	lsls	r0, r5
 8001ab8:	4663      	mov	r3, ip
 8001aba:	1e45      	subs	r5, r0, #1
 8001abc:	41a8      	sbcs	r0, r5
 8001abe:	1a5b      	subs	r3, r3, r1
 8001ac0:	469c      	mov	ip, r3
 8001ac2:	4330      	orrs	r0, r6
 8001ac4:	1a16      	subs	r6, r2, r0
 8001ac6:	42b2      	cmp	r2, r6
 8001ac8:	4192      	sbcs	r2, r2
 8001aca:	4663      	mov	r3, ip
 8001acc:	4252      	negs	r2, r2
 8001ace:	1a99      	subs	r1, r3, r2
 8001ad0:	003d      	movs	r5, r7
 8001ad2:	e6b4      	b.n	800183e <__aeabi_dsub+0x7a>
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	4032      	ands	r2, r6
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	d000      	beq.n	8001ade <__aeabi_dsub+0x31a>
 8001adc:	e6e4      	b.n	80018a8 <__aeabi_dsub+0xe4>
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <__aeabi_dsub+0x348>)
 8001ae0:	08f6      	lsrs	r6, r6, #3
 8001ae2:	074f      	lsls	r7, r1, #29
 8001ae4:	4337      	orrs	r7, r6
 8001ae6:	08ca      	lsrs	r2, r1, #3
 8001ae8:	429d      	cmp	r5, r3
 8001aea:	d000      	beq.n	8001aee <__aeabi_dsub+0x32a>
 8001aec:	e790      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001aee:	003b      	movs	r3, r7
 8001af0:	4313      	orrs	r3, r2
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x332>
 8001af4:	e1a6      	b.n	8001e44 <__aeabi_dsub+0x680>
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	031b      	lsls	r3, r3, #12
 8001afa:	431a      	orrs	r2, r3
 8001afc:	0312      	lsls	r2, r2, #12
 8001afe:	0b12      	lsrs	r2, r2, #12
 8001b00:	4d02      	ldr	r5, [pc, #8]	; (8001b0c <__aeabi_dsub+0x348>)
 8001b02:	e789      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b04:	0015      	movs	r5, r2
 8001b06:	2200      	movs	r2, #0
 8001b08:	2700      	movs	r7, #0
 8001b0a:	e785      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b0c:	000007ff 	.word	0x000007ff
 8001b10:	ff7fffff 	.word	0xff7fffff
 8001b14:	800fffff 	.word	0x800fffff
 8001b18:	2e00      	cmp	r6, #0
 8001b1a:	d000      	beq.n	8001b1e <__aeabi_dsub+0x35a>
 8001b1c:	e0c7      	b.n	8001cae <__aeabi_dsub+0x4ea>
 8001b1e:	1c6b      	adds	r3, r5, #1
 8001b20:	055e      	lsls	r6, r3, #21
 8001b22:	0d76      	lsrs	r6, r6, #21
 8001b24:	2e01      	cmp	r6, #1
 8001b26:	dc00      	bgt.n	8001b2a <__aeabi_dsub+0x366>
 8001b28:	e0f0      	b.n	8001d0c <__aeabi_dsub+0x548>
 8001b2a:	4dc8      	ldr	r5, [pc, #800]	; (8001e4c <__aeabi_dsub+0x688>)
 8001b2c:	42ab      	cmp	r3, r5
 8001b2e:	d100      	bne.n	8001b32 <__aeabi_dsub+0x36e>
 8001b30:	e0b9      	b.n	8001ca6 <__aeabi_dsub+0x4e2>
 8001b32:	1885      	adds	r5, r0, r2
 8001b34:	000a      	movs	r2, r1
 8001b36:	4285      	cmp	r5, r0
 8001b38:	4189      	sbcs	r1, r1
 8001b3a:	4462      	add	r2, ip
 8001b3c:	4249      	negs	r1, r1
 8001b3e:	1851      	adds	r1, r2, r1
 8001b40:	2207      	movs	r2, #7
 8001b42:	07ce      	lsls	r6, r1, #31
 8001b44:	086d      	lsrs	r5, r5, #1
 8001b46:	432e      	orrs	r6, r5
 8001b48:	0849      	lsrs	r1, r1, #1
 8001b4a:	4032      	ands	r2, r6
 8001b4c:	001d      	movs	r5, r3
 8001b4e:	e6a9      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b50:	49bf      	ldr	r1, [pc, #764]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001b52:	1aed      	subs	r5, r5, r3
 8001b54:	4011      	ands	r1, r2
 8001b56:	2207      	movs	r2, #7
 8001b58:	4032      	ands	r2, r6
 8001b5a:	e6a3      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b5c:	0032      	movs	r2, r6
 8001b5e:	3828      	subs	r0, #40	; 0x28
 8001b60:	4082      	lsls	r2, r0
 8001b62:	2600      	movs	r6, #0
 8001b64:	e686      	b.n	8001874 <__aeabi_dsub+0xb0>
 8001b66:	0030      	movs	r0, r6
 8001b68:	f000 fa32 	bl	8001fd0 <__clzsi2>
 8001b6c:	3020      	adds	r0, #32
 8001b6e:	e673      	b.n	8001858 <__aeabi_dsub+0x94>
 8001b70:	4663      	mov	r3, ip
 8001b72:	4313      	orrs	r3, r2
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	4193      	sbcs	r3, r2
 8001b78:	1ac6      	subs	r6, r0, r3
 8001b7a:	42b0      	cmp	r0, r6
 8001b7c:	4180      	sbcs	r0, r0
 8001b7e:	4240      	negs	r0, r0
 8001b80:	1a09      	subs	r1, r1, r0
 8001b82:	e65c      	b.n	800183e <__aeabi_dsub+0x7a>
 8001b84:	000e      	movs	r6, r1
 8001b86:	4667      	mov	r7, ip
 8001b88:	4306      	orrs	r6, r0
 8001b8a:	4317      	orrs	r7, r2
 8001b8c:	2d00      	cmp	r5, #0
 8001b8e:	d15e      	bne.n	8001c4e <__aeabi_dsub+0x48a>
 8001b90:	2e00      	cmp	r6, #0
 8001b92:	d000      	beq.n	8001b96 <__aeabi_dsub+0x3d2>
 8001b94:	e0f3      	b.n	8001d7e <__aeabi_dsub+0x5ba>
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x3d8>
 8001b9a:	e11e      	b.n	8001dda <__aeabi_dsub+0x616>
 8001b9c:	465c      	mov	r4, fp
 8001b9e:	4661      	mov	r1, ip
 8001ba0:	4691      	mov	r9, r2
 8001ba2:	e72c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ba4:	4fa9      	ldr	r7, [pc, #676]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ba6:	42be      	cmp	r6, r7
 8001ba8:	d07b      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001baa:	001e      	movs	r6, r3
 8001bac:	e6f1      	b.n	8001992 <__aeabi_dsub+0x1ce>
 8001bae:	0010      	movs	r0, r2
 8001bb0:	3d1f      	subs	r5, #31
 8001bb2:	40e8      	lsrs	r0, r5
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d003      	beq.n	8001bc0 <__aeabi_dsub+0x3fc>
 8001bb8:	2140      	movs	r1, #64	; 0x40
 8001bba:	1acb      	subs	r3, r1, r3
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	4316      	orrs	r6, r2
 8001bc0:	1e73      	subs	r3, r6, #1
 8001bc2:	419e      	sbcs	r6, r3
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	4306      	orrs	r6, r0
 8001bc8:	4032      	ands	r2, r6
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2500      	movs	r5, #0
 8001bce:	e783      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001bd0:	1a16      	subs	r6, r2, r0
 8001bd2:	4663      	mov	r3, ip
 8001bd4:	42b2      	cmp	r2, r6
 8001bd6:	4180      	sbcs	r0, r0
 8001bd8:	1a59      	subs	r1, r3, r1
 8001bda:	4240      	negs	r0, r0
 8001bdc:	1a0b      	subs	r3, r1, r0
 8001bde:	4698      	mov	r8, r3
 8001be0:	465c      	mov	r4, fp
 8001be2:	e632      	b.n	800184a <__aeabi_dsub+0x86>
 8001be4:	2e1f      	cmp	r6, #31
 8001be6:	dd00      	ble.n	8001bea <__aeabi_dsub+0x426>
 8001be8:	e0ab      	b.n	8001d42 <__aeabi_dsub+0x57e>
 8001bea:	2720      	movs	r7, #32
 8001bec:	1bbb      	subs	r3, r7, r6
 8001bee:	469a      	mov	sl, r3
 8001bf0:	4663      	mov	r3, ip
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	40bb      	lsls	r3, r7
 8001bf6:	4699      	mov	r9, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	464f      	mov	r7, r9
 8001bfc:	40f3      	lsrs	r3, r6
 8001bfe:	431f      	orrs	r7, r3
 8001c00:	003b      	movs	r3, r7
 8001c02:	4657      	mov	r7, sl
 8001c04:	40ba      	lsls	r2, r7
 8001c06:	1e57      	subs	r7, r2, #1
 8001c08:	41ba      	sbcs	r2, r7
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	4662      	mov	r2, ip
 8001c0e:	40f2      	lsrs	r2, r6
 8001c10:	1889      	adds	r1, r1, r2
 8001c12:	e698      	b.n	8001946 <__aeabi_dsub+0x182>
 8001c14:	2720      	movs	r7, #32
 8001c16:	1bbb      	subs	r3, r7, r6
 8001c18:	469a      	mov	sl, r3
 8001c1a:	4663      	mov	r3, ip
 8001c1c:	4657      	mov	r7, sl
 8001c1e:	40bb      	lsls	r3, r7
 8001c20:	4699      	mov	r9, r3
 8001c22:	0013      	movs	r3, r2
 8001c24:	464f      	mov	r7, r9
 8001c26:	40f3      	lsrs	r3, r6
 8001c28:	431f      	orrs	r7, r3
 8001c2a:	003b      	movs	r3, r7
 8001c2c:	4657      	mov	r7, sl
 8001c2e:	40ba      	lsls	r2, r7
 8001c30:	1e57      	subs	r7, r2, #1
 8001c32:	41ba      	sbcs	r2, r7
 8001c34:	4313      	orrs	r3, r2
 8001c36:	4662      	mov	r2, ip
 8001c38:	40f2      	lsrs	r2, r6
 8001c3a:	1a89      	subs	r1, r1, r2
 8001c3c:	e79c      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 8001c3e:	4b83      	ldr	r3, [pc, #524]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c40:	429f      	cmp	r7, r3
 8001c42:	d05f      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001c44:	2580      	movs	r5, #128	; 0x80
 8001c46:	042d      	lsls	r5, r5, #16
 8001c48:	4273      	negs	r3, r6
 8001c4a:	4329      	orrs	r1, r5
 8001c4c:	e720      	b.n	8001a90 <__aeabi_dsub+0x2cc>
 8001c4e:	2e00      	cmp	r6, #0
 8001c50:	d10c      	bne.n	8001c6c <__aeabi_dsub+0x4a8>
 8001c52:	2f00      	cmp	r7, #0
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x494>
 8001c56:	e0d0      	b.n	8001dfa <__aeabi_dsub+0x636>
 8001c58:	465c      	mov	r4, fp
 8001c5a:	4661      	mov	r1, ip
 8001c5c:	4691      	mov	r9, r2
 8001c5e:	4d7b      	ldr	r5, [pc, #492]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c60:	e6cd      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001c62:	4f7a      	ldr	r7, [pc, #488]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c64:	42be      	cmp	r6, r7
 8001c66:	d01c      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c68:	001e      	movs	r6, r3
 8001c6a:	e665      	b.n	8001938 <__aeabi_dsub+0x174>
 8001c6c:	2f00      	cmp	r7, #0
 8001c6e:	d018      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c70:	08c0      	lsrs	r0, r0, #3
 8001c72:	074e      	lsls	r6, r1, #29
 8001c74:	4306      	orrs	r6, r0
 8001c76:	2080      	movs	r0, #128	; 0x80
 8001c78:	08c9      	lsrs	r1, r1, #3
 8001c7a:	0300      	lsls	r0, r0, #12
 8001c7c:	4201      	tst	r1, r0
 8001c7e:	d008      	beq.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c80:	4663      	mov	r3, ip
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	4204      	tst	r4, r0
 8001c86:	d104      	bne.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c88:	0021      	movs	r1, r4
 8001c8a:	46da      	mov	sl, fp
 8001c8c:	08d2      	lsrs	r2, r2, #3
 8001c8e:	075e      	lsls	r6, r3, #29
 8001c90:	4316      	orrs	r6, r2
 8001c92:	00f3      	lsls	r3, r6, #3
 8001c94:	4699      	mov	r9, r3
 8001c96:	2401      	movs	r4, #1
 8001c98:	4653      	mov	r3, sl
 8001c9a:	00c9      	lsls	r1, r1, #3
 8001c9c:	0f72      	lsrs	r2, r6, #29
 8001c9e:	4311      	orrs	r1, r2
 8001ca0:	401c      	ands	r4, r3
 8001ca2:	4d6a      	ldr	r5, [pc, #424]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ca4:	e6ab      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ca6:	001d      	movs	r5, r3
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2700      	movs	r7, #0
 8001cac:	e6b4      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001cae:	2d00      	cmp	r5, #0
 8001cb0:	d159      	bne.n	8001d66 <__aeabi_dsub+0x5a2>
 8001cb2:	000b      	movs	r3, r1
 8001cb4:	4303      	orrs	r3, r0
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x4f6>
 8001cb8:	e6d6      	b.n	8001a68 <__aeabi_dsub+0x2a4>
 8001cba:	1c73      	adds	r3, r6, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x4fc>
 8001cbe:	e0b2      	b.n	8001e26 <__aeabi_dsub+0x662>
 8001cc0:	4b62      	ldr	r3, [pc, #392]	; (8001e4c <__aeabi_dsub+0x688>)
 8001cc2:	429f      	cmp	r7, r3
 8001cc4:	d01e      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001cc6:	43f3      	mvns	r3, r6
 8001cc8:	2b38      	cmp	r3, #56	; 0x38
 8001cca:	dc6f      	bgt.n	8001dac <__aeabi_dsub+0x5e8>
 8001ccc:	2b1f      	cmp	r3, #31
 8001cce:	dd00      	ble.n	8001cd2 <__aeabi_dsub+0x50e>
 8001cd0:	e097      	b.n	8001e02 <__aeabi_dsub+0x63e>
 8001cd2:	2520      	movs	r5, #32
 8001cd4:	000e      	movs	r6, r1
 8001cd6:	1aed      	subs	r5, r5, r3
 8001cd8:	40ae      	lsls	r6, r5
 8001cda:	46b0      	mov	r8, r6
 8001cdc:	0006      	movs	r6, r0
 8001cde:	46aa      	mov	sl, r5
 8001ce0:	40de      	lsrs	r6, r3
 8001ce2:	4645      	mov	r5, r8
 8001ce4:	4335      	orrs	r5, r6
 8001ce6:	002e      	movs	r6, r5
 8001ce8:	4655      	mov	r5, sl
 8001cea:	40a8      	lsls	r0, r5
 8001cec:	40d9      	lsrs	r1, r3
 8001cee:	1e45      	subs	r5, r0, #1
 8001cf0:	41a8      	sbcs	r0, r5
 8001cf2:	448c      	add	ip, r1
 8001cf4:	4306      	orrs	r6, r0
 8001cf6:	18b6      	adds	r6, r6, r2
 8001cf8:	4296      	cmp	r6, r2
 8001cfa:	4192      	sbcs	r2, r2
 8001cfc:	4251      	negs	r1, r2
 8001cfe:	4461      	add	r1, ip
 8001d00:	003d      	movs	r5, r7
 8001d02:	e625      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001d04:	003d      	movs	r5, r7
 8001d06:	4661      	mov	r1, ip
 8001d08:	4691      	mov	r9, r2
 8001d0a:	e678      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d0c:	000b      	movs	r3, r1
 8001d0e:	4303      	orrs	r3, r0
 8001d10:	2d00      	cmp	r5, #0
 8001d12:	d000      	beq.n	8001d16 <__aeabi_dsub+0x552>
 8001d14:	e655      	b.n	80019c2 <__aeabi_dsub+0x1fe>
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f5      	beq.n	8001d06 <__aeabi_dsub+0x542>
 8001d1a:	4663      	mov	r3, ip
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x55e>
 8001d20:	e66d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d22:	1886      	adds	r6, r0, r2
 8001d24:	4286      	cmp	r6, r0
 8001d26:	4180      	sbcs	r0, r0
 8001d28:	4461      	add	r1, ip
 8001d2a:	4240      	negs	r0, r0
 8001d2c:	1809      	adds	r1, r1, r0
 8001d2e:	2200      	movs	r2, #0
 8001d30:	020b      	lsls	r3, r1, #8
 8001d32:	d400      	bmi.n	8001d36 <__aeabi_dsub+0x572>
 8001d34:	e6d0      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001d38:	3501      	adds	r5, #1
 8001d3a:	4019      	ands	r1, r3
 8001d3c:	e5b2      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001d3e:	46b1      	mov	r9, r6
 8001d40:	e65d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d42:	0033      	movs	r3, r6
 8001d44:	4667      	mov	r7, ip
 8001d46:	3b20      	subs	r3, #32
 8001d48:	40df      	lsrs	r7, r3
 8001d4a:	003b      	movs	r3, r7
 8001d4c:	2e20      	cmp	r6, #32
 8001d4e:	d005      	beq.n	8001d5c <__aeabi_dsub+0x598>
 8001d50:	2740      	movs	r7, #64	; 0x40
 8001d52:	1bbf      	subs	r7, r7, r6
 8001d54:	4666      	mov	r6, ip
 8001d56:	40be      	lsls	r6, r7
 8001d58:	4332      	orrs	r2, r6
 8001d5a:	4690      	mov	r8, r2
 8001d5c:	4646      	mov	r6, r8
 8001d5e:	1e72      	subs	r2, r6, #1
 8001d60:	4196      	sbcs	r6, r2
 8001d62:	4333      	orrs	r3, r6
 8001d64:	e5ef      	b.n	8001946 <__aeabi_dsub+0x182>
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <__aeabi_dsub+0x688>)
 8001d68:	429f      	cmp	r7, r3
 8001d6a:	d0cb      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001d6c:	2580      	movs	r5, #128	; 0x80
 8001d6e:	042d      	lsls	r5, r5, #16
 8001d70:	4273      	negs	r3, r6
 8001d72:	4329      	orrs	r1, r5
 8001d74:	e7a8      	b.n	8001cc8 <__aeabi_dsub+0x504>
 8001d76:	4308      	orrs	r0, r1
 8001d78:	1e41      	subs	r1, r0, #1
 8001d7a:	4188      	sbcs	r0, r1
 8001d7c:	e6a2      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001d7e:	2f00      	cmp	r7, #0
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x5c0>
 8001d82:	e63c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d84:	4663      	mov	r3, ip
 8001d86:	1a86      	subs	r6, r0, r2
 8001d88:	1acf      	subs	r7, r1, r3
 8001d8a:	42b0      	cmp	r0, r6
 8001d8c:	419b      	sbcs	r3, r3
 8001d8e:	425b      	negs	r3, r3
 8001d90:	1afb      	subs	r3, r7, r3
 8001d92:	4698      	mov	r8, r3
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	d54e      	bpl.n	8001e36 <__aeabi_dsub+0x672>
 8001d98:	1a16      	subs	r6, r2, r0
 8001d9a:	4663      	mov	r3, ip
 8001d9c:	42b2      	cmp	r2, r6
 8001d9e:	4192      	sbcs	r2, r2
 8001da0:	1a59      	subs	r1, r3, r1
 8001da2:	4252      	negs	r2, r2
 8001da4:	1a89      	subs	r1, r1, r2
 8001da6:	465c      	mov	r4, fp
 8001da8:	2200      	movs	r2, #0
 8001daa:	e57b      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001dac:	4301      	orrs	r1, r0
 8001dae:	000e      	movs	r6, r1
 8001db0:	1e71      	subs	r1, r6, #1
 8001db2:	418e      	sbcs	r6, r1
 8001db4:	e79f      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001db6:	001d      	movs	r5, r3
 8001db8:	000e      	movs	r6, r1
 8001dba:	3d20      	subs	r5, #32
 8001dbc:	40ee      	lsrs	r6, r5
 8001dbe:	46b0      	mov	r8, r6
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d004      	beq.n	8001dce <__aeabi_dsub+0x60a>
 8001dc4:	2540      	movs	r5, #64	; 0x40
 8001dc6:	1aeb      	subs	r3, r5, r3
 8001dc8:	4099      	lsls	r1, r3
 8001dca:	4308      	orrs	r0, r1
 8001dcc:	4681      	mov	r9, r0
 8001dce:	4648      	mov	r0, r9
 8001dd0:	4643      	mov	r3, r8
 8001dd2:	1e41      	subs	r1, r0, #1
 8001dd4:	4188      	sbcs	r0, r1
 8001dd6:	4318      	orrs	r0, r3
 8001dd8:	e674      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2400      	movs	r4, #0
 8001dde:	e617      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001de0:	1a16      	subs	r6, r2, r0
 8001de2:	4663      	mov	r3, ip
 8001de4:	42b2      	cmp	r2, r6
 8001de6:	4192      	sbcs	r2, r2
 8001de8:	1a59      	subs	r1, r3, r1
 8001dea:	4252      	negs	r2, r2
 8001dec:	1a89      	subs	r1, r1, r2
 8001dee:	003d      	movs	r5, r7
 8001df0:	e525      	b.n	800183e <__aeabi_dsub+0x7a>
 8001df2:	4661      	mov	r1, ip
 8001df4:	4691      	mov	r9, r2
 8001df6:	4d15      	ldr	r5, [pc, #84]	; (8001e4c <__aeabi_dsub+0x688>)
 8001df8:	e601      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	0312      	lsls	r2, r2, #12
 8001e00:	e679      	b.n	8001af6 <__aeabi_dsub+0x332>
 8001e02:	001d      	movs	r5, r3
 8001e04:	000e      	movs	r6, r1
 8001e06:	3d20      	subs	r5, #32
 8001e08:	40ee      	lsrs	r6, r5
 8001e0a:	46b0      	mov	r8, r6
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d004      	beq.n	8001e1a <__aeabi_dsub+0x656>
 8001e10:	2540      	movs	r5, #64	; 0x40
 8001e12:	1aeb      	subs	r3, r5, r3
 8001e14:	4099      	lsls	r1, r3
 8001e16:	4308      	orrs	r0, r1
 8001e18:	4681      	mov	r9, r0
 8001e1a:	464e      	mov	r6, r9
 8001e1c:	4643      	mov	r3, r8
 8001e1e:	1e71      	subs	r1, r6, #1
 8001e20:	418e      	sbcs	r6, r1
 8001e22:	431e      	orrs	r6, r3
 8001e24:	e767      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001e26:	1886      	adds	r6, r0, r2
 8001e28:	4296      	cmp	r6, r2
 8001e2a:	419b      	sbcs	r3, r3
 8001e2c:	4461      	add	r1, ip
 8001e2e:	425b      	negs	r3, r3
 8001e30:	18c9      	adds	r1, r1, r3
 8001e32:	003d      	movs	r5, r7
 8001e34:	e58c      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001e36:	4647      	mov	r7, r8
 8001e38:	4337      	orrs	r7, r6
 8001e3a:	d0ce      	beq.n	8001dda <__aeabi_dsub+0x616>
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	4641      	mov	r1, r8
 8001e40:	4032      	ands	r2, r6
 8001e42:	e649      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001e44:	2700      	movs	r7, #0
 8001e46:	003a      	movs	r2, r7
 8001e48:	e5e6      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	000007ff 	.word	0x000007ff
 8001e50:	ff7fffff 	.word	0xff7fffff

08001e54 <__aeabi_dcmpun>:
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	4e0c      	ldr	r6, [pc, #48]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e58:	030d      	lsls	r5, r1, #12
 8001e5a:	031c      	lsls	r4, r3, #12
 8001e5c:	0049      	lsls	r1, r1, #1
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	0b2d      	lsrs	r5, r5, #12
 8001e62:	0d49      	lsrs	r1, r1, #21
 8001e64:	0b24      	lsrs	r4, r4, #12
 8001e66:	0d5b      	lsrs	r3, r3, #21
 8001e68:	42b1      	cmp	r1, r6
 8001e6a:	d008      	beq.n	8001e7e <__aeabi_dcmpun+0x2a>
 8001e6c:	4906      	ldr	r1, [pc, #24]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e6e:	2000      	movs	r0, #0
 8001e70:	428b      	cmp	r3, r1
 8001e72:	d103      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e74:	4314      	orrs	r4, r2
 8001e76:	0020      	movs	r0, r4
 8001e78:	1e44      	subs	r4, r0, #1
 8001e7a:	41a0      	sbcs	r0, r4
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
 8001e7e:	4305      	orrs	r5, r0
 8001e80:	2001      	movs	r0, #1
 8001e82:	2d00      	cmp	r5, #0
 8001e84:	d1fa      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e86:	e7f1      	b.n	8001e6c <__aeabi_dcmpun+0x18>
 8001e88:	000007ff 	.word	0x000007ff

08001e8c <__aeabi_d2iz>:
 8001e8c:	b530      	push	{r4, r5, lr}
 8001e8e:	4d14      	ldr	r5, [pc, #80]	; (8001ee0 <__aeabi_d2iz+0x54>)
 8001e90:	030a      	lsls	r2, r1, #12
 8001e92:	004b      	lsls	r3, r1, #1
 8001e94:	0b12      	lsrs	r2, r2, #12
 8001e96:	0d5b      	lsrs	r3, r3, #21
 8001e98:	0fc9      	lsrs	r1, r1, #31
 8001e9a:	2400      	movs	r4, #0
 8001e9c:	42ab      	cmp	r3, r5
 8001e9e:	dd11      	ble.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ea0:	4c10      	ldr	r4, [pc, #64]	; (8001ee4 <__aeabi_d2iz+0x58>)
 8001ea2:	42a3      	cmp	r3, r4
 8001ea4:	dc10      	bgt.n	8001ec8 <__aeabi_d2iz+0x3c>
 8001ea6:	2480      	movs	r4, #128	; 0x80
 8001ea8:	0364      	lsls	r4, r4, #13
 8001eaa:	4322      	orrs	r2, r4
 8001eac:	4c0e      	ldr	r4, [pc, #56]	; (8001ee8 <__aeabi_d2iz+0x5c>)
 8001eae:	1ae4      	subs	r4, r4, r3
 8001eb0:	2c1f      	cmp	r4, #31
 8001eb2:	dd0c      	ble.n	8001ece <__aeabi_d2iz+0x42>
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <__aeabi_d2iz+0x60>)
 8001eb6:	1ac3      	subs	r3, r0, r3
 8001eb8:	40da      	lsrs	r2, r3
 8001eba:	0013      	movs	r3, r2
 8001ebc:	425c      	negs	r4, r3
 8001ebe:	2900      	cmp	r1, #0
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ec2:	001c      	movs	r4, r3
 8001ec4:	0020      	movs	r0, r4
 8001ec6:	bd30      	pop	{r4, r5, pc}
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <__aeabi_d2iz+0x64>)
 8001eca:	18cc      	adds	r4, r1, r3
 8001ecc:	e7fa      	b.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ece:	4d09      	ldr	r5, [pc, #36]	; (8001ef4 <__aeabi_d2iz+0x68>)
 8001ed0:	40e0      	lsrs	r0, r4
 8001ed2:	46ac      	mov	ip, r5
 8001ed4:	4463      	add	r3, ip
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	0013      	movs	r3, r2
 8001eda:	4303      	orrs	r3, r0
 8001edc:	e7ee      	b.n	8001ebc <__aeabi_d2iz+0x30>
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	000003fe 	.word	0x000003fe
 8001ee4:	0000041d 	.word	0x0000041d
 8001ee8:	00000433 	.word	0x00000433
 8001eec:	00000413 	.word	0x00000413
 8001ef0:	7fffffff 	.word	0x7fffffff
 8001ef4:	fffffbed 	.word	0xfffffbed

08001ef8 <__aeabi_i2d>:
 8001ef8:	b570      	push	{r4, r5, r6, lr}
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d02d      	beq.n	8001f5a <__aeabi_i2d+0x62>
 8001efe:	17c3      	asrs	r3, r0, #31
 8001f00:	18c5      	adds	r5, r0, r3
 8001f02:	405d      	eors	r5, r3
 8001f04:	0fc4      	lsrs	r4, r0, #31
 8001f06:	0028      	movs	r0, r5
 8001f08:	f000 f862 	bl	8001fd0 <__clzsi2>
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <__aeabi_i2d+0x6c>)
 8001f0e:	1a1b      	subs	r3, r3, r0
 8001f10:	055b      	lsls	r3, r3, #21
 8001f12:	0d5b      	lsrs	r3, r3, #21
 8001f14:	280a      	cmp	r0, #10
 8001f16:	dd15      	ble.n	8001f44 <__aeabi_i2d+0x4c>
 8001f18:	380b      	subs	r0, #11
 8001f1a:	4085      	lsls	r5, r0
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	032d      	lsls	r5, r5, #12
 8001f20:	0b2d      	lsrs	r5, r5, #12
 8001f22:	2100      	movs	r1, #0
 8001f24:	0010      	movs	r0, r2
 8001f26:	032d      	lsls	r5, r5, #12
 8001f28:	0d0a      	lsrs	r2, r1, #20
 8001f2a:	0b2d      	lsrs	r5, r5, #12
 8001f2c:	0512      	lsls	r2, r2, #20
 8001f2e:	432a      	orrs	r2, r5
 8001f30:	4d0d      	ldr	r5, [pc, #52]	; (8001f68 <__aeabi_i2d+0x70>)
 8001f32:	051b      	lsls	r3, r3, #20
 8001f34:	402a      	ands	r2, r5
 8001f36:	4313      	orrs	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	07e4      	lsls	r4, r4, #31
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	4323      	orrs	r3, r4
 8001f40:	0019      	movs	r1, r3
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
 8001f44:	0002      	movs	r2, r0
 8001f46:	0029      	movs	r1, r5
 8001f48:	3215      	adds	r2, #21
 8001f4a:	4091      	lsls	r1, r2
 8001f4c:	000a      	movs	r2, r1
 8001f4e:	210b      	movs	r1, #11
 8001f50:	1a08      	subs	r0, r1, r0
 8001f52:	40c5      	lsrs	r5, r0
 8001f54:	032d      	lsls	r5, r5, #12
 8001f56:	0b2d      	lsrs	r5, r5, #12
 8001f58:	e7e3      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f5a:	2400      	movs	r4, #0
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2500      	movs	r5, #0
 8001f60:	2200      	movs	r2, #0
 8001f62:	e7de      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f64:	0000041e 	.word	0x0000041e
 8001f68:	800fffff 	.word	0x800fffff

08001f6c <__aeabi_ui2d>:
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	1e04      	subs	r4, r0, #0
 8001f70:	d025      	beq.n	8001fbe <__aeabi_ui2d+0x52>
 8001f72:	f000 f82d 	bl	8001fd0 <__clzsi2>
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <__aeabi_ui2d+0x5c>)
 8001f78:	1a1b      	subs	r3, r3, r0
 8001f7a:	055b      	lsls	r3, r3, #21
 8001f7c:	0d5b      	lsrs	r3, r3, #21
 8001f7e:	280a      	cmp	r0, #10
 8001f80:	dd12      	ble.n	8001fa8 <__aeabi_ui2d+0x3c>
 8001f82:	380b      	subs	r0, #11
 8001f84:	4084      	lsls	r4, r0
 8001f86:	2200      	movs	r2, #0
 8001f88:	0324      	lsls	r4, r4, #12
 8001f8a:	0b24      	lsrs	r4, r4, #12
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	0010      	movs	r0, r2
 8001f90:	0324      	lsls	r4, r4, #12
 8001f92:	0d0a      	lsrs	r2, r1, #20
 8001f94:	0b24      	lsrs	r4, r4, #12
 8001f96:	0512      	lsls	r2, r2, #20
 8001f98:	4322      	orrs	r2, r4
 8001f9a:	4c0c      	ldr	r4, [pc, #48]	; (8001fcc <__aeabi_ui2d+0x60>)
 8001f9c:	051b      	lsls	r3, r3, #20
 8001f9e:	4022      	ands	r2, r4
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	0859      	lsrs	r1, r3, #1
 8001fa6:	bd10      	pop	{r4, pc}
 8001fa8:	0002      	movs	r2, r0
 8001faa:	0021      	movs	r1, r4
 8001fac:	3215      	adds	r2, #21
 8001fae:	4091      	lsls	r1, r2
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	210b      	movs	r1, #11
 8001fb4:	1a08      	subs	r0, r1, r0
 8001fb6:	40c4      	lsrs	r4, r0
 8001fb8:	0324      	lsls	r4, r4, #12
 8001fba:	0b24      	lsrs	r4, r4, #12
 8001fbc:	e7e6      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	e7e2      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	0000041e 	.word	0x0000041e
 8001fcc:	800fffff 	.word	0x800fffff

08001fd0 <__clzsi2>:
 8001fd0:	211c      	movs	r1, #28
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	041b      	lsls	r3, r3, #16
 8001fd6:	4298      	cmp	r0, r3
 8001fd8:	d301      	bcc.n	8001fde <__clzsi2+0xe>
 8001fda:	0c00      	lsrs	r0, r0, #16
 8001fdc:	3910      	subs	r1, #16
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	4298      	cmp	r0, r3
 8001fe2:	d301      	bcc.n	8001fe8 <__clzsi2+0x18>
 8001fe4:	0a00      	lsrs	r0, r0, #8
 8001fe6:	3908      	subs	r1, #8
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	4298      	cmp	r0, r3
 8001fec:	d301      	bcc.n	8001ff2 <__clzsi2+0x22>
 8001fee:	0900      	lsrs	r0, r0, #4
 8001ff0:	3904      	subs	r1, #4
 8001ff2:	a202      	add	r2, pc, #8	; (adr r2, 8001ffc <__clzsi2+0x2c>)
 8001ff4:	5c10      	ldrb	r0, [r2, r0]
 8001ff6:	1840      	adds	r0, r0, r1
 8001ff8:	4770      	bx	lr
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	02020304 	.word	0x02020304
 8002000:	01010101 	.word	0x01010101
	...

0800200c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4a06      	ldr	r2, [pc, #24]	; (8002034 <vApplicationGetIdleTaskMemory+0x28>)
 800201c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	4a05      	ldr	r2, [pc, #20]	; (8002038 <vApplicationGetIdleTaskMemory+0x2c>)
 8002022:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2280      	movs	r2, #128	; 0x80
 8002028:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	46bd      	mov	sp, r7
 800202e:	b004      	add	sp, #16
 8002030:	bd80      	pop	{r7, pc}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	200001f8 	.word	0x200001f8
 8002038:	2000024c 	.word	0x2000024c

0800203c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800203c:	b590      	push	{r4, r7, lr}
 800203e:	b089      	sub	sp, #36	; 0x24
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002042:	f000 fd0b 	bl	8002a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002046:	f000 f823 	bl	8002090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800204a:	f000 fa2b 	bl	80024a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800204e:	f000 f9f9 	bl	8002444 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8002052:	f000 f891 	bl	8002178 <MX_ADC_Init>
  MX_I2C1_Init();
 8002056:	f000 f8eb 	bl	8002230 <MX_I2C1_Init>
  MX_RTC_Init();
 800205a:	f000 f929 	bl	80022b0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800205e:	f000 f9c1 	bl	80023e4 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	4a08      	ldr	r2, [pc, #32]	; (8002088 <main+0x4c>)
 8002066:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002068:	c313      	stmia	r3!, {r0, r1, r4}
 800206a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800206c:	c313      	stmia	r3!, {r0, r1, r4}
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	2100      	movs	r1, #0
 8002076:	0018      	movs	r0, r3
 8002078:	f003 fabe 	bl	80055f8 <osThreadCreate>
 800207c:	0002      	movs	r2, r0
 800207e:	4b03      	ldr	r3, [pc, #12]	; (800208c <main+0x50>)
 8002080:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002082:	f003 fab1 	bl	80055e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002086:	e7fe      	b.n	8002086 <main+0x4a>
 8002088:	08008244 	.word	0x08008244
 800208c:	20001364 	.word	0x20001364

08002090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b095      	sub	sp, #84	; 0x54
 8002094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002096:	2420      	movs	r4, #32
 8002098:	193b      	adds	r3, r7, r4
 800209a:	0018      	movs	r0, r3
 800209c:	2330      	movs	r3, #48	; 0x30
 800209e:	001a      	movs	r2, r3
 80020a0:	2100      	movs	r1, #0
 80020a2:	f004 fb5e 	bl	8006762 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020a6:	2310      	movs	r3, #16
 80020a8:	18fb      	adds	r3, r7, r3
 80020aa:	0018      	movs	r0, r3
 80020ac:	2310      	movs	r3, #16
 80020ae:	001a      	movs	r2, r3
 80020b0:	2100      	movs	r1, #0
 80020b2:	f004 fb56 	bl	8006762 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020b6:	003b      	movs	r3, r7
 80020b8:	0018      	movs	r0, r3
 80020ba:	2310      	movs	r3, #16
 80020bc:	001a      	movs	r2, r3
 80020be:	2100      	movs	r1, #0
 80020c0:	f004 fb4f 	bl	8006762 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80020c4:	0021      	movs	r1, r4
 80020c6:	187b      	adds	r3, r7, r1
 80020c8:	221a      	movs	r2, #26
 80020ca:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020cc:	187b      	adds	r3, r7, r1
 80020ce:	2201      	movs	r2, #1
 80020d0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80020d2:	187b      	adds	r3, r7, r1
 80020d4:	2201      	movs	r2, #1
 80020d6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020d8:	187b      	adds	r3, r7, r1
 80020da:	2210      	movs	r2, #16
 80020dc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80020de:	187b      	adds	r3, r7, r1
 80020e0:	2210      	movs	r2, #16
 80020e2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80020e4:	187b      	adds	r3, r7, r1
 80020e6:	2201      	movs	r2, #1
 80020e8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020ea:	187b      	adds	r3, r7, r1
 80020ec:	2202      	movs	r2, #2
 80020ee:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020f0:	187b      	adds	r3, r7, r1
 80020f2:	2200      	movs	r2, #0
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80020f6:	187b      	adds	r3, r7, r1
 80020f8:	22a0      	movs	r2, #160	; 0xa0
 80020fa:	0392      	lsls	r2, r2, #14
 80020fc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80020fe:	187b      	adds	r3, r7, r1
 8002100:	2200      	movs	r2, #0
 8002102:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002104:	187b      	adds	r3, r7, r1
 8002106:	0018      	movs	r0, r3
 8002108:	f001 fabe 	bl	8003688 <HAL_RCC_OscConfig>
 800210c:	1e03      	subs	r3, r0, #0
 800210e:	d001      	beq.n	8002114 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002110:	f000 fa5a 	bl	80025c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002114:	2110      	movs	r1, #16
 8002116:	187b      	adds	r3, r7, r1
 8002118:	2207      	movs	r2, #7
 800211a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800211c:	187b      	adds	r3, r7, r1
 800211e:	2202      	movs	r2, #2
 8002120:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002122:	187b      	adds	r3, r7, r1
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002128:	187b      	adds	r3, r7, r1
 800212a:	2200      	movs	r2, #0
 800212c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800212e:	187b      	adds	r3, r7, r1
 8002130:	2101      	movs	r1, #1
 8002132:	0018      	movs	r0, r3
 8002134:	f001 fdc4 	bl	8003cc0 <HAL_RCC_ClockConfig>
 8002138:	1e03      	subs	r3, r0, #0
 800213a:	d001      	beq.n	8002140 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800213c:	f000 fa44 	bl	80025c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8002140:	003b      	movs	r3, r7
 8002142:	4a0c      	ldr	r2, [pc, #48]	; (8002174 <SystemClock_Config+0xe4>)
 8002144:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002146:	003b      	movs	r3, r7
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800214c:	003b      	movs	r3, r7
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002152:	003b      	movs	r3, r7
 8002154:	2280      	movs	r2, #128	; 0x80
 8002156:	0092      	lsls	r2, r2, #2
 8002158:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800215a:	003b      	movs	r3, r7
 800215c:	0018      	movs	r0, r3
 800215e:	f001 ff2b 	bl	8003fb8 <HAL_RCCEx_PeriphCLKConfig>
 8002162:	1e03      	subs	r3, r0, #0
 8002164:	d001      	beq.n	800216a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8002166:	f000 fa2f 	bl	80025c8 <Error_Handler>
  }
}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	46bd      	mov	sp, r7
 800216e:	b015      	add	sp, #84	; 0x54
 8002170:	bd90      	pop	{r4, r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	00010021 	.word	0x00010021

08002178 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	0018      	movs	r0, r3
 8002182:	230c      	movs	r3, #12
 8002184:	001a      	movs	r2, r3
 8002186:	2100      	movs	r1, #0
 8002188:	f004 faeb 	bl	8006762 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800218c:	4b26      	ldr	r3, [pc, #152]	; (8002228 <MX_ADC_Init+0xb0>)
 800218e:	4a27      	ldr	r2, [pc, #156]	; (800222c <MX_ADC_Init+0xb4>)
 8002190:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002192:	4b25      	ldr	r3, [pc, #148]	; (8002228 <MX_ADC_Init+0xb0>)
 8002194:	2200      	movs	r2, #0
 8002196:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002198:	4b23      	ldr	r3, [pc, #140]	; (8002228 <MX_ADC_Init+0xb0>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800219e:	4b22      	ldr	r3, [pc, #136]	; (8002228 <MX_ADC_Init+0xb0>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80021a4:	4b20      	ldr	r3, [pc, #128]	; (8002228 <MX_ADC_Init+0xb0>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021aa:	4b1f      	ldr	r3, [pc, #124]	; (8002228 <MX_ADC_Init+0xb0>)
 80021ac:	2204      	movs	r2, #4
 80021ae:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80021b0:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <MX_ADC_Init+0xb0>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80021b6:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <MX_ADC_Init+0xb0>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80021bc:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <MX_ADC_Init+0xb0>)
 80021be:	2200      	movs	r2, #0
 80021c0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80021c2:	4b19      	ldr	r3, [pc, #100]	; (8002228 <MX_ADC_Init+0xb0>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <MX_ADC_Init+0xb0>)
 80021ca:	22c2      	movs	r2, #194	; 0xc2
 80021cc:	32ff      	adds	r2, #255	; 0xff
 80021ce:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021d0:	4b15      	ldr	r3, [pc, #84]	; (8002228 <MX_ADC_Init+0xb0>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80021d6:	4b14      	ldr	r3, [pc, #80]	; (8002228 <MX_ADC_Init+0xb0>)
 80021d8:	2224      	movs	r2, #36	; 0x24
 80021da:	2100      	movs	r1, #0
 80021dc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <MX_ADC_Init+0xb0>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80021e4:	4b10      	ldr	r3, [pc, #64]	; (8002228 <MX_ADC_Init+0xb0>)
 80021e6:	0018      	movs	r0, r3
 80021e8:	f000 fc68 	bl	8002abc <HAL_ADC_Init>
 80021ec:	1e03      	subs	r3, r0, #0
 80021ee:	d001      	beq.n	80021f4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80021f0:	f000 f9ea 	bl	80025c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80021f4:	1d3b      	adds	r3, r7, #4
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	2280      	movs	r2, #128	; 0x80
 80021fe:	0152      	lsls	r2, r2, #5
 8002200:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	2280      	movs	r2, #128	; 0x80
 8002206:	0552      	lsls	r2, r2, #21
 8002208:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800220a:	1d3a      	adds	r2, r7, #4
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <MX_ADC_Init+0xb0>)
 800220e:	0011      	movs	r1, r2
 8002210:	0018      	movs	r0, r3
 8002212:	f000 fd93 	bl	8002d3c <HAL_ADC_ConfigChannel>
 8002216:	1e03      	subs	r3, r0, #0
 8002218:	d001      	beq.n	800221e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800221a:	f000 f9d5 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	46bd      	mov	sp, r7
 8002222:	b004      	add	sp, #16
 8002224:	bd80      	pop	{r7, pc}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	200013d4 	.word	0x200013d4
 800222c:	40012400 	.word	0x40012400

08002230 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002234:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <MX_I2C1_Init+0x74>)
 8002236:	4a1c      	ldr	r2, [pc, #112]	; (80022a8 <MX_I2C1_Init+0x78>)
 8002238:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <MX_I2C1_Init+0x74>)
 800223c:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <MX_I2C1_Init+0x7c>)
 800223e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002240:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <MX_I2C1_Init+0x74>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002246:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <MX_I2C1_Init+0x74>)
 8002248:	2201      	movs	r2, #1
 800224a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800224c:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <MX_I2C1_Init+0x74>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002252:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <MX_I2C1_Init+0x74>)
 8002254:	2200      	movs	r2, #0
 8002256:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <MX_I2C1_Init+0x74>)
 800225a:	2200      	movs	r2, #0
 800225c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800225e:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <MX_I2C1_Init+0x74>)
 8002260:	2200      	movs	r2, #0
 8002262:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002264:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <MX_I2C1_Init+0x74>)
 8002266:	2200      	movs	r2, #0
 8002268:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <MX_I2C1_Init+0x74>)
 800226c:	0018      	movs	r0, r3
 800226e:	f001 f8dd 	bl	800342c <HAL_I2C_Init>
 8002272:	1e03      	subs	r3, r0, #0
 8002274:	d001      	beq.n	800227a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002276:	f000 f9a7 	bl	80025c8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800227a:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <MX_I2C1_Init+0x74>)
 800227c:	2100      	movs	r1, #0
 800227e:	0018      	movs	r0, r3
 8002280:	f001 f96a 	bl	8003558 <HAL_I2CEx_ConfigAnalogFilter>
 8002284:	1e03      	subs	r3, r0, #0
 8002286:	d001      	beq.n	800228c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002288:	f000 f99e 	bl	80025c8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <MX_I2C1_Init+0x74>)
 800228e:	2100      	movs	r1, #0
 8002290:	0018      	movs	r0, r3
 8002292:	f001 f9ad 	bl	80035f0 <HAL_I2CEx_ConfigDigitalFilter>
 8002296:	1e03      	subs	r3, r0, #0
 8002298:	d001      	beq.n	800229e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800229a:	f000 f995 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20001368 	.word	0x20001368
 80022a8:	40005400 	.word	0x40005400
 80022ac:	2000090e 	.word	0x2000090e

080022b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b090      	sub	sp, #64	; 0x40
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80022b6:	232c      	movs	r3, #44	; 0x2c
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	0018      	movs	r0, r3
 80022bc:	2314      	movs	r3, #20
 80022be:	001a      	movs	r2, r3
 80022c0:	2100      	movs	r1, #0
 80022c2:	f004 fa4e 	bl	8006762 <memset>
  RTC_DateTypeDef sDate = {0};
 80022c6:	2328      	movs	r3, #40	; 0x28
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80022ce:	003b      	movs	r3, r7
 80022d0:	0018      	movs	r0, r3
 80022d2:	2328      	movs	r3, #40	; 0x28
 80022d4:	001a      	movs	r2, r3
 80022d6:	2100      	movs	r1, #0
 80022d8:	f004 fa43 	bl	8006762 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022dc:	4b3f      	ldr	r3, [pc, #252]	; (80023dc <MX_RTC_Init+0x12c>)
 80022de:	4a40      	ldr	r2, [pc, #256]	; (80023e0 <MX_RTC_Init+0x130>)
 80022e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80022e2:	4b3e      	ldr	r3, [pc, #248]	; (80023dc <MX_RTC_Init+0x12c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80022e8:	4b3c      	ldr	r3, [pc, #240]	; (80023dc <MX_RTC_Init+0x12c>)
 80022ea:	227f      	movs	r2, #127	; 0x7f
 80022ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80022ee:	4b3b      	ldr	r3, [pc, #236]	; (80023dc <MX_RTC_Init+0x12c>)
 80022f0:	22ff      	movs	r2, #255	; 0xff
 80022f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80022f4:	4b39      	ldr	r3, [pc, #228]	; (80023dc <MX_RTC_Init+0x12c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80022fa:	4b38      	ldr	r3, [pc, #224]	; (80023dc <MX_RTC_Init+0x12c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002300:	4b36      	ldr	r3, [pc, #216]	; (80023dc <MX_RTC_Init+0x12c>)
 8002302:	2200      	movs	r2, #0
 8002304:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002306:	4b35      	ldr	r3, [pc, #212]	; (80023dc <MX_RTC_Init+0x12c>)
 8002308:	0018      	movs	r0, r3
 800230a:	f001 ff23 	bl	8004154 <HAL_RTC_Init>
 800230e:	1e03      	subs	r3, r0, #0
 8002310:	d001      	beq.n	8002316 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002312:	f000 f959 	bl	80025c8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002316:	212c      	movs	r1, #44	; 0x2c
 8002318:	187b      	adds	r3, r7, r1
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800231e:	187b      	adds	r3, r7, r1
 8002320:	2200      	movs	r2, #0
 8002322:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002324:	187b      	adds	r3, r7, r1
 8002326:	2200      	movs	r2, #0
 8002328:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800232a:	187b      	adds	r3, r7, r1
 800232c:	2200      	movs	r2, #0
 800232e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002330:	187b      	adds	r3, r7, r1
 8002332:	2200      	movs	r2, #0
 8002334:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002336:	1879      	adds	r1, r7, r1
 8002338:	4b28      	ldr	r3, [pc, #160]	; (80023dc <MX_RTC_Init+0x12c>)
 800233a:	2201      	movs	r2, #1
 800233c:	0018      	movs	r0, r3
 800233e:	f001 ff9d 	bl	800427c <HAL_RTC_SetTime>
 8002342:	1e03      	subs	r3, r0, #0
 8002344:	d001      	beq.n	800234a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8002346:	f000 f93f 	bl	80025c8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800234a:	2128      	movs	r1, #40	; 0x28
 800234c:	187b      	adds	r3, r7, r1
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002352:	187b      	adds	r3, r7, r1
 8002354:	2201      	movs	r2, #1
 8002356:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002358:	187b      	adds	r3, r7, r1
 800235a:	2201      	movs	r2, #1
 800235c:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800235e:	187b      	adds	r3, r7, r1
 8002360:	2200      	movs	r2, #0
 8002362:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002364:	1879      	adds	r1, r7, r1
 8002366:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <MX_RTC_Init+0x12c>)
 8002368:	2201      	movs	r2, #1
 800236a:	0018      	movs	r0, r3
 800236c:	f002 f842 	bl	80043f4 <HAL_RTC_SetDate>
 8002370:	1e03      	subs	r3, r0, #0
 8002372:	d001      	beq.n	8002378 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8002374:	f000 f928 	bl	80025c8 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002378:	003b      	movs	r3, r7
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 800237e:	003b      	movs	r3, r7
 8002380:	2201      	movs	r2, #1
 8002382:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002384:	003b      	movs	r3, r7
 8002386:	2200      	movs	r2, #0
 8002388:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800238a:	003b      	movs	r3, r7
 800238c:	2200      	movs	r2, #0
 800238e:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002390:	003b      	movs	r3, r7
 8002392:	2200      	movs	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002396:	003b      	movs	r3, r7
 8002398:	2200      	movs	r2, #0
 800239a:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800239c:	003b      	movs	r3, r7
 800239e:	2200      	movs	r2, #0
 80023a0:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80023a2:	003b      	movs	r3, r7
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80023a8:	003b      	movs	r3, r7
 80023aa:	2200      	movs	r2, #0
 80023ac:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80023ae:	003b      	movs	r3, r7
 80023b0:	2220      	movs	r2, #32
 80023b2:	2101      	movs	r1, #1
 80023b4:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80023b6:	003b      	movs	r3, r7
 80023b8:	2280      	movs	r2, #128	; 0x80
 80023ba:	0052      	lsls	r2, r2, #1
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80023be:	0039      	movs	r1, r7
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <MX_RTC_Init+0x12c>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	0018      	movs	r0, r3
 80023c6:	f002 f8bb 	bl	8004540 <HAL_RTC_SetAlarm>
 80023ca:	1e03      	subs	r3, r0, #0
 80023cc:	d001      	beq.n	80023d2 <MX_RTC_Init+0x122>
  {
    Error_Handler();
 80023ce:	f000 f8fb 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b010      	add	sp, #64	; 0x40
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	200013b4 	.word	0x200013b4
 80023e0:	40002800 	.word	0x40002800

080023e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023e8:	4b14      	ldr	r3, [pc, #80]	; (800243c <MX_USART1_UART_Init+0x58>)
 80023ea:	4a15      	ldr	r2, [pc, #84]	; (8002440 <MX_USART1_UART_Init+0x5c>)
 80023ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023ee:	4b13      	ldr	r3, [pc, #76]	; (800243c <MX_USART1_UART_Init+0x58>)
 80023f0:	22e1      	movs	r2, #225	; 0xe1
 80023f2:	0252      	lsls	r2, r2, #9
 80023f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <MX_USART1_UART_Init+0x58>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023fc:	4b0f      	ldr	r3, [pc, #60]	; (800243c <MX_USART1_UART_Init+0x58>)
 80023fe:	2200      	movs	r2, #0
 8002400:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <MX_USART1_UART_Init+0x58>)
 8002404:	2200      	movs	r2, #0
 8002406:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <MX_USART1_UART_Init+0x58>)
 800240a:	220c      	movs	r2, #12
 800240c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <MX_USART1_UART_Init+0x58>)
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <MX_USART1_UART_Init+0x58>)
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800241a:	4b08      	ldr	r3, [pc, #32]	; (800243c <MX_USART1_UART_Init+0x58>)
 800241c:	2200      	movs	r2, #0
 800241e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <MX_USART1_UART_Init+0x58>)
 8002422:	2200      	movs	r2, #0
 8002424:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002426:	4b05      	ldr	r3, [pc, #20]	; (800243c <MX_USART1_UART_Init+0x58>)
 8002428:	0018      	movs	r0, r3
 800242a:	f002 fbe9 	bl	8004c00 <HAL_UART_Init>
 800242e:	1e03      	subs	r3, r0, #0
 8002430:	d001      	beq.n	8002436 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002432:	f000 f8c9 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	2000119c 	.word	0x2000119c
 8002440:	40013800 	.word	0x40013800

08002444 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <MX_USART2_UART_Init+0x58>)
 800244a:	4a15      	ldr	r2, [pc, #84]	; (80024a0 <MX_USART2_UART_Init+0x5c>)
 800244c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800244e:	4b13      	ldr	r3, [pc, #76]	; (800249c <MX_USART2_UART_Init+0x58>)
 8002450:	22e1      	movs	r2, #225	; 0xe1
 8002452:	0252      	lsls	r2, r2, #9
 8002454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <MX_USART2_UART_Init+0x58>)
 8002458:	2200      	movs	r2, #0
 800245a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800245c:	4b0f      	ldr	r3, [pc, #60]	; (800249c <MX_USART2_UART_Init+0x58>)
 800245e:	2200      	movs	r2, #0
 8002460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <MX_USART2_UART_Init+0x58>)
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <MX_USART2_UART_Init+0x58>)
 800246a:	220c      	movs	r2, #12
 800246c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <MX_USART2_UART_Init+0x58>)
 8002470:	2200      	movs	r2, #0
 8002472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <MX_USART2_UART_Init+0x58>)
 8002476:	2200      	movs	r2, #0
 8002478:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <MX_USART2_UART_Init+0x58>)
 800247c:	2200      	movs	r2, #0
 800247e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <MX_USART2_UART_Init+0x58>)
 8002482:	2200      	movs	r2, #0
 8002484:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002486:	4b05      	ldr	r3, [pc, #20]	; (800249c <MX_USART2_UART_Init+0x58>)
 8002488:	0018      	movs	r0, r3
 800248a:	f002 fbb9 	bl	8004c00 <HAL_UART_Init>
 800248e:	1e03      	subs	r3, r0, #0
 8002490:	d001      	beq.n	8002496 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002492:	f000 f899 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	2000121c 	.word	0x2000121c
 80024a0:	40004400 	.word	0x40004400

080024a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024a4:	b590      	push	{r4, r7, lr}
 80024a6:	b08b      	sub	sp, #44	; 0x2c
 80024a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024aa:	2414      	movs	r4, #20
 80024ac:	193b      	adds	r3, r7, r4
 80024ae:	0018      	movs	r0, r3
 80024b0:	2314      	movs	r3, #20
 80024b2:	001a      	movs	r2, r3
 80024b4:	2100      	movs	r1, #0
 80024b6:	f004 f954 	bl	8006762 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ba:	4b33      	ldr	r3, [pc, #204]	; (8002588 <MX_GPIO_Init+0xe4>)
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	4b32      	ldr	r3, [pc, #200]	; (8002588 <MX_GPIO_Init+0xe4>)
 80024c0:	2180      	movs	r1, #128	; 0x80
 80024c2:	0309      	lsls	r1, r1, #12
 80024c4:	430a      	orrs	r2, r1
 80024c6:	615a      	str	r2, [r3, #20]
 80024c8:	4b2f      	ldr	r3, [pc, #188]	; (8002588 <MX_GPIO_Init+0xe4>)
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	031b      	lsls	r3, r3, #12
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024d6:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <MX_GPIO_Init+0xe4>)
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	4b2b      	ldr	r3, [pc, #172]	; (8002588 <MX_GPIO_Init+0xe4>)
 80024dc:	2180      	movs	r1, #128	; 0x80
 80024de:	03c9      	lsls	r1, r1, #15
 80024e0:	430a      	orrs	r2, r1
 80024e2:	615a      	str	r2, [r3, #20]
 80024e4:	4b28      	ldr	r3, [pc, #160]	; (8002588 <MX_GPIO_Init+0xe4>)
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	03db      	lsls	r3, r3, #15
 80024ec:	4013      	ands	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f2:	4b25      	ldr	r3, [pc, #148]	; (8002588 <MX_GPIO_Init+0xe4>)
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	4b24      	ldr	r3, [pc, #144]	; (8002588 <MX_GPIO_Init+0xe4>)
 80024f8:	2180      	movs	r1, #128	; 0x80
 80024fa:	0289      	lsls	r1, r1, #10
 80024fc:	430a      	orrs	r2, r1
 80024fe:	615a      	str	r2, [r3, #20]
 8002500:	4b21      	ldr	r3, [pc, #132]	; (8002588 <MX_GPIO_Init+0xe4>)
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	029b      	lsls	r3, r3, #10
 8002508:	4013      	ands	r3, r2
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800250e:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <MX_GPIO_Init+0xe4>)
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <MX_GPIO_Init+0xe4>)
 8002514:	2180      	movs	r1, #128	; 0x80
 8002516:	02c9      	lsls	r1, r1, #11
 8002518:	430a      	orrs	r2, r1
 800251a:	615a      	str	r2, [r3, #20]
 800251c:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <MX_GPIO_Init+0xe4>)
 800251e:	695a      	ldr	r2, [r3, #20]
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	02db      	lsls	r3, r3, #11
 8002524:	4013      	ands	r3, r2
 8002526:	607b      	str	r3, [r7, #4]
 8002528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800252a:	2390      	movs	r3, #144	; 0x90
 800252c:	05db      	lsls	r3, r3, #23
 800252e:	2200      	movs	r2, #0
 8002530:	2120      	movs	r1, #32
 8002532:	0018      	movs	r0, r3
 8002534:	f000 ff5c 	bl	80033f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002538:	193b      	adds	r3, r7, r4
 800253a:	2280      	movs	r2, #128	; 0x80
 800253c:	0192      	lsls	r2, r2, #6
 800253e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002540:	193b      	adds	r3, r7, r4
 8002542:	4a12      	ldr	r2, [pc, #72]	; (800258c <MX_GPIO_Init+0xe8>)
 8002544:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	193b      	adds	r3, r7, r4
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800254c:	193b      	adds	r3, r7, r4
 800254e:	4a10      	ldr	r2, [pc, #64]	; (8002590 <MX_GPIO_Init+0xec>)
 8002550:	0019      	movs	r1, r3
 8002552:	0010      	movs	r0, r2
 8002554:	f000 fddc 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002558:	0021      	movs	r1, r4
 800255a:	187b      	adds	r3, r7, r1
 800255c:	2220      	movs	r2, #32
 800255e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002560:	187b      	adds	r3, r7, r1
 8002562:	2201      	movs	r2, #1
 8002564:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	187b      	adds	r3, r7, r1
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256c:	187b      	adds	r3, r7, r1
 800256e:	2200      	movs	r2, #0
 8002570:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002572:	187a      	adds	r2, r7, r1
 8002574:	2390      	movs	r3, #144	; 0x90
 8002576:	05db      	lsls	r3, r3, #23
 8002578:	0011      	movs	r1, r2
 800257a:	0018      	movs	r0, r3
 800257c:	f000 fdc8 	bl	8003110 <HAL_GPIO_Init>

}
 8002580:	46c0      	nop			; (mov r8, r8)
 8002582:	46bd      	mov	sp, r7
 8002584:	b00b      	add	sp, #44	; 0x2c
 8002586:	bd90      	pop	{r4, r7, pc}
 8002588:	40021000 	.word	0x40021000
 800258c:	10210000 	.word	0x10210000
 8002590:	48000800 	.word	0x48000800

08002594 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800259c:	2001      	movs	r0, #1
 800259e:	f003 f878 	bl	8005692 <osDelay>
 80025a2:	e7fb      	b.n	800259c <StartDefaultTask+0x8>

080025a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d101      	bne.n	80025ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80025b6:	f000 fa65 	bl	8002a84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	46bd      	mov	sp, r7
 80025be:	b002      	add	sp, #8
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	40012c00 	.word	0x40012c00

080025c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025cc:	46c0      	nop			; (mov r8, r8)
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025da:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <HAL_MspInit+0x44>)
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <HAL_MspInit+0x44>)
 80025e0:	2101      	movs	r1, #1
 80025e2:	430a      	orrs	r2, r1
 80025e4:	619a      	str	r2, [r3, #24]
 80025e6:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <HAL_MspInit+0x44>)
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2201      	movs	r2, #1
 80025ec:	4013      	ands	r3, r2
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_MspInit+0x44>)
 80025f4:	69da      	ldr	r2, [r3, #28]
 80025f6:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_MspInit+0x44>)
 80025f8:	2180      	movs	r1, #128	; 0x80
 80025fa:	0549      	lsls	r1, r1, #21
 80025fc:	430a      	orrs	r2, r1
 80025fe:	61da      	str	r2, [r3, #28]
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_MspInit+0x44>)
 8002602:	69da      	ldr	r2, [r3, #28]
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	055b      	lsls	r3, r3, #21
 8002608:	4013      	ands	r3, r2
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	46bd      	mov	sp, r7
 8002612:	b002      	add	sp, #8
 8002614:	bd80      	pop	{r7, pc}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	40021000 	.word	0x40021000

0800261c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08a      	sub	sp, #40	; 0x28
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	2314      	movs	r3, #20
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	0018      	movs	r0, r3
 800262a:	2314      	movs	r3, #20
 800262c:	001a      	movs	r2, r3
 800262e:	2100      	movs	r1, #0
 8002630:	f004 f897 	bl	8006762 <memset>
  if(hadc->Instance==ADC1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a19      	ldr	r2, [pc, #100]	; (80026a0 <HAL_ADC_MspInit+0x84>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d12c      	bne.n	8002698 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800263e:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <HAL_ADC_MspInit+0x88>)
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	4b18      	ldr	r3, [pc, #96]	; (80026a4 <HAL_ADC_MspInit+0x88>)
 8002644:	2180      	movs	r1, #128	; 0x80
 8002646:	0089      	lsls	r1, r1, #2
 8002648:	430a      	orrs	r2, r1
 800264a:	619a      	str	r2, [r3, #24]
 800264c:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <HAL_ADC_MspInit+0x88>)
 800264e:	699a      	ldr	r2, [r3, #24]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4013      	ands	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265a:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <HAL_ADC_MspInit+0x88>)
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <HAL_ADC_MspInit+0x88>)
 8002660:	2180      	movs	r1, #128	; 0x80
 8002662:	0289      	lsls	r1, r1, #10
 8002664:	430a      	orrs	r2, r1
 8002666:	615a      	str	r2, [r3, #20]
 8002668:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <HAL_ADC_MspInit+0x88>)
 800266a:	695a      	ldr	r2, [r3, #20]
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	029b      	lsls	r3, r3, #10
 8002670:	4013      	ands	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002676:	2114      	movs	r1, #20
 8002678:	187b      	adds	r3, r7, r1
 800267a:	2201      	movs	r2, #1
 800267c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800267e:	187b      	adds	r3, r7, r1
 8002680:	2203      	movs	r2, #3
 8002682:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	187b      	adds	r3, r7, r1
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268a:	187a      	adds	r2, r7, r1
 800268c:	2390      	movs	r3, #144	; 0x90
 800268e:	05db      	lsls	r3, r3, #23
 8002690:	0011      	movs	r1, r2
 8002692:	0018      	movs	r0, r3
 8002694:	f000 fd3c 	bl	8003110 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	b00a      	add	sp, #40	; 0x28
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40012400 	.word	0x40012400
 80026a4:	40021000 	.word	0x40021000

080026a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	2314      	movs	r3, #20
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	0018      	movs	r0, r3
 80026b6:	2314      	movs	r3, #20
 80026b8:	001a      	movs	r2, r3
 80026ba:	2100      	movs	r1, #0
 80026bc:	f004 f851 	bl	8006762 <memset>
  if(hi2c->Instance==I2C1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <HAL_I2C_MspInit+0x90>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d131      	bne.n	800272e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ca:	4b1c      	ldr	r3, [pc, #112]	; (800273c <HAL_I2C_MspInit+0x94>)
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_I2C_MspInit+0x94>)
 80026d0:	2180      	movs	r1, #128	; 0x80
 80026d2:	02c9      	lsls	r1, r1, #11
 80026d4:	430a      	orrs	r2, r1
 80026d6:	615a      	str	r2, [r3, #20]
 80026d8:	4b18      	ldr	r3, [pc, #96]	; (800273c <HAL_I2C_MspInit+0x94>)
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	02db      	lsls	r3, r3, #11
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026e6:	2114      	movs	r1, #20
 80026e8:	187b      	adds	r3, r7, r1
 80026ea:	22c0      	movs	r2, #192	; 0xc0
 80026ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ee:	187b      	adds	r3, r7, r1
 80026f0:	2212      	movs	r2, #18
 80026f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026f4:	187b      	adds	r3, r7, r1
 80026f6:	2201      	movs	r2, #1
 80026f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026fa:	187b      	adds	r3, r7, r1
 80026fc:	2203      	movs	r2, #3
 80026fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002700:	187b      	adds	r3, r7, r1
 8002702:	2201      	movs	r2, #1
 8002704:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002706:	187b      	adds	r3, r7, r1
 8002708:	4a0d      	ldr	r2, [pc, #52]	; (8002740 <HAL_I2C_MspInit+0x98>)
 800270a:	0019      	movs	r1, r3
 800270c:	0010      	movs	r0, r2
 800270e:	f000 fcff 	bl	8003110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <HAL_I2C_MspInit+0x94>)
 8002714:	69da      	ldr	r2, [r3, #28]
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_I2C_MspInit+0x94>)
 8002718:	2180      	movs	r1, #128	; 0x80
 800271a:	0389      	lsls	r1, r1, #14
 800271c:	430a      	orrs	r2, r1
 800271e:	61da      	str	r2, [r3, #28]
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_I2C_MspInit+0x94>)
 8002722:	69da      	ldr	r2, [r3, #28]
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	039b      	lsls	r3, r3, #14
 8002728:	4013      	ands	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	46bd      	mov	sp, r7
 8002732:	b00a      	add	sp, #40	; 0x28
 8002734:	bd80      	pop	{r7, pc}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	40005400 	.word	0x40005400
 800273c:	40021000 	.word	0x40021000
 8002740:	48000400 	.word	0x48000400

08002744 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a06      	ldr	r2, [pc, #24]	; (800276c <HAL_RTC_MspInit+0x28>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d106      	bne.n	8002764 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <HAL_RTC_MspInit+0x2c>)
 8002758:	6a1a      	ldr	r2, [r3, #32]
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_RTC_MspInit+0x2c>)
 800275c:	2180      	movs	r1, #128	; 0x80
 800275e:	0209      	lsls	r1, r1, #8
 8002760:	430a      	orrs	r2, r1
 8002762:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002764:	46c0      	nop			; (mov r8, r8)
 8002766:	46bd      	mov	sp, r7
 8002768:	b002      	add	sp, #8
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40002800 	.word	0x40002800
 8002770:	40021000 	.word	0x40021000

08002774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08c      	sub	sp, #48	; 0x30
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277c:	231c      	movs	r3, #28
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	0018      	movs	r0, r3
 8002782:	2314      	movs	r3, #20
 8002784:	001a      	movs	r2, r3
 8002786:	2100      	movs	r1, #0
 8002788:	f003 ffeb 	bl	8006762 <memset>
  if(huart->Instance==USART1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a3d      	ldr	r2, [pc, #244]	; (8002888 <HAL_UART_MspInit+0x114>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d13c      	bne.n	8002810 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002796:	4b3d      	ldr	r3, [pc, #244]	; (800288c <HAL_UART_MspInit+0x118>)
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	4b3c      	ldr	r3, [pc, #240]	; (800288c <HAL_UART_MspInit+0x118>)
 800279c:	2180      	movs	r1, #128	; 0x80
 800279e:	01c9      	lsls	r1, r1, #7
 80027a0:	430a      	orrs	r2, r1
 80027a2:	619a      	str	r2, [r3, #24]
 80027a4:	4b39      	ldr	r3, [pc, #228]	; (800288c <HAL_UART_MspInit+0x118>)
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	01db      	lsls	r3, r3, #7
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
 80027b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b2:	4b36      	ldr	r3, [pc, #216]	; (800288c <HAL_UART_MspInit+0x118>)
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	4b35      	ldr	r3, [pc, #212]	; (800288c <HAL_UART_MspInit+0x118>)
 80027b8:	2180      	movs	r1, #128	; 0x80
 80027ba:	0289      	lsls	r1, r1, #10
 80027bc:	430a      	orrs	r2, r1
 80027be:	615a      	str	r2, [r3, #20]
 80027c0:	4b32      	ldr	r3, [pc, #200]	; (800288c <HAL_UART_MspInit+0x118>)
 80027c2:	695a      	ldr	r2, [r3, #20]
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	029b      	lsls	r3, r3, #10
 80027c8:	4013      	ands	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027ce:	211c      	movs	r1, #28
 80027d0:	187b      	adds	r3, r7, r1
 80027d2:	22c0      	movs	r2, #192	; 0xc0
 80027d4:	00d2      	lsls	r2, r2, #3
 80027d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d8:	187b      	adds	r3, r7, r1
 80027da:	2202      	movs	r2, #2
 80027dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	187b      	adds	r3, r7, r1
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027e4:	187b      	adds	r3, r7, r1
 80027e6:	2203      	movs	r2, #3
 80027e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80027ea:	187b      	adds	r3, r7, r1
 80027ec:	2201      	movs	r2, #1
 80027ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f0:	187a      	adds	r2, r7, r1
 80027f2:	2390      	movs	r3, #144	; 0x90
 80027f4:	05db      	lsls	r3, r3, #23
 80027f6:	0011      	movs	r1, r2
 80027f8:	0018      	movs	r0, r3
 80027fa:	f000 fc89 	bl	8003110 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	2100      	movs	r1, #0
 8002802:	201b      	movs	r0, #27
 8002804:	f000 fc18 	bl	8003038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002808:	201b      	movs	r0, #27
 800280a:	f000 fc2a 	bl	8003062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800280e:	e037      	b.n	8002880 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1e      	ldr	r2, [pc, #120]	; (8002890 <HAL_UART_MspInit+0x11c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d132      	bne.n	8002880 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800281a:	4b1c      	ldr	r3, [pc, #112]	; (800288c <HAL_UART_MspInit+0x118>)
 800281c:	69da      	ldr	r2, [r3, #28]
 800281e:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_UART_MspInit+0x118>)
 8002820:	2180      	movs	r1, #128	; 0x80
 8002822:	0289      	lsls	r1, r1, #10
 8002824:	430a      	orrs	r2, r1
 8002826:	61da      	str	r2, [r3, #28]
 8002828:	4b18      	ldr	r3, [pc, #96]	; (800288c <HAL_UART_MspInit+0x118>)
 800282a:	69da      	ldr	r2, [r3, #28]
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	029b      	lsls	r3, r3, #10
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002836:	4b15      	ldr	r3, [pc, #84]	; (800288c <HAL_UART_MspInit+0x118>)
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <HAL_UART_MspInit+0x118>)
 800283c:	2180      	movs	r1, #128	; 0x80
 800283e:	0289      	lsls	r1, r1, #10
 8002840:	430a      	orrs	r2, r1
 8002842:	615a      	str	r2, [r3, #20]
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_UART_MspInit+0x118>)
 8002846:	695a      	ldr	r2, [r3, #20]
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	029b      	lsls	r3, r3, #10
 800284c:	4013      	ands	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002852:	211c      	movs	r1, #28
 8002854:	187b      	adds	r3, r7, r1
 8002856:	220c      	movs	r2, #12
 8002858:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	187b      	adds	r3, r7, r1
 800285c:	2202      	movs	r2, #2
 800285e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	187b      	adds	r3, r7, r1
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002866:	187b      	adds	r3, r7, r1
 8002868:	2200      	movs	r2, #0
 800286a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800286c:	187b      	adds	r3, r7, r1
 800286e:	2201      	movs	r2, #1
 8002870:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002872:	187a      	adds	r2, r7, r1
 8002874:	2390      	movs	r3, #144	; 0x90
 8002876:	05db      	lsls	r3, r3, #23
 8002878:	0011      	movs	r1, r2
 800287a:	0018      	movs	r0, r3
 800287c:	f000 fc48 	bl	8003110 <HAL_GPIO_Init>
}
 8002880:	46c0      	nop			; (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	b00c      	add	sp, #48	; 0x30
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40013800 	.word	0x40013800
 800288c:	40021000 	.word	0x40021000
 8002890:	40004400 	.word	0x40004400

08002894 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	0019      	movs	r1, r3
 80028aa:	200d      	movs	r0, #13
 80028ac:	f000 fbc4 	bl	8003038 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80028b0:	200d      	movs	r0, #13
 80028b2:	f000 fbd6 	bl	8003062 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80028b6:	4b21      	ldr	r3, [pc, #132]	; (800293c <HAL_InitTick+0xa8>)
 80028b8:	699a      	ldr	r2, [r3, #24]
 80028ba:	4b20      	ldr	r3, [pc, #128]	; (800293c <HAL_InitTick+0xa8>)
 80028bc:	2180      	movs	r1, #128	; 0x80
 80028be:	0109      	lsls	r1, r1, #4
 80028c0:	430a      	orrs	r2, r1
 80028c2:	619a      	str	r2, [r3, #24]
 80028c4:	4b1d      	ldr	r3, [pc, #116]	; (800293c <HAL_InitTick+0xa8>)
 80028c6:	699a      	ldr	r2, [r3, #24]
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	4013      	ands	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028d2:	230c      	movs	r3, #12
 80028d4:	18fa      	adds	r2, r7, r3
 80028d6:	2310      	movs	r3, #16
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	0011      	movs	r1, r2
 80028dc:	0018      	movs	r0, r3
 80028de:	f001 fb41 	bl	8003f64 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80028e2:	f001 fb29 	bl	8003f38 <HAL_RCC_GetPCLK1Freq>
 80028e6:	0003      	movs	r3, r0
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	4914      	ldr	r1, [pc, #80]	; (8002940 <HAL_InitTick+0xac>)
 80028ee:	0018      	movs	r0, r3
 80028f0:	f7fd fc1c 	bl	800012c <__udivsi3>
 80028f4:	0003      	movs	r3, r0
 80028f6:	3b01      	subs	r3, #1
 80028f8:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80028fa:	4b12      	ldr	r3, [pc, #72]	; (8002944 <HAL_InitTick+0xb0>)
 80028fc:	4a12      	ldr	r2, [pc, #72]	; (8002948 <HAL_InitTick+0xb4>)
 80028fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002900:	4b10      	ldr	r3, [pc, #64]	; (8002944 <HAL_InitTick+0xb0>)
 8002902:	4a12      	ldr	r2, [pc, #72]	; (800294c <HAL_InitTick+0xb8>)
 8002904:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002906:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <HAL_InitTick+0xb0>)
 8002908:	6a3a      	ldr	r2, [r7, #32]
 800290a:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 800290c:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <HAL_InitTick+0xb0>)
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002912:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <HAL_InitTick+0xb0>)
 8002914:	2200      	movs	r2, #0
 8002916:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <HAL_InitTick+0xb0>)
 800291a:	0018      	movs	r0, r3
 800291c:	f001 ff5e 	bl	80047dc <HAL_TIM_Base_Init>
 8002920:	1e03      	subs	r3, r0, #0
 8002922:	d105      	bne.n	8002930 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002924:	4b07      	ldr	r3, [pc, #28]	; (8002944 <HAL_InitTick+0xb0>)
 8002926:	0018      	movs	r0, r3
 8002928:	f001 ff8c 	bl	8004844 <HAL_TIM_Base_Start_IT>
 800292c:	0003      	movs	r3, r0
 800292e:	e000      	b.n	8002932 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
}
 8002932:	0018      	movs	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	b00a      	add	sp, #40	; 0x28
 8002938:	bd80      	pop	{r7, pc}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	40021000 	.word	0x40021000
 8002940:	000f4240 	.word	0x000f4240
 8002944:	20001414 	.word	0x20001414
 8002948:	40012c00 	.word	0x40012c00
 800294c:	000003e7 	.word	0x000003e7

08002950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002954:	46c0      	nop			; (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800295e:	e7fe      	b.n	800295e <HardFault_Handler+0x4>

08002960 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002964:	4b03      	ldr	r3, [pc, #12]	; (8002974 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8002966:	0018      	movs	r0, r3
 8002968:	f001 ff8e 	bl	8004888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	20001414 	.word	0x20001414

08002978 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800297c:	4b03      	ldr	r3, [pc, #12]	; (800298c <USART1_IRQHandler+0x14>)
 800297e:	0018      	movs	r0, r3
 8002980:	f002 f992 	bl	8004ca8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002984:	46c0      	nop			; (mov r8, r8)
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	2000119c 	.word	0x2000119c

08002990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002998:	4a14      	ldr	r2, [pc, #80]	; (80029ec <_sbrk+0x5c>)
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <_sbrk+0x60>)
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029a4:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <_sbrk+0x64>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <_sbrk+0x64>)
 80029ae:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <_sbrk+0x68>)
 80029b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <_sbrk+0x64>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	18d3      	adds	r3, r2, r3
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d207      	bcs.n	80029d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029c0:	f003 fe9c 	bl	80066fc <__errno>
 80029c4:	0003      	movs	r3, r0
 80029c6:	220c      	movs	r2, #12
 80029c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ca:	2301      	movs	r3, #1
 80029cc:	425b      	negs	r3, r3
 80029ce:	e009      	b.n	80029e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <_sbrk+0x64>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029d6:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <_sbrk+0x64>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	18d2      	adds	r2, r2, r3
 80029de:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <_sbrk+0x64>)
 80029e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80029e2:	68fb      	ldr	r3, [r7, #12]
}
 80029e4:	0018      	movs	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b006      	add	sp, #24
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20002000 	.word	0x20002000
 80029f0:	00000400 	.word	0x00000400
 80029f4:	2000044c 	.word	0x2000044c
 80029f8:	20001460 	.word	0x20001460

080029fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002a00:	46c0      	nop			; (mov r8, r8)
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a0c:	480d      	ldr	r0, [pc, #52]	; (8002a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a0e:	490e      	ldr	r1, [pc, #56]	; (8002a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a10:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <LoopForever+0xe>)
  movs r3, #0
 8002a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a14:	e002      	b.n	8002a1c <LoopCopyDataInit>

08002a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a1a:	3304      	adds	r3, #4

08002a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a20:	d3f9      	bcc.n	8002a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a22:	4a0b      	ldr	r2, [pc, #44]	; (8002a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a24:	4c0b      	ldr	r4, [pc, #44]	; (8002a54 <LoopForever+0x16>)
  movs r3, #0
 8002a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a28:	e001      	b.n	8002a2e <LoopFillZerobss>

08002a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a2c:	3204      	adds	r2, #4

08002a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a30:	d3fb      	bcc.n	8002a2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a32:	f7ff ffe3 	bl	80029fc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002a36:	f003 fe67 	bl	8006708 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a3a:	f7ff faff 	bl	800203c <main>

08002a3e <LoopForever>:

LoopForever:
    b LoopForever
 8002a3e:	e7fe      	b.n	8002a3e <LoopForever>
  ldr   r0, =_estack
 8002a40:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a48:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002a4c:	08008550 	.word	0x08008550
  ldr r2, =_sbss
 8002a50:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002a54:	2000145c 	.word	0x2000145c

08002a58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a58:	e7fe      	b.n	8002a58 <ADC1_IRQHandler>
	...

08002a5c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a60:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <HAL_Init+0x24>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_Init+0x24>)
 8002a66:	2110      	movs	r1, #16
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f7ff ff11 	bl	8002894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a72:	f7ff fdaf 	bl	80025d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	40022000 	.word	0x40022000

08002a84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_IncTick+0x1c>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	001a      	movs	r2, r3
 8002a8e:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <HAL_IncTick+0x20>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	18d2      	adds	r2, r2, r3
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <HAL_IncTick+0x20>)
 8002a96:	601a      	str	r2, [r3, #0]
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	20000004 	.word	0x20000004
 8002aa4:	20001454 	.word	0x20001454

08002aa8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8002aac:	4b02      	ldr	r3, [pc, #8]	; (8002ab8 <HAL_GetTick+0x10>)
 8002aae:	681b      	ldr	r3, [r3, #0]
}
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	20001454 	.word	0x20001454

08002abc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ac4:	230f      	movs	r3, #15
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e125      	b.n	8002d26 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10a      	bne.n	8002af8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2234      	movs	r2, #52	; 0x34
 8002aec:	2100      	movs	r1, #0
 8002aee:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	0018      	movs	r0, r3
 8002af4:	f7ff fd92 	bl	800261c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	2210      	movs	r2, #16
 8002afe:	4013      	ands	r3, r2
 8002b00:	d000      	beq.n	8002b04 <HAL_ADC_Init+0x48>
 8002b02:	e103      	b.n	8002d0c <HAL_ADC_Init+0x250>
 8002b04:	230f      	movs	r3, #15
 8002b06:	18fb      	adds	r3, r7, r3
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d000      	beq.n	8002b10 <HAL_ADC_Init+0x54>
 8002b0e:	e0fd      	b.n	8002d0c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2204      	movs	r2, #4
 8002b18:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002b1a:	d000      	beq.n	8002b1e <HAL_ADC_Init+0x62>
 8002b1c:	e0f6      	b.n	8002d0c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	4a83      	ldr	r2, [pc, #524]	; (8002d30 <HAL_ADC_Init+0x274>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	2202      	movs	r2, #2
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2203      	movs	r2, #3
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d112      	bne.n	8002b62 <HAL_ADC_Init+0xa6>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2201      	movs	r2, #1
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d009      	beq.n	8002b5e <HAL_ADC_Init+0xa2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	401a      	ands	r2, r3
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	021b      	lsls	r3, r3, #8
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d101      	bne.n	8002b62 <HAL_ADC_Init+0xa6>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <HAL_ADC_Init+0xa8>
 8002b62:	2300      	movs	r3, #0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d116      	bne.n	8002b96 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	2218      	movs	r2, #24
 8002b70:	4393      	bics	r3, r2
 8002b72:	0019      	movs	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	0899      	lsrs	r1, r3, #2
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4964      	ldr	r1, [pc, #400]	; (8002d34 <HAL_ADC_Init+0x278>)
 8002ba2:	400a      	ands	r2, r1
 8002ba4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	7e1b      	ldrb	r3, [r3, #24]
 8002baa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	7e5b      	ldrb	r3, [r3, #25]
 8002bb0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bb2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	7e9b      	ldrb	r3, [r3, #26]
 8002bb8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002bba:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d002      	beq.n	8002bca <HAL_ADC_Init+0x10e>
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	015b      	lsls	r3, r3, #5
 8002bc8:	e000      	b.n	8002bcc <HAL_ADC_Init+0x110>
 8002bca:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002bcc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002bd2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d101      	bne.n	8002be0 <HAL_ADC_Init+0x124>
 8002bdc:	2304      	movs	r3, #4
 8002bde:	e000      	b.n	8002be2 <HAL_ADC_Init+0x126>
 8002be0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002be2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2124      	movs	r1, #36	; 0x24
 8002be8:	5c5b      	ldrb	r3, [r3, r1]
 8002bea:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002bec:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	7edb      	ldrb	r3, [r3, #27]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d115      	bne.n	8002c28 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	7e9b      	ldrb	r3, [r3, #26]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d105      	bne.n	8002c10 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	0252      	lsls	r2, r2, #9
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	e00b      	b.n	8002c28 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c14:	2220      	movs	r2, #32
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c20:	2201      	movs	r2, #1
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69da      	ldr	r2, [r3, #28]
 8002c2c:	23c2      	movs	r3, #194	; 0xc2
 8002c2e:	33ff      	adds	r3, #255	; 0xff
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d007      	beq.n	8002c44 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68d9      	ldr	r1, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	055b      	lsls	r3, r3, #21
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d01b      	beq.n	8002c98 <HAL_ADC_Init+0x1dc>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d017      	beq.n	8002c98 <HAL_ADC_Init+0x1dc>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d013      	beq.n	8002c98 <HAL_ADC_Init+0x1dc>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d00f      	beq.n	8002c98 <HAL_ADC_Init+0x1dc>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d00b      	beq.n	8002c98 <HAL_ADC_Init+0x1dc>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	2b05      	cmp	r3, #5
 8002c86:	d007      	beq.n	8002c98 <HAL_ADC_Init+0x1dc>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	2b06      	cmp	r3, #6
 8002c8e:	d003      	beq.n	8002c98 <HAL_ADC_Init+0x1dc>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	2b07      	cmp	r3, #7
 8002c96:	d112      	bne.n	8002cbe <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2107      	movs	r1, #7
 8002ca4:	438a      	bics	r2, r1
 8002ca6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6959      	ldr	r1, [r3, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	2207      	movs	r2, #7
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4a1c      	ldr	r2, [pc, #112]	; (8002d38 <HAL_ADC_Init+0x27c>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d10b      	bne.n	8002ce6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	2203      	movs	r2, #3
 8002cda:	4393      	bics	r3, r2
 8002cdc:	2201      	movs	r2, #1
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ce4:	e01c      	b.n	8002d20 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	2212      	movs	r2, #18
 8002cec:	4393      	bics	r3, r2
 8002cee:	2210      	movs	r2, #16
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002d02:	230f      	movs	r3, #15
 8002d04:	18fb      	adds	r3, r7, r3
 8002d06:	2201      	movs	r2, #1
 8002d08:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d0a:	e009      	b.n	8002d20 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	2210      	movs	r2, #16
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002d18:	230f      	movs	r3, #15
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d20:	230f      	movs	r3, #15
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	781b      	ldrb	r3, [r3, #0]
}
 8002d26:	0018      	movs	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b004      	add	sp, #16
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	fffffefd 	.word	0xfffffefd
 8002d34:	fffe0219 	.word	0xfffe0219
 8002d38:	833fffe7 	.word	0x833fffe7

08002d3c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d46:	230f      	movs	r3, #15
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d56:	2380      	movs	r3, #128	; 0x80
 8002d58:	055b      	lsls	r3, r3, #21
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d011      	beq.n	8002d82 <HAL_ADC_ConfigChannel+0x46>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d00d      	beq.n	8002d82 <HAL_ADC_ConfigChannel+0x46>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d009      	beq.n	8002d82 <HAL_ADC_ConfigChannel+0x46>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	d005      	beq.n	8002d82 <HAL_ADC_ConfigChannel+0x46>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d001      	beq.n	8002d82 <HAL_ADC_ConfigChannel+0x46>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2234      	movs	r2, #52	; 0x34
 8002d86:	5c9b      	ldrb	r3, [r3, r2]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x54>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e0bb      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x1cc>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2234      	movs	r2, #52	; 0x34
 8002d94:	2101      	movs	r1, #1
 8002d96:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2204      	movs	r2, #4
 8002da0:	4013      	ands	r3, r2
 8002da2:	d000      	beq.n	8002da6 <HAL_ADC_ConfigChannel+0x6a>
 8002da4:	e09f      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4a59      	ldr	r2, [pc, #356]	; (8002f10 <HAL_ADC_ConfigChannel+0x1d4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d100      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x76>
 8002db0:	e077      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	055b      	lsls	r3, r3, #21
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d037      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x108>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d033      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x108>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d02f      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x108>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d02b      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x108>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d027      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x108>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	2b05      	cmp	r3, #5
 8002dfa:	d023      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x108>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	2b06      	cmp	r3, #6
 8002e02:	d01f      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x108>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	2b07      	cmp	r3, #7
 8002e0a:	d01b      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	2107      	movs	r1, #7
 8002e18:	400b      	ands	r3, r1
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d012      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2107      	movs	r1, #7
 8002e2a:	438a      	bics	r2, r1
 8002e2c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6959      	ldr	r1, [r3, #20]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2207      	movs	r2, #7
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b10      	cmp	r3, #16
 8002e4a:	d003      	beq.n	8002e54 <HAL_ADC_ConfigChannel+0x118>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b11      	cmp	r3, #17
 8002e52:	d152      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002e54:	4b2f      	ldr	r3, [pc, #188]	; (8002f14 <HAL_ADC_ConfigChannel+0x1d8>)
 8002e56:	6819      	ldr	r1, [r3, #0]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b10      	cmp	r3, #16
 8002e5e:	d102      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x12a>
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	041b      	lsls	r3, r3, #16
 8002e64:	e001      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x12e>
 8002e66:	2380      	movs	r3, #128	; 0x80
 8002e68:	03db      	lsls	r3, r3, #15
 8002e6a:	4a2a      	ldr	r2, [pc, #168]	; (8002f14 <HAL_ADC_ConfigChannel+0x1d8>)
 8002e6c:	430b      	orrs	r3, r1
 8002e6e:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b10      	cmp	r3, #16
 8002e76:	d140      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e78:	4b27      	ldr	r3, [pc, #156]	; (8002f18 <HAL_ADC_ConfigChannel+0x1dc>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4927      	ldr	r1, [pc, #156]	; (8002f1c <HAL_ADC_ConfigChannel+0x1e0>)
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f7fd f954 	bl	800012c <__udivsi3>
 8002e84:	0003      	movs	r3, r0
 8002e86:	001a      	movs	r2, r3
 8002e88:	0013      	movs	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	189b      	adds	r3, r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e92:	e002      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f9      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x158>
 8002ea0:	e02b      	b.n	8002efa <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2101      	movs	r1, #1
 8002eae:	4099      	lsls	r1, r3
 8002eb0:	000b      	movs	r3, r1
 8002eb2:	43d9      	mvns	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	400a      	ands	r2, r1
 8002eba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b10      	cmp	r3, #16
 8002ec2:	d003      	beq.n	8002ecc <HAL_ADC_ConfigChannel+0x190>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b11      	cmp	r3, #17
 8002eca:	d116      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002ecc:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <HAL_ADC_ConfigChannel+0x1d8>)
 8002ece:	6819      	ldr	r1, [r3, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b10      	cmp	r3, #16
 8002ed6:	d101      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x1a0>
 8002ed8:	4a11      	ldr	r2, [pc, #68]	; (8002f20 <HAL_ADC_ConfigChannel+0x1e4>)
 8002eda:	e000      	b.n	8002ede <HAL_ADC_ConfigChannel+0x1a2>
 8002edc:	4a11      	ldr	r2, [pc, #68]	; (8002f24 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ede:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <HAL_ADC_ConfigChannel+0x1d8>)
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	e009      	b.n	8002efa <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	2220      	movs	r2, #32
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002ef2:	230f      	movs	r3, #15
 8002ef4:	18fb      	adds	r3, r7, r3
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2234      	movs	r2, #52	; 0x34
 8002efe:	2100      	movs	r1, #0
 8002f00:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002f02:	230f      	movs	r3, #15
 8002f04:	18fb      	adds	r3, r7, r3
 8002f06:	781b      	ldrb	r3, [r3, #0]
}
 8002f08:	0018      	movs	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b004      	add	sp, #16
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	00001001 	.word	0x00001001
 8002f14:	40012708 	.word	0x40012708
 8002f18:	20000000 	.word	0x20000000
 8002f1c:	000f4240 	.word	0x000f4240
 8002f20:	ff7fffff 	.word	0xff7fffff
 8002f24:	ffbfffff 	.word	0xffbfffff

08002f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	0002      	movs	r2, r0
 8002f30:	1dfb      	adds	r3, r7, #7
 8002f32:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f34:	1dfb      	adds	r3, r7, #7
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b7f      	cmp	r3, #127	; 0x7f
 8002f3a:	d809      	bhi.n	8002f50 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f3c:	1dfb      	adds	r3, r7, #7
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	001a      	movs	r2, r3
 8002f42:	231f      	movs	r3, #31
 8002f44:	401a      	ands	r2, r3
 8002f46:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <__NVIC_EnableIRQ+0x30>)
 8002f48:	2101      	movs	r1, #1
 8002f4a:	4091      	lsls	r1, r2
 8002f4c:	000a      	movs	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]
  }
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b002      	add	sp, #8
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	e000e100 	.word	0xe000e100

08002f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f5c:	b590      	push	{r4, r7, lr}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	0002      	movs	r2, r0
 8002f64:	6039      	str	r1, [r7, #0]
 8002f66:	1dfb      	adds	r3, r7, #7
 8002f68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f6a:	1dfb      	adds	r3, r7, #7
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b7f      	cmp	r3, #127	; 0x7f
 8002f70:	d828      	bhi.n	8002fc4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f72:	4a2f      	ldr	r2, [pc, #188]	; (8003030 <__NVIC_SetPriority+0xd4>)
 8002f74:	1dfb      	adds	r3, r7, #7
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	b25b      	sxtb	r3, r3
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	33c0      	adds	r3, #192	; 0xc0
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	589b      	ldr	r3, [r3, r2]
 8002f82:	1dfa      	adds	r2, r7, #7
 8002f84:	7812      	ldrb	r2, [r2, #0]
 8002f86:	0011      	movs	r1, r2
 8002f88:	2203      	movs	r2, #3
 8002f8a:	400a      	ands	r2, r1
 8002f8c:	00d2      	lsls	r2, r2, #3
 8002f8e:	21ff      	movs	r1, #255	; 0xff
 8002f90:	4091      	lsls	r1, r2
 8002f92:	000a      	movs	r2, r1
 8002f94:	43d2      	mvns	r2, r2
 8002f96:	401a      	ands	r2, r3
 8002f98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	019b      	lsls	r3, r3, #6
 8002f9e:	22ff      	movs	r2, #255	; 0xff
 8002fa0:	401a      	ands	r2, r3
 8002fa2:	1dfb      	adds	r3, r7, #7
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	2303      	movs	r3, #3
 8002faa:	4003      	ands	r3, r0
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fb0:	481f      	ldr	r0, [pc, #124]	; (8003030 <__NVIC_SetPriority+0xd4>)
 8002fb2:	1dfb      	adds	r3, r7, #7
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	b25b      	sxtb	r3, r3
 8002fb8:	089b      	lsrs	r3, r3, #2
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	33c0      	adds	r3, #192	; 0xc0
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002fc2:	e031      	b.n	8003028 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fc4:	4a1b      	ldr	r2, [pc, #108]	; (8003034 <__NVIC_SetPriority+0xd8>)
 8002fc6:	1dfb      	adds	r3, r7, #7
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	0019      	movs	r1, r3
 8002fcc:	230f      	movs	r3, #15
 8002fce:	400b      	ands	r3, r1
 8002fd0:	3b08      	subs	r3, #8
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	3306      	adds	r3, #6
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	18d3      	adds	r3, r2, r3
 8002fda:	3304      	adds	r3, #4
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	1dfa      	adds	r2, r7, #7
 8002fe0:	7812      	ldrb	r2, [r2, #0]
 8002fe2:	0011      	movs	r1, r2
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	400a      	ands	r2, r1
 8002fe8:	00d2      	lsls	r2, r2, #3
 8002fea:	21ff      	movs	r1, #255	; 0xff
 8002fec:	4091      	lsls	r1, r2
 8002fee:	000a      	movs	r2, r1
 8002ff0:	43d2      	mvns	r2, r2
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	019b      	lsls	r3, r3, #6
 8002ffa:	22ff      	movs	r2, #255	; 0xff
 8002ffc:	401a      	ands	r2, r3
 8002ffe:	1dfb      	adds	r3, r7, #7
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	0018      	movs	r0, r3
 8003004:	2303      	movs	r3, #3
 8003006:	4003      	ands	r3, r0
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800300c:	4809      	ldr	r0, [pc, #36]	; (8003034 <__NVIC_SetPriority+0xd8>)
 800300e:	1dfb      	adds	r3, r7, #7
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	001c      	movs	r4, r3
 8003014:	230f      	movs	r3, #15
 8003016:	4023      	ands	r3, r4
 8003018:	3b08      	subs	r3, #8
 800301a:	089b      	lsrs	r3, r3, #2
 800301c:	430a      	orrs	r2, r1
 800301e:	3306      	adds	r3, #6
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	18c3      	adds	r3, r0, r3
 8003024:	3304      	adds	r3, #4
 8003026:	601a      	str	r2, [r3, #0]
}
 8003028:	46c0      	nop			; (mov r8, r8)
 800302a:	46bd      	mov	sp, r7
 800302c:	b003      	add	sp, #12
 800302e:	bd90      	pop	{r4, r7, pc}
 8003030:	e000e100 	.word	0xe000e100
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	210f      	movs	r1, #15
 8003044:	187b      	adds	r3, r7, r1
 8003046:	1c02      	adds	r2, r0, #0
 8003048:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	187b      	adds	r3, r7, r1
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	b25b      	sxtb	r3, r3
 8003052:	0011      	movs	r1, r2
 8003054:	0018      	movs	r0, r3
 8003056:	f7ff ff81 	bl	8002f5c <__NVIC_SetPriority>
}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	46bd      	mov	sp, r7
 800305e:	b004      	add	sp, #16
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	0002      	movs	r2, r0
 800306a:	1dfb      	adds	r3, r7, #7
 800306c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800306e:	1dfb      	adds	r3, r7, #7
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	b25b      	sxtb	r3, r3
 8003074:	0018      	movs	r0, r3
 8003076:	f7ff ff57 	bl	8002f28 <__NVIC_EnableIRQ>
}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	46bd      	mov	sp, r7
 800307e:	b002      	add	sp, #8
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003082:	b580      	push	{r7, lr}
 8003084:	b084      	sub	sp, #16
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800308a:	230f      	movs	r3, #15
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2221      	movs	r2, #33	; 0x21
 8003096:	5c9b      	ldrb	r3, [r3, r2]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d007      	beq.n	80030ae <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2204      	movs	r2, #4
 80030a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80030a4:	230f      	movs	r3, #15
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	2201      	movs	r2, #1
 80030aa:	701a      	strb	r2, [r3, #0]
 80030ac:	e028      	b.n	8003100 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	210e      	movs	r1, #14
 80030ba:	438a      	bics	r2, r1
 80030bc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2101      	movs	r1, #1
 80030ca:	438a      	bics	r2, r1
 80030cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d6:	2101      	movs	r1, #1
 80030d8:	4091      	lsls	r1, r2
 80030da:	000a      	movs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2221      	movs	r2, #33	; 0x21
 80030e2:	2101      	movs	r1, #1
 80030e4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2220      	movs	r2, #32
 80030ea:	2100      	movs	r1, #0
 80030ec:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d004      	beq.n	8003100 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	0010      	movs	r0, r2
 80030fe:	4798      	blx	r3
    } 
  }
  return status;
 8003100:	230f      	movs	r3, #15
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	781b      	ldrb	r3, [r3, #0]
}
 8003106:	0018      	movs	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	b004      	add	sp, #16
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800311e:	e14f      	b.n	80033c0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2101      	movs	r1, #1
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4091      	lsls	r1, r2
 800312a:	000a      	movs	r2, r1
 800312c:	4013      	ands	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d100      	bne.n	8003138 <HAL_GPIO_Init+0x28>
 8003136:	e140      	b.n	80033ba <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d00b      	beq.n	8003158 <HAL_GPIO_Init+0x48>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d007      	beq.n	8003158 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800314c:	2b11      	cmp	r3, #17
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b12      	cmp	r3, #18
 8003156:	d130      	bne.n	80031ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	2203      	movs	r2, #3
 8003164:	409a      	lsls	r2, r3
 8003166:	0013      	movs	r3, r2
 8003168:	43da      	mvns	r2, r3
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4013      	ands	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	409a      	lsls	r2, r3
 800317a:	0013      	movs	r3, r2
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800318e:	2201      	movs	r2, #1
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	409a      	lsls	r2, r3
 8003194:	0013      	movs	r3, r2
 8003196:	43da      	mvns	r2, r3
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4013      	ands	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	091b      	lsrs	r3, r3, #4
 80031a4:	2201      	movs	r2, #1
 80031a6:	401a      	ands	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	409a      	lsls	r2, r3
 80031ac:	0013      	movs	r3, r2
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	2203      	movs	r2, #3
 80031c6:	409a      	lsls	r2, r3
 80031c8:	0013      	movs	r3, r2
 80031ca:	43da      	mvns	r2, r3
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4013      	ands	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	409a      	lsls	r2, r3
 80031dc:	0013      	movs	r3, r2
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_Init+0xea>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b12      	cmp	r3, #18
 80031f8:	d123      	bne.n	8003242 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	08da      	lsrs	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3208      	adds	r2, #8
 8003202:	0092      	lsls	r2, r2, #2
 8003204:	58d3      	ldr	r3, [r2, r3]
 8003206:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	2207      	movs	r2, #7
 800320c:	4013      	ands	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	220f      	movs	r2, #15
 8003212:	409a      	lsls	r2, r3
 8003214:	0013      	movs	r3, r2
 8003216:	43da      	mvns	r2, r3
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4013      	ands	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	691a      	ldr	r2, [r3, #16]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2107      	movs	r1, #7
 8003226:	400b      	ands	r3, r1
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	409a      	lsls	r2, r3
 800322c:	0013      	movs	r3, r2
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	08da      	lsrs	r2, r3, #3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3208      	adds	r2, #8
 800323c:	0092      	lsls	r2, r2, #2
 800323e:	6939      	ldr	r1, [r7, #16]
 8003240:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	2203      	movs	r2, #3
 800324e:	409a      	lsls	r2, r3
 8003250:	0013      	movs	r3, r2
 8003252:	43da      	mvns	r2, r3
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4013      	ands	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2203      	movs	r2, #3
 8003260:	401a      	ands	r2, r3
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	409a      	lsls	r2, r3
 8003268:	0013      	movs	r3, r2
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	055b      	lsls	r3, r3, #21
 800327e:	4013      	ands	r3, r2
 8003280:	d100      	bne.n	8003284 <HAL_GPIO_Init+0x174>
 8003282:	e09a      	b.n	80033ba <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003284:	4b54      	ldr	r3, [pc, #336]	; (80033d8 <HAL_GPIO_Init+0x2c8>)
 8003286:	699a      	ldr	r2, [r3, #24]
 8003288:	4b53      	ldr	r3, [pc, #332]	; (80033d8 <HAL_GPIO_Init+0x2c8>)
 800328a:	2101      	movs	r1, #1
 800328c:	430a      	orrs	r2, r1
 800328e:	619a      	str	r2, [r3, #24]
 8003290:	4b51      	ldr	r3, [pc, #324]	; (80033d8 <HAL_GPIO_Init+0x2c8>)
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	2201      	movs	r2, #1
 8003296:	4013      	ands	r3, r2
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800329c:	4a4f      	ldr	r2, [pc, #316]	; (80033dc <HAL_GPIO_Init+0x2cc>)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	089b      	lsrs	r3, r3, #2
 80032a2:	3302      	adds	r3, #2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	589b      	ldr	r3, [r3, r2]
 80032a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2203      	movs	r2, #3
 80032ae:	4013      	ands	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	220f      	movs	r2, #15
 80032b4:	409a      	lsls	r2, r3
 80032b6:	0013      	movs	r3, r2
 80032b8:	43da      	mvns	r2, r3
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4013      	ands	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	2390      	movs	r3, #144	; 0x90
 80032c4:	05db      	lsls	r3, r3, #23
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d013      	beq.n	80032f2 <HAL_GPIO_Init+0x1e2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a44      	ldr	r2, [pc, #272]	; (80033e0 <HAL_GPIO_Init+0x2d0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00d      	beq.n	80032ee <HAL_GPIO_Init+0x1de>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a43      	ldr	r2, [pc, #268]	; (80033e4 <HAL_GPIO_Init+0x2d4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d007      	beq.n	80032ea <HAL_GPIO_Init+0x1da>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a42      	ldr	r2, [pc, #264]	; (80033e8 <HAL_GPIO_Init+0x2d8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d101      	bne.n	80032e6 <HAL_GPIO_Init+0x1d6>
 80032e2:	2303      	movs	r3, #3
 80032e4:	e006      	b.n	80032f4 <HAL_GPIO_Init+0x1e4>
 80032e6:	2305      	movs	r3, #5
 80032e8:	e004      	b.n	80032f4 <HAL_GPIO_Init+0x1e4>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e002      	b.n	80032f4 <HAL_GPIO_Init+0x1e4>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_GPIO_Init+0x1e4>
 80032f2:	2300      	movs	r3, #0
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	2103      	movs	r1, #3
 80032f8:	400a      	ands	r2, r1
 80032fa:	0092      	lsls	r2, r2, #2
 80032fc:	4093      	lsls	r3, r2
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003304:	4935      	ldr	r1, [pc, #212]	; (80033dc <HAL_GPIO_Init+0x2cc>)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	3302      	adds	r3, #2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003312:	4b36      	ldr	r3, [pc, #216]	; (80033ec <HAL_GPIO_Init+0x2dc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	43da      	mvns	r2, r3
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	025b      	lsls	r3, r3, #9
 800332a:	4013      	ands	r3, r2
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003336:	4b2d      	ldr	r3, [pc, #180]	; (80033ec <HAL_GPIO_Init+0x2dc>)
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800333c:	4b2b      	ldr	r3, [pc, #172]	; (80033ec <HAL_GPIO_Init+0x2dc>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	43da      	mvns	r2, r3
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4013      	ands	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	029b      	lsls	r3, r3, #10
 8003354:	4013      	ands	r3, r2
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003360:	4b22      	ldr	r3, [pc, #136]	; (80033ec <HAL_GPIO_Init+0x2dc>)
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003366:	4b21      	ldr	r3, [pc, #132]	; (80033ec <HAL_GPIO_Init+0x2dc>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	43da      	mvns	r2, r3
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4013      	ands	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	035b      	lsls	r3, r3, #13
 800337e:	4013      	ands	r3, r2
 8003380:	d003      	beq.n	800338a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800338a:	4b18      	ldr	r3, [pc, #96]	; (80033ec <HAL_GPIO_Init+0x2dc>)
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003390:	4b16      	ldr	r3, [pc, #88]	; (80033ec <HAL_GPIO_Init+0x2dc>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	43da      	mvns	r2, r3
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4013      	ands	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	039b      	lsls	r3, r3, #14
 80033a8:	4013      	ands	r3, r2
 80033aa:	d003      	beq.n	80033b4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033b4:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <HAL_GPIO_Init+0x2dc>)
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	3301      	adds	r3, #1
 80033be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	40da      	lsrs	r2, r3
 80033c8:	1e13      	subs	r3, r2, #0
 80033ca:	d000      	beq.n	80033ce <HAL_GPIO_Init+0x2be>
 80033cc:	e6a8      	b.n	8003120 <HAL_GPIO_Init+0x10>
  } 
}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b006      	add	sp, #24
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40010000 	.word	0x40010000
 80033e0:	48000400 	.word	0x48000400
 80033e4:	48000800 	.word	0x48000800
 80033e8:	48000c00 	.word	0x48000c00
 80033ec:	40010400 	.word	0x40010400

080033f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	0008      	movs	r0, r1
 80033fa:	0011      	movs	r1, r2
 80033fc:	1cbb      	adds	r3, r7, #2
 80033fe:	1c02      	adds	r2, r0, #0
 8003400:	801a      	strh	r2, [r3, #0]
 8003402:	1c7b      	adds	r3, r7, #1
 8003404:	1c0a      	adds	r2, r1, #0
 8003406:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003408:	1c7b      	adds	r3, r7, #1
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d004      	beq.n	800341a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003410:	1cbb      	adds	r3, r7, #2
 8003412:	881a      	ldrh	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003418:	e003      	b.n	8003422 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800341a:	1cbb      	adds	r3, r7, #2
 800341c:	881a      	ldrh	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	46bd      	mov	sp, r7
 8003426:	b002      	add	sp, #8
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e082      	b.n	8003544 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2241      	movs	r2, #65	; 0x41
 8003442:	5c9b      	ldrb	r3, [r3, r2]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d107      	bne.n	800345a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2240      	movs	r2, #64	; 0x40
 800344e:	2100      	movs	r1, #0
 8003450:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	0018      	movs	r0, r3
 8003456:	f7ff f927 	bl	80026a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2241      	movs	r2, #65	; 0x41
 800345e:	2124      	movs	r1, #36	; 0x24
 8003460:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2101      	movs	r1, #1
 800346e:	438a      	bics	r2, r1
 8003470:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4934      	ldr	r1, [pc, #208]	; (800354c <HAL_I2C_Init+0x120>)
 800347c:	400a      	ands	r2, r1
 800347e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4931      	ldr	r1, [pc, #196]	; (8003550 <HAL_I2C_Init+0x124>)
 800348c:	400a      	ands	r2, r1
 800348e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d108      	bne.n	80034aa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2180      	movs	r1, #128	; 0x80
 80034a2:	0209      	lsls	r1, r1, #8
 80034a4:	430a      	orrs	r2, r1
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	e007      	b.n	80034ba <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2184      	movs	r1, #132	; 0x84
 80034b4:	0209      	lsls	r1, r1, #8
 80034b6:	430a      	orrs	r2, r1
 80034b8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d104      	bne.n	80034cc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2280      	movs	r2, #128	; 0x80
 80034c8:	0112      	lsls	r2, r2, #4
 80034ca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	491f      	ldr	r1, [pc, #124]	; (8003554 <HAL_I2C_Init+0x128>)
 80034d8:	430a      	orrs	r2, r1
 80034da:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	491a      	ldr	r1, [pc, #104]	; (8003550 <HAL_I2C_Init+0x124>)
 80034e8:	400a      	ands	r2, r1
 80034ea:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	431a      	orrs	r2, r3
 80034f6:	0011      	movs	r1, r2
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	021a      	lsls	r2, r3, #8
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69d9      	ldr	r1, [r3, #28]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1a      	ldr	r2, [r3, #32]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2101      	movs	r1, #1
 8003522:	430a      	orrs	r2, r1
 8003524:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2241      	movs	r2, #65	; 0x41
 8003530:	2120      	movs	r1, #32
 8003532:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2242      	movs	r2, #66	; 0x42
 800353e:	2100      	movs	r1, #0
 8003540:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	0018      	movs	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	b002      	add	sp, #8
 800354a:	bd80      	pop	{r7, pc}
 800354c:	f0ffffff 	.word	0xf0ffffff
 8003550:	ffff7fff 	.word	0xffff7fff
 8003554:	02008000 	.word	0x02008000

08003558 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2241      	movs	r2, #65	; 0x41
 8003566:	5c9b      	ldrb	r3, [r3, r2]
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b20      	cmp	r3, #32
 800356c:	d138      	bne.n	80035e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2240      	movs	r2, #64	; 0x40
 8003572:	5c9b      	ldrb	r3, [r3, r2]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003578:	2302      	movs	r3, #2
 800357a:	e032      	b.n	80035e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2240      	movs	r2, #64	; 0x40
 8003580:	2101      	movs	r1, #1
 8003582:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2241      	movs	r2, #65	; 0x41
 8003588:	2124      	movs	r1, #36	; 0x24
 800358a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2101      	movs	r1, #1
 8003598:	438a      	bics	r2, r1
 800359a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4911      	ldr	r1, [pc, #68]	; (80035ec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80035a8:	400a      	ands	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6819      	ldr	r1, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2101      	movs	r1, #1
 80035c8:	430a      	orrs	r2, r1
 80035ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2241      	movs	r2, #65	; 0x41
 80035d0:	2120      	movs	r1, #32
 80035d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2240      	movs	r2, #64	; 0x40
 80035d8:	2100      	movs	r1, #0
 80035da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80035dc:	2300      	movs	r3, #0
 80035de:	e000      	b.n	80035e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035e0:	2302      	movs	r3, #2
  }
}
 80035e2:	0018      	movs	r0, r3
 80035e4:	46bd      	mov	sp, r7
 80035e6:	b002      	add	sp, #8
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	ffffefff 	.word	0xffffefff

080035f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2241      	movs	r2, #65	; 0x41
 80035fe:	5c9b      	ldrb	r3, [r3, r2]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b20      	cmp	r3, #32
 8003604:	d139      	bne.n	800367a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2240      	movs	r2, #64	; 0x40
 800360a:	5c9b      	ldrb	r3, [r3, r2]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003610:	2302      	movs	r3, #2
 8003612:	e033      	b.n	800367c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2240      	movs	r2, #64	; 0x40
 8003618:	2101      	movs	r1, #1
 800361a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2241      	movs	r2, #65	; 0x41
 8003620:	2124      	movs	r1, #36	; 0x24
 8003622:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2101      	movs	r1, #1
 8003630:	438a      	bics	r2, r1
 8003632:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4a11      	ldr	r2, [pc, #68]	; (8003684 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003640:	4013      	ands	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	021b      	lsls	r3, r3, #8
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2101      	movs	r1, #1
 8003662:	430a      	orrs	r2, r1
 8003664:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2241      	movs	r2, #65	; 0x41
 800366a:	2120      	movs	r1, #32
 800366c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2240      	movs	r2, #64	; 0x40
 8003672:	2100      	movs	r1, #0
 8003674:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	e000      	b.n	800367c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800367a:	2302      	movs	r3, #2
  }
}
 800367c:	0018      	movs	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	b004      	add	sp, #16
 8003682:	bd80      	pop	{r7, pc}
 8003684:	fffff0ff 	.word	0xfffff0ff

08003688 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e303      	b.n	8003ca2 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2201      	movs	r2, #1
 80036a0:	4013      	ands	r3, r2
 80036a2:	d100      	bne.n	80036a6 <HAL_RCC_OscConfig+0x1e>
 80036a4:	e08d      	b.n	80037c2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80036a6:	4bc4      	ldr	r3, [pc, #784]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	220c      	movs	r2, #12
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d00e      	beq.n	80036d0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036b2:	4bc1      	ldr	r3, [pc, #772]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	220c      	movs	r2, #12
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d116      	bne.n	80036ec <HAL_RCC_OscConfig+0x64>
 80036be:	4bbe      	ldr	r3, [pc, #760]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	2380      	movs	r3, #128	; 0x80
 80036c4:	025b      	lsls	r3, r3, #9
 80036c6:	401a      	ands	r2, r3
 80036c8:	2380      	movs	r3, #128	; 0x80
 80036ca:	025b      	lsls	r3, r3, #9
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d10d      	bne.n	80036ec <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d0:	4bb9      	ldr	r3, [pc, #740]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	2380      	movs	r3, #128	; 0x80
 80036d6:	029b      	lsls	r3, r3, #10
 80036d8:	4013      	ands	r3, r2
 80036da:	d100      	bne.n	80036de <HAL_RCC_OscConfig+0x56>
 80036dc:	e070      	b.n	80037c0 <HAL_RCC_OscConfig+0x138>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d000      	beq.n	80036e8 <HAL_RCC_OscConfig+0x60>
 80036e6:	e06b      	b.n	80037c0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e2da      	b.n	8003ca2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d107      	bne.n	8003704 <HAL_RCC_OscConfig+0x7c>
 80036f4:	4bb0      	ldr	r3, [pc, #704]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4baf      	ldr	r3, [pc, #700]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 80036fa:	2180      	movs	r1, #128	; 0x80
 80036fc:	0249      	lsls	r1, r1, #9
 80036fe:	430a      	orrs	r2, r1
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e02f      	b.n	8003764 <HAL_RCC_OscConfig+0xdc>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10c      	bne.n	8003726 <HAL_RCC_OscConfig+0x9e>
 800370c:	4baa      	ldr	r3, [pc, #680]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4ba9      	ldr	r3, [pc, #676]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 8003712:	49aa      	ldr	r1, [pc, #680]	; (80039bc <HAL_RCC_OscConfig+0x334>)
 8003714:	400a      	ands	r2, r1
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	4ba7      	ldr	r3, [pc, #668]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	4ba6      	ldr	r3, [pc, #664]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 800371e:	49a8      	ldr	r1, [pc, #672]	; (80039c0 <HAL_RCC_OscConfig+0x338>)
 8003720:	400a      	ands	r2, r1
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	e01e      	b.n	8003764 <HAL_RCC_OscConfig+0xdc>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b05      	cmp	r3, #5
 800372c:	d10e      	bne.n	800374c <HAL_RCC_OscConfig+0xc4>
 800372e:	4ba2      	ldr	r3, [pc, #648]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	4ba1      	ldr	r3, [pc, #644]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 8003734:	2180      	movs	r1, #128	; 0x80
 8003736:	02c9      	lsls	r1, r1, #11
 8003738:	430a      	orrs	r2, r1
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	4b9e      	ldr	r3, [pc, #632]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4b9d      	ldr	r3, [pc, #628]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 8003742:	2180      	movs	r1, #128	; 0x80
 8003744:	0249      	lsls	r1, r1, #9
 8003746:	430a      	orrs	r2, r1
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e00b      	b.n	8003764 <HAL_RCC_OscConfig+0xdc>
 800374c:	4b9a      	ldr	r3, [pc, #616]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4b99      	ldr	r3, [pc, #612]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 8003752:	499a      	ldr	r1, [pc, #616]	; (80039bc <HAL_RCC_OscConfig+0x334>)
 8003754:	400a      	ands	r2, r1
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	4b97      	ldr	r3, [pc, #604]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4b96      	ldr	r3, [pc, #600]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 800375e:	4998      	ldr	r1, [pc, #608]	; (80039c0 <HAL_RCC_OscConfig+0x338>)
 8003760:	400a      	ands	r2, r1
 8003762:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d014      	beq.n	8003796 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376c:	f7ff f99c 	bl	8002aa8 <HAL_GetTick>
 8003770:	0003      	movs	r3, r0
 8003772:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003776:	f7ff f997 	bl	8002aa8 <HAL_GetTick>
 800377a:	0002      	movs	r2, r0
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b64      	cmp	r3, #100	; 0x64
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e28c      	b.n	8003ca2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003788:	4b8b      	ldr	r3, [pc, #556]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	2380      	movs	r3, #128	; 0x80
 800378e:	029b      	lsls	r3, r3, #10
 8003790:	4013      	ands	r3, r2
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0xee>
 8003794:	e015      	b.n	80037c2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003796:	f7ff f987 	bl	8002aa8 <HAL_GetTick>
 800379a:	0003      	movs	r3, r0
 800379c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a0:	f7ff f982 	bl	8002aa8 <HAL_GetTick>
 80037a4:	0002      	movs	r2, r0
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	; 0x64
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e277      	b.n	8003ca2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b2:	4b81      	ldr	r3, [pc, #516]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	2380      	movs	r3, #128	; 0x80
 80037b8:	029b      	lsls	r3, r3, #10
 80037ba:	4013      	ands	r3, r2
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x118>
 80037be:	e000      	b.n	80037c2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2202      	movs	r2, #2
 80037c8:	4013      	ands	r3, r2
 80037ca:	d100      	bne.n	80037ce <HAL_RCC_OscConfig+0x146>
 80037cc:	e069      	b.n	80038a2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80037ce:	4b7a      	ldr	r3, [pc, #488]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	220c      	movs	r2, #12
 80037d4:	4013      	ands	r3, r2
 80037d6:	d00b      	beq.n	80037f0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80037d8:	4b77      	ldr	r3, [pc, #476]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	220c      	movs	r2, #12
 80037de:	4013      	ands	r3, r2
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d11c      	bne.n	800381e <HAL_RCC_OscConfig+0x196>
 80037e4:	4b74      	ldr	r3, [pc, #464]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	2380      	movs	r3, #128	; 0x80
 80037ea:	025b      	lsls	r3, r3, #9
 80037ec:	4013      	ands	r3, r2
 80037ee:	d116      	bne.n	800381e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f0:	4b71      	ldr	r3, [pc, #452]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2202      	movs	r2, #2
 80037f6:	4013      	ands	r3, r2
 80037f8:	d005      	beq.n	8003806 <HAL_RCC_OscConfig+0x17e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d001      	beq.n	8003806 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e24d      	b.n	8003ca2 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003806:	4b6c      	ldr	r3, [pc, #432]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	22f8      	movs	r2, #248	; 0xf8
 800380c:	4393      	bics	r3, r2
 800380e:	0019      	movs	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	00da      	lsls	r2, r3, #3
 8003816:	4b68      	ldr	r3, [pc, #416]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 8003818:	430a      	orrs	r2, r1
 800381a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381c:	e041      	b.n	80038a2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d024      	beq.n	8003870 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003826:	4b64      	ldr	r3, [pc, #400]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4b63      	ldr	r3, [pc, #396]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 800382c:	2101      	movs	r1, #1
 800382e:	430a      	orrs	r2, r1
 8003830:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003832:	f7ff f939 	bl	8002aa8 <HAL_GetTick>
 8003836:	0003      	movs	r3, r0
 8003838:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800383c:	f7ff f934 	bl	8002aa8 <HAL_GetTick>
 8003840:	0002      	movs	r2, r0
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e229      	b.n	8003ca2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384e:	4b5a      	ldr	r3, [pc, #360]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2202      	movs	r2, #2
 8003854:	4013      	ands	r3, r2
 8003856:	d0f1      	beq.n	800383c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003858:	4b57      	ldr	r3, [pc, #348]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	22f8      	movs	r2, #248	; 0xf8
 800385e:	4393      	bics	r3, r2
 8003860:	0019      	movs	r1, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	00da      	lsls	r2, r3, #3
 8003868:	4b53      	ldr	r3, [pc, #332]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 800386a:	430a      	orrs	r2, r1
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	e018      	b.n	80038a2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003870:	4b51      	ldr	r3, [pc, #324]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4b50      	ldr	r3, [pc, #320]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 8003876:	2101      	movs	r1, #1
 8003878:	438a      	bics	r2, r1
 800387a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387c:	f7ff f914 	bl	8002aa8 <HAL_GetTick>
 8003880:	0003      	movs	r3, r0
 8003882:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003886:	f7ff f90f 	bl	8002aa8 <HAL_GetTick>
 800388a:	0002      	movs	r2, r0
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e204      	b.n	8003ca2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003898:	4b47      	ldr	r3, [pc, #284]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2202      	movs	r2, #2
 800389e:	4013      	ands	r3, r2
 80038a0:	d1f1      	bne.n	8003886 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2208      	movs	r2, #8
 80038a8:	4013      	ands	r3, r2
 80038aa:	d036      	beq.n	800391a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d019      	beq.n	80038e8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038b4:	4b40      	ldr	r3, [pc, #256]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 80038b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038b8:	4b3f      	ldr	r3, [pc, #252]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 80038ba:	2101      	movs	r1, #1
 80038bc:	430a      	orrs	r2, r1
 80038be:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c0:	f7ff f8f2 	bl	8002aa8 <HAL_GetTick>
 80038c4:	0003      	movs	r3, r0
 80038c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ca:	f7ff f8ed 	bl	8002aa8 <HAL_GetTick>
 80038ce:	0002      	movs	r2, r0
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e1e2      	b.n	8003ca2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038dc:	4b36      	ldr	r3, [pc, #216]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	2202      	movs	r2, #2
 80038e2:	4013      	ands	r3, r2
 80038e4:	d0f1      	beq.n	80038ca <HAL_RCC_OscConfig+0x242>
 80038e6:	e018      	b.n	800391a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e8:	4b33      	ldr	r3, [pc, #204]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 80038ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ec:	4b32      	ldr	r3, [pc, #200]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 80038ee:	2101      	movs	r1, #1
 80038f0:	438a      	bics	r2, r1
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f4:	f7ff f8d8 	bl	8002aa8 <HAL_GetTick>
 80038f8:	0003      	movs	r3, r0
 80038fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038fe:	f7ff f8d3 	bl	8002aa8 <HAL_GetTick>
 8003902:	0002      	movs	r2, r0
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e1c8      	b.n	8003ca2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003910:	4b29      	ldr	r3, [pc, #164]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	2202      	movs	r2, #2
 8003916:	4013      	ands	r3, r2
 8003918:	d1f1      	bne.n	80038fe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2204      	movs	r2, #4
 8003920:	4013      	ands	r3, r2
 8003922:	d100      	bne.n	8003926 <HAL_RCC_OscConfig+0x29e>
 8003924:	e0b6      	b.n	8003a94 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003926:	231f      	movs	r3, #31
 8003928:	18fb      	adds	r3, r7, r3
 800392a:	2200      	movs	r2, #0
 800392c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800392e:	4b22      	ldr	r3, [pc, #136]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 8003930:	69da      	ldr	r2, [r3, #28]
 8003932:	2380      	movs	r3, #128	; 0x80
 8003934:	055b      	lsls	r3, r3, #21
 8003936:	4013      	ands	r3, r2
 8003938:	d111      	bne.n	800395e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800393a:	4b1f      	ldr	r3, [pc, #124]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 800393c:	69da      	ldr	r2, [r3, #28]
 800393e:	4b1e      	ldr	r3, [pc, #120]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 8003940:	2180      	movs	r1, #128	; 0x80
 8003942:	0549      	lsls	r1, r1, #21
 8003944:	430a      	orrs	r2, r1
 8003946:	61da      	str	r2, [r3, #28]
 8003948:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	2380      	movs	r3, #128	; 0x80
 800394e:	055b      	lsls	r3, r3, #21
 8003950:	4013      	ands	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003956:	231f      	movs	r3, #31
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	2201      	movs	r2, #1
 800395c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395e:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <HAL_RCC_OscConfig+0x33c>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	2380      	movs	r3, #128	; 0x80
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	4013      	ands	r3, r2
 8003968:	d11a      	bne.n	80039a0 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800396a:	4b16      	ldr	r3, [pc, #88]	; (80039c4 <HAL_RCC_OscConfig+0x33c>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4b15      	ldr	r3, [pc, #84]	; (80039c4 <HAL_RCC_OscConfig+0x33c>)
 8003970:	2180      	movs	r1, #128	; 0x80
 8003972:	0049      	lsls	r1, r1, #1
 8003974:	430a      	orrs	r2, r1
 8003976:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003978:	f7ff f896 	bl	8002aa8 <HAL_GetTick>
 800397c:	0003      	movs	r3, r0
 800397e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003982:	f7ff f891 	bl	8002aa8 <HAL_GetTick>
 8003986:	0002      	movs	r2, r0
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b64      	cmp	r3, #100	; 0x64
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e186      	b.n	8003ca2 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <HAL_RCC_OscConfig+0x33c>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	2380      	movs	r3, #128	; 0x80
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	4013      	ands	r3, r2
 800399e:	d0f0      	beq.n	8003982 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d10f      	bne.n	80039c8 <HAL_RCC_OscConfig+0x340>
 80039a8:	4b03      	ldr	r3, [pc, #12]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 80039aa:	6a1a      	ldr	r2, [r3, #32]
 80039ac:	4b02      	ldr	r3, [pc, #8]	; (80039b8 <HAL_RCC_OscConfig+0x330>)
 80039ae:	2101      	movs	r1, #1
 80039b0:	430a      	orrs	r2, r1
 80039b2:	621a      	str	r2, [r3, #32]
 80039b4:	e036      	b.n	8003a24 <HAL_RCC_OscConfig+0x39c>
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	40021000 	.word	0x40021000
 80039bc:	fffeffff 	.word	0xfffeffff
 80039c0:	fffbffff 	.word	0xfffbffff
 80039c4:	40007000 	.word	0x40007000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10c      	bne.n	80039ea <HAL_RCC_OscConfig+0x362>
 80039d0:	4bb6      	ldr	r3, [pc, #728]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 80039d2:	6a1a      	ldr	r2, [r3, #32]
 80039d4:	4bb5      	ldr	r3, [pc, #724]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 80039d6:	2101      	movs	r1, #1
 80039d8:	438a      	bics	r2, r1
 80039da:	621a      	str	r2, [r3, #32]
 80039dc:	4bb3      	ldr	r3, [pc, #716]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 80039de:	6a1a      	ldr	r2, [r3, #32]
 80039e0:	4bb2      	ldr	r3, [pc, #712]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 80039e2:	2104      	movs	r1, #4
 80039e4:	438a      	bics	r2, r1
 80039e6:	621a      	str	r2, [r3, #32]
 80039e8:	e01c      	b.n	8003a24 <HAL_RCC_OscConfig+0x39c>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x384>
 80039f2:	4bae      	ldr	r3, [pc, #696]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 80039f4:	6a1a      	ldr	r2, [r3, #32]
 80039f6:	4bad      	ldr	r3, [pc, #692]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 80039f8:	2104      	movs	r1, #4
 80039fa:	430a      	orrs	r2, r1
 80039fc:	621a      	str	r2, [r3, #32]
 80039fe:	4bab      	ldr	r3, [pc, #684]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003a00:	6a1a      	ldr	r2, [r3, #32]
 8003a02:	4baa      	ldr	r3, [pc, #680]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003a04:	2101      	movs	r1, #1
 8003a06:	430a      	orrs	r2, r1
 8003a08:	621a      	str	r2, [r3, #32]
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCC_OscConfig+0x39c>
 8003a0c:	4ba7      	ldr	r3, [pc, #668]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003a0e:	6a1a      	ldr	r2, [r3, #32]
 8003a10:	4ba6      	ldr	r3, [pc, #664]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003a12:	2101      	movs	r1, #1
 8003a14:	438a      	bics	r2, r1
 8003a16:	621a      	str	r2, [r3, #32]
 8003a18:	4ba4      	ldr	r3, [pc, #656]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003a1a:	6a1a      	ldr	r2, [r3, #32]
 8003a1c:	4ba3      	ldr	r3, [pc, #652]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003a1e:	2104      	movs	r1, #4
 8003a20:	438a      	bics	r2, r1
 8003a22:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d014      	beq.n	8003a56 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2c:	f7ff f83c 	bl	8002aa8 <HAL_GetTick>
 8003a30:	0003      	movs	r3, r0
 8003a32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a34:	e009      	b.n	8003a4a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a36:	f7ff f837 	bl	8002aa8 <HAL_GetTick>
 8003a3a:	0002      	movs	r2, r0
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	4a9b      	ldr	r2, [pc, #620]	; (8003cb0 <HAL_RCC_OscConfig+0x628>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e12b      	b.n	8003ca2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4a:	4b98      	ldr	r3, [pc, #608]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	4013      	ands	r3, r2
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCC_OscConfig+0x3ae>
 8003a54:	e013      	b.n	8003a7e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a56:	f7ff f827 	bl	8002aa8 <HAL_GetTick>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5e:	e009      	b.n	8003a74 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a60:	f7ff f822 	bl	8002aa8 <HAL_GetTick>
 8003a64:	0002      	movs	r2, r0
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	4a91      	ldr	r2, [pc, #580]	; (8003cb0 <HAL_RCC_OscConfig+0x628>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e116      	b.n	8003ca2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a74:	4b8d      	ldr	r3, [pc, #564]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	2202      	movs	r2, #2
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a7e:	231f      	movs	r3, #31
 8003a80:	18fb      	adds	r3, r7, r3
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d105      	bne.n	8003a94 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a88:	4b88      	ldr	r3, [pc, #544]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003a8a:	69da      	ldr	r2, [r3, #28]
 8003a8c:	4b87      	ldr	r3, [pc, #540]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003a8e:	4989      	ldr	r1, [pc, #548]	; (8003cb4 <HAL_RCC_OscConfig+0x62c>)
 8003a90:	400a      	ands	r2, r1
 8003a92:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2210      	movs	r2, #16
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d063      	beq.n	8003b66 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d12a      	bne.n	8003afc <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003aa6:	4b81      	ldr	r3, [pc, #516]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aaa:	4b80      	ldr	r3, [pc, #512]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003aac:	2104      	movs	r1, #4
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003ab2:	4b7e      	ldr	r3, [pc, #504]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ab6:	4b7d      	ldr	r3, [pc, #500]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003ab8:	2101      	movs	r1, #1
 8003aba:	430a      	orrs	r2, r1
 8003abc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003abe:	f7fe fff3 	bl	8002aa8 <HAL_GetTick>
 8003ac2:	0003      	movs	r3, r0
 8003ac4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003ac8:	f7fe ffee 	bl	8002aa8 <HAL_GetTick>
 8003acc:	0002      	movs	r2, r0
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e0e3      	b.n	8003ca2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003ada:	4b74      	ldr	r3, [pc, #464]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ade:	2202      	movs	r2, #2
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d0f1      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ae4:	4b71      	ldr	r3, [pc, #452]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae8:	22f8      	movs	r2, #248	; 0xf8
 8003aea:	4393      	bics	r3, r2
 8003aec:	0019      	movs	r1, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	00da      	lsls	r2, r3, #3
 8003af4:	4b6d      	ldr	r3, [pc, #436]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003af6:	430a      	orrs	r2, r1
 8003af8:	635a      	str	r2, [r3, #52]	; 0x34
 8003afa:	e034      	b.n	8003b66 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	3305      	adds	r3, #5
 8003b02:	d111      	bne.n	8003b28 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003b04:	4b69      	ldr	r3, [pc, #420]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b08:	4b68      	ldr	r3, [pc, #416]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003b0a:	2104      	movs	r1, #4
 8003b0c:	438a      	bics	r2, r1
 8003b0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003b10:	4b66      	ldr	r3, [pc, #408]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b14:	22f8      	movs	r2, #248	; 0xf8
 8003b16:	4393      	bics	r3, r2
 8003b18:	0019      	movs	r1, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	00da      	lsls	r2, r3, #3
 8003b20:	4b62      	ldr	r3, [pc, #392]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003b22:	430a      	orrs	r2, r1
 8003b24:	635a      	str	r2, [r3, #52]	; 0x34
 8003b26:	e01e      	b.n	8003b66 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003b28:	4b60      	ldr	r3, [pc, #384]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b2c:	4b5f      	ldr	r3, [pc, #380]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003b2e:	2104      	movs	r1, #4
 8003b30:	430a      	orrs	r2, r1
 8003b32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003b34:	4b5d      	ldr	r3, [pc, #372]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b38:	4b5c      	ldr	r3, [pc, #368]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	438a      	bics	r2, r1
 8003b3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b40:	f7fe ffb2 	bl	8002aa8 <HAL_GetTick>
 8003b44:	0003      	movs	r3, r0
 8003b46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003b4a:	f7fe ffad 	bl	8002aa8 <HAL_GetTick>
 8003b4e:	0002      	movs	r2, r0
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e0a2      	b.n	8003ca2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003b5c:	4b53      	ldr	r3, [pc, #332]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b60:	2202      	movs	r2, #2
 8003b62:	4013      	ands	r3, r2
 8003b64:	d1f1      	bne.n	8003b4a <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d100      	bne.n	8003b70 <HAL_RCC_OscConfig+0x4e8>
 8003b6e:	e097      	b.n	8003ca0 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b70:	4b4e      	ldr	r3, [pc, #312]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	220c      	movs	r2, #12
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d100      	bne.n	8003b7e <HAL_RCC_OscConfig+0x4f6>
 8003b7c:	e06b      	b.n	8003c56 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d14c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b86:	4b49      	ldr	r3, [pc, #292]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	4b48      	ldr	r3, [pc, #288]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003b8c:	494a      	ldr	r1, [pc, #296]	; (8003cb8 <HAL_RCC_OscConfig+0x630>)
 8003b8e:	400a      	ands	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b92:	f7fe ff89 	bl	8002aa8 <HAL_GetTick>
 8003b96:	0003      	movs	r3, r0
 8003b98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fe ff84 	bl	8002aa8 <HAL_GetTick>
 8003ba0:	0002      	movs	r2, r0
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e079      	b.n	8003ca2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bae:	4b3f      	ldr	r3, [pc, #252]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	2380      	movs	r3, #128	; 0x80
 8003bb4:	049b      	lsls	r3, r3, #18
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bba:	4b3c      	ldr	r3, [pc, #240]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	220f      	movs	r2, #15
 8003bc0:	4393      	bics	r3, r2
 8003bc2:	0019      	movs	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc8:	4b38      	ldr	r3, [pc, #224]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8003bce:	4b37      	ldr	r3, [pc, #220]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4a3a      	ldr	r2, [pc, #232]	; (8003cbc <HAL_RCC_OscConfig+0x634>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	0019      	movs	r1, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	431a      	orrs	r2, r3
 8003be2:	4b32      	ldr	r3, [pc, #200]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003be4:	430a      	orrs	r2, r1
 8003be6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be8:	4b30      	ldr	r3, [pc, #192]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	4b2f      	ldr	r3, [pc, #188]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003bee:	2180      	movs	r1, #128	; 0x80
 8003bf0:	0449      	lsls	r1, r1, #17
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf6:	f7fe ff57 	bl	8002aa8 <HAL_GetTick>
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c00:	f7fe ff52 	bl	8002aa8 <HAL_GetTick>
 8003c04:	0002      	movs	r2, r0
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e047      	b.n	8003ca2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c12:	4b26      	ldr	r3, [pc, #152]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	049b      	lsls	r3, r3, #18
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0x578>
 8003c1e:	e03f      	b.n	8003ca0 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c20:	4b22      	ldr	r3, [pc, #136]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	4b21      	ldr	r3, [pc, #132]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003c26:	4924      	ldr	r1, [pc, #144]	; (8003cb8 <HAL_RCC_OscConfig+0x630>)
 8003c28:	400a      	ands	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fe ff3c 	bl	8002aa8 <HAL_GetTick>
 8003c30:	0003      	movs	r3, r0
 8003c32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c36:	f7fe ff37 	bl	8002aa8 <HAL_GetTick>
 8003c3a:	0002      	movs	r2, r0
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e02c      	b.n	8003ca2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c48:	4b18      	ldr	r3, [pc, #96]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	049b      	lsls	r3, r3, #18
 8003c50:	4013      	ands	r3, r2
 8003c52:	d1f0      	bne.n	8003c36 <HAL_RCC_OscConfig+0x5ae>
 8003c54:	e024      	b.n	8003ca0 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e01f      	b.n	8003ca2 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003c62:	4b12      	ldr	r3, [pc, #72]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003c68:	4b10      	ldr	r3, [pc, #64]	; (8003cac <HAL_RCC_OscConfig+0x624>)
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	2380      	movs	r3, #128	; 0x80
 8003c72:	025b      	lsls	r3, r3, #9
 8003c74:	401a      	ands	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d10e      	bne.n	8003c9c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	220f      	movs	r2, #15
 8003c82:	401a      	ands	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d107      	bne.n	8003c9c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	23f0      	movs	r3, #240	; 0xf0
 8003c90:	039b      	lsls	r3, r3, #14
 8003c92:	401a      	ands	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	b008      	add	sp, #32
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	00001388 	.word	0x00001388
 8003cb4:	efffffff 	.word	0xefffffff
 8003cb8:	feffffff 	.word	0xfeffffff
 8003cbc:	ffc2ffff 	.word	0xffc2ffff

08003cc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0b3      	b.n	8003e3c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cd4:	4b5b      	ldr	r3, [pc, #364]	; (8003e44 <HAL_RCC_ClockConfig+0x184>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	4013      	ands	r3, r2
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d911      	bls.n	8003d06 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce2:	4b58      	ldr	r3, [pc, #352]	; (8003e44 <HAL_RCC_ClockConfig+0x184>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	4393      	bics	r3, r2
 8003cea:	0019      	movs	r1, r3
 8003cec:	4b55      	ldr	r3, [pc, #340]	; (8003e44 <HAL_RCC_ClockConfig+0x184>)
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf4:	4b53      	ldr	r3, [pc, #332]	; (8003e44 <HAL_RCC_ClockConfig+0x184>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d001      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e09a      	b.n	8003e3c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	d015      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2204      	movs	r2, #4
 8003d16:	4013      	ands	r3, r2
 8003d18:	d006      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003d1a:	4b4b      	ldr	r3, [pc, #300]	; (8003e48 <HAL_RCC_ClockConfig+0x188>)
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	4b4a      	ldr	r3, [pc, #296]	; (8003e48 <HAL_RCC_ClockConfig+0x188>)
 8003d20:	21e0      	movs	r1, #224	; 0xe0
 8003d22:	00c9      	lsls	r1, r1, #3
 8003d24:	430a      	orrs	r2, r1
 8003d26:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d28:	4b47      	ldr	r3, [pc, #284]	; (8003e48 <HAL_RCC_ClockConfig+0x188>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	22f0      	movs	r2, #240	; 0xf0
 8003d2e:	4393      	bics	r3, r2
 8003d30:	0019      	movs	r1, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	4b44      	ldr	r3, [pc, #272]	; (8003e48 <HAL_RCC_ClockConfig+0x188>)
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2201      	movs	r2, #1
 8003d42:	4013      	ands	r3, r2
 8003d44:	d040      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	4b3e      	ldr	r3, [pc, #248]	; (8003e48 <HAL_RCC_ClockConfig+0x188>)
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	2380      	movs	r3, #128	; 0x80
 8003d54:	029b      	lsls	r3, r3, #10
 8003d56:	4013      	ands	r3, r2
 8003d58:	d114      	bne.n	8003d84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e06e      	b.n	8003e3c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d66:	4b38      	ldr	r3, [pc, #224]	; (8003e48 <HAL_RCC_ClockConfig+0x188>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	2380      	movs	r3, #128	; 0x80
 8003d6c:	049b      	lsls	r3, r3, #18
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d108      	bne.n	8003d84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e062      	b.n	8003e3c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d76:	4b34      	ldr	r3, [pc, #208]	; (8003e48 <HAL_RCC_ClockConfig+0x188>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d101      	bne.n	8003d84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e05b      	b.n	8003e3c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d84:	4b30      	ldr	r3, [pc, #192]	; (8003e48 <HAL_RCC_ClockConfig+0x188>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2203      	movs	r2, #3
 8003d8a:	4393      	bics	r3, r2
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	4b2d      	ldr	r3, [pc, #180]	; (8003e48 <HAL_RCC_ClockConfig+0x188>)
 8003d94:	430a      	orrs	r2, r1
 8003d96:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d98:	f7fe fe86 	bl	8002aa8 <HAL_GetTick>
 8003d9c:	0003      	movs	r3, r0
 8003d9e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da0:	e009      	b.n	8003db6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da2:	f7fe fe81 	bl	8002aa8 <HAL_GetTick>
 8003da6:	0002      	movs	r2, r0
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	4a27      	ldr	r2, [pc, #156]	; (8003e4c <HAL_RCC_ClockConfig+0x18c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e042      	b.n	8003e3c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db6:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <HAL_RCC_ClockConfig+0x188>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	220c      	movs	r2, #12
 8003dbc:	401a      	ands	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d1ec      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc8:	4b1e      	ldr	r3, [pc, #120]	; (8003e44 <HAL_RCC_ClockConfig+0x184>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	4013      	ands	r3, r2
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d211      	bcs.n	8003dfa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd6:	4b1b      	ldr	r3, [pc, #108]	; (8003e44 <HAL_RCC_ClockConfig+0x184>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	4393      	bics	r3, r2
 8003dde:	0019      	movs	r1, r3
 8003de0:	4b18      	ldr	r3, [pc, #96]	; (8003e44 <HAL_RCC_ClockConfig+0x184>)
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de8:	4b16      	ldr	r3, [pc, #88]	; (8003e44 <HAL_RCC_ClockConfig+0x184>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2201      	movs	r2, #1
 8003dee:	4013      	ands	r3, r2
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d001      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e020      	b.n	8003e3c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2204      	movs	r2, #4
 8003e00:	4013      	ands	r3, r2
 8003e02:	d009      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003e04:	4b10      	ldr	r3, [pc, #64]	; (8003e48 <HAL_RCC_ClockConfig+0x188>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	4a11      	ldr	r2, [pc, #68]	; (8003e50 <HAL_RCC_ClockConfig+0x190>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	0019      	movs	r1, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <HAL_RCC_ClockConfig+0x188>)
 8003e14:	430a      	orrs	r2, r1
 8003e16:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e18:	f000 f820 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 8003e1c:	0001      	movs	r1, r0
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <HAL_RCC_ClockConfig+0x188>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	091b      	lsrs	r3, r3, #4
 8003e24:	220f      	movs	r2, #15
 8003e26:	4013      	ands	r3, r2
 8003e28:	4a0a      	ldr	r2, [pc, #40]	; (8003e54 <HAL_RCC_ClockConfig+0x194>)
 8003e2a:	5cd3      	ldrb	r3, [r2, r3]
 8003e2c:	000a      	movs	r2, r1
 8003e2e:	40da      	lsrs	r2, r3
 8003e30:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <HAL_RCC_ClockConfig+0x198>)
 8003e32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003e34:	2000      	movs	r0, #0
 8003e36:	f7fe fd2d 	bl	8002894 <HAL_InitTick>
  
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b004      	add	sp, #16
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40022000 	.word	0x40022000
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	00001388 	.word	0x00001388
 8003e50:	fffff8ff 	.word	0xfffff8ff
 8003e54:	08008308 	.word	0x08008308
 8003e58:	20000000 	.word	0x20000000

08003e5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e5c:	b590      	push	{r4, r7, lr}
 8003e5e:	b08f      	sub	sp, #60	; 0x3c
 8003e60:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003e62:	2314      	movs	r3, #20
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	4a2b      	ldr	r2, [pc, #172]	; (8003f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e68:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003e6a:	c313      	stmia	r3!, {r0, r1, r4}
 8003e6c:	6812      	ldr	r2, [r2, #0]
 8003e6e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003e70:	1d3b      	adds	r3, r7, #4
 8003e72:	4a29      	ldr	r2, [pc, #164]	; (8003f18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e74:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003e76:	c313      	stmia	r3!, {r0, r1, r4}
 8003e78:	6812      	ldr	r2, [r2, #0]
 8003e7a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e80:	2300      	movs	r3, #0
 8003e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e84:	2300      	movs	r3, #0
 8003e86:	637b      	str	r3, [r7, #52]	; 0x34
 8003e88:	2300      	movs	r3, #0
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003e90:	4b22      	ldr	r3, [pc, #136]	; (8003f1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e98:	220c      	movs	r2, #12
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d002      	beq.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x4a>
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d003      	beq.n	8003eac <HAL_RCC_GetSysClockFreq+0x50>
 8003ea4:	e02d      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ea6:	4b1e      	ldr	r3, [pc, #120]	; (8003f20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ea8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003eaa:	e02d      	b.n	8003f08 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eae:	0c9b      	lsrs	r3, r3, #18
 8003eb0:	220f      	movs	r2, #15
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	2214      	movs	r2, #20
 8003eb6:	18ba      	adds	r2, r7, r2
 8003eb8:	5cd3      	ldrb	r3, [r2, r3]
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003ebc:	4b17      	ldr	r3, [pc, #92]	; (8003f1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	220f      	movs	r2, #15
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	1d3a      	adds	r2, r7, #4
 8003ec6:	5cd3      	ldrb	r3, [r2, r3]
 8003ec8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ecc:	2380      	movs	r3, #128	; 0x80
 8003ece:	025b      	lsls	r3, r3, #9
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d009      	beq.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ed4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ed6:	4812      	ldr	r0, [pc, #72]	; (8003f20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ed8:	f7fc f928 	bl	800012c <__udivsi3>
 8003edc:	0003      	movs	r3, r0
 8003ede:	001a      	movs	r2, r3
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	4353      	muls	r3, r2
 8003ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ee6:	e009      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ee8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eea:	000a      	movs	r2, r1
 8003eec:	0152      	lsls	r2, r2, #5
 8003eee:	1a52      	subs	r2, r2, r1
 8003ef0:	0193      	lsls	r3, r2, #6
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	185b      	adds	r3, r3, r1
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003efe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003f00:	e002      	b.n	8003f08 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f02:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f04:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003f06:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b00f      	add	sp, #60	; 0x3c
 8003f10:	bd90      	pop	{r4, r7, pc}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	08008260 	.word	0x08008260
 8003f18:	08008270 	.word	0x08008270
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	007a1200 	.word	0x007a1200

08003f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f28:	4b02      	ldr	r3, [pc, #8]	; (8003f34 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
}
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	20000000 	.word	0x20000000

08003f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003f3c:	f7ff fff2 	bl	8003f24 <HAL_RCC_GetHCLKFreq>
 8003f40:	0001      	movs	r1, r0
 8003f42:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	0a1b      	lsrs	r3, r3, #8
 8003f48:	2207      	movs	r2, #7
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	4a04      	ldr	r2, [pc, #16]	; (8003f60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f4e:	5cd3      	ldrb	r3, [r2, r3]
 8003f50:	40d9      	lsrs	r1, r3
 8003f52:	000b      	movs	r3, r1
}    
 8003f54:	0018      	movs	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	08008318 	.word	0x08008318

08003f64 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2207      	movs	r2, #7
 8003f72:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f74:	4b0e      	ldr	r3, [pc, #56]	; (8003fb0 <HAL_RCC_GetClockConfig+0x4c>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2203      	movs	r2, #3
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <HAL_RCC_GetClockConfig+0x4c>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	22f0      	movs	r2, #240	; 0xf0
 8003f86:	401a      	ands	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8003f8c:	4b08      	ldr	r3, [pc, #32]	; (8003fb0 <HAL_RCC_GetClockConfig+0x4c>)
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	23e0      	movs	r3, #224	; 0xe0
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	401a      	ands	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <HAL_RCC_GetClockConfig+0x50>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	401a      	ands	r2, r3
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	601a      	str	r2, [r3, #0]
}
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	b002      	add	sp, #8
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	40022000 	.word	0x40022000

08003fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	025b      	lsls	r3, r3, #9
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d100      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003fd4:	e08f      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003fd6:	2317      	movs	r3, #23
 8003fd8:	18fb      	adds	r3, r7, r3
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fde:	4b57      	ldr	r3, [pc, #348]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003fe0:	69da      	ldr	r2, [r3, #28]
 8003fe2:	2380      	movs	r3, #128	; 0x80
 8003fe4:	055b      	lsls	r3, r3, #21
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d111      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fea:	4b54      	ldr	r3, [pc, #336]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003fec:	69da      	ldr	r2, [r3, #28]
 8003fee:	4b53      	ldr	r3, [pc, #332]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ff0:	2180      	movs	r1, #128	; 0x80
 8003ff2:	0549      	lsls	r1, r1, #21
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	61da      	str	r2, [r3, #28]
 8003ff8:	4b50      	ldr	r3, [pc, #320]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ffa:	69da      	ldr	r2, [r3, #28]
 8003ffc:	2380      	movs	r3, #128	; 0x80
 8003ffe:	055b      	lsls	r3, r3, #21
 8004000:	4013      	ands	r3, r2
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004006:	2317      	movs	r3, #23
 8004008:	18fb      	adds	r3, r7, r3
 800400a:	2201      	movs	r2, #1
 800400c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400e:	4b4c      	ldr	r3, [pc, #304]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	4013      	ands	r3, r2
 8004018:	d11a      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800401a:	4b49      	ldr	r3, [pc, #292]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b48      	ldr	r3, [pc, #288]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004020:	2180      	movs	r1, #128	; 0x80
 8004022:	0049      	lsls	r1, r1, #1
 8004024:	430a      	orrs	r2, r1
 8004026:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004028:	f7fe fd3e 	bl	8002aa8 <HAL_GetTick>
 800402c:	0003      	movs	r3, r0
 800402e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004030:	e008      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004032:	f7fe fd39 	bl	8002aa8 <HAL_GetTick>
 8004036:	0002      	movs	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b64      	cmp	r3, #100	; 0x64
 800403e:	d901      	bls.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e077      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004044:	4b3e      	ldr	r3, [pc, #248]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	2380      	movs	r3, #128	; 0x80
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	4013      	ands	r3, r2
 800404e:	d0f0      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004050:	4b3a      	ldr	r3, [pc, #232]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004052:	6a1a      	ldr	r2, [r3, #32]
 8004054:	23c0      	movs	r3, #192	; 0xc0
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4013      	ands	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d034      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	23c0      	movs	r3, #192	; 0xc0
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4013      	ands	r3, r2
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	429a      	cmp	r2, r3
 8004070:	d02c      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004072:	4b32      	ldr	r3, [pc, #200]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	4a33      	ldr	r2, [pc, #204]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004078:	4013      	ands	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800407c:	4b2f      	ldr	r3, [pc, #188]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800407e:	6a1a      	ldr	r2, [r3, #32]
 8004080:	4b2e      	ldr	r3, [pc, #184]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004082:	2180      	movs	r1, #128	; 0x80
 8004084:	0249      	lsls	r1, r1, #9
 8004086:	430a      	orrs	r2, r1
 8004088:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800408a:	4b2c      	ldr	r3, [pc, #176]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800408c:	6a1a      	ldr	r2, [r3, #32]
 800408e:	4b2b      	ldr	r3, [pc, #172]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004090:	492d      	ldr	r1, [pc, #180]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004092:	400a      	ands	r2, r1
 8004094:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004096:	4b29      	ldr	r3, [pc, #164]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2201      	movs	r2, #1
 80040a0:	4013      	ands	r3, r2
 80040a2:	d013      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a4:	f7fe fd00 	bl	8002aa8 <HAL_GetTick>
 80040a8:	0003      	movs	r3, r0
 80040aa:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ac:	e009      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ae:	f7fe fcfb 	bl	8002aa8 <HAL_GetTick>
 80040b2:	0002      	movs	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	4a24      	ldr	r2, [pc, #144]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e038      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c2:	4b1e      	ldr	r3, [pc, #120]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	2202      	movs	r2, #2
 80040c8:	4013      	ands	r3, r2
 80040ca:	d0f0      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040cc:	4b1b      	ldr	r3, [pc, #108]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	4a1c      	ldr	r2, [pc, #112]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	0019      	movs	r1, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	4b18      	ldr	r3, [pc, #96]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040dc:	430a      	orrs	r2, r1
 80040de:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040e0:	2317      	movs	r3, #23
 80040e2:	18fb      	adds	r3, r7, r3
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d105      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ea:	4b14      	ldr	r3, [pc, #80]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040ec:	69da      	ldr	r2, [r3, #28]
 80040ee:	4b13      	ldr	r3, [pc, #76]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040f0:	4917      	ldr	r1, [pc, #92]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80040f2:	400a      	ands	r2, r1
 80040f4:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2201      	movs	r2, #1
 80040fc:	4013      	ands	r3, r2
 80040fe:	d009      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004100:	4b0e      	ldr	r3, [pc, #56]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004104:	2203      	movs	r2, #3
 8004106:	4393      	bics	r3, r2
 8004108:	0019      	movs	r1, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	4b0b      	ldr	r3, [pc, #44]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004110:	430a      	orrs	r2, r1
 8004112:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2220      	movs	r2, #32
 800411a:	4013      	ands	r3, r2
 800411c:	d009      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800411e:	4b07      	ldr	r3, [pc, #28]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	2210      	movs	r2, #16
 8004124:	4393      	bics	r3, r2
 8004126:	0019      	movs	r1, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	4b03      	ldr	r3, [pc, #12]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800412e:	430a      	orrs	r2, r1
 8004130:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	0018      	movs	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	b006      	add	sp, #24
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40021000 	.word	0x40021000
 8004140:	40007000 	.word	0x40007000
 8004144:	fffffcff 	.word	0xfffffcff
 8004148:	fffeffff 	.word	0xfffeffff
 800414c:	00001388 	.word	0x00001388
 8004150:	efffffff 	.word	0xefffffff

08004154 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e081      	b.n	800426a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	7f5b      	ldrb	r3, [r3, #29]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d106      	bne.n	800417e <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	0018      	movs	r0, r3
 800417a:	f7fe fae3 	bl	8002744 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2202      	movs	r2, #2
 8004182:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	22ca      	movs	r2, #202	; 0xca
 800418a:	625a      	str	r2, [r3, #36]	; 0x24
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2253      	movs	r2, #83	; 0x53
 8004192:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	0018      	movs	r0, r3
 8004198:	f000 fad3 	bl	8004742 <RTC_EnterInitMode>
 800419c:	1e03      	subs	r3, r0, #0
 800419e:	d008      	beq.n	80041b2 <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	22ff      	movs	r2, #255	; 0xff
 80041a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2204      	movs	r2, #4
 80041ac:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e05b      	b.n	800426a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	492d      	ldr	r1, [pc, #180]	; (8004274 <HAL_RTC_Init+0x120>)
 80041be:	400a      	ands	r2, r1
 80041c0:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6899      	ldr	r1, [r3, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	68d2      	ldr	r2, [r2, #12]
 80041e8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6919      	ldr	r1, [r3, #16]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	041a      	lsls	r2, r3, #16
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2180      	movs	r1, #128	; 0x80
 800420a:	438a      	bics	r2, r1
 800420c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	2220      	movs	r2, #32
 8004216:	4013      	ands	r3, r2
 8004218:	d10e      	bne.n	8004238 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	0018      	movs	r0, r3
 800421e:	f000 fa67 	bl	80046f0 <HAL_RTC_WaitForSynchro>
 8004222:	1e03      	subs	r3, r0, #0
 8004224:	d008      	beq.n	8004238 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	22ff      	movs	r2, #255	; 0xff
 800422c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2204      	movs	r2, #4
 8004232:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e018      	b.n	800426a <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	490d      	ldr	r1, [pc, #52]	; (8004278 <HAL_RTC_Init+0x124>)
 8004244:	400a      	ands	r2, r1
 8004246:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	22ff      	movs	r2, #255	; 0xff
 8004260:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004268:	2300      	movs	r3, #0
  }
}
 800426a:	0018      	movs	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	b002      	add	sp, #8
 8004270:	bd80      	pop	{r7, pc}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	ff8fffbf 	.word	0xff8fffbf
 8004278:	fffbffff 	.word	0xfffbffff

0800427c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800427c:	b590      	push	{r4, r7, lr}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	7f1b      	ldrb	r3, [r3, #28]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_RTC_SetTime+0x1c>
 8004294:	2302      	movs	r3, #2
 8004296:	e0a5      	b.n	80043e4 <HAL_RTC_SetTime+0x168>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2201      	movs	r2, #1
 800429c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2202      	movs	r2, #2
 80042a2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d125      	bne.n	80042f6 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2240      	movs	r2, #64	; 0x40
 80042b2:	4013      	ands	r3, r2
 80042b4:	d102      	bne.n	80042bc <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2200      	movs	r2, #0
 80042ba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	0018      	movs	r0, r3
 80042c2:	f000 fa6a 	bl	800479a <RTC_ByteToBcd2>
 80042c6:	0003      	movs	r3, r0
 80042c8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	785b      	ldrb	r3, [r3, #1]
 80042ce:	0018      	movs	r0, r3
 80042d0:	f000 fa63 	bl	800479a <RTC_ByteToBcd2>
 80042d4:	0003      	movs	r3, r0
 80042d6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80042d8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	789b      	ldrb	r3, [r3, #2]
 80042de:	0018      	movs	r0, r3
 80042e0:	f000 fa5b 	bl	800479a <RTC_ByteToBcd2>
 80042e4:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80042e6:	0022      	movs	r2, r4
 80042e8:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	78db      	ldrb	r3, [r3, #3]
 80042ee:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	e017      	b.n	8004326 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	2240      	movs	r2, #64	; 0x40
 80042fe:	4013      	ands	r3, r2
 8004300:	d102      	bne.n	8004308 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2200      	movs	r2, #0
 8004306:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	785b      	ldrb	r3, [r3, #1]
 8004312:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004314:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800431a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	78db      	ldrb	r3, [r3, #3]
 8004320:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004322:	4313      	orrs	r3, r2
 8004324:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	22ca      	movs	r2, #202	; 0xca
 800432c:	625a      	str	r2, [r3, #36]	; 0x24
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2253      	movs	r2, #83	; 0x53
 8004334:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	0018      	movs	r0, r3
 800433a:	f000 fa02 	bl	8004742 <RTC_EnterInitMode>
 800433e:	1e03      	subs	r3, r0, #0
 8004340:	d00b      	beq.n	800435a <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	22ff      	movs	r2, #255	; 0xff
 8004348:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2204      	movs	r2, #4
 800434e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e044      	b.n	80043e4 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	4922      	ldr	r1, [pc, #136]	; (80043ec <HAL_RTC_SetTime+0x170>)
 8004362:	400a      	ands	r2, r1
 8004364:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	491f      	ldr	r1, [pc, #124]	; (80043f0 <HAL_RTC_SetTime+0x174>)
 8004372:	400a      	ands	r2, r1
 8004374:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6899      	ldr	r1, [r3, #8]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	431a      	orrs	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2180      	movs	r1, #128	; 0x80
 800439a:	438a      	bics	r2, r1
 800439c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	2220      	movs	r2, #32
 80043a6:	4013      	ands	r3, r2
 80043a8:	d111      	bne.n	80043ce <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	0018      	movs	r0, r3
 80043ae:	f000 f99f 	bl	80046f0 <HAL_RTC_WaitForSynchro>
 80043b2:	1e03      	subs	r3, r0, #0
 80043b4:	d00b      	beq.n	80043ce <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	22ff      	movs	r2, #255	; 0xff
 80043bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2204      	movs	r2, #4
 80043c2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e00a      	b.n	80043e4 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	22ff      	movs	r2, #255	; 0xff
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80043e2:	2300      	movs	r3, #0
  }
}
 80043e4:	0018      	movs	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b007      	add	sp, #28
 80043ea:	bd90      	pop	{r4, r7, pc}
 80043ec:	007f7f7f 	.word	0x007f7f7f
 80043f0:	fffbffff 	.word	0xfffbffff

080043f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80043f4:	b590      	push	{r4, r7, lr}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	7f1b      	ldrb	r3, [r3, #28]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_RTC_SetDate+0x1c>
 800440c:	2302      	movs	r3, #2
 800440e:	e091      	b.n	8004534 <HAL_RTC_SetDate+0x140>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2202      	movs	r2, #2
 800441a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10e      	bne.n	8004440 <HAL_RTC_SetDate+0x4c>
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	785b      	ldrb	r3, [r3, #1]
 8004426:	001a      	movs	r2, r3
 8004428:	2310      	movs	r3, #16
 800442a:	4013      	ands	r3, r2
 800442c:	d008      	beq.n	8004440 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	785b      	ldrb	r3, [r3, #1]
 8004432:	2210      	movs	r2, #16
 8004434:	4393      	bics	r3, r2
 8004436:	b2db      	uxtb	r3, r3
 8004438:	330a      	adds	r3, #10
 800443a:	b2da      	uxtb	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d11c      	bne.n	8004480 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	78db      	ldrb	r3, [r3, #3]
 800444a:	0018      	movs	r0, r3
 800444c:	f000 f9a5 	bl	800479a <RTC_ByteToBcd2>
 8004450:	0003      	movs	r3, r0
 8004452:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	785b      	ldrb	r3, [r3, #1]
 8004458:	0018      	movs	r0, r3
 800445a:	f000 f99e 	bl	800479a <RTC_ByteToBcd2>
 800445e:	0003      	movs	r3, r0
 8004460:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004462:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	789b      	ldrb	r3, [r3, #2]
 8004468:	0018      	movs	r0, r3
 800446a:	f000 f996 	bl	800479a <RTC_ByteToBcd2>
 800446e:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004470:	0022      	movs	r2, r4
 8004472:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	e00e      	b.n	800449e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	78db      	ldrb	r3, [r3, #3]
 8004484:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	785b      	ldrb	r3, [r3, #1]
 800448a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800448c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004492:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	22ca      	movs	r2, #202	; 0xca
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2253      	movs	r2, #83	; 0x53
 80044ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	0018      	movs	r0, r3
 80044b2:	f000 f946 	bl	8004742 <RTC_EnterInitMode>
 80044b6:	1e03      	subs	r3, r0, #0
 80044b8:	d00b      	beq.n	80044d2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	22ff      	movs	r2, #255	; 0xff
 80044c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2204      	movs	r2, #4
 80044c6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e030      	b.n	8004534 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4918      	ldr	r1, [pc, #96]	; (800453c <HAL_RTC_SetDate+0x148>)
 80044da:	400a      	ands	r2, r1
 80044dc:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2180      	movs	r1, #128	; 0x80
 80044ea:	438a      	bics	r2, r1
 80044ec:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2220      	movs	r2, #32
 80044f6:	4013      	ands	r3, r2
 80044f8:	d111      	bne.n	800451e <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	0018      	movs	r0, r3
 80044fe:	f000 f8f7 	bl	80046f0 <HAL_RTC_WaitForSynchro>
 8004502:	1e03      	subs	r3, r0, #0
 8004504:	d00b      	beq.n	800451e <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	22ff      	movs	r2, #255	; 0xff
 800450c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2204      	movs	r2, #4
 8004512:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e00a      	b.n	8004534 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	22ff      	movs	r2, #255	; 0xff
 8004524:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2201      	movs	r2, #1
 800452a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004532:	2300      	movs	r3, #0
  }
}
 8004534:	0018      	movs	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	b007      	add	sp, #28
 800453a:	bd90      	pop	{r4, r7, pc}
 800453c:	00ffff3f 	.word	0x00ffff3f

08004540 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004540:	b590      	push	{r4, r7, lr}
 8004542:	b089      	sub	sp, #36	; 0x24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	61fb      	str	r3, [r7, #28]
 8004554:	2300      	movs	r3, #0
 8004556:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	7f1b      	ldrb	r3, [r3, #28]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_RTC_SetAlarm+0x24>
 8004560:	2302      	movs	r3, #2
 8004562:	e0bc      	b.n	80046de <HAL_RTC_SetAlarm+0x19e>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2202      	movs	r2, #2
 800456e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d136      	bne.n	80045e4 <HAL_RTC_SetAlarm+0xa4>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2240      	movs	r2, #64	; 0x40
 800457e:	4013      	ands	r3, r2
 8004580:	d102      	bne.n	8004588 <HAL_RTC_SetAlarm+0x48>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2200      	movs	r2, #0
 8004586:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	0018      	movs	r0, r3
 800458e:	f000 f904 	bl	800479a <RTC_ByteToBcd2>
 8004592:	0003      	movs	r3, r0
 8004594:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	785b      	ldrb	r3, [r3, #1]
 800459a:	0018      	movs	r0, r3
 800459c:	f000 f8fd 	bl	800479a <RTC_ByteToBcd2>
 80045a0:	0003      	movs	r3, r0
 80045a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80045a4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	789b      	ldrb	r3, [r3, #2]
 80045aa:	0018      	movs	r0, r3
 80045ac:	f000 f8f5 	bl	800479a <RTC_ByteToBcd2>
 80045b0:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80045b2:	0022      	movs	r2, r4
 80045b4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	78db      	ldrb	r3, [r3, #3]
 80045ba:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80045bc:	431a      	orrs	r2, r3
 80045be:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2220      	movs	r2, #32
 80045c4:	5c9b      	ldrb	r3, [r3, r2]
 80045c6:	0018      	movs	r0, r3
 80045c8:	f000 f8e7 	bl	800479a <RTC_ByteToBcd2>
 80045cc:	0003      	movs	r3, r0
 80045ce:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80045d0:	0022      	movs	r2, r4
 80045d2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80045d8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80045de:	4313      	orrs	r3, r2
 80045e0:	61fb      	str	r3, [r7, #28]
 80045e2:	e022      	b.n	800462a <HAL_RTC_SetAlarm+0xea>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2240      	movs	r2, #64	; 0x40
 80045ec:	4013      	ands	r3, r2
 80045ee:	d102      	bne.n	80045f6 <HAL_RTC_SetAlarm+0xb6>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2200      	movs	r2, #0
 80045f4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	785b      	ldrb	r3, [r3, #1]
 8004600:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004602:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004608:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	78db      	ldrb	r3, [r3, #3]
 800460e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004610:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2120      	movs	r1, #32
 8004616:	5c5b      	ldrb	r3, [r3, r1]
 8004618:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800461a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004620:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004626:	4313      	orrs	r3, r2
 8004628:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	4313      	orrs	r3, r2
 8004634:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	22ca      	movs	r2, #202	; 0xca
 800463c:	625a      	str	r2, [r3, #36]	; 0x24
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2253      	movs	r2, #83	; 0x53
 8004644:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Alarm A interrupt */
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4925      	ldr	r1, [pc, #148]	; (80046e8 <HAL_RTC_SetAlarm+0x1a8>)
 8004652:	400a      	ands	r2, r1
 8004654:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4922      	ldr	r1, [pc, #136]	; (80046ec <HAL_RTC_SetAlarm+0x1ac>)
 8004662:	400a      	ands	r2, r1
 8004664:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8004666:	f7fe fa1f 	bl	8002aa8 <HAL_GetTick>
 800466a:	0003      	movs	r3, r0
 800466c:	61bb      	str	r3, [r7, #24]
  /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800466e:	e014      	b.n	800469a <HAL_RTC_SetAlarm+0x15a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004670:	f7fe fa1a 	bl	8002aa8 <HAL_GetTick>
 8004674:	0002      	movs	r2, r0
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	1ad2      	subs	r2, r2, r3
 800467a:	23fa      	movs	r3, #250	; 0xfa
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	429a      	cmp	r2, r3
 8004680:	d90b      	bls.n	800469a <HAL_RTC_SetAlarm+0x15a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	22ff      	movs	r2, #255	; 0xff
 8004688:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2203      	movs	r2, #3
 800468e:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e021      	b.n	80046de <HAL_RTC_SetAlarm+0x19e>
  while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	4013      	ands	r3, r2
 80046a4:	d0e4      	beq.n	8004670 <HAL_RTC_SetAlarm+0x130>
    }
  }

  hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	61da      	str	r2, [r3, #28]
  /* Configure the Alarm A Sub Second register */
  hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Configure the Alarm state: Enable Alarm */
  __HAL_RTC_ALARMA_ENABLE(hrtc);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2180      	movs	r1, #128	; 0x80
 80046c2:	0049      	lsls	r1, r1, #1
 80046c4:	430a      	orrs	r2, r1
 80046c6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	22ff      	movs	r2, #255	; 0xff
 80046ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2201      	movs	r2, #1
 80046d4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	0018      	movs	r0, r3
 80046e0:	46bd      	mov	sp, r7
 80046e2:	b009      	add	sp, #36	; 0x24
 80046e4:	bd90      	pop	{r4, r7, pc}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	fffffeff 	.word	0xfffffeff
 80046ec:	ffffefff 	.word	0xffffefff

080046f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	21a0      	movs	r1, #160	; 0xa0
 8004708:	438a      	bics	r2, r1
 800470a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800470c:	f7fe f9cc 	bl	8002aa8 <HAL_GetTick>
 8004710:	0003      	movs	r3, r0
 8004712:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004714:	e00a      	b.n	800472c <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004716:	f7fe f9c7 	bl	8002aa8 <HAL_GetTick>
 800471a:	0002      	movs	r2, r0
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	1ad2      	subs	r2, r2, r3
 8004720:	23fa      	movs	r3, #250	; 0xfa
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	429a      	cmp	r2, r3
 8004726:	d901      	bls.n	800472c <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e006      	b.n	800473a <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	4013      	ands	r3, r2
 8004736:	d0ee      	beq.n	8004716 <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	0018      	movs	r0, r3
 800473c:	46bd      	mov	sp, r7
 800473e:	b004      	add	sp, #16
 8004740:	bd80      	pop	{r7, pc}

08004742 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	2240      	movs	r2, #64	; 0x40
 8004756:	4013      	ands	r3, r2
 8004758:	d11a      	bne.n	8004790 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2201      	movs	r2, #1
 8004760:	4252      	negs	r2, r2
 8004762:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004764:	f7fe f9a0 	bl	8002aa8 <HAL_GetTick>
 8004768:	0003      	movs	r3, r0
 800476a:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800476c:	e00a      	b.n	8004784 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800476e:	f7fe f99b 	bl	8002aa8 <HAL_GetTick>
 8004772:	0002      	movs	r2, r0
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	1ad2      	subs	r2, r2, r3
 8004778:	23fa      	movs	r3, #250	; 0xfa
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	429a      	cmp	r2, r3
 800477e:	d901      	bls.n	8004784 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e006      	b.n	8004792 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	2240      	movs	r2, #64	; 0x40
 800478c:	4013      	ands	r3, r2
 800478e:	d0ee      	beq.n	800476e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	0018      	movs	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	b004      	add	sp, #16
 8004798:	bd80      	pop	{r7, pc}

0800479a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b084      	sub	sp, #16
 800479e:	af00      	add	r7, sp, #0
 80047a0:	0002      	movs	r2, r0
 80047a2:	1dfb      	adds	r3, r7, #7
 80047a4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80047aa:	e007      	b.n	80047bc <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3301      	adds	r3, #1
 80047b0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80047b2:	1dfb      	adds	r3, r7, #7
 80047b4:	1dfa      	adds	r2, r7, #7
 80047b6:	7812      	ldrb	r2, [r2, #0]
 80047b8:	3a0a      	subs	r2, #10
 80047ba:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 80047bc:	1dfb      	adds	r3, r7, #7
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b09      	cmp	r3, #9
 80047c2:	d8f3      	bhi.n	80047ac <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	1dfb      	adds	r3, r7, #7
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	b2db      	uxtb	r3, r3
}
 80047d4:	0018      	movs	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b004      	add	sp, #16
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e01e      	b.n	800482c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	223d      	movs	r2, #61	; 0x3d
 80047f2:	5c9b      	ldrb	r3, [r3, r2]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d107      	bne.n	800480a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	223c      	movs	r2, #60	; 0x3c
 80047fe:	2100      	movs	r1, #0
 8004800:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	0018      	movs	r0, r3
 8004806:	f000 f815 	bl	8004834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	223d      	movs	r2, #61	; 0x3d
 800480e:	2102      	movs	r1, #2
 8004810:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	3304      	adds	r3, #4
 800481a:	0019      	movs	r1, r3
 800481c:	0010      	movs	r0, r2
 800481e:	f000 f969 	bl	8004af4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	223d      	movs	r2, #61	; 0x3d
 8004826:	2101      	movs	r1, #1
 8004828:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	0018      	movs	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	b002      	add	sp, #8
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800483c:	46c0      	nop			; (mov r8, r8)
 800483e:	46bd      	mov	sp, r7
 8004840:	b002      	add	sp, #8
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2101      	movs	r1, #1
 8004858:	430a      	orrs	r2, r1
 800485a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2207      	movs	r2, #7
 8004864:	4013      	ands	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b06      	cmp	r3, #6
 800486c:	d007      	beq.n	800487e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2101      	movs	r1, #1
 800487a:	430a      	orrs	r2, r1
 800487c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	0018      	movs	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	b004      	add	sp, #16
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	2202      	movs	r2, #2
 8004898:	4013      	ands	r3, r2
 800489a:	2b02      	cmp	r3, #2
 800489c:	d124      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	2202      	movs	r2, #2
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d11d      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2203      	movs	r2, #3
 80048b2:	4252      	negs	r2, r2
 80048b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	2203      	movs	r2, #3
 80048c4:	4013      	ands	r3, r2
 80048c6:	d004      	beq.n	80048d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	0018      	movs	r0, r3
 80048cc:	f000 f8fa 	bl	8004ac4 <HAL_TIM_IC_CaptureCallback>
 80048d0:	e007      	b.n	80048e2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	0018      	movs	r0, r3
 80048d6:	f000 f8ed 	bl	8004ab4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	0018      	movs	r0, r3
 80048de:	f000 f8f9 	bl	8004ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	2204      	movs	r2, #4
 80048f0:	4013      	ands	r3, r2
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d125      	bne.n	8004942 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	2204      	movs	r2, #4
 80048fe:	4013      	ands	r3, r2
 8004900:	2b04      	cmp	r3, #4
 8004902:	d11e      	bne.n	8004942 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2205      	movs	r2, #5
 800490a:	4252      	negs	r2, r2
 800490c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2202      	movs	r2, #2
 8004912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699a      	ldr	r2, [r3, #24]
 800491a:	23c0      	movs	r3, #192	; 0xc0
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4013      	ands	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	0018      	movs	r0, r3
 8004926:	f000 f8cd 	bl	8004ac4 <HAL_TIM_IC_CaptureCallback>
 800492a:	e007      	b.n	800493c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	0018      	movs	r0, r3
 8004930:	f000 f8c0 	bl	8004ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	0018      	movs	r0, r3
 8004938:	f000 f8cc 	bl	8004ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	2208      	movs	r2, #8
 800494a:	4013      	ands	r3, r2
 800494c:	2b08      	cmp	r3, #8
 800494e:	d124      	bne.n	800499a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2208      	movs	r2, #8
 8004958:	4013      	ands	r3, r2
 800495a:	2b08      	cmp	r3, #8
 800495c:	d11d      	bne.n	800499a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2209      	movs	r2, #9
 8004964:	4252      	negs	r2, r2
 8004966:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2204      	movs	r2, #4
 800496c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	2203      	movs	r2, #3
 8004976:	4013      	ands	r3, r2
 8004978:	d004      	beq.n	8004984 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	0018      	movs	r0, r3
 800497e:	f000 f8a1 	bl	8004ac4 <HAL_TIM_IC_CaptureCallback>
 8004982:	e007      	b.n	8004994 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	0018      	movs	r0, r3
 8004988:	f000 f894 	bl	8004ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	0018      	movs	r0, r3
 8004990:	f000 f8a0 	bl	8004ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	2210      	movs	r2, #16
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b10      	cmp	r3, #16
 80049a6:	d125      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2210      	movs	r2, #16
 80049b0:	4013      	ands	r3, r2
 80049b2:	2b10      	cmp	r3, #16
 80049b4:	d11e      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2211      	movs	r2, #17
 80049bc:	4252      	negs	r2, r2
 80049be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2208      	movs	r2, #8
 80049c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69da      	ldr	r2, [r3, #28]
 80049cc:	23c0      	movs	r3, #192	; 0xc0
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4013      	ands	r3, r2
 80049d2:	d004      	beq.n	80049de <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	0018      	movs	r0, r3
 80049d8:	f000 f874 	bl	8004ac4 <HAL_TIM_IC_CaptureCallback>
 80049dc:	e007      	b.n	80049ee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	0018      	movs	r0, r3
 80049e2:	f000 f867 	bl	8004ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	0018      	movs	r0, r3
 80049ea:	f000 f873 	bl	8004ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2201      	movs	r2, #1
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d10f      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d108      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2202      	movs	r2, #2
 8004a16:	4252      	negs	r2, r2
 8004a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f7fd fdc1 	bl	80025a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	2280      	movs	r2, #128	; 0x80
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b80      	cmp	r3, #128	; 0x80
 8004a2e:	d10f      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	2280      	movs	r2, #128	; 0x80
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b80      	cmp	r3, #128	; 0x80
 8004a3c:	d108      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2281      	movs	r2, #129	; 0x81
 8004a44:	4252      	negs	r2, r2
 8004a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f000 f8d0 	bl	8004bf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	2240      	movs	r2, #64	; 0x40
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b40      	cmp	r3, #64	; 0x40
 8004a5c:	d10f      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	2240      	movs	r2, #64	; 0x40
 8004a66:	4013      	ands	r3, r2
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	d108      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2241      	movs	r2, #65	; 0x41
 8004a72:	4252      	negs	r2, r2
 8004a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f000 f833 	bl	8004ae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	2220      	movs	r2, #32
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d10f      	bne.n	8004aac <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	4013      	ands	r3, r2
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d108      	bne.n	8004aac <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2221      	movs	r2, #33	; 0x21
 8004aa0:	4252      	negs	r2, r2
 8004aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f000 f89a 	bl	8004be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aac:	46c0      	nop			; (mov r8, r8)
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	b002      	add	sp, #8
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004abc:	46c0      	nop			; (mov r8, r8)
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	b002      	add	sp, #8
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004acc:	46c0      	nop			; (mov r8, r8)
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	b002      	add	sp, #8
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004adc:	46c0      	nop			; (mov r8, r8)
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b002      	add	sp, #8
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aec:	46c0      	nop			; (mov r8, r8)
 8004aee:	46bd      	mov	sp, r7
 8004af0:	b002      	add	sp, #8
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a2f      	ldr	r2, [pc, #188]	; (8004bc4 <TIM_Base_SetConfig+0xd0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d003      	beq.n	8004b14 <TIM_Base_SetConfig+0x20>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a2e      	ldr	r2, [pc, #184]	; (8004bc8 <TIM_Base_SetConfig+0xd4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d108      	bne.n	8004b26 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2270      	movs	r2, #112	; 0x70
 8004b18:	4393      	bics	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a26      	ldr	r2, [pc, #152]	; (8004bc4 <TIM_Base_SetConfig+0xd0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d013      	beq.n	8004b56 <TIM_Base_SetConfig+0x62>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a25      	ldr	r2, [pc, #148]	; (8004bc8 <TIM_Base_SetConfig+0xd4>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00f      	beq.n	8004b56 <TIM_Base_SetConfig+0x62>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a24      	ldr	r2, [pc, #144]	; (8004bcc <TIM_Base_SetConfig+0xd8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00b      	beq.n	8004b56 <TIM_Base_SetConfig+0x62>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a23      	ldr	r2, [pc, #140]	; (8004bd0 <TIM_Base_SetConfig+0xdc>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d007      	beq.n	8004b56 <TIM_Base_SetConfig+0x62>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a22      	ldr	r2, [pc, #136]	; (8004bd4 <TIM_Base_SetConfig+0xe0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d003      	beq.n	8004b56 <TIM_Base_SetConfig+0x62>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a21      	ldr	r2, [pc, #132]	; (8004bd8 <TIM_Base_SetConfig+0xe4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d108      	bne.n	8004b68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4a20      	ldr	r2, [pc, #128]	; (8004bdc <TIM_Base_SetConfig+0xe8>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2280      	movs	r2, #128	; 0x80
 8004b6c:	4393      	bics	r3, r2
 8004b6e:	001a      	movs	r2, r3
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a0c      	ldr	r2, [pc, #48]	; (8004bc4 <TIM_Base_SetConfig+0xd0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00b      	beq.n	8004bae <TIM_Base_SetConfig+0xba>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a0d      	ldr	r2, [pc, #52]	; (8004bd0 <TIM_Base_SetConfig+0xdc>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d007      	beq.n	8004bae <TIM_Base_SetConfig+0xba>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a0c      	ldr	r2, [pc, #48]	; (8004bd4 <TIM_Base_SetConfig+0xe0>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d003      	beq.n	8004bae <TIM_Base_SetConfig+0xba>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a0b      	ldr	r2, [pc, #44]	; (8004bd8 <TIM_Base_SetConfig+0xe4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d103      	bne.n	8004bb6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	615a      	str	r2, [r3, #20]
}
 8004bbc:	46c0      	nop			; (mov r8, r8)
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	b004      	add	sp, #16
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40012c00 	.word	0x40012c00
 8004bc8:	40000400 	.word	0x40000400
 8004bcc:	40002000 	.word	0x40002000
 8004bd0:	40014000 	.word	0x40014000
 8004bd4:	40014400 	.word	0x40014400
 8004bd8:	40014800 	.word	0x40014800
 8004bdc:	fffffcff 	.word	0xfffffcff

08004be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004be8:	46c0      	nop			; (mov r8, r8)
 8004bea:	46bd      	mov	sp, r7
 8004bec:	b002      	add	sp, #8
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bf8:	46c0      	nop			; (mov r8, r8)
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	b002      	add	sp, #8
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e044      	b.n	8004c9c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d107      	bne.n	8004c2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2270      	movs	r2, #112	; 0x70
 8004c1e:	2100      	movs	r1, #0
 8004c20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	0018      	movs	r0, r3
 8004c26:	f7fd fda5 	bl	8002774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2224      	movs	r2, #36	; 0x24
 8004c2e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	438a      	bics	r2, r1
 8004c3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	0018      	movs	r0, r3
 8004c44:	f000 f968 	bl	8004f18 <UART_SetConfig>
 8004c48:	0003      	movs	r3, r0
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d101      	bne.n	8004c52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e024      	b.n	8004c9c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	f000 fae1 	bl	8005224 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	490d      	ldr	r1, [pc, #52]	; (8004ca4 <HAL_UART_Init+0xa4>)
 8004c6e:	400a      	ands	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2108      	movs	r1, #8
 8004c7e:	438a      	bics	r2, r1
 8004c80:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	0018      	movs	r0, r3
 8004c96:	f000 fb79 	bl	800538c <UART_CheckIdleState>
 8004c9a:	0003      	movs	r3, r0
}
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b002      	add	sp, #8
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	fffff7ff 	.word	0xfffff7ff

08004ca8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	4a89      	ldr	r2, [pc, #548]	; (8004ef0 <HAL_UART_IRQHandler+0x248>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d112      	bne.n	8004cfc <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d00e      	beq.n	8004cfc <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d00a      	beq.n	8004cfc <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d100      	bne.n	8004cf0 <HAL_UART_IRQHandler+0x48>
 8004cee:	e0f7      	b.n	8004ee0 <HAL_UART_IRQHandler+0x238>
      {
        huart->RxISR(huart);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	0010      	movs	r0, r2
 8004cf8:	4798      	blx	r3
      }
      return;
 8004cfa:	e0f1      	b.n	8004ee0 <HAL_UART_IRQHandler+0x238>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d100      	bne.n	8004d04 <HAL_UART_IRQHandler+0x5c>
 8004d02:	e0cd      	b.n	8004ea0 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2201      	movs	r2, #1
 8004d08:	4013      	ands	r3, r2
 8004d0a:	d105      	bne.n	8004d18 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	2390      	movs	r3, #144	; 0x90
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	4013      	ands	r3, r2
 8004d14:	d100      	bne.n	8004d18 <HAL_UART_IRQHandler+0x70>
 8004d16:	e0c3      	b.n	8004ea0 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d00e      	beq.n	8004d3e <HAL_UART_IRQHandler+0x96>
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	2380      	movs	r3, #128	; 0x80
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	4013      	ands	r3, r2
 8004d28:	d009      	beq.n	8004d3e <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d36:	2201      	movs	r2, #1
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	2202      	movs	r2, #2
 8004d42:	4013      	ands	r3, r2
 8004d44:	d00d      	beq.n	8004d62 <HAL_UART_IRQHandler+0xba>
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d009      	beq.n	8004d62 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2202      	movs	r2, #2
 8004d54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d5a:	2204      	movs	r2, #4
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	2204      	movs	r2, #4
 8004d66:	4013      	ands	r3, r2
 8004d68:	d00d      	beq.n	8004d86 <HAL_UART_IRQHandler+0xde>
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d009      	beq.n	8004d86 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2204      	movs	r2, #4
 8004d78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d7e:	2202      	movs	r2, #2
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	2208      	movs	r2, #8
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	d011      	beq.n	8004db2 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2220      	movs	r2, #32
 8004d92:	4013      	ands	r3, r2
 8004d94:	d103      	bne.n	8004d9e <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d9c:	d009      	beq.n	8004db2 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2208      	movs	r2, #8
 8004da4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004daa:	2208      	movs	r2, #8
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	2380      	movs	r3, #128	; 0x80
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	4013      	ands	r3, r2
 8004dba:	d00f      	beq.n	8004ddc <HAL_UART_IRQHandler+0x134>
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	2380      	movs	r3, #128	; 0x80
 8004dc0:	04db      	lsls	r3, r3, #19
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d00a      	beq.n	8004ddc <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2280      	movs	r2, #128	; 0x80
 8004dcc:	0112      	lsls	r2, r2, #4
 8004dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d100      	bne.n	8004de6 <HAL_UART_IRQHandler+0x13e>
 8004de4:	e07e      	b.n	8004ee4 <HAL_UART_IRQHandler+0x23c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	2220      	movs	r2, #32
 8004dea:	4013      	ands	r3, r2
 8004dec:	d00c      	beq.n	8004e08 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	2220      	movs	r2, #32
 8004df2:	4013      	ands	r3, r2
 8004df4:	d008      	beq.n	8004e08 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d004      	beq.n	8004e08 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	0010      	movs	r0, r2
 8004e06:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e0c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2240      	movs	r2, #64	; 0x40
 8004e16:	4013      	ands	r3, r2
 8004e18:	2b40      	cmp	r3, #64	; 0x40
 8004e1a:	d003      	beq.n	8004e24 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2228      	movs	r2, #40	; 0x28
 8004e20:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e22:	d033      	beq.n	8004e8c <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	0018      	movs	r0, r3
 8004e28:	f000 fb74 	bl	8005514 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2240      	movs	r2, #64	; 0x40
 8004e34:	4013      	ands	r3, r2
 8004e36:	2b40      	cmp	r3, #64	; 0x40
 8004e38:	d123      	bne.n	8004e82 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2140      	movs	r1, #64	; 0x40
 8004e46:	438a      	bics	r2, r1
 8004e48:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d012      	beq.n	8004e78 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e56:	4a27      	ldr	r2, [pc, #156]	; (8004ef4 <HAL_UART_IRQHandler+0x24c>)
 8004e58:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f7fe f90f 	bl	8003082 <HAL_DMA_Abort_IT>
 8004e64:	1e03      	subs	r3, r0, #0
 8004e66:	d019      	beq.n	8004e9c <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e72:	0018      	movs	r0, r3
 8004e74:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e76:	e011      	b.n	8004e9c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	f000 f844 	bl	8004f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e80:	e00c      	b.n	8004e9c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	0018      	movs	r0, r3
 8004e86:	f000 f83f 	bl	8004f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8a:	e007      	b.n	8004e9c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	0018      	movs	r0, r3
 8004e90:	f000 f83a 	bl	8004f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004e9a:	e023      	b.n	8004ee4 <HAL_UART_IRQHandler+0x23c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9c:	46c0      	nop			; (mov r8, r8)
    return;
 8004e9e:	e021      	b.n	8004ee4 <HAL_UART_IRQHandler+0x23c>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	2280      	movs	r2, #128	; 0x80
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d00d      	beq.n	8004ec4 <HAL_UART_IRQHandler+0x21c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	2280      	movs	r2, #128	; 0x80
 8004eac:	4013      	ands	r3, r2
 8004eae:	d009      	beq.n	8004ec4 <HAL_UART_IRQHandler+0x21c>
  {
    if (huart->TxISR != NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d017      	beq.n	8004ee8 <HAL_UART_IRQHandler+0x240>
    {
      huart->TxISR(huart);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	0010      	movs	r0, r2
 8004ec0:	4798      	blx	r3
    }
    return;
 8004ec2:	e011      	b.n	8004ee8 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	2240      	movs	r2, #64	; 0x40
 8004ec8:	4013      	ands	r3, r2
 8004eca:	d00e      	beq.n	8004eea <HAL_UART_IRQHandler+0x242>
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	2240      	movs	r2, #64	; 0x40
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	d00a      	beq.n	8004eea <HAL_UART_IRQHandler+0x242>
  {
    UART_EndTransmit_IT(huart);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	f000 fb53 	bl	8005582 <UART_EndTransmit_IT>
    return;
 8004edc:	46c0      	nop			; (mov r8, r8)
 8004ede:	e004      	b.n	8004eea <HAL_UART_IRQHandler+0x242>
      return;
 8004ee0:	46c0      	nop			; (mov r8, r8)
 8004ee2:	e002      	b.n	8004eea <HAL_UART_IRQHandler+0x242>
    return;
 8004ee4:	46c0      	nop			; (mov r8, r8)
 8004ee6:	e000      	b.n	8004eea <HAL_UART_IRQHandler+0x242>
    return;
 8004ee8:	46c0      	nop			; (mov r8, r8)
  }

}
 8004eea:	46bd      	mov	sp, r7
 8004eec:	b008      	add	sp, #32
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	0000080f 	.word	0x0000080f
 8004ef4:	08005555 	.word	0x08005555

08004ef8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f00:	46c0      	nop			; (mov r8, r8)
 8004f02:	46bd      	mov	sp, r7
 8004f04:	b002      	add	sp, #8
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f10:	46c0      	nop			; (mov r8, r8)
 8004f12:	46bd      	mov	sp, r7
 8004f14:	b002      	add	sp, #8
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f24:	2317      	movs	r3, #23
 8004f26:	18fb      	adds	r3, r7, r3
 8004f28:	2200      	movs	r2, #0
 8004f2a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	431a      	orrs	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4aad      	ldr	r2, [pc, #692]	; (8005200 <UART_SetConfig+0x2e8>)
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	0019      	movs	r1, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	4aa8      	ldr	r2, [pc, #672]	; (8005204 <UART_SetConfig+0x2ec>)
 8004f62:	4013      	ands	r3, r2
 8004f64:	0019      	movs	r1, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	4a9f      	ldr	r2, [pc, #636]	; (8005208 <UART_SetConfig+0x2f0>)
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	0019      	movs	r1, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a9b      	ldr	r2, [pc, #620]	; (800520c <UART_SetConfig+0x2f4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d125      	bne.n	8004fee <UART_SetConfig+0xd6>
 8004fa2:	4b9b      	ldr	r3, [pc, #620]	; (8005210 <UART_SetConfig+0x2f8>)
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa6:	2203      	movs	r2, #3
 8004fa8:	4013      	ands	r3, r2
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d00f      	beq.n	8004fce <UART_SetConfig+0xb6>
 8004fae:	d304      	bcc.n	8004fba <UART_SetConfig+0xa2>
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d011      	beq.n	8004fd8 <UART_SetConfig+0xc0>
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d005      	beq.n	8004fc4 <UART_SetConfig+0xac>
 8004fb8:	e013      	b.n	8004fe2 <UART_SetConfig+0xca>
 8004fba:	231f      	movs	r3, #31
 8004fbc:	18fb      	adds	r3, r7, r3
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	701a      	strb	r2, [r3, #0]
 8004fc2:	e022      	b.n	800500a <UART_SetConfig+0xf2>
 8004fc4:	231f      	movs	r3, #31
 8004fc6:	18fb      	adds	r3, r7, r3
 8004fc8:	2202      	movs	r2, #2
 8004fca:	701a      	strb	r2, [r3, #0]
 8004fcc:	e01d      	b.n	800500a <UART_SetConfig+0xf2>
 8004fce:	231f      	movs	r3, #31
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	2204      	movs	r2, #4
 8004fd4:	701a      	strb	r2, [r3, #0]
 8004fd6:	e018      	b.n	800500a <UART_SetConfig+0xf2>
 8004fd8:	231f      	movs	r3, #31
 8004fda:	18fb      	adds	r3, r7, r3
 8004fdc:	2208      	movs	r2, #8
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	e013      	b.n	800500a <UART_SetConfig+0xf2>
 8004fe2:	231f      	movs	r3, #31
 8004fe4:	18fb      	adds	r3, r7, r3
 8004fe6:	2210      	movs	r2, #16
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	e00d      	b.n	800500a <UART_SetConfig+0xf2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a88      	ldr	r2, [pc, #544]	; (8005214 <UART_SetConfig+0x2fc>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d104      	bne.n	8005002 <UART_SetConfig+0xea>
 8004ff8:	231f      	movs	r3, #31
 8004ffa:	18fb      	adds	r3, r7, r3
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	701a      	strb	r2, [r3, #0]
 8005000:	e003      	b.n	800500a <UART_SetConfig+0xf2>
 8005002:	231f      	movs	r3, #31
 8005004:	18fb      	adds	r3, r7, r3
 8005006:	2210      	movs	r2, #16
 8005008:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69da      	ldr	r2, [r3, #28]
 800500e:	2380      	movs	r3, #128	; 0x80
 8005010:	021b      	lsls	r3, r3, #8
 8005012:	429a      	cmp	r2, r3
 8005014:	d000      	beq.n	8005018 <UART_SetConfig+0x100>
 8005016:	e07d      	b.n	8005114 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8005018:	231f      	movs	r3, #31
 800501a:	18fb      	adds	r3, r7, r3
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b02      	cmp	r3, #2
 8005020:	d01c      	beq.n	800505c <UART_SetConfig+0x144>
 8005022:	dc02      	bgt.n	800502a <UART_SetConfig+0x112>
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <UART_SetConfig+0x11c>
 8005028:	e04b      	b.n	80050c2 <UART_SetConfig+0x1aa>
 800502a:	2b04      	cmp	r3, #4
 800502c:	d025      	beq.n	800507a <UART_SetConfig+0x162>
 800502e:	2b08      	cmp	r3, #8
 8005030:	d037      	beq.n	80050a2 <UART_SetConfig+0x18a>
 8005032:	e046      	b.n	80050c2 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005034:	f7fe ff80 	bl	8003f38 <HAL_RCC_GetPCLK1Freq>
 8005038:	0003      	movs	r3, r0
 800503a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	005a      	lsls	r2, r3, #1
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	085b      	lsrs	r3, r3, #1
 8005046:	18d2      	adds	r2, r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	0019      	movs	r1, r3
 800504e:	0010      	movs	r0, r2
 8005050:	f7fb f86c 	bl	800012c <__udivsi3>
 8005054:	0003      	movs	r3, r0
 8005056:	b29b      	uxth	r3, r3
 8005058:	61bb      	str	r3, [r7, #24]
        break;
 800505a:	e037      	b.n	80050cc <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	085b      	lsrs	r3, r3, #1
 8005062:	4a6d      	ldr	r2, [pc, #436]	; (8005218 <UART_SetConfig+0x300>)
 8005064:	189a      	adds	r2, r3, r2
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	0019      	movs	r1, r3
 800506c:	0010      	movs	r0, r2
 800506e:	f7fb f85d 	bl	800012c <__udivsi3>
 8005072:	0003      	movs	r3, r0
 8005074:	b29b      	uxth	r3, r3
 8005076:	61bb      	str	r3, [r7, #24]
        break;
 8005078:	e028      	b.n	80050cc <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800507a:	f7fe feef 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 800507e:	0003      	movs	r3, r0
 8005080:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	005a      	lsls	r2, r3, #1
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	085b      	lsrs	r3, r3, #1
 800508c:	18d2      	adds	r2, r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	0019      	movs	r1, r3
 8005094:	0010      	movs	r0, r2
 8005096:	f7fb f849 	bl	800012c <__udivsi3>
 800509a:	0003      	movs	r3, r0
 800509c:	b29b      	uxth	r3, r3
 800509e:	61bb      	str	r3, [r7, #24]
        break;
 80050a0:	e014      	b.n	80050cc <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	085b      	lsrs	r3, r3, #1
 80050a8:	2280      	movs	r2, #128	; 0x80
 80050aa:	0252      	lsls	r2, r2, #9
 80050ac:	189a      	adds	r2, r3, r2
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	0019      	movs	r1, r3
 80050b4:	0010      	movs	r0, r2
 80050b6:	f7fb f839 	bl	800012c <__udivsi3>
 80050ba:	0003      	movs	r3, r0
 80050bc:	b29b      	uxth	r3, r3
 80050be:	61bb      	str	r3, [r7, #24]
        break;
 80050c0:	e004      	b.n	80050cc <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 80050c2:	2317      	movs	r3, #23
 80050c4:	18fb      	adds	r3, r7, r3
 80050c6:	2201      	movs	r2, #1
 80050c8:	701a      	strb	r2, [r3, #0]
        break;
 80050ca:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b0f      	cmp	r3, #15
 80050d0:	d91b      	bls.n	800510a <UART_SetConfig+0x1f2>
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	4a51      	ldr	r2, [pc, #324]	; (800521c <UART_SetConfig+0x304>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d817      	bhi.n	800510a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	b29a      	uxth	r2, r3
 80050de:	200a      	movs	r0, #10
 80050e0:	183b      	adds	r3, r7, r0
 80050e2:	210f      	movs	r1, #15
 80050e4:	438a      	bics	r2, r1
 80050e6:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	085b      	lsrs	r3, r3, #1
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2207      	movs	r2, #7
 80050f0:	4013      	ands	r3, r2
 80050f2:	b299      	uxth	r1, r3
 80050f4:	183b      	adds	r3, r7, r0
 80050f6:	183a      	adds	r2, r7, r0
 80050f8:	8812      	ldrh	r2, [r2, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	183a      	adds	r2, r7, r0
 8005104:	8812      	ldrh	r2, [r2, #0]
 8005106:	60da      	str	r2, [r3, #12]
 8005108:	e06c      	b.n	80051e4 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800510a:	2317      	movs	r3, #23
 800510c:	18fb      	adds	r3, r7, r3
 800510e:	2201      	movs	r2, #1
 8005110:	701a      	strb	r2, [r3, #0]
 8005112:	e067      	b.n	80051e4 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8005114:	231f      	movs	r3, #31
 8005116:	18fb      	adds	r3, r7, r3
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b02      	cmp	r3, #2
 800511c:	d01b      	beq.n	8005156 <UART_SetConfig+0x23e>
 800511e:	dc02      	bgt.n	8005126 <UART_SetConfig+0x20e>
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <UART_SetConfig+0x218>
 8005124:	e049      	b.n	80051ba <UART_SetConfig+0x2a2>
 8005126:	2b04      	cmp	r3, #4
 8005128:	d024      	beq.n	8005174 <UART_SetConfig+0x25c>
 800512a:	2b08      	cmp	r3, #8
 800512c:	d035      	beq.n	800519a <UART_SetConfig+0x282>
 800512e:	e044      	b.n	80051ba <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005130:	f7fe ff02 	bl	8003f38 <HAL_RCC_GetPCLK1Freq>
 8005134:	0003      	movs	r3, r0
 8005136:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	085a      	lsrs	r2, r3, #1
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	18d2      	adds	r2, r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	0019      	movs	r1, r3
 8005148:	0010      	movs	r0, r2
 800514a:	f7fa ffef 	bl	800012c <__udivsi3>
 800514e:	0003      	movs	r3, r0
 8005150:	b29b      	uxth	r3, r3
 8005152:	61bb      	str	r3, [r7, #24]
        break;
 8005154:	e036      	b.n	80051c4 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	085b      	lsrs	r3, r3, #1
 800515c:	4a30      	ldr	r2, [pc, #192]	; (8005220 <UART_SetConfig+0x308>)
 800515e:	189a      	adds	r2, r3, r2
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	0019      	movs	r1, r3
 8005166:	0010      	movs	r0, r2
 8005168:	f7fa ffe0 	bl	800012c <__udivsi3>
 800516c:	0003      	movs	r3, r0
 800516e:	b29b      	uxth	r3, r3
 8005170:	61bb      	str	r3, [r7, #24]
        break;
 8005172:	e027      	b.n	80051c4 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005174:	f7fe fe72 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 8005178:	0003      	movs	r3, r0
 800517a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	085a      	lsrs	r2, r3, #1
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	18d2      	adds	r2, r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	0019      	movs	r1, r3
 800518c:	0010      	movs	r0, r2
 800518e:	f7fa ffcd 	bl	800012c <__udivsi3>
 8005192:	0003      	movs	r3, r0
 8005194:	b29b      	uxth	r3, r3
 8005196:	61bb      	str	r3, [r7, #24]
        break;
 8005198:	e014      	b.n	80051c4 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	085b      	lsrs	r3, r3, #1
 80051a0:	2280      	movs	r2, #128	; 0x80
 80051a2:	0212      	lsls	r2, r2, #8
 80051a4:	189a      	adds	r2, r3, r2
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	0019      	movs	r1, r3
 80051ac:	0010      	movs	r0, r2
 80051ae:	f7fa ffbd 	bl	800012c <__udivsi3>
 80051b2:	0003      	movs	r3, r0
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	61bb      	str	r3, [r7, #24]
        break;
 80051b8:	e004      	b.n	80051c4 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 80051ba:	2317      	movs	r3, #23
 80051bc:	18fb      	adds	r3, r7, r3
 80051be:	2201      	movs	r2, #1
 80051c0:	701a      	strb	r2, [r3, #0]
        break;
 80051c2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	2b0f      	cmp	r3, #15
 80051c8:	d908      	bls.n	80051dc <UART_SetConfig+0x2c4>
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	4a13      	ldr	r2, [pc, #76]	; (800521c <UART_SetConfig+0x304>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d804      	bhi.n	80051dc <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	60da      	str	r2, [r3, #12]
 80051da:	e003      	b.n	80051e4 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80051dc:	2317      	movs	r3, #23
 80051de:	18fb      	adds	r3, r7, r3
 80051e0:	2201      	movs	r2, #1
 80051e2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80051f0:	2317      	movs	r3, #23
 80051f2:	18fb      	adds	r3, r7, r3
 80051f4:	781b      	ldrb	r3, [r3, #0]
}
 80051f6:	0018      	movs	r0, r3
 80051f8:	46bd      	mov	sp, r7
 80051fa:	b008      	add	sp, #32
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	ffff69f3 	.word	0xffff69f3
 8005204:	ffffcfff 	.word	0xffffcfff
 8005208:	fffff4ff 	.word	0xfffff4ff
 800520c:	40013800 	.word	0x40013800
 8005210:	40021000 	.word	0x40021000
 8005214:	40004400 	.word	0x40004400
 8005218:	00f42400 	.word	0x00f42400
 800521c:	0000ffff 	.word	0x0000ffff
 8005220:	007a1200 	.word	0x007a1200

08005224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	2201      	movs	r2, #1
 8005232:	4013      	ands	r3, r2
 8005234:	d00b      	beq.n	800524e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	4a4a      	ldr	r2, [pc, #296]	; (8005368 <UART_AdvFeatureConfig+0x144>)
 800523e:	4013      	ands	r3, r2
 8005240:	0019      	movs	r1, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	2202      	movs	r2, #2
 8005254:	4013      	ands	r3, r2
 8005256:	d00b      	beq.n	8005270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	4a43      	ldr	r2, [pc, #268]	; (800536c <UART_AdvFeatureConfig+0x148>)
 8005260:	4013      	ands	r3, r2
 8005262:	0019      	movs	r1, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	2204      	movs	r2, #4
 8005276:	4013      	ands	r3, r2
 8005278:	d00b      	beq.n	8005292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	4a3b      	ldr	r2, [pc, #236]	; (8005370 <UART_AdvFeatureConfig+0x14c>)
 8005282:	4013      	ands	r3, r2
 8005284:	0019      	movs	r1, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	2208      	movs	r2, #8
 8005298:	4013      	ands	r3, r2
 800529a:	d00b      	beq.n	80052b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	4a34      	ldr	r2, [pc, #208]	; (8005374 <UART_AdvFeatureConfig+0x150>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	0019      	movs	r1, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	2210      	movs	r2, #16
 80052ba:	4013      	ands	r3, r2
 80052bc:	d00b      	beq.n	80052d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	4a2c      	ldr	r2, [pc, #176]	; (8005378 <UART_AdvFeatureConfig+0x154>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	0019      	movs	r1, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	2220      	movs	r2, #32
 80052dc:	4013      	ands	r3, r2
 80052de:	d00b      	beq.n	80052f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	4a25      	ldr	r2, [pc, #148]	; (800537c <UART_AdvFeatureConfig+0x158>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	0019      	movs	r1, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	2240      	movs	r2, #64	; 0x40
 80052fe:	4013      	ands	r3, r2
 8005300:	d01d      	beq.n	800533e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	4a1d      	ldr	r2, [pc, #116]	; (8005380 <UART_AdvFeatureConfig+0x15c>)
 800530a:	4013      	ands	r3, r2
 800530c:	0019      	movs	r1, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800531e:	2380      	movs	r3, #128	; 0x80
 8005320:	035b      	lsls	r3, r3, #13
 8005322:	429a      	cmp	r2, r3
 8005324:	d10b      	bne.n	800533e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	4a15      	ldr	r2, [pc, #84]	; (8005384 <UART_AdvFeatureConfig+0x160>)
 800532e:	4013      	ands	r3, r2
 8005330:	0019      	movs	r1, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	2280      	movs	r2, #128	; 0x80
 8005344:	4013      	ands	r3, r2
 8005346:	d00b      	beq.n	8005360 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	4a0e      	ldr	r2, [pc, #56]	; (8005388 <UART_AdvFeatureConfig+0x164>)
 8005350:	4013      	ands	r3, r2
 8005352:	0019      	movs	r1, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	605a      	str	r2, [r3, #4]
  }
}
 8005360:	46c0      	nop			; (mov r8, r8)
 8005362:	46bd      	mov	sp, r7
 8005364:	b002      	add	sp, #8
 8005366:	bd80      	pop	{r7, pc}
 8005368:	fffdffff 	.word	0xfffdffff
 800536c:	fffeffff 	.word	0xfffeffff
 8005370:	fffbffff 	.word	0xfffbffff
 8005374:	ffff7fff 	.word	0xffff7fff
 8005378:	ffffefff 	.word	0xffffefff
 800537c:	ffffdfff 	.word	0xffffdfff
 8005380:	ffefffff 	.word	0xffefffff
 8005384:	ff9fffff 	.word	0xff9fffff
 8005388:	fff7ffff 	.word	0xfff7ffff

0800538c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af02      	add	r7, sp, #8
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800539a:	f7fd fb85 	bl	8002aa8 <HAL_GetTick>
 800539e:	0003      	movs	r3, r0
 80053a0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2208      	movs	r2, #8
 80053aa:	4013      	ands	r3, r2
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d10d      	bne.n	80053cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	2380      	movs	r3, #128	; 0x80
 80053b4:	0399      	lsls	r1, r3, #14
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	4b16      	ldr	r3, [pc, #88]	; (8005414 <UART_CheckIdleState+0x88>)
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	0013      	movs	r3, r2
 80053be:	2200      	movs	r2, #0
 80053c0:	f000 f82a 	bl	8005418 <UART_WaitOnFlagUntilTimeout>
 80053c4:	1e03      	subs	r3, r0, #0
 80053c6:	d001      	beq.n	80053cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e01f      	b.n	800540c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2204      	movs	r2, #4
 80053d4:	4013      	ands	r3, r2
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d10d      	bne.n	80053f6 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	2380      	movs	r3, #128	; 0x80
 80053de:	03d9      	lsls	r1, r3, #15
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	4b0c      	ldr	r3, [pc, #48]	; (8005414 <UART_CheckIdleState+0x88>)
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	0013      	movs	r3, r2
 80053e8:	2200      	movs	r2, #0
 80053ea:	f000 f815 	bl	8005418 <UART_WaitOnFlagUntilTimeout>
 80053ee:	1e03      	subs	r3, r0, #0
 80053f0:	d001      	beq.n	80053f6 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e00a      	b.n	800540c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2220      	movs	r2, #32
 80053fa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2220      	movs	r2, #32
 8005400:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2270      	movs	r2, #112	; 0x70
 8005406:	2100      	movs	r1, #0
 8005408:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	0018      	movs	r0, r3
 800540e:	46bd      	mov	sp, r7
 8005410:	b004      	add	sp, #16
 8005412:	bd80      	pop	{r7, pc}
 8005414:	01ffffff 	.word	0x01ffffff

08005418 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	1dfb      	adds	r3, r7, #7
 8005426:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005428:	e05d      	b.n	80054e6 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	3301      	adds	r3, #1
 800542e:	d05a      	beq.n	80054e6 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005430:	f7fd fb3a 	bl	8002aa8 <HAL_GetTick>
 8005434:	0002      	movs	r2, r0
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	429a      	cmp	r2, r3
 800543e:	d302      	bcc.n	8005446 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d11b      	bne.n	800547e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	492f      	ldr	r1, [pc, #188]	; (8005510 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005452:	400a      	ands	r2, r1
 8005454:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2101      	movs	r1, #1
 8005462:	438a      	bics	r2, r1
 8005464:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2220      	movs	r2, #32
 800546a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2270      	movs	r2, #112	; 0x70
 8005476:	2100      	movs	r1, #0
 8005478:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e043      	b.n	8005506 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2204      	movs	r2, #4
 8005486:	4013      	ands	r3, r2
 8005488:	d02d      	beq.n	80054e6 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69da      	ldr	r2, [r3, #28]
 8005490:	2380      	movs	r3, #128	; 0x80
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	401a      	ands	r2, r3
 8005496:	2380      	movs	r3, #128	; 0x80
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	429a      	cmp	r2, r3
 800549c:	d123      	bne.n	80054e6 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2280      	movs	r2, #128	; 0x80
 80054a4:	0112      	lsls	r2, r2, #4
 80054a6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4917      	ldr	r1, [pc, #92]	; (8005510 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80054b4:	400a      	ands	r2, r1
 80054b6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689a      	ldr	r2, [r3, #8]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2101      	movs	r1, #1
 80054c4:	438a      	bics	r2, r1
 80054c6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2220      	movs	r2, #32
 80054d2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2270      	movs	r2, #112	; 0x70
 80054de:	2100      	movs	r1, #0
 80054e0:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e00f      	b.n	8005506 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	4013      	ands	r3, r2
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	425a      	negs	r2, r3
 80054f6:	4153      	adcs	r3, r2
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	001a      	movs	r2, r3
 80054fc:	1dfb      	adds	r3, r7, #7
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	429a      	cmp	r2, r3
 8005502:	d092      	beq.n	800542a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	0018      	movs	r0, r3
 8005508:	46bd      	mov	sp, r7
 800550a:	b004      	add	sp, #16
 800550c:	bd80      	pop	{r7, pc}
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	fffffe5f 	.word	0xfffffe5f

08005514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	490a      	ldr	r1, [pc, #40]	; (8005550 <UART_EndRxTransfer+0x3c>)
 8005528:	400a      	ands	r2, r1
 800552a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689a      	ldr	r2, [r3, #8]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2101      	movs	r1, #1
 8005538:	438a      	bics	r2, r1
 800553a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2220      	movs	r2, #32
 8005540:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005548:	46c0      	nop			; (mov r8, r8)
 800554a:	46bd      	mov	sp, r7
 800554c:	b002      	add	sp, #8
 800554e:	bd80      	pop	{r7, pc}
 8005550:	fffffedf 	.word	0xfffffedf

08005554 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	225a      	movs	r2, #90	; 0x5a
 8005566:	2100      	movs	r1, #0
 8005568:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2252      	movs	r2, #82	; 0x52
 800556e:	2100      	movs	r1, #0
 8005570:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	0018      	movs	r0, r3
 8005576:	f7ff fcc7 	bl	8004f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800557a:	46c0      	nop			; (mov r8, r8)
 800557c:	46bd      	mov	sp, r7
 800557e:	b004      	add	sp, #16
 8005580:	bd80      	pop	{r7, pc}

08005582 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2140      	movs	r1, #64	; 0x40
 8005596:	438a      	bics	r2, r1
 8005598:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2220      	movs	r2, #32
 800559e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	0018      	movs	r0, r3
 80055aa:	f7ff fca5 	bl	8004ef8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	46bd      	mov	sp, r7
 80055b2:	b002      	add	sp, #8
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	0002      	movs	r2, r0
 80055be:	1dbb      	adds	r3, r7, #6
 80055c0:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80055c2:	2300      	movs	r3, #0
 80055c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80055c6:	1dbb      	adds	r3, r7, #6
 80055c8:	2200      	movs	r2, #0
 80055ca:	5e9b      	ldrsh	r3, [r3, r2]
 80055cc:	2b84      	cmp	r3, #132	; 0x84
 80055ce:	d006      	beq.n	80055de <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80055d0:	1dbb      	adds	r3, r7, #6
 80055d2:	2200      	movs	r2, #0
 80055d4:	5e9a      	ldrsh	r2, [r3, r2]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	18d3      	adds	r3, r2, r3
 80055da:	3303      	adds	r3, #3
 80055dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80055de:	68fb      	ldr	r3, [r7, #12]
}
 80055e0:	0018      	movs	r0, r3
 80055e2:	46bd      	mov	sp, r7
 80055e4:	b004      	add	sp, #16
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80055ec:	f000 faa2 	bl	8005b34 <vTaskStartScheduler>
  
  return osOK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	0018      	movs	r0, r3
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80055f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055fa:	b089      	sub	sp, #36	; 0x24
 80055fc:	af04      	add	r7, sp, #16
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d020      	beq.n	800564c <osThreadCreate+0x54>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d01c      	beq.n	800564c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685c      	ldr	r4, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681d      	ldr	r5, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691e      	ldr	r6, [r3, #16]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2208      	movs	r2, #8
 8005622:	5e9b      	ldrsh	r3, [r3, r2]
 8005624:	0018      	movs	r0, r3
 8005626:	f7ff ffc6 	bl	80055b6 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695a      	ldr	r2, [r3, #20]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005632:	6839      	ldr	r1, [r7, #0]
 8005634:	9302      	str	r3, [sp, #8]
 8005636:	9201      	str	r2, [sp, #4]
 8005638:	9000      	str	r0, [sp, #0]
 800563a:	000b      	movs	r3, r1
 800563c:	0032      	movs	r2, r6
 800563e:	0029      	movs	r1, r5
 8005640:	0020      	movs	r0, r4
 8005642:	f000 f8e3 	bl	800580c <xTaskCreateStatic>
 8005646:	0003      	movs	r3, r0
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	e01d      	b.n	8005688 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685c      	ldr	r4, [r3, #4]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005658:	b29e      	uxth	r6, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2208      	movs	r2, #8
 800565e:	5e9b      	ldrsh	r3, [r3, r2]
 8005660:	0018      	movs	r0, r3
 8005662:	f7ff ffa8 	bl	80055b6 <makeFreeRtosPriority>
 8005666:	0001      	movs	r1, r0
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	230c      	movs	r3, #12
 800566c:	18fb      	adds	r3, r7, r3
 800566e:	9301      	str	r3, [sp, #4]
 8005670:	9100      	str	r1, [sp, #0]
 8005672:	0013      	movs	r3, r2
 8005674:	0032      	movs	r2, r6
 8005676:	0029      	movs	r1, r5
 8005678:	0020      	movs	r0, r4
 800567a:	f000 f90a 	bl	8005892 <xTaskCreate>
 800567e:	0003      	movs	r3, r0
 8005680:	2b01      	cmp	r3, #1
 8005682:	d001      	beq.n	8005688 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8005684:	2300      	movs	r3, #0
 8005686:	e000      	b.n	800568a <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005688:	68fb      	ldr	r3, [r7, #12]
}
 800568a:	0018      	movs	r0, r3
 800568c:	46bd      	mov	sp, r7
 800568e:	b005      	add	sp, #20
 8005690:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005692 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <osDelay+0x16>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	e000      	b.n	80056aa <osDelay+0x18>
 80056a8:	2301      	movs	r3, #1
 80056aa:	0018      	movs	r0, r3
 80056ac:	f000 fa1c 	bl	8005ae8 <vTaskDelay>
  
  return osOK;
 80056b0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80056b2:	0018      	movs	r0, r3
 80056b4:	46bd      	mov	sp, r7
 80056b6:	b004      	add	sp, #16
 80056b8:	bd80      	pop	{r7, pc}

080056ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b082      	sub	sp, #8
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	3308      	adds	r3, #8
 80056c6:	001a      	movs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	4252      	negs	r2, r2
 80056d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3308      	adds	r3, #8
 80056d8:	001a      	movs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3308      	adds	r3, #8
 80056e2:	001a      	movs	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	46bd      	mov	sp, r7
 80056f2:	b002      	add	sp, #8
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b082      	sub	sp, #8
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005704:	46c0      	nop			; (mov r8, r8)
 8005706:	46bd      	mov	sp, r7
 8005708:	b002      	add	sp, #8
 800570a:	bd80      	pop	{r7, pc}

0800570c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	601a      	str	r2, [r3, #0]
}
 8005748:	46c0      	nop			; (mov r8, r8)
 800574a:	46bd      	mov	sp, r7
 800574c:	b004      	add	sp, #16
 800574e:	bd80      	pop	{r7, pc}

08005750 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	3301      	adds	r3, #1
 8005764:	d103      	bne.n	800576e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	e00c      	b.n	8005788 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	3308      	adds	r3, #8
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	e002      	b.n	800577c <vListInsert+0x2c>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	429a      	cmp	r2, r3
 8005786:	d2f6      	bcs.n	8005776 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	601a      	str	r2, [r3, #0]
}
 80057b4:	46c0      	nop			; (mov r8, r8)
 80057b6:	46bd      	mov	sp, r7
 80057b8:	b004      	add	sp, #16
 80057ba:	bd80      	pop	{r7, pc}

080057bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6892      	ldr	r2, [r2, #8]
 80057d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6852      	ldr	r2, [r2, #4]
 80057dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d103      	bne.n	80057f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	1e5a      	subs	r2, r3, #1
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
}
 8005804:	0018      	movs	r0, r3
 8005806:	46bd      	mov	sp, r7
 8005808:	b004      	add	sp, #16
 800580a:	bd80      	pop	{r7, pc}

0800580c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800580c:	b590      	push	{r4, r7, lr}
 800580e:	b08d      	sub	sp, #52	; 0x34
 8005810:	af04      	add	r7, sp, #16
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800581a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <xTaskCreateStatic+0x18>
 8005820:	b672      	cpsid	i
 8005822:	e7fe      	b.n	8005822 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <xTaskCreateStatic+0x22>
 800582a:	b672      	cpsid	i
 800582c:	e7fe      	b.n	800582c <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800582e:	2354      	movs	r3, #84	; 0x54
 8005830:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2b54      	cmp	r3, #84	; 0x54
 8005836:	d001      	beq.n	800583c <xTaskCreateStatic+0x30>
 8005838:	b672      	cpsid	i
 800583a:	e7fe      	b.n	800583a <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800583c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583e:	2b00      	cmp	r3, #0
 8005840:	d020      	beq.n	8005884 <xTaskCreateStatic+0x78>
 8005842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005844:	2b00      	cmp	r3, #0
 8005846:	d01d      	beq.n	8005884 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584a:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005850:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	2251      	movs	r2, #81	; 0x51
 8005856:	2102      	movs	r1, #2
 8005858:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800585a:	683c      	ldr	r4, [r7, #0]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	2300      	movs	r3, #0
 8005864:	9303      	str	r3, [sp, #12]
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	9302      	str	r3, [sp, #8]
 800586a:	2318      	movs	r3, #24
 800586c:	18fb      	adds	r3, r7, r3
 800586e:	9301      	str	r3, [sp, #4]
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	0023      	movs	r3, r4
 8005876:	f000 f859 	bl	800592c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	0018      	movs	r0, r3
 800587e:	f000 f8cf 	bl	8005a20 <prvAddNewTaskToReadyList>
 8005882:	e001      	b.n	8005888 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8005884:	2300      	movs	r3, #0
 8005886:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005888:	69bb      	ldr	r3, [r7, #24]
	}
 800588a:	0018      	movs	r0, r3
 800588c:	46bd      	mov	sp, r7
 800588e:	b009      	add	sp, #36	; 0x24
 8005890:	bd90      	pop	{r4, r7, pc}

08005892 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005892:	b590      	push	{r4, r7, lr}
 8005894:	b08d      	sub	sp, #52	; 0x34
 8005896:	af04      	add	r7, sp, #16
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	603b      	str	r3, [r7, #0]
 800589e:	1dbb      	adds	r3, r7, #6
 80058a0:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058a2:	1dbb      	adds	r3, r7, #6
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	0018      	movs	r0, r3
 80058aa:	f000 fd81 	bl	80063b0 <pvPortMalloc>
 80058ae:	0003      	movs	r3, r0
 80058b0:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d010      	beq.n	80058da <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80058b8:	2054      	movs	r0, #84	; 0x54
 80058ba:	f000 fd79 	bl	80063b0 <pvPortMalloc>
 80058be:	0003      	movs	r3, r0
 80058c0:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	631a      	str	r2, [r3, #48]	; 0x30
 80058ce:	e006      	b.n	80058de <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	0018      	movs	r0, r3
 80058d4:	f000 fe12 	bl	80064fc <vPortFree>
 80058d8:	e001      	b.n	80058de <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d01a      	beq.n	800591a <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	2251      	movs	r2, #81	; 0x51
 80058e8:	2100      	movs	r1, #0
 80058ea:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058ec:	1dbb      	adds	r3, r7, #6
 80058ee:	881a      	ldrh	r2, [r3, #0]
 80058f0:	683c      	ldr	r4, [r7, #0]
 80058f2:	68b9      	ldr	r1, [r7, #8]
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	2300      	movs	r3, #0
 80058f8:	9303      	str	r3, [sp, #12]
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	9302      	str	r3, [sp, #8]
 80058fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005900:	9301      	str	r3, [sp, #4]
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	0023      	movs	r3, r4
 8005908:	f000 f810 	bl	800592c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	0018      	movs	r0, r3
 8005910:	f000 f886 	bl	8005a20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005914:	2301      	movs	r3, #1
 8005916:	61bb      	str	r3, [r7, #24]
 8005918:	e002      	b.n	8005920 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800591a:	2301      	movs	r3, #1
 800591c:	425b      	negs	r3, r3
 800591e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005920:	69bb      	ldr	r3, [r7, #24]
	}
 8005922:	0018      	movs	r0, r3
 8005924:	46bd      	mov	sp, r7
 8005926:	b009      	add	sp, #36	; 0x24
 8005928:	bd90      	pop	{r4, r7, pc}
	...

0800592c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800593a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4936      	ldr	r1, [pc, #216]	; (8005a1c <prvInitialiseNewTask+0xf0>)
 8005942:	468c      	mov	ip, r1
 8005944:	4463      	add	r3, ip
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	18d3      	adds	r3, r2, r3
 800594a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	2207      	movs	r2, #7
 8005950:	4393      	bics	r3, r2
 8005952:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	2207      	movs	r2, #7
 8005958:	4013      	ands	r3, r2
 800595a:	d001      	beq.n	8005960 <prvInitialiseNewTask+0x34>
 800595c:	b672      	cpsid	i
 800595e:	e7fe      	b.n	800595e <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005960:	2300      	movs	r3, #0
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	e013      	b.n	800598e <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	18d3      	adds	r3, r2, r3
 800596c:	7818      	ldrb	r0, [r3, #0]
 800596e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005970:	2134      	movs	r1, #52	; 0x34
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	18d3      	adds	r3, r2, r3
 8005976:	185b      	adds	r3, r3, r1
 8005978:	1c02      	adds	r2, r0, #0
 800597a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	18d3      	adds	r3, r2, r3
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d006      	beq.n	8005996 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	3301      	adds	r3, #1
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2b0f      	cmp	r3, #15
 8005992:	d9e8      	bls.n	8005966 <prvInitialiseNewTask+0x3a>
 8005994:	e000      	b.n	8005998 <prvInitialiseNewTask+0x6c>
		{
			break;
 8005996:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	2243      	movs	r2, #67	; 0x43
 800599c:	2100      	movs	r1, #0
 800599e:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	2b06      	cmp	r3, #6
 80059a4:	d901      	bls.n	80059aa <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059a6:	2306      	movs	r3, #6
 80059a8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	6a3a      	ldr	r2, [r7, #32]
 80059ae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	6a3a      	ldr	r2, [r7, #32]
 80059b4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	2200      	movs	r2, #0
 80059ba:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059be:	3304      	adds	r3, #4
 80059c0:	0018      	movs	r0, r3
 80059c2:	f7ff fe98 	bl	80056f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c8:	3318      	adds	r3, #24
 80059ca:	0018      	movs	r0, r3
 80059cc:	f7ff fe93 	bl	80056f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	2207      	movs	r2, #7
 80059da:	1ad2      	subs	r2, r2, r3
 80059dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059e4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	2200      	movs	r2, #0
 80059ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	2250      	movs	r2, #80	; 0x50
 80059f0:	2100      	movs	r1, #0
 80059f2:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	68f9      	ldr	r1, [r7, #12]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	0018      	movs	r0, r3
 80059fc:	f000 fba8 	bl	8006150 <pxPortInitialiseStack>
 8005a00:	0002      	movs	r2, r0
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	46bd      	mov	sp, r7
 8005a16:	b006      	add	sp, #24
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	3fffffff 	.word	0x3fffffff

08005a20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a28:	f000 fc2a 	bl	8006280 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a2c:	4b28      	ldr	r3, [pc, #160]	; (8005ad0 <prvAddNewTaskToReadyList+0xb0>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	4b27      	ldr	r3, [pc, #156]	; (8005ad0 <prvAddNewTaskToReadyList+0xb0>)
 8005a34:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005a36:	4b27      	ldr	r3, [pc, #156]	; (8005ad4 <prvAddNewTaskToReadyList+0xb4>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d109      	bne.n	8005a52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a3e:	4b25      	ldr	r3, [pc, #148]	; (8005ad4 <prvAddNewTaskToReadyList+0xb4>)
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a44:	4b22      	ldr	r3, [pc, #136]	; (8005ad0 <prvAddNewTaskToReadyList+0xb0>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d110      	bne.n	8005a6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a4c:	f000 fa6e 	bl	8005f2c <prvInitialiseTaskLists>
 8005a50:	e00d      	b.n	8005a6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a52:	4b21      	ldr	r3, [pc, #132]	; (8005ad8 <prvAddNewTaskToReadyList+0xb8>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d109      	bne.n	8005a6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a5a:	4b1e      	ldr	r3, [pc, #120]	; (8005ad4 <prvAddNewTaskToReadyList+0xb4>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d802      	bhi.n	8005a6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a68:	4b1a      	ldr	r3, [pc, #104]	; (8005ad4 <prvAddNewTaskToReadyList+0xb4>)
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a6e:	4b1b      	ldr	r3, [pc, #108]	; (8005adc <prvAddNewTaskToReadyList+0xbc>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	4b19      	ldr	r3, [pc, #100]	; (8005adc <prvAddNewTaskToReadyList+0xbc>)
 8005a76:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7c:	4b18      	ldr	r3, [pc, #96]	; (8005ae0 <prvAddNewTaskToReadyList+0xc0>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d903      	bls.n	8005a8c <prvAddNewTaskToReadyList+0x6c>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a88:	4b15      	ldr	r3, [pc, #84]	; (8005ae0 <prvAddNewTaskToReadyList+0xc0>)
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a90:	0013      	movs	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	189b      	adds	r3, r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4a12      	ldr	r2, [pc, #72]	; (8005ae4 <prvAddNewTaskToReadyList+0xc4>)
 8005a9a:	189a      	adds	r2, r3, r2
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	0019      	movs	r1, r3
 8005aa2:	0010      	movs	r0, r2
 8005aa4:	f7ff fe32 	bl	800570c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005aa8:	f000 fbfc 	bl	80062a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005aac:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <prvAddNewTaskToReadyList+0xb8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d008      	beq.n	8005ac6 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ab4:	4b07      	ldr	r3, [pc, #28]	; (8005ad4 <prvAddNewTaskToReadyList+0xb4>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d201      	bcs.n	8005ac6 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ac2:	f000 fbcd 	bl	8006260 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ac6:	46c0      	nop			; (mov r8, r8)
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	b002      	add	sp, #8
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	46c0      	nop			; (mov r8, r8)
 8005ad0:	20000550 	.word	0x20000550
 8005ad4:	20000450 	.word	0x20000450
 8005ad8:	2000055c 	.word	0x2000055c
 8005adc:	2000056c 	.word	0x2000056c
 8005ae0:	20000558 	.word	0x20000558
 8005ae4:	20000454 	.word	0x20000454

08005ae8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d010      	beq.n	8005b1c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005afa:	4b0d      	ldr	r3, [pc, #52]	; (8005b30 <vTaskDelay+0x48>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <vTaskDelay+0x1e>
 8005b02:	b672      	cpsid	i
 8005b04:	e7fe      	b.n	8005b04 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005b06:	f000 f863 	bl	8005bd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	0018      	movs	r0, r3
 8005b10:	f000 faca 	bl	80060a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b14:	f000 f868 	bl	8005be8 <xTaskResumeAll>
 8005b18:	0003      	movs	r3, r0
 8005b1a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8005b22:	f000 fb9d 	bl	8006260 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b26:	46c0      	nop			; (mov r8, r8)
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	b004      	add	sp, #16
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	46c0      	nop			; (mov r8, r8)
 8005b30:	20000578 	.word	0x20000578

08005b34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b34:	b590      	push	{r4, r7, lr}
 8005b36:	b089      	sub	sp, #36	; 0x24
 8005b38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b42:	003a      	movs	r2, r7
 8005b44:	1d39      	adds	r1, r7, #4
 8005b46:	2308      	movs	r3, #8
 8005b48:	18fb      	adds	r3, r7, r3
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	f7fc fa5e 	bl	800200c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b50:	683c      	ldr	r4, [r7, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	4918      	ldr	r1, [pc, #96]	; (8005bb8 <vTaskStartScheduler+0x84>)
 8005b58:	4818      	ldr	r0, [pc, #96]	; (8005bbc <vTaskStartScheduler+0x88>)
 8005b5a:	9202      	str	r2, [sp, #8]
 8005b5c:	9301      	str	r3, [sp, #4]
 8005b5e:	2300      	movs	r3, #0
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	2300      	movs	r3, #0
 8005b64:	0022      	movs	r2, r4
 8005b66:	f7ff fe51 	bl	800580c <xTaskCreateStatic>
 8005b6a:	0002      	movs	r2, r0
 8005b6c:	4b14      	ldr	r3, [pc, #80]	; (8005bc0 <vTaskStartScheduler+0x8c>)
 8005b6e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b70:	4b13      	ldr	r3, [pc, #76]	; (8005bc0 <vTaskStartScheduler+0x8c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	e001      	b.n	8005b82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d10d      	bne.n	8005ba4 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005b88:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b8a:	4b0e      	ldr	r3, [pc, #56]	; (8005bc4 <vTaskStartScheduler+0x90>)
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	4252      	negs	r2, r2
 8005b90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b92:	4b0d      	ldr	r3, [pc, #52]	; (8005bc8 <vTaskStartScheduler+0x94>)
 8005b94:	2201      	movs	r2, #1
 8005b96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005b98:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <vTaskStartScheduler+0x98>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b9e:	f000 fb3b 	bl	8006218 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ba2:	e004      	b.n	8005bae <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	d101      	bne.n	8005bae <vTaskStartScheduler+0x7a>
 8005baa:	b672      	cpsid	i
 8005bac:	e7fe      	b.n	8005bac <vTaskStartScheduler+0x78>
}
 8005bae:	46c0      	nop			; (mov r8, r8)
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	b005      	add	sp, #20
 8005bb4:	bd90      	pop	{r4, r7, pc}
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	08008280 	.word	0x08008280
 8005bbc:	08005f0d 	.word	0x08005f0d
 8005bc0:	20000574 	.word	0x20000574
 8005bc4:	20000570 	.word	0x20000570
 8005bc8:	2000055c 	.word	0x2000055c
 8005bcc:	20000554 	.word	0x20000554

08005bd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005bd4:	4b03      	ldr	r3, [pc, #12]	; (8005be4 <vTaskSuspendAll+0x14>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	4b02      	ldr	r3, [pc, #8]	; (8005be4 <vTaskSuspendAll+0x14>)
 8005bdc:	601a      	str	r2, [r3, #0]
}
 8005bde:	46c0      	nop			; (mov r8, r8)
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	20000578 	.word	0x20000578

08005be8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005bf6:	4b3a      	ldr	r3, [pc, #232]	; (8005ce0 <xTaskResumeAll+0xf8>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <xTaskResumeAll+0x1a>
 8005bfe:	b672      	cpsid	i
 8005c00:	e7fe      	b.n	8005c00 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c02:	f000 fb3d 	bl	8006280 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c06:	4b36      	ldr	r3, [pc, #216]	; (8005ce0 <xTaskResumeAll+0xf8>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	1e5a      	subs	r2, r3, #1
 8005c0c:	4b34      	ldr	r3, [pc, #208]	; (8005ce0 <xTaskResumeAll+0xf8>)
 8005c0e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c10:	4b33      	ldr	r3, [pc, #204]	; (8005ce0 <xTaskResumeAll+0xf8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d15b      	bne.n	8005cd0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c18:	4b32      	ldr	r3, [pc, #200]	; (8005ce4 <xTaskResumeAll+0xfc>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d057      	beq.n	8005cd0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c20:	e02f      	b.n	8005c82 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005c22:	4b31      	ldr	r3, [pc, #196]	; (8005ce8 <xTaskResumeAll+0x100>)
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3318      	adds	r3, #24
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f7ff fdc4 	bl	80057bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3304      	adds	r3, #4
 8005c38:	0018      	movs	r0, r3
 8005c3a:	f7ff fdbf 	bl	80057bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c42:	4b2a      	ldr	r3, [pc, #168]	; (8005cec <xTaskResumeAll+0x104>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d903      	bls.n	8005c52 <xTaskResumeAll+0x6a>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4e:	4b27      	ldr	r3, [pc, #156]	; (8005cec <xTaskResumeAll+0x104>)
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c56:	0013      	movs	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	189b      	adds	r3, r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4a24      	ldr	r2, [pc, #144]	; (8005cf0 <xTaskResumeAll+0x108>)
 8005c60:	189a      	adds	r2, r3, r2
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3304      	adds	r3, #4
 8005c66:	0019      	movs	r1, r3
 8005c68:	0010      	movs	r0, r2
 8005c6a:	f7ff fd4f 	bl	800570c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c72:	4b20      	ldr	r3, [pc, #128]	; (8005cf4 <xTaskResumeAll+0x10c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d302      	bcc.n	8005c82 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8005c7c:	4b1e      	ldr	r3, [pc, #120]	; (8005cf8 <xTaskResumeAll+0x110>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c82:	4b19      	ldr	r3, [pc, #100]	; (8005ce8 <xTaskResumeAll+0x100>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1cb      	bne.n	8005c22 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c90:	f000 f9e6 	bl	8006060 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005c94:	4b19      	ldr	r3, [pc, #100]	; (8005cfc <xTaskResumeAll+0x114>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00f      	beq.n	8005cc0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ca0:	f000 f82e 	bl	8005d00 <xTaskIncrementTick>
 8005ca4:	1e03      	subs	r3, r0, #0
 8005ca6:	d002      	beq.n	8005cae <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8005ca8:	4b13      	ldr	r3, [pc, #76]	; (8005cf8 <xTaskResumeAll+0x110>)
 8005caa:	2201      	movs	r2, #1
 8005cac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1f2      	bne.n	8005ca0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8005cba:	4b10      	ldr	r3, [pc, #64]	; (8005cfc <xTaskResumeAll+0x114>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005cc0:	4b0d      	ldr	r3, [pc, #52]	; (8005cf8 <xTaskResumeAll+0x110>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ccc:	f000 fac8 	bl	8006260 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cd0:	f000 fae8 	bl	80062a4 <vPortExitCritical>

	return xAlreadyYielded;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
}
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	b004      	add	sp, #16
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	20000578 	.word	0x20000578
 8005ce4:	20000550 	.word	0x20000550
 8005ce8:	20000510 	.word	0x20000510
 8005cec:	20000558 	.word	0x20000558
 8005cf0:	20000454 	.word	0x20000454
 8005cf4:	20000450 	.word	0x20000450
 8005cf8:	20000564 	.word	0x20000564
 8005cfc:	20000560 	.word	0x20000560

08005d00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d06:	2300      	movs	r3, #0
 8005d08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d0a:	4b4c      	ldr	r3, [pc, #304]	; (8005e3c <xTaskIncrementTick+0x13c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d000      	beq.n	8005d14 <xTaskIncrementTick+0x14>
 8005d12:	e083      	b.n	8005e1c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d14:	4b4a      	ldr	r3, [pc, #296]	; (8005e40 <xTaskIncrementTick+0x140>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d1c:	4b48      	ldr	r3, [pc, #288]	; (8005e40 <xTaskIncrementTick+0x140>)
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d117      	bne.n	8005d58 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d28:	4b46      	ldr	r3, [pc, #280]	; (8005e44 <xTaskIncrementTick+0x144>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <xTaskIncrementTick+0x36>
 8005d32:	b672      	cpsid	i
 8005d34:	e7fe      	b.n	8005d34 <xTaskIncrementTick+0x34>
 8005d36:	4b43      	ldr	r3, [pc, #268]	; (8005e44 <xTaskIncrementTick+0x144>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	4b42      	ldr	r3, [pc, #264]	; (8005e48 <xTaskIncrementTick+0x148>)
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	4b40      	ldr	r3, [pc, #256]	; (8005e44 <xTaskIncrementTick+0x144>)
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	4b40      	ldr	r3, [pc, #256]	; (8005e48 <xTaskIncrementTick+0x148>)
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	4b40      	ldr	r3, [pc, #256]	; (8005e4c <xTaskIncrementTick+0x14c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	4b3e      	ldr	r3, [pc, #248]	; (8005e4c <xTaskIncrementTick+0x14c>)
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	f000 f984 	bl	8006060 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d58:	4b3d      	ldr	r3, [pc, #244]	; (8005e50 <xTaskIncrementTick+0x150>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d34e      	bcc.n	8005e00 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d62:	4b38      	ldr	r3, [pc, #224]	; (8005e44 <xTaskIncrementTick+0x144>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <xTaskIncrementTick+0x70>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e000      	b.n	8005d72 <xTaskIncrementTick+0x72>
 8005d70:	2300      	movs	r3, #0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d004      	beq.n	8005d80 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d76:	4b36      	ldr	r3, [pc, #216]	; (8005e50 <xTaskIncrementTick+0x150>)
 8005d78:	2201      	movs	r2, #1
 8005d7a:	4252      	negs	r2, r2
 8005d7c:	601a      	str	r2, [r3, #0]
					break;
 8005d7e:	e03f      	b.n	8005e00 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d80:	4b30      	ldr	r3, [pc, #192]	; (8005e44 <xTaskIncrementTick+0x144>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d203      	bcs.n	8005da0 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d98:	4b2d      	ldr	r3, [pc, #180]	; (8005e50 <xTaskIncrementTick+0x150>)
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	601a      	str	r2, [r3, #0]
						break;
 8005d9e:	e02f      	b.n	8005e00 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	3304      	adds	r3, #4
 8005da4:	0018      	movs	r0, r3
 8005da6:	f7ff fd09 	bl	80057bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d004      	beq.n	8005dbc <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	3318      	adds	r3, #24
 8005db6:	0018      	movs	r0, r3
 8005db8:	f7ff fd00 	bl	80057bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc0:	4b24      	ldr	r3, [pc, #144]	; (8005e54 <xTaskIncrementTick+0x154>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d903      	bls.n	8005dd0 <xTaskIncrementTick+0xd0>
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dcc:	4b21      	ldr	r3, [pc, #132]	; (8005e54 <xTaskIncrementTick+0x154>)
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd4:	0013      	movs	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	189b      	adds	r3, r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4a1e      	ldr	r2, [pc, #120]	; (8005e58 <xTaskIncrementTick+0x158>)
 8005dde:	189a      	adds	r2, r3, r2
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	3304      	adds	r3, #4
 8005de4:	0019      	movs	r1, r3
 8005de6:	0010      	movs	r0, r2
 8005de8:	f7ff fc90 	bl	800570c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df0:	4b1a      	ldr	r3, [pc, #104]	; (8005e5c <xTaskIncrementTick+0x15c>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d3b3      	bcc.n	8005d62 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dfe:	e7b0      	b.n	8005d62 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e00:	4b16      	ldr	r3, [pc, #88]	; (8005e5c <xTaskIncrementTick+0x15c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e06:	4914      	ldr	r1, [pc, #80]	; (8005e58 <xTaskIncrementTick+0x158>)
 8005e08:	0013      	movs	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	189b      	adds	r3, r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	585b      	ldr	r3, [r3, r1]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d907      	bls.n	8005e26 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005e16:	2301      	movs	r3, #1
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	e004      	b.n	8005e26 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005e1c:	4b10      	ldr	r3, [pc, #64]	; (8005e60 <xTaskIncrementTick+0x160>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	4b0f      	ldr	r3, [pc, #60]	; (8005e60 <xTaskIncrementTick+0x160>)
 8005e24:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005e26:	4b0f      	ldr	r3, [pc, #60]	; (8005e64 <xTaskIncrementTick+0x164>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005e32:	697b      	ldr	r3, [r7, #20]
}
 8005e34:	0018      	movs	r0, r3
 8005e36:	46bd      	mov	sp, r7
 8005e38:	b006      	add	sp, #24
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	20000578 	.word	0x20000578
 8005e40:	20000554 	.word	0x20000554
 8005e44:	20000508 	.word	0x20000508
 8005e48:	2000050c 	.word	0x2000050c
 8005e4c:	20000568 	.word	0x20000568
 8005e50:	20000570 	.word	0x20000570
 8005e54:	20000558 	.word	0x20000558
 8005e58:	20000454 	.word	0x20000454
 8005e5c:	20000450 	.word	0x20000450
 8005e60:	20000560 	.word	0x20000560
 8005e64:	20000564 	.word	0x20000564

08005e68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e6e:	4b22      	ldr	r3, [pc, #136]	; (8005ef8 <vTaskSwitchContext+0x90>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e76:	4b21      	ldr	r3, [pc, #132]	; (8005efc <vTaskSwitchContext+0x94>)
 8005e78:	2201      	movs	r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e7c:	e037      	b.n	8005eee <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8005e7e:	4b1f      	ldr	r3, [pc, #124]	; (8005efc <vTaskSwitchContext+0x94>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005e84:	4b1e      	ldr	r3, [pc, #120]	; (8005f00 <vTaskSwitchContext+0x98>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	607b      	str	r3, [r7, #4]
 8005e8a:	e007      	b.n	8005e9c <vTaskSwitchContext+0x34>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <vTaskSwitchContext+0x2e>
 8005e92:	b672      	cpsid	i
 8005e94:	e7fe      	b.n	8005e94 <vTaskSwitchContext+0x2c>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	607b      	str	r3, [r7, #4]
 8005e9c:	4919      	ldr	r1, [pc, #100]	; (8005f04 <vTaskSwitchContext+0x9c>)
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	0013      	movs	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	189b      	adds	r3, r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	585b      	ldr	r3, [r3, r1]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0ee      	beq.n	8005e8c <vTaskSwitchContext+0x24>
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	0013      	movs	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	189b      	adds	r3, r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4a12      	ldr	r2, [pc, #72]	; (8005f04 <vTaskSwitchContext+0x9c>)
 8005eba:	189b      	adds	r3, r3, r2
 8005ebc:	603b      	str	r3, [r7, #0]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	605a      	str	r2, [r3, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	3308      	adds	r3, #8
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d104      	bne.n	8005ede <vTaskSwitchContext+0x76>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	605a      	str	r2, [r3, #4]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	4b08      	ldr	r3, [pc, #32]	; (8005f08 <vTaskSwitchContext+0xa0>)
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <vTaskSwitchContext+0x98>)
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	601a      	str	r2, [r3, #0]
}
 8005eee:	46c0      	nop			; (mov r8, r8)
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	b002      	add	sp, #8
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	46c0      	nop			; (mov r8, r8)
 8005ef8:	20000578 	.word	0x20000578
 8005efc:	20000564 	.word	0x20000564
 8005f00:	20000558 	.word	0x20000558
 8005f04:	20000454 	.word	0x20000454
 8005f08:	20000450 	.word	0x20000450

08005f0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f14:	f000 f84e 	bl	8005fb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f18:	4b03      	ldr	r3, [pc, #12]	; (8005f28 <prvIdleTask+0x1c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d9f9      	bls.n	8005f14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f20:	f000 f99e 	bl	8006260 <vPortYield>
		prvCheckTasksWaitingTermination();
 8005f24:	e7f6      	b.n	8005f14 <prvIdleTask+0x8>
 8005f26:	46c0      	nop			; (mov r8, r8)
 8005f28:	20000454 	.word	0x20000454

08005f2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f32:	2300      	movs	r3, #0
 8005f34:	607b      	str	r3, [r7, #4]
 8005f36:	e00c      	b.n	8005f52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	0013      	movs	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	189b      	adds	r3, r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4a14      	ldr	r2, [pc, #80]	; (8005f94 <prvInitialiseTaskLists+0x68>)
 8005f44:	189b      	adds	r3, r3, r2
 8005f46:	0018      	movs	r0, r3
 8005f48:	f7ff fbb7 	bl	80056ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	607b      	str	r3, [r7, #4]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b06      	cmp	r3, #6
 8005f56:	d9ef      	bls.n	8005f38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f58:	4b0f      	ldr	r3, [pc, #60]	; (8005f98 <prvInitialiseTaskLists+0x6c>)
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	f7ff fbad 	bl	80056ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f60:	4b0e      	ldr	r3, [pc, #56]	; (8005f9c <prvInitialiseTaskLists+0x70>)
 8005f62:	0018      	movs	r0, r3
 8005f64:	f7ff fba9 	bl	80056ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f68:	4b0d      	ldr	r3, [pc, #52]	; (8005fa0 <prvInitialiseTaskLists+0x74>)
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	f7ff fba5 	bl	80056ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f70:	4b0c      	ldr	r3, [pc, #48]	; (8005fa4 <prvInitialiseTaskLists+0x78>)
 8005f72:	0018      	movs	r0, r3
 8005f74:	f7ff fba1 	bl	80056ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f78:	4b0b      	ldr	r3, [pc, #44]	; (8005fa8 <prvInitialiseTaskLists+0x7c>)
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	f7ff fb9d 	bl	80056ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f80:	4b0a      	ldr	r3, [pc, #40]	; (8005fac <prvInitialiseTaskLists+0x80>)
 8005f82:	4a05      	ldr	r2, [pc, #20]	; (8005f98 <prvInitialiseTaskLists+0x6c>)
 8005f84:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f86:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <prvInitialiseTaskLists+0x84>)
 8005f88:	4a04      	ldr	r2, [pc, #16]	; (8005f9c <prvInitialiseTaskLists+0x70>)
 8005f8a:	601a      	str	r2, [r3, #0]
}
 8005f8c:	46c0      	nop			; (mov r8, r8)
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b002      	add	sp, #8
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	20000454 	.word	0x20000454
 8005f98:	200004e0 	.word	0x200004e0
 8005f9c:	200004f4 	.word	0x200004f4
 8005fa0:	20000510 	.word	0x20000510
 8005fa4:	20000524 	.word	0x20000524
 8005fa8:	2000053c 	.word	0x2000053c
 8005fac:	20000508 	.word	0x20000508
 8005fb0:	2000050c 	.word	0x2000050c

08005fb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fba:	e01a      	b.n	8005ff2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005fbc:	f000 f960 	bl	8006280 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005fc0:	4b10      	ldr	r3, [pc, #64]	; (8006004 <prvCheckTasksWaitingTermination+0x50>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	0018      	movs	r0, r3
 8005fce:	f7ff fbf5 	bl	80057bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fd2:	4b0d      	ldr	r3, [pc, #52]	; (8006008 <prvCheckTasksWaitingTermination+0x54>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	1e5a      	subs	r2, r3, #1
 8005fd8:	4b0b      	ldr	r3, [pc, #44]	; (8006008 <prvCheckTasksWaitingTermination+0x54>)
 8005fda:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fdc:	4b0b      	ldr	r3, [pc, #44]	; (800600c <prvCheckTasksWaitingTermination+0x58>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	1e5a      	subs	r2, r3, #1
 8005fe2:	4b0a      	ldr	r3, [pc, #40]	; (800600c <prvCheckTasksWaitingTermination+0x58>)
 8005fe4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8005fe6:	f000 f95d 	bl	80062a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	0018      	movs	r0, r3
 8005fee:	f000 f80f 	bl	8006010 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ff2:	4b06      	ldr	r3, [pc, #24]	; (800600c <prvCheckTasksWaitingTermination+0x58>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e0      	bne.n	8005fbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ffa:	46c0      	nop			; (mov r8, r8)
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	b002      	add	sp, #8
 8006000:	bd80      	pop	{r7, pc}
 8006002:	46c0      	nop			; (mov r8, r8)
 8006004:	20000524 	.word	0x20000524
 8006008:	20000550 	.word	0x20000550
 800600c:	20000538 	.word	0x20000538

08006010 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2251      	movs	r2, #81	; 0x51
 800601c:	5c9b      	ldrb	r3, [r3, r2]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d109      	bne.n	8006036 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006026:	0018      	movs	r0, r3
 8006028:	f000 fa68 	bl	80064fc <vPortFree>
				vPortFree( pxTCB );
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	0018      	movs	r0, r3
 8006030:	f000 fa64 	bl	80064fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006034:	e010      	b.n	8006058 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2251      	movs	r2, #81	; 0x51
 800603a:	5c9b      	ldrb	r3, [r3, r2]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d104      	bne.n	800604a <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	0018      	movs	r0, r3
 8006044:	f000 fa5a 	bl	80064fc <vPortFree>
	}
 8006048:	e006      	b.n	8006058 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2251      	movs	r2, #81	; 0x51
 800604e:	5c9b      	ldrb	r3, [r3, r2]
 8006050:	2b02      	cmp	r3, #2
 8006052:	d001      	beq.n	8006058 <prvDeleteTCB+0x48>
 8006054:	b672      	cpsid	i
 8006056:	e7fe      	b.n	8006056 <prvDeleteTCB+0x46>
	}
 8006058:	46c0      	nop			; (mov r8, r8)
 800605a:	46bd      	mov	sp, r7
 800605c:	b002      	add	sp, #8
 800605e:	bd80      	pop	{r7, pc}

08006060 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006066:	4b0e      	ldr	r3, [pc, #56]	; (80060a0 <prvResetNextTaskUnblockTime+0x40>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <prvResetNextTaskUnblockTime+0x14>
 8006070:	2301      	movs	r3, #1
 8006072:	e000      	b.n	8006076 <prvResetNextTaskUnblockTime+0x16>
 8006074:	2300      	movs	r3, #0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d004      	beq.n	8006084 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800607a:	4b0a      	ldr	r3, [pc, #40]	; (80060a4 <prvResetNextTaskUnblockTime+0x44>)
 800607c:	2201      	movs	r2, #1
 800607e:	4252      	negs	r2, r2
 8006080:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006082:	e008      	b.n	8006096 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006084:	4b06      	ldr	r3, [pc, #24]	; (80060a0 <prvResetNextTaskUnblockTime+0x40>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	4b04      	ldr	r3, [pc, #16]	; (80060a4 <prvResetNextTaskUnblockTime+0x44>)
 8006094:	601a      	str	r2, [r3, #0]
}
 8006096:	46c0      	nop			; (mov r8, r8)
 8006098:	46bd      	mov	sp, r7
 800609a:	b002      	add	sp, #8
 800609c:	bd80      	pop	{r7, pc}
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	20000508 	.word	0x20000508
 80060a4:	20000570 	.word	0x20000570

080060a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060b2:	4b21      	ldr	r3, [pc, #132]	; (8006138 <prvAddCurrentTaskToDelayedList+0x90>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060b8:	4b20      	ldr	r3, [pc, #128]	; (800613c <prvAddCurrentTaskToDelayedList+0x94>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3304      	adds	r3, #4
 80060be:	0018      	movs	r0, r3
 80060c0:	f7ff fb7c 	bl	80057bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3301      	adds	r3, #1
 80060c8:	d10b      	bne.n	80060e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d008      	beq.n	80060e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060d0:	4b1a      	ldr	r3, [pc, #104]	; (800613c <prvAddCurrentTaskToDelayedList+0x94>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	1d1a      	adds	r2, r3, #4
 80060d6:	4b1a      	ldr	r3, [pc, #104]	; (8006140 <prvAddCurrentTaskToDelayedList+0x98>)
 80060d8:	0011      	movs	r1, r2
 80060da:	0018      	movs	r0, r3
 80060dc:	f7ff fb16 	bl	800570c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060e0:	e026      	b.n	8006130 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	18d3      	adds	r3, r2, r3
 80060e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060ea:	4b14      	ldr	r3, [pc, #80]	; (800613c <prvAddCurrentTaskToDelayedList+0x94>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d209      	bcs.n	800610e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060fa:	4b12      	ldr	r3, [pc, #72]	; (8006144 <prvAddCurrentTaskToDelayedList+0x9c>)
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4b0f      	ldr	r3, [pc, #60]	; (800613c <prvAddCurrentTaskToDelayedList+0x94>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3304      	adds	r3, #4
 8006104:	0019      	movs	r1, r3
 8006106:	0010      	movs	r0, r2
 8006108:	f7ff fb22 	bl	8005750 <vListInsert>
}
 800610c:	e010      	b.n	8006130 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800610e:	4b0e      	ldr	r3, [pc, #56]	; (8006148 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	4b0a      	ldr	r3, [pc, #40]	; (800613c <prvAddCurrentTaskToDelayedList+0x94>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3304      	adds	r3, #4
 8006118:	0019      	movs	r1, r3
 800611a:	0010      	movs	r0, r2
 800611c:	f7ff fb18 	bl	8005750 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006120:	4b0a      	ldr	r3, [pc, #40]	; (800614c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	429a      	cmp	r2, r3
 8006128:	d202      	bcs.n	8006130 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800612a:	4b08      	ldr	r3, [pc, #32]	; (800614c <prvAddCurrentTaskToDelayedList+0xa4>)
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	601a      	str	r2, [r3, #0]
}
 8006130:	46c0      	nop			; (mov r8, r8)
 8006132:	46bd      	mov	sp, r7
 8006134:	b004      	add	sp, #16
 8006136:	bd80      	pop	{r7, pc}
 8006138:	20000554 	.word	0x20000554
 800613c:	20000450 	.word	0x20000450
 8006140:	2000053c 	.word	0x2000053c
 8006144:	2000050c 	.word	0x2000050c
 8006148:	20000508 	.word	0x20000508
 800614c:	20000570 	.word	0x20000570

08006150 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3b04      	subs	r3, #4
 8006160:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2280      	movs	r2, #128	; 0x80
 8006166:	0452      	lsls	r2, r2, #17
 8006168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	3b04      	subs	r3, #4
 800616e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	3b04      	subs	r3, #4
 800617a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800617c:	4a08      	ldr	r2, [pc, #32]	; (80061a0 <pxPortInitialiseStack+0x50>)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	3b14      	subs	r3, #20
 8006186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	3b20      	subs	r3, #32
 8006192:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006194:	68fb      	ldr	r3, [r7, #12]
}
 8006196:	0018      	movs	r0, r3
 8006198:	46bd      	mov	sp, r7
 800619a:	b004      	add	sp, #16
 800619c:	bd80      	pop	{r7, pc}
 800619e:	46c0      	nop			; (mov r8, r8)
 80061a0:	080061a5 	.word	0x080061a5

080061a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061ae:	4b07      	ldr	r3, [pc, #28]	; (80061cc <prvTaskExitError+0x28>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3301      	adds	r3, #1
 80061b4:	d001      	beq.n	80061ba <prvTaskExitError+0x16>
 80061b6:	b672      	cpsid	i
 80061b8:	e7fe      	b.n	80061b8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80061ba:	b672      	cpsid	i
	while( ulDummy == 0 )
 80061bc:	46c0      	nop			; (mov r8, r8)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d0fc      	beq.n	80061be <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061c4:	46c0      	nop			; (mov r8, r8)
 80061c6:	46bd      	mov	sp, r7
 80061c8:	b002      	add	sp, #8
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	20000008 	.word	0x20000008

080061d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80061d4:	46c0      	nop			; (mov r8, r8)
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	0000      	movs	r0, r0
 80061dc:	0000      	movs	r0, r0
	...

080061e0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80061e0:	4a0b      	ldr	r2, [pc, #44]	; (8006210 <pxCurrentTCBConst2>)
 80061e2:	6813      	ldr	r3, [r2, #0]
 80061e4:	6818      	ldr	r0, [r3, #0]
 80061e6:	3020      	adds	r0, #32
 80061e8:	f380 8809 	msr	PSP, r0
 80061ec:	2002      	movs	r0, #2
 80061ee:	f380 8814 	msr	CONTROL, r0
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80061f8:	46ae      	mov	lr, r5
 80061fa:	bc08      	pop	{r3}
 80061fc:	bc04      	pop	{r2}
 80061fe:	b662      	cpsie	i
 8006200:	4718      	bx	r3
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	46c0      	nop			; (mov r8, r8)
 8006206:	46c0      	nop			; (mov r8, r8)
 8006208:	46c0      	nop			; (mov r8, r8)
 800620a:	46c0      	nop			; (mov r8, r8)
 800620c:	46c0      	nop			; (mov r8, r8)
 800620e:	46c0      	nop			; (mov r8, r8)

08006210 <pxCurrentTCBConst2>:
 8006210:	20000450 	.word	0x20000450
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006214:	46c0      	nop			; (mov r8, r8)
 8006216:	46c0      	nop			; (mov r8, r8)

08006218 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800621c:	4b0e      	ldr	r3, [pc, #56]	; (8006258 <xPortStartScheduler+0x40>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	4b0d      	ldr	r3, [pc, #52]	; (8006258 <xPortStartScheduler+0x40>)
 8006222:	21ff      	movs	r1, #255	; 0xff
 8006224:	0409      	lsls	r1, r1, #16
 8006226:	430a      	orrs	r2, r1
 8006228:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800622a:	4b0b      	ldr	r3, [pc, #44]	; (8006258 <xPortStartScheduler+0x40>)
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <xPortStartScheduler+0x40>)
 8006230:	21ff      	movs	r1, #255	; 0xff
 8006232:	0609      	lsls	r1, r1, #24
 8006234:	430a      	orrs	r2, r1
 8006236:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8006238:	f000 f898 	bl	800636c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800623c:	4b07      	ldr	r3, [pc, #28]	; (800625c <xPortStartScheduler+0x44>)
 800623e:	2200      	movs	r2, #0
 8006240:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8006242:	f7ff ffcd 	bl	80061e0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006246:	f7ff fe0f 	bl	8005e68 <vTaskSwitchContext>
	prvTaskExitError();
 800624a:	f7ff ffab 	bl	80061a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800624e:	2300      	movs	r3, #0
}
 8006250:	0018      	movs	r0, r3
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	46c0      	nop			; (mov r8, r8)
 8006258:	e000ed20 	.word	0xe000ed20
 800625c:	20000008 	.word	0x20000008

08006260 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8006264:	4b05      	ldr	r3, [pc, #20]	; (800627c <vPortYield+0x1c>)
 8006266:	2280      	movs	r2, #128	; 0x80
 8006268:	0552      	lsls	r2, r2, #21
 800626a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800626c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006270:	f3bf 8f6f 	isb	sy
}
 8006274:	46c0      	nop			; (mov r8, r8)
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	46c0      	nop			; (mov r8, r8)
 800627c:	e000ed04 	.word	0xe000ed04

08006280 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8006284:	b672      	cpsid	i
    uxCriticalNesting++;
 8006286:	4b06      	ldr	r3, [pc, #24]	; (80062a0 <vPortEnterCritical+0x20>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	4b04      	ldr	r3, [pc, #16]	; (80062a0 <vPortEnterCritical+0x20>)
 800628e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006290:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006294:	f3bf 8f6f 	isb	sy
}
 8006298:	46c0      	nop			; (mov r8, r8)
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	46c0      	nop			; (mov r8, r8)
 80062a0:	20000008 	.word	0x20000008

080062a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80062a8:	4b09      	ldr	r3, [pc, #36]	; (80062d0 <vPortExitCritical+0x2c>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <vPortExitCritical+0x10>
 80062b0:	b672      	cpsid	i
 80062b2:	e7fe      	b.n	80062b2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80062b4:	4b06      	ldr	r3, [pc, #24]	; (80062d0 <vPortExitCritical+0x2c>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	1e5a      	subs	r2, r3, #1
 80062ba:	4b05      	ldr	r3, [pc, #20]	; (80062d0 <vPortExitCritical+0x2c>)
 80062bc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80062be:	4b04      	ldr	r3, [pc, #16]	; (80062d0 <vPortExitCritical+0x2c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d100      	bne.n	80062c8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80062c6:	b662      	cpsie	i
    }
}
 80062c8:	46c0      	nop			; (mov r8, r8)
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	46c0      	nop			; (mov r8, r8)
 80062d0:	20000008 	.word	0x20000008

080062d4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80062d4:	f3ef 8010 	mrs	r0, PRIMASK
 80062d8:	b672      	cpsid	i
 80062da:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80062dc:	46c0      	nop			; (mov r8, r8)
 80062de:	0018      	movs	r0, r3

080062e0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80062e0:	f380 8810 	msr	PRIMASK, r0
 80062e4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80062e6:	46c0      	nop			; (mov r8, r8)
	...

080062f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062f0:	f3ef 8009 	mrs	r0, PSP
 80062f4:	4b0e      	ldr	r3, [pc, #56]	; (8006330 <pxCurrentTCBConst>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	3820      	subs	r0, #32
 80062fa:	6010      	str	r0, [r2, #0]
 80062fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80062fe:	4644      	mov	r4, r8
 8006300:	464d      	mov	r5, r9
 8006302:	4656      	mov	r6, sl
 8006304:	465f      	mov	r7, fp
 8006306:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006308:	b508      	push	{r3, lr}
 800630a:	b672      	cpsid	i
 800630c:	f7ff fdac 	bl	8005e68 <vTaskSwitchContext>
 8006310:	b662      	cpsie	i
 8006312:	bc0c      	pop	{r2, r3}
 8006314:	6811      	ldr	r1, [r2, #0]
 8006316:	6808      	ldr	r0, [r1, #0]
 8006318:	3010      	adds	r0, #16
 800631a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800631c:	46a0      	mov	r8, r4
 800631e:	46a9      	mov	r9, r5
 8006320:	46b2      	mov	sl, r6
 8006322:	46bb      	mov	fp, r7
 8006324:	f380 8809 	msr	PSP, r0
 8006328:	3820      	subs	r0, #32
 800632a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800632c:	4718      	bx	r3
 800632e:	46c0      	nop			; (mov r8, r8)

08006330 <pxCurrentTCBConst>:
 8006330:	20000450 	.word	0x20000450
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8006334:	46c0      	nop			; (mov r8, r8)
 8006336:	46c0      	nop			; (mov r8, r8)

08006338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800633e:	f7ff ffc9 	bl	80062d4 <ulSetInterruptMaskFromISR>
 8006342:	0003      	movs	r3, r0
 8006344:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006346:	f7ff fcdb 	bl	8005d00 <xTaskIncrementTick>
 800634a:	1e03      	subs	r3, r0, #0
 800634c:	d003      	beq.n	8006356 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800634e:	4b06      	ldr	r3, [pc, #24]	; (8006368 <SysTick_Handler+0x30>)
 8006350:	2280      	movs	r2, #128	; 0x80
 8006352:	0552      	lsls	r2, r2, #21
 8006354:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	0018      	movs	r0, r3
 800635a:	f7ff ffc1 	bl	80062e0 <vClearInterruptMaskFromISR>
}
 800635e:	46c0      	nop			; (mov r8, r8)
 8006360:	46bd      	mov	sp, r7
 8006362:	b002      	add	sp, #8
 8006364:	bd80      	pop	{r7, pc}
 8006366:	46c0      	nop			; (mov r8, r8)
 8006368:	e000ed04 	.word	0xe000ed04

0800636c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8006370:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <prvSetupTimerInterrupt+0x34>)
 8006372:	2200      	movs	r2, #0
 8006374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8006376:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <prvSetupTimerInterrupt+0x38>)
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800637c:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <prvSetupTimerInterrupt+0x3c>)
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	23fa      	movs	r3, #250	; 0xfa
 8006382:	0099      	lsls	r1, r3, #2
 8006384:	0010      	movs	r0, r2
 8006386:	f7f9 fed1 	bl	800012c <__udivsi3>
 800638a:	0003      	movs	r3, r0
 800638c:	001a      	movs	r2, r3
 800638e:	4b07      	ldr	r3, [pc, #28]	; (80063ac <prvSetupTimerInterrupt+0x40>)
 8006390:	3a01      	subs	r2, #1
 8006392:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8006394:	4b02      	ldr	r3, [pc, #8]	; (80063a0 <prvSetupTimerInterrupt+0x34>)
 8006396:	2207      	movs	r2, #7
 8006398:	601a      	str	r2, [r3, #0]
}
 800639a:	46c0      	nop			; (mov r8, r8)
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	e000e010 	.word	0xe000e010
 80063a4:	e000e018 	.word	0xe000e018
 80063a8:	20000000 	.word	0x20000000
 80063ac:	e000e014 	.word	0xe000e014

080063b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063b8:	2300      	movs	r3, #0
 80063ba:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80063bc:	f7ff fc08 	bl	8005bd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063c0:	4b49      	ldr	r3, [pc, #292]	; (80064e8 <pvPortMalloc+0x138>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063c8:	f000 f8e0 	bl	800658c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063cc:	4b47      	ldr	r3, [pc, #284]	; (80064ec <pvPortMalloc+0x13c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	4013      	ands	r3, r2
 80063d4:	d000      	beq.n	80063d8 <pvPortMalloc+0x28>
 80063d6:	e079      	b.n	80064cc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d012      	beq.n	8006404 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80063de:	2208      	movs	r2, #8
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	189b      	adds	r3, r3, r2
 80063e4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2207      	movs	r2, #7
 80063ea:	4013      	ands	r3, r2
 80063ec:	d00a      	beq.n	8006404 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2207      	movs	r2, #7
 80063f2:	4393      	bics	r3, r2
 80063f4:	3308      	adds	r3, #8
 80063f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2207      	movs	r2, #7
 80063fc:	4013      	ands	r3, r2
 80063fe:	d001      	beq.n	8006404 <pvPortMalloc+0x54>
 8006400:	b672      	cpsid	i
 8006402:	e7fe      	b.n	8006402 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d060      	beq.n	80064cc <pvPortMalloc+0x11c>
 800640a:	4b39      	ldr	r3, [pc, #228]	; (80064f0 <pvPortMalloc+0x140>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	429a      	cmp	r2, r3
 8006412:	d85b      	bhi.n	80064cc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006414:	4b37      	ldr	r3, [pc, #220]	; (80064f4 <pvPortMalloc+0x144>)
 8006416:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8006418:	4b36      	ldr	r3, [pc, #216]	; (80064f4 <pvPortMalloc+0x144>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800641e:	e004      	b.n	800642a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	429a      	cmp	r2, r3
 8006432:	d903      	bls.n	800643c <pvPortMalloc+0x8c>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1f1      	bne.n	8006420 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800643c:	4b2a      	ldr	r3, [pc, #168]	; (80064e8 <pvPortMalloc+0x138>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	429a      	cmp	r2, r3
 8006444:	d042      	beq.n	80064cc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2208      	movs	r2, #8
 800644c:	189b      	adds	r3, r3, r2
 800644e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	1ad2      	subs	r2, r2, r3
 8006460:	2308      	movs	r3, #8
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	429a      	cmp	r2, r3
 8006466:	d916      	bls.n	8006496 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	18d3      	adds	r3, r2, r3
 800646e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2207      	movs	r2, #7
 8006474:	4013      	ands	r3, r2
 8006476:	d001      	beq.n	800647c <pvPortMalloc+0xcc>
 8006478:	b672      	cpsid	i
 800647a:	e7fe      	b.n	800647a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	1ad2      	subs	r2, r2, r3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	0018      	movs	r0, r3
 8006492:	f000 f8db 	bl	800664c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006496:	4b16      	ldr	r3, [pc, #88]	; (80064f0 <pvPortMalloc+0x140>)
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	1ad2      	subs	r2, r2, r3
 80064a0:	4b13      	ldr	r3, [pc, #76]	; (80064f0 <pvPortMalloc+0x140>)
 80064a2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064a4:	4b12      	ldr	r3, [pc, #72]	; (80064f0 <pvPortMalloc+0x140>)
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	4b13      	ldr	r3, [pc, #76]	; (80064f8 <pvPortMalloc+0x148>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d203      	bcs.n	80064b8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064b0:	4b0f      	ldr	r3, [pc, #60]	; (80064f0 <pvPortMalloc+0x140>)
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	4b10      	ldr	r3, [pc, #64]	; (80064f8 <pvPortMalloc+0x148>)
 80064b6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <pvPortMalloc+0x13c>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	431a      	orrs	r2, r3
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064cc:	f7ff fb8c 	bl	8005be8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2207      	movs	r2, #7
 80064d4:	4013      	ands	r3, r2
 80064d6:	d001      	beq.n	80064dc <pvPortMalloc+0x12c>
 80064d8:	b672      	cpsid	i
 80064da:	e7fe      	b.n	80064da <pvPortMalloc+0x12a>
	return pvReturn;
 80064dc:	68fb      	ldr	r3, [r7, #12]
}
 80064de:	0018      	movs	r0, r3
 80064e0:	46bd      	mov	sp, r7
 80064e2:	b006      	add	sp, #24
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	20001184 	.word	0x20001184
 80064ec:	20001190 	.word	0x20001190
 80064f0:	20001188 	.word	0x20001188
 80064f4:	2000117c 	.word	0x2000117c
 80064f8:	2000118c 	.word	0x2000118c

080064fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d035      	beq.n	800657a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800650e:	2308      	movs	r3, #8
 8006510:	425b      	negs	r3, r3
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	18d3      	adds	r3, r2, r3
 8006516:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	4b18      	ldr	r3, [pc, #96]	; (8006584 <vPortFree+0x88>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4013      	ands	r3, r2
 8006526:	d101      	bne.n	800652c <vPortFree+0x30>
 8006528:	b672      	cpsid	i
 800652a:	e7fe      	b.n	800652a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <vPortFree+0x3c>
 8006534:	b672      	cpsid	i
 8006536:	e7fe      	b.n	8006536 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	4b11      	ldr	r3, [pc, #68]	; (8006584 <vPortFree+0x88>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4013      	ands	r3, r2
 8006542:	d01a      	beq.n	800657a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d116      	bne.n	800657a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	4b0c      	ldr	r3, [pc, #48]	; (8006584 <vPortFree+0x88>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	43db      	mvns	r3, r3
 8006556:	401a      	ands	r2, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800655c:	f7ff fb38 	bl	8005bd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	4b08      	ldr	r3, [pc, #32]	; (8006588 <vPortFree+0x8c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	18d2      	adds	r2, r2, r3
 800656a:	4b07      	ldr	r3, [pc, #28]	; (8006588 <vPortFree+0x8c>)
 800656c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	0018      	movs	r0, r3
 8006572:	f000 f86b 	bl	800664c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006576:	f7ff fb37 	bl	8005be8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800657a:	46c0      	nop			; (mov r8, r8)
 800657c:	46bd      	mov	sp, r7
 800657e:	b004      	add	sp, #16
 8006580:	bd80      	pop	{r7, pc}
 8006582:	46c0      	nop			; (mov r8, r8)
 8006584:	20001190 	.word	0x20001190
 8006588:	20001188 	.word	0x20001188

0800658c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006592:	23c0      	movs	r3, #192	; 0xc0
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006598:	4b26      	ldr	r3, [pc, #152]	; (8006634 <prvHeapInit+0xa8>)
 800659a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2207      	movs	r2, #7
 80065a0:	4013      	ands	r3, r2
 80065a2:	d00c      	beq.n	80065be <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	3307      	adds	r3, #7
 80065a8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2207      	movs	r2, #7
 80065ae:	4393      	bics	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	1ad2      	subs	r2, r2, r3
 80065b8:	4b1e      	ldr	r3, [pc, #120]	; (8006634 <prvHeapInit+0xa8>)
 80065ba:	18d3      	adds	r3, r2, r3
 80065bc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065c2:	4b1d      	ldr	r3, [pc, #116]	; (8006638 <prvHeapInit+0xac>)
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065c8:	4b1b      	ldr	r3, [pc, #108]	; (8006638 <prvHeapInit+0xac>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	18d3      	adds	r3, r2, r3
 80065d4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065d6:	2208      	movs	r2, #8
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	1a9b      	subs	r3, r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2207      	movs	r2, #7
 80065e2:	4393      	bics	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	4b14      	ldr	r3, [pc, #80]	; (800663c <prvHeapInit+0xb0>)
 80065ea:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80065ec:	4b13      	ldr	r3, [pc, #76]	; (800663c <prvHeapInit+0xb0>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2200      	movs	r2, #0
 80065f2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065f4:	4b11      	ldr	r3, [pc, #68]	; (800663c <prvHeapInit+0xb0>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2200      	movs	r2, #0
 80065fa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	1ad2      	subs	r2, r2, r3
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800660a:	4b0c      	ldr	r3, [pc, #48]	; (800663c <prvHeapInit+0xb0>)
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <prvHeapInit+0xb4>)
 8006618:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	4b09      	ldr	r3, [pc, #36]	; (8006644 <prvHeapInit+0xb8>)
 8006620:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006622:	4b09      	ldr	r3, [pc, #36]	; (8006648 <prvHeapInit+0xbc>)
 8006624:	2280      	movs	r2, #128	; 0x80
 8006626:	0612      	lsls	r2, r2, #24
 8006628:	601a      	str	r2, [r3, #0]
}
 800662a:	46c0      	nop			; (mov r8, r8)
 800662c:	46bd      	mov	sp, r7
 800662e:	b004      	add	sp, #16
 8006630:	bd80      	pop	{r7, pc}
 8006632:	46c0      	nop			; (mov r8, r8)
 8006634:	2000057c 	.word	0x2000057c
 8006638:	2000117c 	.word	0x2000117c
 800663c:	20001184 	.word	0x20001184
 8006640:	2000118c 	.word	0x2000118c
 8006644:	20001188 	.word	0x20001188
 8006648:	20001190 	.word	0x20001190

0800664c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006654:	4b27      	ldr	r3, [pc, #156]	; (80066f4 <prvInsertBlockIntoFreeList+0xa8>)
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	e002      	b.n	8006660 <prvInsertBlockIntoFreeList+0x14>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	429a      	cmp	r2, r3
 8006668:	d8f7      	bhi.n	800665a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	18d3      	adds	r3, r2, r3
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	429a      	cmp	r2, r3
 800667a:	d108      	bne.n	800668e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	18d2      	adds	r2, r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	18d2      	adds	r2, r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d118      	bne.n	80066d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	4b14      	ldr	r3, [pc, #80]	; (80066f8 <prvInsertBlockIntoFreeList+0xac>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d00d      	beq.n	80066ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	18d2      	adds	r2, r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	e008      	b.n	80066dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066ca:	4b0b      	ldr	r3, [pc, #44]	; (80066f8 <prvInsertBlockIntoFreeList+0xac>)
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	e003      	b.n	80066dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d002      	beq.n	80066ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066ea:	46c0      	nop			; (mov r8, r8)
 80066ec:	46bd      	mov	sp, r7
 80066ee:	b004      	add	sp, #16
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	46c0      	nop			; (mov r8, r8)
 80066f4:	2000117c 	.word	0x2000117c
 80066f8:	20001184 	.word	0x20001184

080066fc <__errno>:
 80066fc:	4b01      	ldr	r3, [pc, #4]	; (8006704 <__errno+0x8>)
 80066fe:	6818      	ldr	r0, [r3, #0]
 8006700:	4770      	bx	lr
 8006702:	46c0      	nop			; (mov r8, r8)
 8006704:	2000000c 	.word	0x2000000c

08006708 <__libc_init_array>:
 8006708:	b570      	push	{r4, r5, r6, lr}
 800670a:	2600      	movs	r6, #0
 800670c:	4d0c      	ldr	r5, [pc, #48]	; (8006740 <__libc_init_array+0x38>)
 800670e:	4c0d      	ldr	r4, [pc, #52]	; (8006744 <__libc_init_array+0x3c>)
 8006710:	1b64      	subs	r4, r4, r5
 8006712:	10a4      	asrs	r4, r4, #2
 8006714:	42a6      	cmp	r6, r4
 8006716:	d109      	bne.n	800672c <__libc_init_array+0x24>
 8006718:	2600      	movs	r6, #0
 800671a:	f001 fd81 	bl	8008220 <_init>
 800671e:	4d0a      	ldr	r5, [pc, #40]	; (8006748 <__libc_init_array+0x40>)
 8006720:	4c0a      	ldr	r4, [pc, #40]	; (800674c <__libc_init_array+0x44>)
 8006722:	1b64      	subs	r4, r4, r5
 8006724:	10a4      	asrs	r4, r4, #2
 8006726:	42a6      	cmp	r6, r4
 8006728:	d105      	bne.n	8006736 <__libc_init_array+0x2e>
 800672a:	bd70      	pop	{r4, r5, r6, pc}
 800672c:	00b3      	lsls	r3, r6, #2
 800672e:	58eb      	ldr	r3, [r5, r3]
 8006730:	4798      	blx	r3
 8006732:	3601      	adds	r6, #1
 8006734:	e7ee      	b.n	8006714 <__libc_init_array+0xc>
 8006736:	00b3      	lsls	r3, r6, #2
 8006738:	58eb      	ldr	r3, [r5, r3]
 800673a:	4798      	blx	r3
 800673c:	3601      	adds	r6, #1
 800673e:	e7f2      	b.n	8006726 <__libc_init_array+0x1e>
 8006740:	08008548 	.word	0x08008548
 8006744:	08008548 	.word	0x08008548
 8006748:	08008548 	.word	0x08008548
 800674c:	0800854c 	.word	0x0800854c

08006750 <memcpy>:
 8006750:	2300      	movs	r3, #0
 8006752:	b510      	push	{r4, lr}
 8006754:	429a      	cmp	r2, r3
 8006756:	d100      	bne.n	800675a <memcpy+0xa>
 8006758:	bd10      	pop	{r4, pc}
 800675a:	5ccc      	ldrb	r4, [r1, r3]
 800675c:	54c4      	strb	r4, [r0, r3]
 800675e:	3301      	adds	r3, #1
 8006760:	e7f8      	b.n	8006754 <memcpy+0x4>

08006762 <memset>:
 8006762:	0003      	movs	r3, r0
 8006764:	1812      	adds	r2, r2, r0
 8006766:	4293      	cmp	r3, r2
 8006768:	d100      	bne.n	800676c <memset+0xa>
 800676a:	4770      	bx	lr
 800676c:	7019      	strb	r1, [r3, #0]
 800676e:	3301      	adds	r3, #1
 8006770:	e7f9      	b.n	8006766 <memset+0x4>

08006772 <__cvt>:
 8006772:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006774:	b08b      	sub	sp, #44	; 0x2c
 8006776:	0014      	movs	r4, r2
 8006778:	1e1d      	subs	r5, r3, #0
 800677a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800677c:	da53      	bge.n	8006826 <__cvt+0xb4>
 800677e:	2480      	movs	r4, #128	; 0x80
 8006780:	0624      	lsls	r4, r4, #24
 8006782:	191b      	adds	r3, r3, r4
 8006784:	001d      	movs	r5, r3
 8006786:	0014      	movs	r4, r2
 8006788:	232d      	movs	r3, #45	; 0x2d
 800678a:	700b      	strb	r3, [r1, #0]
 800678c:	2320      	movs	r3, #32
 800678e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006790:	2203      	movs	r2, #3
 8006792:	439e      	bics	r6, r3
 8006794:	2e46      	cmp	r6, #70	; 0x46
 8006796:	d007      	beq.n	80067a8 <__cvt+0x36>
 8006798:	0033      	movs	r3, r6
 800679a:	3b45      	subs	r3, #69	; 0x45
 800679c:	4259      	negs	r1, r3
 800679e:	414b      	adcs	r3, r1
 80067a0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80067a2:	3a01      	subs	r2, #1
 80067a4:	18cb      	adds	r3, r1, r3
 80067a6:	9310      	str	r3, [sp, #64]	; 0x40
 80067a8:	ab09      	add	r3, sp, #36	; 0x24
 80067aa:	9304      	str	r3, [sp, #16]
 80067ac:	ab08      	add	r3, sp, #32
 80067ae:	9303      	str	r3, [sp, #12]
 80067b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80067b2:	9200      	str	r2, [sp, #0]
 80067b4:	9302      	str	r3, [sp, #8]
 80067b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067b8:	0022      	movs	r2, r4
 80067ba:	9301      	str	r3, [sp, #4]
 80067bc:	002b      	movs	r3, r5
 80067be:	f000 fbb5 	bl	8006f2c <_dtoa_r>
 80067c2:	0007      	movs	r7, r0
 80067c4:	2e47      	cmp	r6, #71	; 0x47
 80067c6:	d102      	bne.n	80067ce <__cvt+0x5c>
 80067c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067ca:	07db      	lsls	r3, r3, #31
 80067cc:	d524      	bpl.n	8006818 <__cvt+0xa6>
 80067ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067d0:	18fb      	adds	r3, r7, r3
 80067d2:	9307      	str	r3, [sp, #28]
 80067d4:	2e46      	cmp	r6, #70	; 0x46
 80067d6:	d114      	bne.n	8006802 <__cvt+0x90>
 80067d8:	783b      	ldrb	r3, [r7, #0]
 80067da:	2b30      	cmp	r3, #48	; 0x30
 80067dc:	d10c      	bne.n	80067f8 <__cvt+0x86>
 80067de:	2200      	movs	r2, #0
 80067e0:	2300      	movs	r3, #0
 80067e2:	0020      	movs	r0, r4
 80067e4:	0029      	movs	r1, r5
 80067e6:	f7f9 fe27 	bl	8000438 <__aeabi_dcmpeq>
 80067ea:	2800      	cmp	r0, #0
 80067ec:	d104      	bne.n	80067f8 <__cvt+0x86>
 80067ee:	2301      	movs	r3, #1
 80067f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80067f2:	1a9b      	subs	r3, r3, r2
 80067f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80067fa:	9a07      	ldr	r2, [sp, #28]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	18d3      	adds	r3, r2, r3
 8006800:	9307      	str	r3, [sp, #28]
 8006802:	2200      	movs	r2, #0
 8006804:	2300      	movs	r3, #0
 8006806:	0020      	movs	r0, r4
 8006808:	0029      	movs	r1, r5
 800680a:	f7f9 fe15 	bl	8000438 <__aeabi_dcmpeq>
 800680e:	2230      	movs	r2, #48	; 0x30
 8006810:	2800      	cmp	r0, #0
 8006812:	d00d      	beq.n	8006830 <__cvt+0xbe>
 8006814:	9b07      	ldr	r3, [sp, #28]
 8006816:	9309      	str	r3, [sp, #36]	; 0x24
 8006818:	0038      	movs	r0, r7
 800681a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800681c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800681e:	1bdb      	subs	r3, r3, r7
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	b00b      	add	sp, #44	; 0x2c
 8006824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006826:	2300      	movs	r3, #0
 8006828:	e7af      	b.n	800678a <__cvt+0x18>
 800682a:	1c59      	adds	r1, r3, #1
 800682c:	9109      	str	r1, [sp, #36]	; 0x24
 800682e:	701a      	strb	r2, [r3, #0]
 8006830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006832:	9907      	ldr	r1, [sp, #28]
 8006834:	428b      	cmp	r3, r1
 8006836:	d3f8      	bcc.n	800682a <__cvt+0xb8>
 8006838:	e7ee      	b.n	8006818 <__cvt+0xa6>

0800683a <__exponent>:
 800683a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800683c:	1c83      	adds	r3, r0, #2
 800683e:	b085      	sub	sp, #20
 8006840:	9301      	str	r3, [sp, #4]
 8006842:	0006      	movs	r6, r0
 8006844:	000c      	movs	r4, r1
 8006846:	7002      	strb	r2, [r0, #0]
 8006848:	232b      	movs	r3, #43	; 0x2b
 800684a:	2900      	cmp	r1, #0
 800684c:	da01      	bge.n	8006852 <__exponent+0x18>
 800684e:	232d      	movs	r3, #45	; 0x2d
 8006850:	424c      	negs	r4, r1
 8006852:	7073      	strb	r3, [r6, #1]
 8006854:	2c09      	cmp	r4, #9
 8006856:	dd22      	ble.n	800689e <__exponent+0x64>
 8006858:	ab02      	add	r3, sp, #8
 800685a:	1ddd      	adds	r5, r3, #7
 800685c:	0020      	movs	r0, r4
 800685e:	210a      	movs	r1, #10
 8006860:	f7f9 fdd4 	bl	800040c <__aeabi_idivmod>
 8006864:	1e6f      	subs	r7, r5, #1
 8006866:	3130      	adds	r1, #48	; 0x30
 8006868:	7039      	strb	r1, [r7, #0]
 800686a:	0020      	movs	r0, r4
 800686c:	210a      	movs	r1, #10
 800686e:	f7f9 fce7 	bl	8000240 <__divsi3>
 8006872:	0004      	movs	r4, r0
 8006874:	2809      	cmp	r0, #9
 8006876:	dc0b      	bgt.n	8006890 <__exponent+0x56>
 8006878:	3d02      	subs	r5, #2
 800687a:	3430      	adds	r4, #48	; 0x30
 800687c:	9b01      	ldr	r3, [sp, #4]
 800687e:	702c      	strb	r4, [r5, #0]
 8006880:	aa02      	add	r2, sp, #8
 8006882:	3207      	adds	r2, #7
 8006884:	0018      	movs	r0, r3
 8006886:	42aa      	cmp	r2, r5
 8006888:	d804      	bhi.n	8006894 <__exponent+0x5a>
 800688a:	1b80      	subs	r0, r0, r6
 800688c:	b005      	add	sp, #20
 800688e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006890:	003d      	movs	r5, r7
 8006892:	e7e3      	b.n	800685c <__exponent+0x22>
 8006894:	782a      	ldrb	r2, [r5, #0]
 8006896:	3501      	adds	r5, #1
 8006898:	701a      	strb	r2, [r3, #0]
 800689a:	3301      	adds	r3, #1
 800689c:	e7f0      	b.n	8006880 <__exponent+0x46>
 800689e:	2330      	movs	r3, #48	; 0x30
 80068a0:	18e4      	adds	r4, r4, r3
 80068a2:	70b3      	strb	r3, [r6, #2]
 80068a4:	1d30      	adds	r0, r6, #4
 80068a6:	70f4      	strb	r4, [r6, #3]
 80068a8:	e7ef      	b.n	800688a <__exponent+0x50>
	...

080068ac <_printf_float>:
 80068ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ae:	b095      	sub	sp, #84	; 0x54
 80068b0:	000c      	movs	r4, r1
 80068b2:	920a      	str	r2, [sp, #40]	; 0x28
 80068b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80068b6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80068b8:	9009      	str	r0, [sp, #36]	; 0x24
 80068ba:	f001 f917 	bl	8007aec <_localeconv_r>
 80068be:	6803      	ldr	r3, [r0, #0]
 80068c0:	0018      	movs	r0, r3
 80068c2:	930c      	str	r3, [sp, #48]	; 0x30
 80068c4:	f7f9 fc20 	bl	8000108 <strlen>
 80068c8:	2300      	movs	r3, #0
 80068ca:	9312      	str	r3, [sp, #72]	; 0x48
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	900e      	str	r0, [sp, #56]	; 0x38
 80068d0:	930d      	str	r3, [sp, #52]	; 0x34
 80068d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80068d4:	7e27      	ldrb	r7, [r4, #24]
 80068d6:	682b      	ldr	r3, [r5, #0]
 80068d8:	2207      	movs	r2, #7
 80068da:	05c9      	lsls	r1, r1, #23
 80068dc:	d545      	bpl.n	800696a <_printf_float+0xbe>
 80068de:	189b      	adds	r3, r3, r2
 80068e0:	4393      	bics	r3, r2
 80068e2:	001a      	movs	r2, r3
 80068e4:	3208      	adds	r2, #8
 80068e6:	602a      	str	r2, [r5, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	64a2      	str	r2, [r4, #72]	; 0x48
 80068ee:	64e3      	str	r3, [r4, #76]	; 0x4c
 80068f0:	2201      	movs	r2, #1
 80068f2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80068f4:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80068f6:	006b      	lsls	r3, r5, #1
 80068f8:	085b      	lsrs	r3, r3, #1
 80068fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80068fc:	4252      	negs	r2, r2
 80068fe:	4bac      	ldr	r3, [pc, #688]	; (8006bb0 <_printf_float+0x304>)
 8006900:	0030      	movs	r0, r6
 8006902:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006904:	f7fb faa6 	bl	8001e54 <__aeabi_dcmpun>
 8006908:	2800      	cmp	r0, #0
 800690a:	d130      	bne.n	800696e <_printf_float+0xc2>
 800690c:	2201      	movs	r2, #1
 800690e:	4ba8      	ldr	r3, [pc, #672]	; (8006bb0 <_printf_float+0x304>)
 8006910:	4252      	negs	r2, r2
 8006912:	0030      	movs	r0, r6
 8006914:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006916:	f7f9 fd9f 	bl	8000458 <__aeabi_dcmple>
 800691a:	2800      	cmp	r0, #0
 800691c:	d127      	bne.n	800696e <_printf_float+0xc2>
 800691e:	2200      	movs	r2, #0
 8006920:	2300      	movs	r3, #0
 8006922:	0030      	movs	r0, r6
 8006924:	0029      	movs	r1, r5
 8006926:	f7f9 fd8d 	bl	8000444 <__aeabi_dcmplt>
 800692a:	2800      	cmp	r0, #0
 800692c:	d003      	beq.n	8006936 <_printf_float+0x8a>
 800692e:	0023      	movs	r3, r4
 8006930:	222d      	movs	r2, #45	; 0x2d
 8006932:	3343      	adds	r3, #67	; 0x43
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	4d9f      	ldr	r5, [pc, #636]	; (8006bb4 <_printf_float+0x308>)
 8006938:	2f47      	cmp	r7, #71	; 0x47
 800693a:	d800      	bhi.n	800693e <_printf_float+0x92>
 800693c:	4d9e      	ldr	r5, [pc, #632]	; (8006bb8 <_printf_float+0x30c>)
 800693e:	2303      	movs	r3, #3
 8006940:	2600      	movs	r6, #0
 8006942:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006944:	6123      	str	r3, [r4, #16]
 8006946:	3301      	adds	r3, #1
 8006948:	439a      	bics	r2, r3
 800694a:	6022      	str	r2, [r4, #0]
 800694c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800694e:	aa13      	add	r2, sp, #76	; 0x4c
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	0021      	movs	r1, r4
 8006954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006956:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006958:	f000 f9f4 	bl	8006d44 <_printf_common>
 800695c:	1c43      	adds	r3, r0, #1
 800695e:	d000      	beq.n	8006962 <_printf_float+0xb6>
 8006960:	e093      	b.n	8006a8a <_printf_float+0x1de>
 8006962:	2001      	movs	r0, #1
 8006964:	4240      	negs	r0, r0
 8006966:	b015      	add	sp, #84	; 0x54
 8006968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800696a:	3307      	adds	r3, #7
 800696c:	e7b8      	b.n	80068e0 <_printf_float+0x34>
 800696e:	0032      	movs	r2, r6
 8006970:	002b      	movs	r3, r5
 8006972:	0030      	movs	r0, r6
 8006974:	0029      	movs	r1, r5
 8006976:	f7fb fa6d 	bl	8001e54 <__aeabi_dcmpun>
 800697a:	2800      	cmp	r0, #0
 800697c:	d004      	beq.n	8006988 <_printf_float+0xdc>
 800697e:	4d8f      	ldr	r5, [pc, #572]	; (8006bbc <_printf_float+0x310>)
 8006980:	2f47      	cmp	r7, #71	; 0x47
 8006982:	d8dc      	bhi.n	800693e <_printf_float+0x92>
 8006984:	4d8e      	ldr	r5, [pc, #568]	; (8006bc0 <_printf_float+0x314>)
 8006986:	e7da      	b.n	800693e <_printf_float+0x92>
 8006988:	2380      	movs	r3, #128	; 0x80
 800698a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800698c:	6862      	ldr	r2, [r4, #4]
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	430b      	orrs	r3, r1
 8006992:	1c51      	adds	r1, r2, #1
 8006994:	d143      	bne.n	8006a1e <_printf_float+0x172>
 8006996:	3207      	adds	r2, #7
 8006998:	6062      	str	r2, [r4, #4]
 800699a:	aa12      	add	r2, sp, #72	; 0x48
 800699c:	2100      	movs	r1, #0
 800699e:	9205      	str	r2, [sp, #20]
 80069a0:	aa11      	add	r2, sp, #68	; 0x44
 80069a2:	9203      	str	r2, [sp, #12]
 80069a4:	2223      	movs	r2, #35	; 0x23
 80069a6:	6023      	str	r3, [r4, #0]
 80069a8:	9106      	str	r1, [sp, #24]
 80069aa:	9301      	str	r3, [sp, #4]
 80069ac:	a908      	add	r1, sp, #32
 80069ae:	6863      	ldr	r3, [r4, #4]
 80069b0:	1852      	adds	r2, r2, r1
 80069b2:	9202      	str	r2, [sp, #8]
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	0032      	movs	r2, r6
 80069b8:	002b      	movs	r3, r5
 80069ba:	9704      	str	r7, [sp, #16]
 80069bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069be:	f7ff fed8 	bl	8006772 <__cvt>
 80069c2:	2320      	movs	r3, #32
 80069c4:	003a      	movs	r2, r7
 80069c6:	0005      	movs	r5, r0
 80069c8:	439a      	bics	r2, r3
 80069ca:	2a47      	cmp	r2, #71	; 0x47
 80069cc:	d107      	bne.n	80069de <_printf_float+0x132>
 80069ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069d0:	1cda      	adds	r2, r3, #3
 80069d2:	db02      	blt.n	80069da <_printf_float+0x12e>
 80069d4:	6862      	ldr	r2, [r4, #4]
 80069d6:	4293      	cmp	r3, r2
 80069d8:	dd45      	ble.n	8006a66 <_printf_float+0x1ba>
 80069da:	3f02      	subs	r7, #2
 80069dc:	b2ff      	uxtb	r7, r7
 80069de:	9911      	ldr	r1, [sp, #68]	; 0x44
 80069e0:	2f65      	cmp	r7, #101	; 0x65
 80069e2:	d825      	bhi.n	8006a30 <_printf_float+0x184>
 80069e4:	0020      	movs	r0, r4
 80069e6:	3901      	subs	r1, #1
 80069e8:	003a      	movs	r2, r7
 80069ea:	3050      	adds	r0, #80	; 0x50
 80069ec:	9111      	str	r1, [sp, #68]	; 0x44
 80069ee:	f7ff ff24 	bl	800683a <__exponent>
 80069f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069f4:	0006      	movs	r6, r0
 80069f6:	1813      	adds	r3, r2, r0
 80069f8:	6123      	str	r3, [r4, #16]
 80069fa:	2a01      	cmp	r2, #1
 80069fc:	dc02      	bgt.n	8006a04 <_printf_float+0x158>
 80069fe:	6822      	ldr	r2, [r4, #0]
 8006a00:	07d2      	lsls	r2, r2, #31
 8006a02:	d501      	bpl.n	8006a08 <_printf_float+0x15c>
 8006a04:	3301      	adds	r3, #1
 8006a06:	6123      	str	r3, [r4, #16]
 8006a08:	2323      	movs	r3, #35	; 0x23
 8006a0a:	aa08      	add	r2, sp, #32
 8006a0c:	189b      	adds	r3, r3, r2
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d09b      	beq.n	800694c <_printf_float+0xa0>
 8006a14:	0023      	movs	r3, r4
 8006a16:	222d      	movs	r2, #45	; 0x2d
 8006a18:	3343      	adds	r3, #67	; 0x43
 8006a1a:	701a      	strb	r2, [r3, #0]
 8006a1c:	e796      	b.n	800694c <_printf_float+0xa0>
 8006a1e:	2f67      	cmp	r7, #103	; 0x67
 8006a20:	d100      	bne.n	8006a24 <_printf_float+0x178>
 8006a22:	e176      	b.n	8006d12 <_printf_float+0x466>
 8006a24:	2f47      	cmp	r7, #71	; 0x47
 8006a26:	d1b8      	bne.n	800699a <_printf_float+0xee>
 8006a28:	2a00      	cmp	r2, #0
 8006a2a:	d1b6      	bne.n	800699a <_printf_float+0xee>
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	e7b3      	b.n	8006998 <_printf_float+0xec>
 8006a30:	2f66      	cmp	r7, #102	; 0x66
 8006a32:	d119      	bne.n	8006a68 <_printf_float+0x1bc>
 8006a34:	6863      	ldr	r3, [r4, #4]
 8006a36:	2900      	cmp	r1, #0
 8006a38:	dd0c      	ble.n	8006a54 <_printf_float+0x1a8>
 8006a3a:	6121      	str	r1, [r4, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d102      	bne.n	8006a46 <_printf_float+0x19a>
 8006a40:	6822      	ldr	r2, [r4, #0]
 8006a42:	07d2      	lsls	r2, r2, #31
 8006a44:	d502      	bpl.n	8006a4c <_printf_float+0x1a0>
 8006a46:	3301      	adds	r3, #1
 8006a48:	185b      	adds	r3, r3, r1
 8006a4a:	6123      	str	r3, [r4, #16]
 8006a4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a4e:	2600      	movs	r6, #0
 8006a50:	65a3      	str	r3, [r4, #88]	; 0x58
 8006a52:	e7d9      	b.n	8006a08 <_printf_float+0x15c>
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d103      	bne.n	8006a60 <_printf_float+0x1b4>
 8006a58:	2201      	movs	r2, #1
 8006a5a:	6821      	ldr	r1, [r4, #0]
 8006a5c:	4211      	tst	r1, r2
 8006a5e:	d000      	beq.n	8006a62 <_printf_float+0x1b6>
 8006a60:	1c9a      	adds	r2, r3, #2
 8006a62:	6122      	str	r2, [r4, #16]
 8006a64:	e7f2      	b.n	8006a4c <_printf_float+0x1a0>
 8006a66:	2767      	movs	r7, #103	; 0x67
 8006a68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	db05      	blt.n	8006a7c <_printf_float+0x1d0>
 8006a70:	6822      	ldr	r2, [r4, #0]
 8006a72:	6123      	str	r3, [r4, #16]
 8006a74:	07d2      	lsls	r2, r2, #31
 8006a76:	d5e9      	bpl.n	8006a4c <_printf_float+0x1a0>
 8006a78:	3301      	adds	r3, #1
 8006a7a:	e7e6      	b.n	8006a4a <_printf_float+0x19e>
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	dc01      	bgt.n	8006a86 <_printf_float+0x1da>
 8006a82:	1849      	adds	r1, r1, r1
 8006a84:	1ac9      	subs	r1, r1, r3
 8006a86:	1852      	adds	r2, r2, r1
 8006a88:	e7eb      	b.n	8006a62 <_printf_float+0x1b6>
 8006a8a:	6822      	ldr	r2, [r4, #0]
 8006a8c:	0553      	lsls	r3, r2, #21
 8006a8e:	d408      	bmi.n	8006aa2 <_printf_float+0x1f6>
 8006a90:	6923      	ldr	r3, [r4, #16]
 8006a92:	002a      	movs	r2, r5
 8006a94:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a98:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006a9a:	47a8      	blx	r5
 8006a9c:	1c43      	adds	r3, r0, #1
 8006a9e:	d129      	bne.n	8006af4 <_printf_float+0x248>
 8006aa0:	e75f      	b.n	8006962 <_printf_float+0xb6>
 8006aa2:	2f65      	cmp	r7, #101	; 0x65
 8006aa4:	d800      	bhi.n	8006aa8 <_printf_float+0x1fc>
 8006aa6:	e0e0      	b.n	8006c6a <_printf_float+0x3be>
 8006aa8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006aaa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006aac:	2200      	movs	r2, #0
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f7f9 fcc2 	bl	8000438 <__aeabi_dcmpeq>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d034      	beq.n	8006b22 <_printf_float+0x276>
 8006ab8:	2301      	movs	r3, #1
 8006aba:	4a42      	ldr	r2, [pc, #264]	; (8006bc4 <_printf_float+0x318>)
 8006abc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006abe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ac0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006ac2:	47a8      	blx	r5
 8006ac4:	1c43      	adds	r3, r0, #1
 8006ac6:	d100      	bne.n	8006aca <_printf_float+0x21e>
 8006ac8:	e74b      	b.n	8006962 <_printf_float+0xb6>
 8006aca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006acc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	db02      	blt.n	8006ad8 <_printf_float+0x22c>
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	07db      	lsls	r3, r3, #31
 8006ad6:	d50d      	bpl.n	8006af4 <_printf_float+0x248>
 8006ad8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006ada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006adc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ade:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ae2:	47a8      	blx	r5
 8006ae4:	2500      	movs	r5, #0
 8006ae6:	1c43      	adds	r3, r0, #1
 8006ae8:	d100      	bne.n	8006aec <_printf_float+0x240>
 8006aea:	e73a      	b.n	8006962 <_printf_float+0xb6>
 8006aec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006aee:	3b01      	subs	r3, #1
 8006af0:	42ab      	cmp	r3, r5
 8006af2:	dc0a      	bgt.n	8006b0a <_printf_float+0x25e>
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	079b      	lsls	r3, r3, #30
 8006af8:	d500      	bpl.n	8006afc <_printf_float+0x250>
 8006afa:	e108      	b.n	8006d0e <_printf_float+0x462>
 8006afc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006afe:	68e0      	ldr	r0, [r4, #12]
 8006b00:	4298      	cmp	r0, r3
 8006b02:	db00      	blt.n	8006b06 <_printf_float+0x25a>
 8006b04:	e72f      	b.n	8006966 <_printf_float+0xba>
 8006b06:	0018      	movs	r0, r3
 8006b08:	e72d      	b.n	8006966 <_printf_float+0xba>
 8006b0a:	0022      	movs	r2, r4
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	321a      	adds	r2, #26
 8006b10:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b14:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006b16:	47b0      	blx	r6
 8006b18:	1c43      	adds	r3, r0, #1
 8006b1a:	d100      	bne.n	8006b1e <_printf_float+0x272>
 8006b1c:	e721      	b.n	8006962 <_printf_float+0xb6>
 8006b1e:	3501      	adds	r5, #1
 8006b20:	e7e4      	b.n	8006aec <_printf_float+0x240>
 8006b22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	dc2d      	bgt.n	8006b84 <_printf_float+0x2d8>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	4a26      	ldr	r2, [pc, #152]	; (8006bc4 <_printf_float+0x318>)
 8006b2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b30:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006b32:	47b0      	blx	r6
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	d100      	bne.n	8006b3a <_printf_float+0x28e>
 8006b38:	e713      	b.n	8006962 <_printf_float+0xb6>
 8006b3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d105      	bne.n	8006b4c <_printf_float+0x2a0>
 8006b40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d102      	bne.n	8006b4c <_printf_float+0x2a0>
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	07db      	lsls	r3, r3, #31
 8006b4a:	d5d3      	bpl.n	8006af4 <_printf_float+0x248>
 8006b4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b52:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b56:	47b0      	blx	r6
 8006b58:	2600      	movs	r6, #0
 8006b5a:	1c43      	adds	r3, r0, #1
 8006b5c:	d100      	bne.n	8006b60 <_printf_float+0x2b4>
 8006b5e:	e700      	b.n	8006962 <_printf_float+0xb6>
 8006b60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b62:	425b      	negs	r3, r3
 8006b64:	42b3      	cmp	r3, r6
 8006b66:	dc01      	bgt.n	8006b6c <_printf_float+0x2c0>
 8006b68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b6a:	e792      	b.n	8006a92 <_printf_float+0x1e6>
 8006b6c:	0022      	movs	r2, r4
 8006b6e:	2301      	movs	r3, #1
 8006b70:	321a      	adds	r2, #26
 8006b72:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b76:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006b78:	47b8      	blx	r7
 8006b7a:	1c43      	adds	r3, r0, #1
 8006b7c:	d100      	bne.n	8006b80 <_printf_float+0x2d4>
 8006b7e:	e6f0      	b.n	8006962 <_printf_float+0xb6>
 8006b80:	3601      	adds	r6, #1
 8006b82:	e7ed      	b.n	8006b60 <_printf_float+0x2b4>
 8006b84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b86:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8006b88:	429f      	cmp	r7, r3
 8006b8a:	dd00      	ble.n	8006b8e <_printf_float+0x2e2>
 8006b8c:	001f      	movs	r7, r3
 8006b8e:	2f00      	cmp	r7, #0
 8006b90:	dd08      	ble.n	8006ba4 <_printf_float+0x2f8>
 8006b92:	003b      	movs	r3, r7
 8006b94:	002a      	movs	r2, r5
 8006b96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b9a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006b9c:	47b0      	blx	r6
 8006b9e:	1c43      	adds	r3, r0, #1
 8006ba0:	d100      	bne.n	8006ba4 <_printf_float+0x2f8>
 8006ba2:	e6de      	b.n	8006962 <_printf_float+0xb6>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	930d      	str	r3, [sp, #52]	; 0x34
 8006ba8:	43fb      	mvns	r3, r7
 8006baa:	17db      	asrs	r3, r3, #31
 8006bac:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bae:	e018      	b.n	8006be2 <_printf_float+0x336>
 8006bb0:	7fefffff 	.word	0x7fefffff
 8006bb4:	08008324 	.word	0x08008324
 8006bb8:	08008320 	.word	0x08008320
 8006bbc:	0800832c 	.word	0x0800832c
 8006bc0:	08008328 	.word	0x08008328
 8006bc4:	08008330 	.word	0x08008330
 8006bc8:	0022      	movs	r2, r4
 8006bca:	2301      	movs	r3, #1
 8006bcc:	321a      	adds	r2, #26
 8006bce:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bd2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006bd4:	47b0      	blx	r6
 8006bd6:	1c43      	adds	r3, r0, #1
 8006bd8:	d100      	bne.n	8006bdc <_printf_float+0x330>
 8006bda:	e6c2      	b.n	8006962 <_printf_float+0xb6>
 8006bdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bde:	3301      	adds	r3, #1
 8006be0:	930d      	str	r3, [sp, #52]	; 0x34
 8006be2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006be4:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8006be6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006be8:	403b      	ands	r3, r7
 8006bea:	1af3      	subs	r3, r6, r3
 8006bec:	4293      	cmp	r3, r2
 8006bee:	dceb      	bgt.n	8006bc8 <_printf_float+0x31c>
 8006bf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bf2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006bf4:	19ad      	adds	r5, r5, r6
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	db10      	blt.n	8006c1c <_printf_float+0x370>
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	07db      	lsls	r3, r3, #31
 8006bfe:	d40d      	bmi.n	8006c1c <_printf_float+0x370>
 8006c00:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8006c02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c04:	1bbe      	subs	r6, r7, r6
 8006c06:	1aff      	subs	r7, r7, r3
 8006c08:	42b7      	cmp	r7, r6
 8006c0a:	dd00      	ble.n	8006c0e <_printf_float+0x362>
 8006c0c:	0037      	movs	r7, r6
 8006c0e:	2f00      	cmp	r7, #0
 8006c10:	dc0d      	bgt.n	8006c2e <_printf_float+0x382>
 8006c12:	43fe      	mvns	r6, r7
 8006c14:	17f3      	asrs	r3, r6, #31
 8006c16:	2500      	movs	r5, #0
 8006c18:	930c      	str	r3, [sp, #48]	; 0x30
 8006c1a:	e01c      	b.n	8006c56 <_printf_float+0x3aa>
 8006c1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c20:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c24:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006c26:	47b8      	blx	r7
 8006c28:	1c43      	adds	r3, r0, #1
 8006c2a:	d1e9      	bne.n	8006c00 <_printf_float+0x354>
 8006c2c:	e699      	b.n	8006962 <_printf_float+0xb6>
 8006c2e:	003b      	movs	r3, r7
 8006c30:	002a      	movs	r2, r5
 8006c32:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c36:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006c38:	47a8      	blx	r5
 8006c3a:	1c43      	adds	r3, r0, #1
 8006c3c:	d1e9      	bne.n	8006c12 <_printf_float+0x366>
 8006c3e:	e690      	b.n	8006962 <_printf_float+0xb6>
 8006c40:	0022      	movs	r2, r4
 8006c42:	2301      	movs	r3, #1
 8006c44:	321a      	adds	r2, #26
 8006c46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c4a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006c4c:	47b0      	blx	r6
 8006c4e:	1c43      	adds	r3, r0, #1
 8006c50:	d100      	bne.n	8006c54 <_printf_float+0x3a8>
 8006c52:	e686      	b.n	8006962 <_printf_float+0xb6>
 8006c54:	3501      	adds	r5, #1
 8006c56:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006c58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006c5c:	1a9b      	subs	r3, r3, r2
 8006c5e:	003a      	movs	r2, r7
 8006c60:	400a      	ands	r2, r1
 8006c62:	1a9b      	subs	r3, r3, r2
 8006c64:	42ab      	cmp	r3, r5
 8006c66:	dceb      	bgt.n	8006c40 <_printf_float+0x394>
 8006c68:	e744      	b.n	8006af4 <_printf_float+0x248>
 8006c6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	dc02      	bgt.n	8006c76 <_printf_float+0x3ca>
 8006c70:	2301      	movs	r3, #1
 8006c72:	421a      	tst	r2, r3
 8006c74:	d032      	beq.n	8006cdc <_printf_float+0x430>
 8006c76:	2301      	movs	r3, #1
 8006c78:	002a      	movs	r2, r5
 8006c7a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c7e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006c80:	47b8      	blx	r7
 8006c82:	1c43      	adds	r3, r0, #1
 8006c84:	d100      	bne.n	8006c88 <_printf_float+0x3dc>
 8006c86:	e66c      	b.n	8006962 <_printf_float+0xb6>
 8006c88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c90:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006c92:	3501      	adds	r5, #1
 8006c94:	47b8      	blx	r7
 8006c96:	1c43      	adds	r3, r0, #1
 8006c98:	d100      	bne.n	8006c9c <_printf_float+0x3f0>
 8006c9a:	e662      	b.n	8006962 <_printf_float+0xb6>
 8006c9c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006c9e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006ca0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	1e5f      	subs	r7, r3, #1
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	f7f9 fbc6 	bl	8000438 <__aeabi_dcmpeq>
 8006cac:	003b      	movs	r3, r7
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	d014      	beq.n	8006cdc <_printf_float+0x430>
 8006cb2:	2500      	movs	r5, #0
 8006cb4:	e00a      	b.n	8006ccc <_printf_float+0x420>
 8006cb6:	0022      	movs	r2, r4
 8006cb8:	2301      	movs	r3, #1
 8006cba:	321a      	adds	r2, #26
 8006cbc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006cbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cc0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006cc2:	47b8      	blx	r7
 8006cc4:	1c43      	adds	r3, r0, #1
 8006cc6:	d100      	bne.n	8006cca <_printf_float+0x41e>
 8006cc8:	e64b      	b.n	8006962 <_printf_float+0xb6>
 8006cca:	3501      	adds	r5, #1
 8006ccc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	42ab      	cmp	r3, r5
 8006cd2:	dcf0      	bgt.n	8006cb6 <_printf_float+0x40a>
 8006cd4:	0022      	movs	r2, r4
 8006cd6:	0033      	movs	r3, r6
 8006cd8:	3250      	adds	r2, #80	; 0x50
 8006cda:	e6db      	b.n	8006a94 <_printf_float+0x1e8>
 8006cdc:	002a      	movs	r2, r5
 8006cde:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ce2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006ce4:	47a8      	blx	r5
 8006ce6:	1c43      	adds	r3, r0, #1
 8006ce8:	d1f4      	bne.n	8006cd4 <_printf_float+0x428>
 8006cea:	e63a      	b.n	8006962 <_printf_float+0xb6>
 8006cec:	0022      	movs	r2, r4
 8006cee:	2301      	movs	r3, #1
 8006cf0:	3219      	adds	r2, #25
 8006cf2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cf6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006cf8:	47b0      	blx	r6
 8006cfa:	1c43      	adds	r3, r0, #1
 8006cfc:	d100      	bne.n	8006d00 <_printf_float+0x454>
 8006cfe:	e630      	b.n	8006962 <_printf_float+0xb6>
 8006d00:	3501      	adds	r5, #1
 8006d02:	68e3      	ldr	r3, [r4, #12]
 8006d04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d06:	1a9b      	subs	r3, r3, r2
 8006d08:	42ab      	cmp	r3, r5
 8006d0a:	dcef      	bgt.n	8006cec <_printf_float+0x440>
 8006d0c:	e6f6      	b.n	8006afc <_printf_float+0x250>
 8006d0e:	2500      	movs	r5, #0
 8006d10:	e7f7      	b.n	8006d02 <_printf_float+0x456>
 8006d12:	2a00      	cmp	r2, #0
 8006d14:	d100      	bne.n	8006d18 <_printf_float+0x46c>
 8006d16:	e689      	b.n	8006a2c <_printf_float+0x180>
 8006d18:	2100      	movs	r1, #0
 8006d1a:	9106      	str	r1, [sp, #24]
 8006d1c:	a912      	add	r1, sp, #72	; 0x48
 8006d1e:	9105      	str	r1, [sp, #20]
 8006d20:	a911      	add	r1, sp, #68	; 0x44
 8006d22:	9103      	str	r1, [sp, #12]
 8006d24:	2123      	movs	r1, #35	; 0x23
 8006d26:	a808      	add	r0, sp, #32
 8006d28:	1809      	adds	r1, r1, r0
 8006d2a:	6023      	str	r3, [r4, #0]
 8006d2c:	9301      	str	r3, [sp, #4]
 8006d2e:	9200      	str	r2, [sp, #0]
 8006d30:	002b      	movs	r3, r5
 8006d32:	9704      	str	r7, [sp, #16]
 8006d34:	9102      	str	r1, [sp, #8]
 8006d36:	0032      	movs	r2, r6
 8006d38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d3a:	f7ff fd1a 	bl	8006772 <__cvt>
 8006d3e:	0005      	movs	r5, r0
 8006d40:	e645      	b.n	80069ce <_printf_float+0x122>
 8006d42:	46c0      	nop			; (mov r8, r8)

08006d44 <_printf_common>:
 8006d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d46:	0015      	movs	r5, r2
 8006d48:	9301      	str	r3, [sp, #4]
 8006d4a:	688a      	ldr	r2, [r1, #8]
 8006d4c:	690b      	ldr	r3, [r1, #16]
 8006d4e:	9000      	str	r0, [sp, #0]
 8006d50:	000c      	movs	r4, r1
 8006d52:	4293      	cmp	r3, r2
 8006d54:	da00      	bge.n	8006d58 <_printf_common+0x14>
 8006d56:	0013      	movs	r3, r2
 8006d58:	0022      	movs	r2, r4
 8006d5a:	602b      	str	r3, [r5, #0]
 8006d5c:	3243      	adds	r2, #67	; 0x43
 8006d5e:	7812      	ldrb	r2, [r2, #0]
 8006d60:	2a00      	cmp	r2, #0
 8006d62:	d001      	beq.n	8006d68 <_printf_common+0x24>
 8006d64:	3301      	adds	r3, #1
 8006d66:	602b      	str	r3, [r5, #0]
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	069b      	lsls	r3, r3, #26
 8006d6c:	d502      	bpl.n	8006d74 <_printf_common+0x30>
 8006d6e:	682b      	ldr	r3, [r5, #0]
 8006d70:	3302      	adds	r3, #2
 8006d72:	602b      	str	r3, [r5, #0]
 8006d74:	2706      	movs	r7, #6
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	401f      	ands	r7, r3
 8006d7a:	d027      	beq.n	8006dcc <_printf_common+0x88>
 8006d7c:	0023      	movs	r3, r4
 8006d7e:	3343      	adds	r3, #67	; 0x43
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	1e5a      	subs	r2, r3, #1
 8006d84:	4193      	sbcs	r3, r2
 8006d86:	6822      	ldr	r2, [r4, #0]
 8006d88:	0692      	lsls	r2, r2, #26
 8006d8a:	d430      	bmi.n	8006dee <_printf_common+0xaa>
 8006d8c:	0022      	movs	r2, r4
 8006d8e:	9901      	ldr	r1, [sp, #4]
 8006d90:	3243      	adds	r2, #67	; 0x43
 8006d92:	9800      	ldr	r0, [sp, #0]
 8006d94:	9e08      	ldr	r6, [sp, #32]
 8006d96:	47b0      	blx	r6
 8006d98:	1c43      	adds	r3, r0, #1
 8006d9a:	d025      	beq.n	8006de8 <_printf_common+0xa4>
 8006d9c:	2306      	movs	r3, #6
 8006d9e:	6820      	ldr	r0, [r4, #0]
 8006da0:	682a      	ldr	r2, [r5, #0]
 8006da2:	68e1      	ldr	r1, [r4, #12]
 8006da4:	4003      	ands	r3, r0
 8006da6:	2500      	movs	r5, #0
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	d103      	bne.n	8006db4 <_printf_common+0x70>
 8006dac:	1a8d      	subs	r5, r1, r2
 8006dae:	43eb      	mvns	r3, r5
 8006db0:	17db      	asrs	r3, r3, #31
 8006db2:	401d      	ands	r5, r3
 8006db4:	68a3      	ldr	r3, [r4, #8]
 8006db6:	6922      	ldr	r2, [r4, #16]
 8006db8:	4293      	cmp	r3, r2
 8006dba:	dd01      	ble.n	8006dc0 <_printf_common+0x7c>
 8006dbc:	1a9b      	subs	r3, r3, r2
 8006dbe:	18ed      	adds	r5, r5, r3
 8006dc0:	2700      	movs	r7, #0
 8006dc2:	42bd      	cmp	r5, r7
 8006dc4:	d120      	bne.n	8006e08 <_printf_common+0xc4>
 8006dc6:	2000      	movs	r0, #0
 8006dc8:	e010      	b.n	8006dec <_printf_common+0xa8>
 8006dca:	3701      	adds	r7, #1
 8006dcc:	68e3      	ldr	r3, [r4, #12]
 8006dce:	682a      	ldr	r2, [r5, #0]
 8006dd0:	1a9b      	subs	r3, r3, r2
 8006dd2:	42bb      	cmp	r3, r7
 8006dd4:	ddd2      	ble.n	8006d7c <_printf_common+0x38>
 8006dd6:	0022      	movs	r2, r4
 8006dd8:	2301      	movs	r3, #1
 8006dda:	3219      	adds	r2, #25
 8006ddc:	9901      	ldr	r1, [sp, #4]
 8006dde:	9800      	ldr	r0, [sp, #0]
 8006de0:	9e08      	ldr	r6, [sp, #32]
 8006de2:	47b0      	blx	r6
 8006de4:	1c43      	adds	r3, r0, #1
 8006de6:	d1f0      	bne.n	8006dca <_printf_common+0x86>
 8006de8:	2001      	movs	r0, #1
 8006dea:	4240      	negs	r0, r0
 8006dec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006dee:	2030      	movs	r0, #48	; 0x30
 8006df0:	18e1      	adds	r1, r4, r3
 8006df2:	3143      	adds	r1, #67	; 0x43
 8006df4:	7008      	strb	r0, [r1, #0]
 8006df6:	0021      	movs	r1, r4
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	3145      	adds	r1, #69	; 0x45
 8006dfc:	7809      	ldrb	r1, [r1, #0]
 8006dfe:	18a2      	adds	r2, r4, r2
 8006e00:	3243      	adds	r2, #67	; 0x43
 8006e02:	3302      	adds	r3, #2
 8006e04:	7011      	strb	r1, [r2, #0]
 8006e06:	e7c1      	b.n	8006d8c <_printf_common+0x48>
 8006e08:	0022      	movs	r2, r4
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	321a      	adds	r2, #26
 8006e0e:	9901      	ldr	r1, [sp, #4]
 8006e10:	9800      	ldr	r0, [sp, #0]
 8006e12:	9e08      	ldr	r6, [sp, #32]
 8006e14:	47b0      	blx	r6
 8006e16:	1c43      	adds	r3, r0, #1
 8006e18:	d0e6      	beq.n	8006de8 <_printf_common+0xa4>
 8006e1a:	3701      	adds	r7, #1
 8006e1c:	e7d1      	b.n	8006dc2 <_printf_common+0x7e>

08006e1e <quorem>:
 8006e1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e20:	6903      	ldr	r3, [r0, #16]
 8006e22:	690c      	ldr	r4, [r1, #16]
 8006e24:	b089      	sub	sp, #36	; 0x24
 8006e26:	0007      	movs	r7, r0
 8006e28:	9105      	str	r1, [sp, #20]
 8006e2a:	2600      	movs	r6, #0
 8006e2c:	42a3      	cmp	r3, r4
 8006e2e:	db65      	blt.n	8006efc <quorem+0xde>
 8006e30:	000b      	movs	r3, r1
 8006e32:	3c01      	subs	r4, #1
 8006e34:	3314      	adds	r3, #20
 8006e36:	00a5      	lsls	r5, r4, #2
 8006e38:	9303      	str	r3, [sp, #12]
 8006e3a:	195b      	adds	r3, r3, r5
 8006e3c:	9304      	str	r3, [sp, #16]
 8006e3e:	0003      	movs	r3, r0
 8006e40:	3314      	adds	r3, #20
 8006e42:	9302      	str	r3, [sp, #8]
 8006e44:	195d      	adds	r5, r3, r5
 8006e46:	9b04      	ldr	r3, [sp, #16]
 8006e48:	6828      	ldr	r0, [r5, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	1c59      	adds	r1, r3, #1
 8006e4e:	9301      	str	r3, [sp, #4]
 8006e50:	f7f9 f96c 	bl	800012c <__udivsi3>
 8006e54:	9001      	str	r0, [sp, #4]
 8006e56:	42b0      	cmp	r0, r6
 8006e58:	d029      	beq.n	8006eae <quorem+0x90>
 8006e5a:	9b03      	ldr	r3, [sp, #12]
 8006e5c:	9802      	ldr	r0, [sp, #8]
 8006e5e:	469c      	mov	ip, r3
 8006e60:	9606      	str	r6, [sp, #24]
 8006e62:	4662      	mov	r2, ip
 8006e64:	ca08      	ldmia	r2!, {r3}
 8006e66:	4694      	mov	ip, r2
 8006e68:	9a01      	ldr	r2, [sp, #4]
 8006e6a:	b299      	uxth	r1, r3
 8006e6c:	4351      	muls	r1, r2
 8006e6e:	0c1b      	lsrs	r3, r3, #16
 8006e70:	4353      	muls	r3, r2
 8006e72:	1989      	adds	r1, r1, r6
 8006e74:	0c0a      	lsrs	r2, r1, #16
 8006e76:	189b      	adds	r3, r3, r2
 8006e78:	9307      	str	r3, [sp, #28]
 8006e7a:	0c1e      	lsrs	r6, r3, #16
 8006e7c:	6803      	ldr	r3, [r0, #0]
 8006e7e:	b289      	uxth	r1, r1
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	9b06      	ldr	r3, [sp, #24]
 8006e84:	18d2      	adds	r2, r2, r3
 8006e86:	6803      	ldr	r3, [r0, #0]
 8006e88:	1a52      	subs	r2, r2, r1
 8006e8a:	0c19      	lsrs	r1, r3, #16
 8006e8c:	466b      	mov	r3, sp
 8006e8e:	8b9b      	ldrh	r3, [r3, #28]
 8006e90:	1acb      	subs	r3, r1, r3
 8006e92:	1411      	asrs	r1, r2, #16
 8006e94:	185b      	adds	r3, r3, r1
 8006e96:	1419      	asrs	r1, r3, #16
 8006e98:	b292      	uxth	r2, r2
 8006e9a:	041b      	lsls	r3, r3, #16
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	9b04      	ldr	r3, [sp, #16]
 8006ea0:	9106      	str	r1, [sp, #24]
 8006ea2:	c004      	stmia	r0!, {r2}
 8006ea4:	4563      	cmp	r3, ip
 8006ea6:	d2dc      	bcs.n	8006e62 <quorem+0x44>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d02d      	beq.n	8006f0a <quorem+0xec>
 8006eae:	9905      	ldr	r1, [sp, #20]
 8006eb0:	0038      	movs	r0, r7
 8006eb2:	f001 f845 	bl	8007f40 <__mcmp>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	db1f      	blt.n	8006efa <quorem+0xdc>
 8006eba:	2500      	movs	r5, #0
 8006ebc:	9b01      	ldr	r3, [sp, #4]
 8006ebe:	9802      	ldr	r0, [sp, #8]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	9903      	ldr	r1, [sp, #12]
 8006ec4:	9301      	str	r3, [sp, #4]
 8006ec6:	6802      	ldr	r2, [r0, #0]
 8006ec8:	c908      	ldmia	r1!, {r3}
 8006eca:	b292      	uxth	r2, r2
 8006ecc:	1955      	adds	r5, r2, r5
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	1aaa      	subs	r2, r5, r2
 8006ed2:	6805      	ldr	r5, [r0, #0]
 8006ed4:	0c1b      	lsrs	r3, r3, #16
 8006ed6:	0c2d      	lsrs	r5, r5, #16
 8006ed8:	1aeb      	subs	r3, r5, r3
 8006eda:	1415      	asrs	r5, r2, #16
 8006edc:	195b      	adds	r3, r3, r5
 8006ede:	141d      	asrs	r5, r3, #16
 8006ee0:	b292      	uxth	r2, r2
 8006ee2:	041b      	lsls	r3, r3, #16
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	c008      	stmia	r0!, {r3}
 8006ee8:	9b04      	ldr	r3, [sp, #16]
 8006eea:	428b      	cmp	r3, r1
 8006eec:	d2eb      	bcs.n	8006ec6 <quorem+0xa8>
 8006eee:	9a02      	ldr	r2, [sp, #8]
 8006ef0:	00a3      	lsls	r3, r4, #2
 8006ef2:	18d3      	adds	r3, r2, r3
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	2a00      	cmp	r2, #0
 8006ef8:	d011      	beq.n	8006f1e <quorem+0x100>
 8006efa:	9e01      	ldr	r6, [sp, #4]
 8006efc:	0030      	movs	r0, r6
 8006efe:	b009      	add	sp, #36	; 0x24
 8006f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f02:	682b      	ldr	r3, [r5, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d104      	bne.n	8006f12 <quorem+0xf4>
 8006f08:	3c01      	subs	r4, #1
 8006f0a:	9b02      	ldr	r3, [sp, #8]
 8006f0c:	3d04      	subs	r5, #4
 8006f0e:	42ab      	cmp	r3, r5
 8006f10:	d3f7      	bcc.n	8006f02 <quorem+0xe4>
 8006f12:	613c      	str	r4, [r7, #16]
 8006f14:	e7cb      	b.n	8006eae <quorem+0x90>
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	2a00      	cmp	r2, #0
 8006f1a:	d104      	bne.n	8006f26 <quorem+0x108>
 8006f1c:	3c01      	subs	r4, #1
 8006f1e:	9a02      	ldr	r2, [sp, #8]
 8006f20:	3b04      	subs	r3, #4
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d3f7      	bcc.n	8006f16 <quorem+0xf8>
 8006f26:	613c      	str	r4, [r7, #16]
 8006f28:	e7e7      	b.n	8006efa <quorem+0xdc>
	...

08006f2c <_dtoa_r>:
 8006f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f2e:	0016      	movs	r6, r2
 8006f30:	001f      	movs	r7, r3
 8006f32:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006f34:	b09b      	sub	sp, #108	; 0x6c
 8006f36:	9002      	str	r0, [sp, #8]
 8006f38:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8006f3a:	9606      	str	r6, [sp, #24]
 8006f3c:	9707      	str	r7, [sp, #28]
 8006f3e:	2c00      	cmp	r4, #0
 8006f40:	d108      	bne.n	8006f54 <_dtoa_r+0x28>
 8006f42:	2010      	movs	r0, #16
 8006f44:	f000 fdde 	bl	8007b04 <malloc>
 8006f48:	9b02      	ldr	r3, [sp, #8]
 8006f4a:	6258      	str	r0, [r3, #36]	; 0x24
 8006f4c:	6044      	str	r4, [r0, #4]
 8006f4e:	6084      	str	r4, [r0, #8]
 8006f50:	6004      	str	r4, [r0, #0]
 8006f52:	60c4      	str	r4, [r0, #12]
 8006f54:	9b02      	ldr	r3, [sp, #8]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f58:	6819      	ldr	r1, [r3, #0]
 8006f5a:	2900      	cmp	r1, #0
 8006f5c:	d00b      	beq.n	8006f76 <_dtoa_r+0x4a>
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	2301      	movs	r3, #1
 8006f62:	4093      	lsls	r3, r2
 8006f64:	604a      	str	r2, [r1, #4]
 8006f66:	608b      	str	r3, [r1, #8]
 8006f68:	9802      	ldr	r0, [sp, #8]
 8006f6a:	f000 fe0d 	bl	8007b88 <_Bfree>
 8006f6e:	2200      	movs	r2, #0
 8006f70:	9b02      	ldr	r3, [sp, #8]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	2f00      	cmp	r7, #0
 8006f78:	da20      	bge.n	8006fbc <_dtoa_r+0x90>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	602b      	str	r3, [r5, #0]
 8006f7e:	007b      	lsls	r3, r7, #1
 8006f80:	085b      	lsrs	r3, r3, #1
 8006f82:	9307      	str	r3, [sp, #28]
 8006f84:	9c07      	ldr	r4, [sp, #28]
 8006f86:	4bb2      	ldr	r3, [pc, #712]	; (8007250 <_dtoa_r+0x324>)
 8006f88:	0022      	movs	r2, r4
 8006f8a:	9317      	str	r3, [sp, #92]	; 0x5c
 8006f8c:	401a      	ands	r2, r3
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d117      	bne.n	8006fc2 <_dtoa_r+0x96>
 8006f92:	4bb0      	ldr	r3, [pc, #704]	; (8007254 <_dtoa_r+0x328>)
 8006f94:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	9b06      	ldr	r3, [sp, #24]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d103      	bne.n	8006fa6 <_dtoa_r+0x7a>
 8006f9e:	0324      	lsls	r4, r4, #12
 8006fa0:	d101      	bne.n	8006fa6 <_dtoa_r+0x7a>
 8006fa2:	f000 fd87 	bl	8007ab4 <_dtoa_r+0xb88>
 8006fa6:	4bac      	ldr	r3, [pc, #688]	; (8007258 <_dtoa_r+0x32c>)
 8006fa8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006faa:	9308      	str	r3, [sp, #32]
 8006fac:	2a00      	cmp	r2, #0
 8006fae:	d002      	beq.n	8006fb6 <_dtoa_r+0x8a>
 8006fb0:	4baa      	ldr	r3, [pc, #680]	; (800725c <_dtoa_r+0x330>)
 8006fb2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	9808      	ldr	r0, [sp, #32]
 8006fb8:	b01b      	add	sp, #108	; 0x6c
 8006fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	602b      	str	r3, [r5, #0]
 8006fc0:	e7e0      	b.n	8006f84 <_dtoa_r+0x58>
 8006fc2:	9e06      	ldr	r6, [sp, #24]
 8006fc4:	9f07      	ldr	r7, [sp, #28]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	2300      	movs	r3, #0
 8006fca:	0030      	movs	r0, r6
 8006fcc:	0039      	movs	r1, r7
 8006fce:	f7f9 fa33 	bl	8000438 <__aeabi_dcmpeq>
 8006fd2:	1e05      	subs	r5, r0, #0
 8006fd4:	d00b      	beq.n	8006fee <_dtoa_r+0xc2>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	4ba0      	ldr	r3, [pc, #640]	; (8007260 <_dtoa_r+0x334>)
 8006fde:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006fe0:	9308      	str	r3, [sp, #32]
 8006fe2:	2a00      	cmp	r2, #0
 8006fe4:	d0e7      	beq.n	8006fb6 <_dtoa_r+0x8a>
 8006fe6:	4a9f      	ldr	r2, [pc, #636]	; (8007264 <_dtoa_r+0x338>)
 8006fe8:	9924      	ldr	r1, [sp, #144]	; 0x90
 8006fea:	600a      	str	r2, [r1, #0]
 8006fec:	e7e3      	b.n	8006fb6 <_dtoa_r+0x8a>
 8006fee:	ab18      	add	r3, sp, #96	; 0x60
 8006ff0:	9301      	str	r3, [sp, #4]
 8006ff2:	ab19      	add	r3, sp, #100	; 0x64
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	0032      	movs	r2, r6
 8006ff8:	003b      	movs	r3, r7
 8006ffa:	9802      	ldr	r0, [sp, #8]
 8006ffc:	f001 f81e 	bl	800803c <__d2b>
 8007000:	0063      	lsls	r3, r4, #1
 8007002:	9003      	str	r0, [sp, #12]
 8007004:	0d5b      	lsrs	r3, r3, #21
 8007006:	d074      	beq.n	80070f2 <_dtoa_r+0x1c6>
 8007008:	033a      	lsls	r2, r7, #12
 800700a:	4c97      	ldr	r4, [pc, #604]	; (8007268 <_dtoa_r+0x33c>)
 800700c:	0b12      	lsrs	r2, r2, #12
 800700e:	4314      	orrs	r4, r2
 8007010:	0021      	movs	r1, r4
 8007012:	4a96      	ldr	r2, [pc, #600]	; (800726c <_dtoa_r+0x340>)
 8007014:	0030      	movs	r0, r6
 8007016:	9516      	str	r5, [sp, #88]	; 0x58
 8007018:	189e      	adds	r6, r3, r2
 800701a:	2200      	movs	r2, #0
 800701c:	4b94      	ldr	r3, [pc, #592]	; (8007270 <_dtoa_r+0x344>)
 800701e:	f7fa fbd1 	bl	80017c4 <__aeabi_dsub>
 8007022:	4a94      	ldr	r2, [pc, #592]	; (8007274 <_dtoa_r+0x348>)
 8007024:	4b94      	ldr	r3, [pc, #592]	; (8007278 <_dtoa_r+0x34c>)
 8007026:	f7fa f95b 	bl	80012e0 <__aeabi_dmul>
 800702a:	4a94      	ldr	r2, [pc, #592]	; (800727c <_dtoa_r+0x350>)
 800702c:	4b94      	ldr	r3, [pc, #592]	; (8007280 <_dtoa_r+0x354>)
 800702e:	f7f9 fa31 	bl	8000494 <__aeabi_dadd>
 8007032:	0004      	movs	r4, r0
 8007034:	0030      	movs	r0, r6
 8007036:	000d      	movs	r5, r1
 8007038:	f7fa ff5e 	bl	8001ef8 <__aeabi_i2d>
 800703c:	4a91      	ldr	r2, [pc, #580]	; (8007284 <_dtoa_r+0x358>)
 800703e:	4b92      	ldr	r3, [pc, #584]	; (8007288 <_dtoa_r+0x35c>)
 8007040:	f7fa f94e 	bl	80012e0 <__aeabi_dmul>
 8007044:	0002      	movs	r2, r0
 8007046:	000b      	movs	r3, r1
 8007048:	0020      	movs	r0, r4
 800704a:	0029      	movs	r1, r5
 800704c:	f7f9 fa22 	bl	8000494 <__aeabi_dadd>
 8007050:	0004      	movs	r4, r0
 8007052:	000d      	movs	r5, r1
 8007054:	f7fa ff1a 	bl	8001e8c <__aeabi_d2iz>
 8007058:	2200      	movs	r2, #0
 800705a:	0007      	movs	r7, r0
 800705c:	2300      	movs	r3, #0
 800705e:	0020      	movs	r0, r4
 8007060:	0029      	movs	r1, r5
 8007062:	f7f9 f9ef 	bl	8000444 <__aeabi_dcmplt>
 8007066:	2800      	cmp	r0, #0
 8007068:	d009      	beq.n	800707e <_dtoa_r+0x152>
 800706a:	0038      	movs	r0, r7
 800706c:	f7fa ff44 	bl	8001ef8 <__aeabi_i2d>
 8007070:	002b      	movs	r3, r5
 8007072:	0022      	movs	r2, r4
 8007074:	f7f9 f9e0 	bl	8000438 <__aeabi_dcmpeq>
 8007078:	4243      	negs	r3, r0
 800707a:	4158      	adcs	r0, r3
 800707c:	1a3f      	subs	r7, r7, r0
 800707e:	2301      	movs	r3, #1
 8007080:	9314      	str	r3, [sp, #80]	; 0x50
 8007082:	2f16      	cmp	r7, #22
 8007084:	d80d      	bhi.n	80070a2 <_dtoa_r+0x176>
 8007086:	4981      	ldr	r1, [pc, #516]	; (800728c <_dtoa_r+0x360>)
 8007088:	00fb      	lsls	r3, r7, #3
 800708a:	18c9      	adds	r1, r1, r3
 800708c:	6808      	ldr	r0, [r1, #0]
 800708e:	6849      	ldr	r1, [r1, #4]
 8007090:	9a06      	ldr	r2, [sp, #24]
 8007092:	9b07      	ldr	r3, [sp, #28]
 8007094:	f7f9 f9ea 	bl	800046c <__aeabi_dcmpgt>
 8007098:	2800      	cmp	r0, #0
 800709a:	d046      	beq.n	800712a <_dtoa_r+0x1fe>
 800709c:	2300      	movs	r3, #0
 800709e:	3f01      	subs	r7, #1
 80070a0:	9314      	str	r3, [sp, #80]	; 0x50
 80070a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80070a4:	1b9e      	subs	r6, r3, r6
 80070a6:	2300      	movs	r3, #0
 80070a8:	930a      	str	r3, [sp, #40]	; 0x28
 80070aa:	0033      	movs	r3, r6
 80070ac:	3b01      	subs	r3, #1
 80070ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80070b0:	d504      	bpl.n	80070bc <_dtoa_r+0x190>
 80070b2:	2301      	movs	r3, #1
 80070b4:	1b9b      	subs	r3, r3, r6
 80070b6:	930a      	str	r3, [sp, #40]	; 0x28
 80070b8:	2300      	movs	r3, #0
 80070ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80070bc:	2f00      	cmp	r7, #0
 80070be:	db36      	blt.n	800712e <_dtoa_r+0x202>
 80070c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070c2:	9711      	str	r7, [sp, #68]	; 0x44
 80070c4:	19db      	adds	r3, r3, r7
 80070c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80070c8:	2300      	movs	r3, #0
 80070ca:	9304      	str	r3, [sp, #16]
 80070cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80070ce:	2401      	movs	r4, #1
 80070d0:	2b09      	cmp	r3, #9
 80070d2:	d900      	bls.n	80070d6 <_dtoa_r+0x1aa>
 80070d4:	e084      	b.n	80071e0 <_dtoa_r+0x2b4>
 80070d6:	2b05      	cmp	r3, #5
 80070d8:	dd02      	ble.n	80070e0 <_dtoa_r+0x1b4>
 80070da:	2400      	movs	r4, #0
 80070dc:	3b04      	subs	r3, #4
 80070de:	9320      	str	r3, [sp, #128]	; 0x80
 80070e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80070e2:	1e98      	subs	r0, r3, #2
 80070e4:	2803      	cmp	r0, #3
 80070e6:	d900      	bls.n	80070ea <_dtoa_r+0x1be>
 80070e8:	e084      	b.n	80071f4 <_dtoa_r+0x2c8>
 80070ea:	f7f9 f815 	bl	8000118 <__gnu_thumb1_case_uqi>
 80070ee:	7775      	.short	0x7775
 80070f0:	6a28      	.short	0x6a28
 80070f2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80070f4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80070f6:	189e      	adds	r6, r3, r2
 80070f8:	4b65      	ldr	r3, [pc, #404]	; (8007290 <_dtoa_r+0x364>)
 80070fa:	18f2      	adds	r2, r6, r3
 80070fc:	2a20      	cmp	r2, #32
 80070fe:	dd0f      	ble.n	8007120 <_dtoa_r+0x1f4>
 8007100:	2340      	movs	r3, #64	; 0x40
 8007102:	1a9b      	subs	r3, r3, r2
 8007104:	409c      	lsls	r4, r3
 8007106:	4b63      	ldr	r3, [pc, #396]	; (8007294 <_dtoa_r+0x368>)
 8007108:	9806      	ldr	r0, [sp, #24]
 800710a:	18f3      	adds	r3, r6, r3
 800710c:	40d8      	lsrs	r0, r3
 800710e:	4320      	orrs	r0, r4
 8007110:	f7fa ff2c 	bl	8001f6c <__aeabi_ui2d>
 8007114:	2301      	movs	r3, #1
 8007116:	4c60      	ldr	r4, [pc, #384]	; (8007298 <_dtoa_r+0x36c>)
 8007118:	3e01      	subs	r6, #1
 800711a:	1909      	adds	r1, r1, r4
 800711c:	9316      	str	r3, [sp, #88]	; 0x58
 800711e:	e77c      	b.n	800701a <_dtoa_r+0xee>
 8007120:	2320      	movs	r3, #32
 8007122:	9806      	ldr	r0, [sp, #24]
 8007124:	1a9b      	subs	r3, r3, r2
 8007126:	4098      	lsls	r0, r3
 8007128:	e7f2      	b.n	8007110 <_dtoa_r+0x1e4>
 800712a:	9014      	str	r0, [sp, #80]	; 0x50
 800712c:	e7b9      	b.n	80070a2 <_dtoa_r+0x176>
 800712e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007130:	1bdb      	subs	r3, r3, r7
 8007132:	930a      	str	r3, [sp, #40]	; 0x28
 8007134:	427b      	negs	r3, r7
 8007136:	9304      	str	r3, [sp, #16]
 8007138:	2300      	movs	r3, #0
 800713a:	9311      	str	r3, [sp, #68]	; 0x44
 800713c:	e7c6      	b.n	80070cc <_dtoa_r+0x1a0>
 800713e:	2301      	movs	r3, #1
 8007140:	930d      	str	r3, [sp, #52]	; 0x34
 8007142:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007144:	2b00      	cmp	r3, #0
 8007146:	dd59      	ble.n	80071fc <_dtoa_r+0x2d0>
 8007148:	930c      	str	r3, [sp, #48]	; 0x30
 800714a:	9309      	str	r3, [sp, #36]	; 0x24
 800714c:	9a02      	ldr	r2, [sp, #8]
 800714e:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8007150:	2200      	movs	r2, #0
 8007152:	606a      	str	r2, [r5, #4]
 8007154:	3204      	adds	r2, #4
 8007156:	0010      	movs	r0, r2
 8007158:	3014      	adds	r0, #20
 800715a:	6869      	ldr	r1, [r5, #4]
 800715c:	4298      	cmp	r0, r3
 800715e:	d952      	bls.n	8007206 <_dtoa_r+0x2da>
 8007160:	9802      	ldr	r0, [sp, #8]
 8007162:	f000 fcd9 	bl	8007b18 <_Balloc>
 8007166:	9b02      	ldr	r3, [sp, #8]
 8007168:	6028      	str	r0, [r5, #0]
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	9308      	str	r3, [sp, #32]
 8007170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007172:	2b0e      	cmp	r3, #14
 8007174:	d900      	bls.n	8007178 <_dtoa_r+0x24c>
 8007176:	e10a      	b.n	800738e <_dtoa_r+0x462>
 8007178:	2c00      	cmp	r4, #0
 800717a:	d100      	bne.n	800717e <_dtoa_r+0x252>
 800717c:	e107      	b.n	800738e <_dtoa_r+0x462>
 800717e:	9b06      	ldr	r3, [sp, #24]
 8007180:	9c07      	ldr	r4, [sp, #28]
 8007182:	9312      	str	r3, [sp, #72]	; 0x48
 8007184:	9413      	str	r4, [sp, #76]	; 0x4c
 8007186:	2f00      	cmp	r7, #0
 8007188:	dc00      	bgt.n	800718c <_dtoa_r+0x260>
 800718a:	e089      	b.n	80072a0 <_dtoa_r+0x374>
 800718c:	210f      	movs	r1, #15
 800718e:	003a      	movs	r2, r7
 8007190:	4b3e      	ldr	r3, [pc, #248]	; (800728c <_dtoa_r+0x360>)
 8007192:	400a      	ands	r2, r1
 8007194:	00d2      	lsls	r2, r2, #3
 8007196:	189b      	adds	r3, r3, r2
 8007198:	681d      	ldr	r5, [r3, #0]
 800719a:	685e      	ldr	r6, [r3, #4]
 800719c:	2302      	movs	r3, #2
 800719e:	113c      	asrs	r4, r7, #4
 80071a0:	930e      	str	r3, [sp, #56]	; 0x38
 80071a2:	06e3      	lsls	r3, r4, #27
 80071a4:	d50b      	bpl.n	80071be <_dtoa_r+0x292>
 80071a6:	4b3d      	ldr	r3, [pc, #244]	; (800729c <_dtoa_r+0x370>)
 80071a8:	400c      	ands	r4, r1
 80071aa:	6a1a      	ldr	r2, [r3, #32]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	9812      	ldr	r0, [sp, #72]	; 0x48
 80071b0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80071b2:	f7f9 fc8b 	bl	8000acc <__aeabi_ddiv>
 80071b6:	2303      	movs	r3, #3
 80071b8:	9006      	str	r0, [sp, #24]
 80071ba:	9107      	str	r1, [sp, #28]
 80071bc:	930e      	str	r3, [sp, #56]	; 0x38
 80071be:	2300      	movs	r3, #0
 80071c0:	e03a      	b.n	8007238 <_dtoa_r+0x30c>
 80071c2:	2301      	movs	r3, #1
 80071c4:	930d      	str	r3, [sp, #52]	; 0x34
 80071c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071c8:	18fb      	adds	r3, r7, r3
 80071ca:	930c      	str	r3, [sp, #48]	; 0x30
 80071cc:	3301      	adds	r3, #1
 80071ce:	9309      	str	r3, [sp, #36]	; 0x24
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	dcbb      	bgt.n	800714c <_dtoa_r+0x220>
 80071d4:	2301      	movs	r3, #1
 80071d6:	e7b9      	b.n	800714c <_dtoa_r+0x220>
 80071d8:	2300      	movs	r3, #0
 80071da:	e7b1      	b.n	8007140 <_dtoa_r+0x214>
 80071dc:	2300      	movs	r3, #0
 80071de:	e7f1      	b.n	80071c4 <_dtoa_r+0x298>
 80071e0:	2300      	movs	r3, #0
 80071e2:	940d      	str	r4, [sp, #52]	; 0x34
 80071e4:	9320      	str	r3, [sp, #128]	; 0x80
 80071e6:	3b01      	subs	r3, #1
 80071e8:	2200      	movs	r2, #0
 80071ea:	930c      	str	r3, [sp, #48]	; 0x30
 80071ec:	9309      	str	r3, [sp, #36]	; 0x24
 80071ee:	3313      	adds	r3, #19
 80071f0:	9221      	str	r2, [sp, #132]	; 0x84
 80071f2:	e7ab      	b.n	800714c <_dtoa_r+0x220>
 80071f4:	2301      	movs	r3, #1
 80071f6:	930d      	str	r3, [sp, #52]	; 0x34
 80071f8:	3b02      	subs	r3, #2
 80071fa:	e7f5      	b.n	80071e8 <_dtoa_r+0x2bc>
 80071fc:	2301      	movs	r3, #1
 80071fe:	930c      	str	r3, [sp, #48]	; 0x30
 8007200:	9309      	str	r3, [sp, #36]	; 0x24
 8007202:	001a      	movs	r2, r3
 8007204:	e7f4      	b.n	80071f0 <_dtoa_r+0x2c4>
 8007206:	3101      	adds	r1, #1
 8007208:	6069      	str	r1, [r5, #4]
 800720a:	0052      	lsls	r2, r2, #1
 800720c:	e7a3      	b.n	8007156 <_dtoa_r+0x22a>
 800720e:	2301      	movs	r3, #1
 8007210:	421c      	tst	r4, r3
 8007212:	d00e      	beq.n	8007232 <_dtoa_r+0x306>
 8007214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007216:	4a21      	ldr	r2, [pc, #132]	; (800729c <_dtoa_r+0x370>)
 8007218:	3301      	adds	r3, #1
 800721a:	930e      	str	r3, [sp, #56]	; 0x38
 800721c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800721e:	0028      	movs	r0, r5
 8007220:	00db      	lsls	r3, r3, #3
 8007222:	189b      	adds	r3, r3, r2
 8007224:	0031      	movs	r1, r6
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f7fa f859 	bl	80012e0 <__aeabi_dmul>
 800722e:	0005      	movs	r5, r0
 8007230:	000e      	movs	r6, r1
 8007232:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007234:	1064      	asrs	r4, r4, #1
 8007236:	3301      	adds	r3, #1
 8007238:	9310      	str	r3, [sp, #64]	; 0x40
 800723a:	2c00      	cmp	r4, #0
 800723c:	d1e7      	bne.n	800720e <_dtoa_r+0x2e2>
 800723e:	9806      	ldr	r0, [sp, #24]
 8007240:	9907      	ldr	r1, [sp, #28]
 8007242:	002a      	movs	r2, r5
 8007244:	0033      	movs	r3, r6
 8007246:	f7f9 fc41 	bl	8000acc <__aeabi_ddiv>
 800724a:	9006      	str	r0, [sp, #24]
 800724c:	9107      	str	r1, [sp, #28]
 800724e:	e042      	b.n	80072d6 <_dtoa_r+0x3aa>
 8007250:	7ff00000 	.word	0x7ff00000
 8007254:	0000270f 	.word	0x0000270f
 8007258:	0800833b 	.word	0x0800833b
 800725c:	0800833e 	.word	0x0800833e
 8007260:	08008330 	.word	0x08008330
 8007264:	08008331 	.word	0x08008331
 8007268:	3ff00000 	.word	0x3ff00000
 800726c:	fffffc01 	.word	0xfffffc01
 8007270:	3ff80000 	.word	0x3ff80000
 8007274:	636f4361 	.word	0x636f4361
 8007278:	3fd287a7 	.word	0x3fd287a7
 800727c:	8b60c8b3 	.word	0x8b60c8b3
 8007280:	3fc68a28 	.word	0x3fc68a28
 8007284:	509f79fb 	.word	0x509f79fb
 8007288:	3fd34413 	.word	0x3fd34413
 800728c:	08008368 	.word	0x08008368
 8007290:	00000432 	.word	0x00000432
 8007294:	00000412 	.word	0x00000412
 8007298:	fe100000 	.word	0xfe100000
 800729c:	08008340 	.word	0x08008340
 80072a0:	2302      	movs	r3, #2
 80072a2:	930e      	str	r3, [sp, #56]	; 0x38
 80072a4:	2f00      	cmp	r7, #0
 80072a6:	d016      	beq.n	80072d6 <_dtoa_r+0x3aa>
 80072a8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80072aa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80072ac:	427c      	negs	r4, r7
 80072ae:	330d      	adds	r3, #13
 80072b0:	4023      	ands	r3, r4
 80072b2:	4ace      	ldr	r2, [pc, #824]	; (80075ec <_dtoa_r+0x6c0>)
 80072b4:	00db      	lsls	r3, r3, #3
 80072b6:	18d3      	adds	r3, r2, r3
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f7fa f810 	bl	80012e0 <__aeabi_dmul>
 80072c0:	2300      	movs	r3, #0
 80072c2:	2601      	movs	r6, #1
 80072c4:	001d      	movs	r5, r3
 80072c6:	9006      	str	r0, [sp, #24]
 80072c8:	9107      	str	r1, [sp, #28]
 80072ca:	1124      	asrs	r4, r4, #4
 80072cc:	2c00      	cmp	r4, #0
 80072ce:	d000      	beq.n	80072d2 <_dtoa_r+0x3a6>
 80072d0:	e08c      	b.n	80073ec <_dtoa_r+0x4c0>
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1b9      	bne.n	800724a <_dtoa_r+0x31e>
 80072d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d100      	bne.n	80072de <_dtoa_r+0x3b2>
 80072dc:	e096      	b.n	800740c <_dtoa_r+0x4e0>
 80072de:	9c06      	ldr	r4, [sp, #24]
 80072e0:	9d07      	ldr	r5, [sp, #28]
 80072e2:	2200      	movs	r2, #0
 80072e4:	4bc2      	ldr	r3, [pc, #776]	; (80075f0 <_dtoa_r+0x6c4>)
 80072e6:	0020      	movs	r0, r4
 80072e8:	0029      	movs	r1, r5
 80072ea:	f7f9 f8ab 	bl	8000444 <__aeabi_dcmplt>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	d100      	bne.n	80072f4 <_dtoa_r+0x3c8>
 80072f2:	e08b      	b.n	800740c <_dtoa_r+0x4e0>
 80072f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d100      	bne.n	80072fc <_dtoa_r+0x3d0>
 80072fa:	e087      	b.n	800740c <_dtoa_r+0x4e0>
 80072fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072fe:	2b00      	cmp	r3, #0
 8007300:	dd41      	ble.n	8007386 <_dtoa_r+0x45a>
 8007302:	4bbc      	ldr	r3, [pc, #752]	; (80075f4 <_dtoa_r+0x6c8>)
 8007304:	2200      	movs	r2, #0
 8007306:	0020      	movs	r0, r4
 8007308:	0029      	movs	r1, r5
 800730a:	f7f9 ffe9 	bl	80012e0 <__aeabi_dmul>
 800730e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007310:	9006      	str	r0, [sp, #24]
 8007312:	9107      	str	r1, [sp, #28]
 8007314:	3301      	adds	r3, #1
 8007316:	930e      	str	r3, [sp, #56]	; 0x38
 8007318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800731a:	1e7e      	subs	r6, r7, #1
 800731c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800731e:	9310      	str	r3, [sp, #64]	; 0x40
 8007320:	f7fa fdea 	bl	8001ef8 <__aeabi_i2d>
 8007324:	9a06      	ldr	r2, [sp, #24]
 8007326:	9b07      	ldr	r3, [sp, #28]
 8007328:	f7f9 ffda 	bl	80012e0 <__aeabi_dmul>
 800732c:	2200      	movs	r2, #0
 800732e:	4bb2      	ldr	r3, [pc, #712]	; (80075f8 <_dtoa_r+0x6cc>)
 8007330:	f7f9 f8b0 	bl	8000494 <__aeabi_dadd>
 8007334:	4ab1      	ldr	r2, [pc, #708]	; (80075fc <_dtoa_r+0x6d0>)
 8007336:	900e      	str	r0, [sp, #56]	; 0x38
 8007338:	910f      	str	r1, [sp, #60]	; 0x3c
 800733a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800733c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800733e:	4694      	mov	ip, r2
 8007340:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007342:	4463      	add	r3, ip
 8007344:	9315      	str	r3, [sp, #84]	; 0x54
 8007346:	001d      	movs	r5, r3
 8007348:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800734a:	2b00      	cmp	r3, #0
 800734c:	d161      	bne.n	8007412 <_dtoa_r+0x4e6>
 800734e:	9806      	ldr	r0, [sp, #24]
 8007350:	9907      	ldr	r1, [sp, #28]
 8007352:	2200      	movs	r2, #0
 8007354:	4baa      	ldr	r3, [pc, #680]	; (8007600 <_dtoa_r+0x6d4>)
 8007356:	f7fa fa35 	bl	80017c4 <__aeabi_dsub>
 800735a:	0022      	movs	r2, r4
 800735c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800735e:	9006      	str	r0, [sp, #24]
 8007360:	9107      	str	r1, [sp, #28]
 8007362:	f7f9 f883 	bl	800046c <__aeabi_dcmpgt>
 8007366:	2800      	cmp	r0, #0
 8007368:	d000      	beq.n	800736c <_dtoa_r+0x440>
 800736a:	e2a8      	b.n	80078be <_dtoa_r+0x992>
 800736c:	48a5      	ldr	r0, [pc, #660]	; (8007604 <_dtoa_r+0x6d8>)
 800736e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007370:	4684      	mov	ip, r0
 8007372:	4461      	add	r1, ip
 8007374:	000b      	movs	r3, r1
 8007376:	9806      	ldr	r0, [sp, #24]
 8007378:	9907      	ldr	r1, [sp, #28]
 800737a:	0022      	movs	r2, r4
 800737c:	f7f9 f862 	bl	8000444 <__aeabi_dcmplt>
 8007380:	2800      	cmp	r0, #0
 8007382:	d000      	beq.n	8007386 <_dtoa_r+0x45a>
 8007384:	e295      	b.n	80078b2 <_dtoa_r+0x986>
 8007386:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007388:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800738a:	9306      	str	r3, [sp, #24]
 800738c:	9407      	str	r4, [sp, #28]
 800738e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007390:	2b00      	cmp	r3, #0
 8007392:	da00      	bge.n	8007396 <_dtoa_r+0x46a>
 8007394:	e15c      	b.n	8007650 <_dtoa_r+0x724>
 8007396:	2f0e      	cmp	r7, #14
 8007398:	dd00      	ble.n	800739c <_dtoa_r+0x470>
 800739a:	e159      	b.n	8007650 <_dtoa_r+0x724>
 800739c:	4b93      	ldr	r3, [pc, #588]	; (80075ec <_dtoa_r+0x6c0>)
 800739e:	00fa      	lsls	r2, r7, #3
 80073a0:	189b      	adds	r3, r3, r2
 80073a2:	685c      	ldr	r4, [r3, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	9304      	str	r3, [sp, #16]
 80073a8:	9405      	str	r4, [sp, #20]
 80073aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	db00      	blt.n	80073b2 <_dtoa_r+0x486>
 80073b0:	e0d8      	b.n	8007564 <_dtoa_r+0x638>
 80073b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	dd00      	ble.n	80073ba <_dtoa_r+0x48e>
 80073b8:	e0d4      	b.n	8007564 <_dtoa_r+0x638>
 80073ba:	d000      	beq.n	80073be <_dtoa_r+0x492>
 80073bc:	e27d      	b.n	80078ba <_dtoa_r+0x98e>
 80073be:	9804      	ldr	r0, [sp, #16]
 80073c0:	9905      	ldr	r1, [sp, #20]
 80073c2:	2200      	movs	r2, #0
 80073c4:	4b8e      	ldr	r3, [pc, #568]	; (8007600 <_dtoa_r+0x6d4>)
 80073c6:	f7f9 ff8b 	bl	80012e0 <__aeabi_dmul>
 80073ca:	9a06      	ldr	r2, [sp, #24]
 80073cc:	9b07      	ldr	r3, [sp, #28]
 80073ce:	f7f9 f857 	bl	8000480 <__aeabi_dcmpge>
 80073d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d4:	9304      	str	r3, [sp, #16]
 80073d6:	001e      	movs	r6, r3
 80073d8:	2800      	cmp	r0, #0
 80073da:	d000      	beq.n	80073de <_dtoa_r+0x4b2>
 80073dc:	e24f      	b.n	800787e <_dtoa_r+0x952>
 80073de:	9b08      	ldr	r3, [sp, #32]
 80073e0:	9a08      	ldr	r2, [sp, #32]
 80073e2:	1c5d      	adds	r5, r3, #1
 80073e4:	2331      	movs	r3, #49	; 0x31
 80073e6:	3701      	adds	r7, #1
 80073e8:	7013      	strb	r3, [r2, #0]
 80073ea:	e24b      	b.n	8007884 <_dtoa_r+0x958>
 80073ec:	4234      	tst	r4, r6
 80073ee:	d00a      	beq.n	8007406 <_dtoa_r+0x4da>
 80073f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073f2:	4a85      	ldr	r2, [pc, #532]	; (8007608 <_dtoa_r+0x6dc>)
 80073f4:	3301      	adds	r3, #1
 80073f6:	930e      	str	r3, [sp, #56]	; 0x38
 80073f8:	00eb      	lsls	r3, r5, #3
 80073fa:	189b      	adds	r3, r3, r2
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f7f9 ff6e 	bl	80012e0 <__aeabi_dmul>
 8007404:	0033      	movs	r3, r6
 8007406:	1064      	asrs	r4, r4, #1
 8007408:	3501      	adds	r5, #1
 800740a:	e75f      	b.n	80072cc <_dtoa_r+0x3a0>
 800740c:	003e      	movs	r6, r7
 800740e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007410:	e784      	b.n	800731c <_dtoa_r+0x3f0>
 8007412:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007414:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007416:	1e5a      	subs	r2, r3, #1
 8007418:	4b74      	ldr	r3, [pc, #464]	; (80075ec <_dtoa_r+0x6c0>)
 800741a:	00d2      	lsls	r2, r2, #3
 800741c:	189b      	adds	r3, r3, r2
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	2900      	cmp	r1, #0
 8007424:	d049      	beq.n	80074ba <_dtoa_r+0x58e>
 8007426:	2000      	movs	r0, #0
 8007428:	4978      	ldr	r1, [pc, #480]	; (800760c <_dtoa_r+0x6e0>)
 800742a:	f7f9 fb4f 	bl	8000acc <__aeabi_ddiv>
 800742e:	002b      	movs	r3, r5
 8007430:	0022      	movs	r2, r4
 8007432:	f7fa f9c7 	bl	80017c4 <__aeabi_dsub>
 8007436:	9b08      	ldr	r3, [sp, #32]
 8007438:	900e      	str	r0, [sp, #56]	; 0x38
 800743a:	910f      	str	r1, [sp, #60]	; 0x3c
 800743c:	9315      	str	r3, [sp, #84]	; 0x54
 800743e:	9806      	ldr	r0, [sp, #24]
 8007440:	9907      	ldr	r1, [sp, #28]
 8007442:	f7fa fd23 	bl	8001e8c <__aeabi_d2iz>
 8007446:	0004      	movs	r4, r0
 8007448:	f7fa fd56 	bl	8001ef8 <__aeabi_i2d>
 800744c:	0002      	movs	r2, r0
 800744e:	000b      	movs	r3, r1
 8007450:	9806      	ldr	r0, [sp, #24]
 8007452:	9907      	ldr	r1, [sp, #28]
 8007454:	f7fa f9b6 	bl	80017c4 <__aeabi_dsub>
 8007458:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800745a:	3430      	adds	r4, #48	; 0x30
 800745c:	1c5d      	adds	r5, r3, #1
 800745e:	701c      	strb	r4, [r3, #0]
 8007460:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007462:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007464:	9006      	str	r0, [sp, #24]
 8007466:	9107      	str	r1, [sp, #28]
 8007468:	f7f8 ffec 	bl	8000444 <__aeabi_dcmplt>
 800746c:	2800      	cmp	r0, #0
 800746e:	d16c      	bne.n	800754a <_dtoa_r+0x61e>
 8007470:	9a06      	ldr	r2, [sp, #24]
 8007472:	9b07      	ldr	r3, [sp, #28]
 8007474:	2000      	movs	r0, #0
 8007476:	495e      	ldr	r1, [pc, #376]	; (80075f0 <_dtoa_r+0x6c4>)
 8007478:	f7fa f9a4 	bl	80017c4 <__aeabi_dsub>
 800747c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800747e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007480:	f7f8 ffe0 	bl	8000444 <__aeabi_dcmplt>
 8007484:	2800      	cmp	r0, #0
 8007486:	d000      	beq.n	800748a <_dtoa_r+0x55e>
 8007488:	e0c3      	b.n	8007612 <_dtoa_r+0x6e6>
 800748a:	9b08      	ldr	r3, [sp, #32]
 800748c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800748e:	1aeb      	subs	r3, r5, r3
 8007490:	429a      	cmp	r2, r3
 8007492:	dc00      	bgt.n	8007496 <_dtoa_r+0x56a>
 8007494:	e777      	b.n	8007386 <_dtoa_r+0x45a>
 8007496:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007498:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800749a:	2200      	movs	r2, #0
 800749c:	4b55      	ldr	r3, [pc, #340]	; (80075f4 <_dtoa_r+0x6c8>)
 800749e:	f7f9 ff1f 	bl	80012e0 <__aeabi_dmul>
 80074a2:	2200      	movs	r2, #0
 80074a4:	900e      	str	r0, [sp, #56]	; 0x38
 80074a6:	910f      	str	r1, [sp, #60]	; 0x3c
 80074a8:	9806      	ldr	r0, [sp, #24]
 80074aa:	9907      	ldr	r1, [sp, #28]
 80074ac:	4b51      	ldr	r3, [pc, #324]	; (80075f4 <_dtoa_r+0x6c8>)
 80074ae:	f7f9 ff17 	bl	80012e0 <__aeabi_dmul>
 80074b2:	9515      	str	r5, [sp, #84]	; 0x54
 80074b4:	9006      	str	r0, [sp, #24]
 80074b6:	9107      	str	r1, [sp, #28]
 80074b8:	e7c1      	b.n	800743e <_dtoa_r+0x512>
 80074ba:	0020      	movs	r0, r4
 80074bc:	0029      	movs	r1, r5
 80074be:	f7f9 ff0f 	bl	80012e0 <__aeabi_dmul>
 80074c2:	9c08      	ldr	r4, [sp, #32]
 80074c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074c6:	0023      	movs	r3, r4
 80074c8:	4694      	mov	ip, r2
 80074ca:	900e      	str	r0, [sp, #56]	; 0x38
 80074cc:	910f      	str	r1, [sp, #60]	; 0x3c
 80074ce:	4463      	add	r3, ip
 80074d0:	9315      	str	r3, [sp, #84]	; 0x54
 80074d2:	9806      	ldr	r0, [sp, #24]
 80074d4:	9907      	ldr	r1, [sp, #28]
 80074d6:	f7fa fcd9 	bl	8001e8c <__aeabi_d2iz>
 80074da:	0005      	movs	r5, r0
 80074dc:	f7fa fd0c 	bl	8001ef8 <__aeabi_i2d>
 80074e0:	000b      	movs	r3, r1
 80074e2:	0002      	movs	r2, r0
 80074e4:	9806      	ldr	r0, [sp, #24]
 80074e6:	9907      	ldr	r1, [sp, #28]
 80074e8:	f7fa f96c 	bl	80017c4 <__aeabi_dsub>
 80074ec:	3530      	adds	r5, #48	; 0x30
 80074ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074f0:	7025      	strb	r5, [r4, #0]
 80074f2:	3401      	adds	r4, #1
 80074f4:	9006      	str	r0, [sp, #24]
 80074f6:	9107      	str	r1, [sp, #28]
 80074f8:	42a3      	cmp	r3, r4
 80074fa:	d12a      	bne.n	8007552 <_dtoa_r+0x626>
 80074fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80074fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007500:	9a08      	ldr	r2, [sp, #32]
 8007502:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007504:	4694      	mov	ip, r2
 8007506:	4463      	add	r3, ip
 8007508:	2200      	movs	r2, #0
 800750a:	001d      	movs	r5, r3
 800750c:	4b3f      	ldr	r3, [pc, #252]	; (800760c <_dtoa_r+0x6e0>)
 800750e:	f7f8 ffc1 	bl	8000494 <__aeabi_dadd>
 8007512:	0002      	movs	r2, r0
 8007514:	000b      	movs	r3, r1
 8007516:	9806      	ldr	r0, [sp, #24]
 8007518:	9907      	ldr	r1, [sp, #28]
 800751a:	f7f8 ffa7 	bl	800046c <__aeabi_dcmpgt>
 800751e:	2800      	cmp	r0, #0
 8007520:	d000      	beq.n	8007524 <_dtoa_r+0x5f8>
 8007522:	e076      	b.n	8007612 <_dtoa_r+0x6e6>
 8007524:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007526:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007528:	2000      	movs	r0, #0
 800752a:	4938      	ldr	r1, [pc, #224]	; (800760c <_dtoa_r+0x6e0>)
 800752c:	f7fa f94a 	bl	80017c4 <__aeabi_dsub>
 8007530:	0002      	movs	r2, r0
 8007532:	000b      	movs	r3, r1
 8007534:	9806      	ldr	r0, [sp, #24]
 8007536:	9907      	ldr	r1, [sp, #28]
 8007538:	f7f8 ff84 	bl	8000444 <__aeabi_dcmplt>
 800753c:	2800      	cmp	r0, #0
 800753e:	d100      	bne.n	8007542 <_dtoa_r+0x616>
 8007540:	e721      	b.n	8007386 <_dtoa_r+0x45a>
 8007542:	1e6b      	subs	r3, r5, #1
 8007544:	781a      	ldrb	r2, [r3, #0]
 8007546:	2a30      	cmp	r2, #48	; 0x30
 8007548:	d001      	beq.n	800754e <_dtoa_r+0x622>
 800754a:	0037      	movs	r7, r6
 800754c:	e03f      	b.n	80075ce <_dtoa_r+0x6a2>
 800754e:	001d      	movs	r5, r3
 8007550:	e7f7      	b.n	8007542 <_dtoa_r+0x616>
 8007552:	9806      	ldr	r0, [sp, #24]
 8007554:	9907      	ldr	r1, [sp, #28]
 8007556:	2200      	movs	r2, #0
 8007558:	4b26      	ldr	r3, [pc, #152]	; (80075f4 <_dtoa_r+0x6c8>)
 800755a:	f7f9 fec1 	bl	80012e0 <__aeabi_dmul>
 800755e:	9006      	str	r0, [sp, #24]
 8007560:	9107      	str	r1, [sp, #28]
 8007562:	e7b6      	b.n	80074d2 <_dtoa_r+0x5a6>
 8007564:	9e08      	ldr	r6, [sp, #32]
 8007566:	9a04      	ldr	r2, [sp, #16]
 8007568:	9b05      	ldr	r3, [sp, #20]
 800756a:	9806      	ldr	r0, [sp, #24]
 800756c:	9907      	ldr	r1, [sp, #28]
 800756e:	f7f9 faad 	bl	8000acc <__aeabi_ddiv>
 8007572:	f7fa fc8b 	bl	8001e8c <__aeabi_d2iz>
 8007576:	0004      	movs	r4, r0
 8007578:	f7fa fcbe 	bl	8001ef8 <__aeabi_i2d>
 800757c:	9a04      	ldr	r2, [sp, #16]
 800757e:	9b05      	ldr	r3, [sp, #20]
 8007580:	f7f9 feae 	bl	80012e0 <__aeabi_dmul>
 8007584:	0002      	movs	r2, r0
 8007586:	000b      	movs	r3, r1
 8007588:	9806      	ldr	r0, [sp, #24]
 800758a:	9907      	ldr	r1, [sp, #28]
 800758c:	f7fa f91a 	bl	80017c4 <__aeabi_dsub>
 8007590:	0023      	movs	r3, r4
 8007592:	3330      	adds	r3, #48	; 0x30
 8007594:	7033      	strb	r3, [r6, #0]
 8007596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007598:	9b08      	ldr	r3, [sp, #32]
 800759a:	1c75      	adds	r5, r6, #1
 800759c:	1aeb      	subs	r3, r5, r3
 800759e:	429a      	cmp	r2, r3
 80075a0:	d148      	bne.n	8007634 <_dtoa_r+0x708>
 80075a2:	0002      	movs	r2, r0
 80075a4:	000b      	movs	r3, r1
 80075a6:	f7f8 ff75 	bl	8000494 <__aeabi_dadd>
 80075aa:	9a04      	ldr	r2, [sp, #16]
 80075ac:	9b05      	ldr	r3, [sp, #20]
 80075ae:	9006      	str	r0, [sp, #24]
 80075b0:	9107      	str	r1, [sp, #28]
 80075b2:	f7f8 ff5b 	bl	800046c <__aeabi_dcmpgt>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d12a      	bne.n	8007610 <_dtoa_r+0x6e4>
 80075ba:	9a04      	ldr	r2, [sp, #16]
 80075bc:	9b05      	ldr	r3, [sp, #20]
 80075be:	9806      	ldr	r0, [sp, #24]
 80075c0:	9907      	ldr	r1, [sp, #28]
 80075c2:	f7f8 ff39 	bl	8000438 <__aeabi_dcmpeq>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d001      	beq.n	80075ce <_dtoa_r+0x6a2>
 80075ca:	07e3      	lsls	r3, r4, #31
 80075cc:	d420      	bmi.n	8007610 <_dtoa_r+0x6e4>
 80075ce:	9903      	ldr	r1, [sp, #12]
 80075d0:	9802      	ldr	r0, [sp, #8]
 80075d2:	f000 fad9 	bl	8007b88 <_Bfree>
 80075d6:	2300      	movs	r3, #0
 80075d8:	702b      	strb	r3, [r5, #0]
 80075da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075dc:	3701      	adds	r7, #1
 80075de:	601f      	str	r7, [r3, #0]
 80075e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d100      	bne.n	80075e8 <_dtoa_r+0x6bc>
 80075e6:	e4e6      	b.n	8006fb6 <_dtoa_r+0x8a>
 80075e8:	601d      	str	r5, [r3, #0]
 80075ea:	e4e4      	b.n	8006fb6 <_dtoa_r+0x8a>
 80075ec:	08008368 	.word	0x08008368
 80075f0:	3ff00000 	.word	0x3ff00000
 80075f4:	40240000 	.word	0x40240000
 80075f8:	401c0000 	.word	0x401c0000
 80075fc:	fcc00000 	.word	0xfcc00000
 8007600:	40140000 	.word	0x40140000
 8007604:	7cc00000 	.word	0x7cc00000
 8007608:	08008340 	.word	0x08008340
 800760c:	3fe00000 	.word	0x3fe00000
 8007610:	003e      	movs	r6, r7
 8007612:	1e6b      	subs	r3, r5, #1
 8007614:	781a      	ldrb	r2, [r3, #0]
 8007616:	2a39      	cmp	r2, #57	; 0x39
 8007618:	d106      	bne.n	8007628 <_dtoa_r+0x6fc>
 800761a:	9a08      	ldr	r2, [sp, #32]
 800761c:	429a      	cmp	r2, r3
 800761e:	d107      	bne.n	8007630 <_dtoa_r+0x704>
 8007620:	2330      	movs	r3, #48	; 0x30
 8007622:	7013      	strb	r3, [r2, #0]
 8007624:	0013      	movs	r3, r2
 8007626:	3601      	adds	r6, #1
 8007628:	781a      	ldrb	r2, [r3, #0]
 800762a:	3201      	adds	r2, #1
 800762c:	701a      	strb	r2, [r3, #0]
 800762e:	e78c      	b.n	800754a <_dtoa_r+0x61e>
 8007630:	001d      	movs	r5, r3
 8007632:	e7ee      	b.n	8007612 <_dtoa_r+0x6e6>
 8007634:	2200      	movs	r2, #0
 8007636:	4ba4      	ldr	r3, [pc, #656]	; (80078c8 <_dtoa_r+0x99c>)
 8007638:	f7f9 fe52 	bl	80012e0 <__aeabi_dmul>
 800763c:	2200      	movs	r2, #0
 800763e:	2300      	movs	r3, #0
 8007640:	9006      	str	r0, [sp, #24]
 8007642:	9107      	str	r1, [sp, #28]
 8007644:	002e      	movs	r6, r5
 8007646:	f7f8 fef7 	bl	8000438 <__aeabi_dcmpeq>
 800764a:	2800      	cmp	r0, #0
 800764c:	d08b      	beq.n	8007566 <_dtoa_r+0x63a>
 800764e:	e7be      	b.n	80075ce <_dtoa_r+0x6a2>
 8007650:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007652:	2a00      	cmp	r2, #0
 8007654:	d100      	bne.n	8007658 <_dtoa_r+0x72c>
 8007656:	e0da      	b.n	800780e <_dtoa_r+0x8e2>
 8007658:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800765a:	2a01      	cmp	r2, #1
 800765c:	dd00      	ble.n	8007660 <_dtoa_r+0x734>
 800765e:	e0bd      	b.n	80077dc <_dtoa_r+0x8b0>
 8007660:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007662:	2a00      	cmp	r2, #0
 8007664:	d100      	bne.n	8007668 <_dtoa_r+0x73c>
 8007666:	e0b5      	b.n	80077d4 <_dtoa_r+0x8a8>
 8007668:	4a98      	ldr	r2, [pc, #608]	; (80078cc <_dtoa_r+0x9a0>)
 800766a:	189b      	adds	r3, r3, r2
 800766c:	9d04      	ldr	r5, [sp, #16]
 800766e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007672:	2101      	movs	r1, #1
 8007674:	18d2      	adds	r2, r2, r3
 8007676:	920a      	str	r2, [sp, #40]	; 0x28
 8007678:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800767a:	9802      	ldr	r0, [sp, #8]
 800767c:	18d3      	adds	r3, r2, r3
 800767e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007680:	f000 fb22 	bl	8007cc8 <__i2b>
 8007684:	0006      	movs	r6, r0
 8007686:	2c00      	cmp	r4, #0
 8007688:	dd0e      	ble.n	80076a8 <_dtoa_r+0x77c>
 800768a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800768c:	2b00      	cmp	r3, #0
 800768e:	dd0b      	ble.n	80076a8 <_dtoa_r+0x77c>
 8007690:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007692:	0023      	movs	r3, r4
 8007694:	4294      	cmp	r4, r2
 8007696:	dd00      	ble.n	800769a <_dtoa_r+0x76e>
 8007698:	0013      	movs	r3, r2
 800769a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800769c:	1ae4      	subs	r4, r4, r3
 800769e:	1ad2      	subs	r2, r2, r3
 80076a0:	920a      	str	r2, [sp, #40]	; 0x28
 80076a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80076a8:	9b04      	ldr	r3, [sp, #16]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d01f      	beq.n	80076ee <_dtoa_r+0x7c2>
 80076ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d100      	bne.n	80076b6 <_dtoa_r+0x78a>
 80076b4:	e0af      	b.n	8007816 <_dtoa_r+0x8ea>
 80076b6:	2d00      	cmp	r5, #0
 80076b8:	d011      	beq.n	80076de <_dtoa_r+0x7b2>
 80076ba:	0031      	movs	r1, r6
 80076bc:	002a      	movs	r2, r5
 80076be:	9802      	ldr	r0, [sp, #8]
 80076c0:	f000 fb9a 	bl	8007df8 <__pow5mult>
 80076c4:	9a03      	ldr	r2, [sp, #12]
 80076c6:	0001      	movs	r1, r0
 80076c8:	0006      	movs	r6, r0
 80076ca:	9802      	ldr	r0, [sp, #8]
 80076cc:	f000 fb05 	bl	8007cda <__multiply>
 80076d0:	9903      	ldr	r1, [sp, #12]
 80076d2:	9010      	str	r0, [sp, #64]	; 0x40
 80076d4:	9802      	ldr	r0, [sp, #8]
 80076d6:	f000 fa57 	bl	8007b88 <_Bfree>
 80076da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076dc:	9303      	str	r3, [sp, #12]
 80076de:	9b04      	ldr	r3, [sp, #16]
 80076e0:	1b5a      	subs	r2, r3, r5
 80076e2:	d004      	beq.n	80076ee <_dtoa_r+0x7c2>
 80076e4:	9903      	ldr	r1, [sp, #12]
 80076e6:	9802      	ldr	r0, [sp, #8]
 80076e8:	f000 fb86 	bl	8007df8 <__pow5mult>
 80076ec:	9003      	str	r0, [sp, #12]
 80076ee:	2101      	movs	r1, #1
 80076f0:	9802      	ldr	r0, [sp, #8]
 80076f2:	f000 fae9 	bl	8007cc8 <__i2b>
 80076f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076f8:	9004      	str	r0, [sp, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d100      	bne.n	8007700 <_dtoa_r+0x7d4>
 80076fe:	e1e3      	b.n	8007ac8 <_dtoa_r+0xb9c>
 8007700:	001a      	movs	r2, r3
 8007702:	0001      	movs	r1, r0
 8007704:	9802      	ldr	r0, [sp, #8]
 8007706:	f000 fb77 	bl	8007df8 <__pow5mult>
 800770a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800770c:	9004      	str	r0, [sp, #16]
 800770e:	2b01      	cmp	r3, #1
 8007710:	dd00      	ble.n	8007714 <_dtoa_r+0x7e8>
 8007712:	e082      	b.n	800781a <_dtoa_r+0x8ee>
 8007714:	2500      	movs	r5, #0
 8007716:	9b06      	ldr	r3, [sp, #24]
 8007718:	42ab      	cmp	r3, r5
 800771a:	d10e      	bne.n	800773a <_dtoa_r+0x80e>
 800771c:	9b07      	ldr	r3, [sp, #28]
 800771e:	031b      	lsls	r3, r3, #12
 8007720:	42ab      	cmp	r3, r5
 8007722:	d10a      	bne.n	800773a <_dtoa_r+0x80e>
 8007724:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007726:	9a07      	ldr	r2, [sp, #28]
 8007728:	4213      	tst	r3, r2
 800772a:	d006      	beq.n	800773a <_dtoa_r+0x80e>
 800772c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800772e:	3501      	adds	r5, #1
 8007730:	3301      	adds	r3, #1
 8007732:	930a      	str	r3, [sp, #40]	; 0x28
 8007734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007736:	3301      	adds	r3, #1
 8007738:	930b      	str	r3, [sp, #44]	; 0x2c
 800773a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800773c:	2001      	movs	r0, #1
 800773e:	2b00      	cmp	r3, #0
 8007740:	d16c      	bne.n	800781c <_dtoa_r+0x8f0>
 8007742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007744:	1818      	adds	r0, r3, r0
 8007746:	231f      	movs	r3, #31
 8007748:	4018      	ands	r0, r3
 800774a:	d07e      	beq.n	800784a <_dtoa_r+0x91e>
 800774c:	3301      	adds	r3, #1
 800774e:	1a1b      	subs	r3, r3, r0
 8007750:	2b04      	cmp	r3, #4
 8007752:	dd70      	ble.n	8007836 <_dtoa_r+0x90a>
 8007754:	231c      	movs	r3, #28
 8007756:	1a18      	subs	r0, r3, r0
 8007758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800775a:	1824      	adds	r4, r4, r0
 800775c:	181b      	adds	r3, r3, r0
 800775e:	930a      	str	r3, [sp, #40]	; 0x28
 8007760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007762:	181b      	adds	r3, r3, r0
 8007764:	930b      	str	r3, [sp, #44]	; 0x2c
 8007766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007768:	2b00      	cmp	r3, #0
 800776a:	dd05      	ble.n	8007778 <_dtoa_r+0x84c>
 800776c:	001a      	movs	r2, r3
 800776e:	9903      	ldr	r1, [sp, #12]
 8007770:	9802      	ldr	r0, [sp, #8]
 8007772:	f000 fb93 	bl	8007e9c <__lshift>
 8007776:	9003      	str	r0, [sp, #12]
 8007778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800777a:	2b00      	cmp	r3, #0
 800777c:	dd05      	ble.n	800778a <_dtoa_r+0x85e>
 800777e:	001a      	movs	r2, r3
 8007780:	9904      	ldr	r1, [sp, #16]
 8007782:	9802      	ldr	r0, [sp, #8]
 8007784:	f000 fb8a 	bl	8007e9c <__lshift>
 8007788:	9004      	str	r0, [sp, #16]
 800778a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800778c:	2b00      	cmp	r3, #0
 800778e:	d05e      	beq.n	800784e <_dtoa_r+0x922>
 8007790:	9904      	ldr	r1, [sp, #16]
 8007792:	9803      	ldr	r0, [sp, #12]
 8007794:	f000 fbd4 	bl	8007f40 <__mcmp>
 8007798:	2800      	cmp	r0, #0
 800779a:	da58      	bge.n	800784e <_dtoa_r+0x922>
 800779c:	2300      	movs	r3, #0
 800779e:	220a      	movs	r2, #10
 80077a0:	9903      	ldr	r1, [sp, #12]
 80077a2:	9802      	ldr	r0, [sp, #8]
 80077a4:	f000 fa09 	bl	8007bba <__multadd>
 80077a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077aa:	3f01      	subs	r7, #1
 80077ac:	9003      	str	r0, [sp, #12]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d100      	bne.n	80077b4 <_dtoa_r+0x888>
 80077b2:	e190      	b.n	8007ad6 <_dtoa_r+0xbaa>
 80077b4:	2300      	movs	r3, #0
 80077b6:	0031      	movs	r1, r6
 80077b8:	220a      	movs	r2, #10
 80077ba:	9802      	ldr	r0, [sp, #8]
 80077bc:	f000 f9fd 	bl	8007bba <__multadd>
 80077c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077c2:	0006      	movs	r6, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	dd00      	ble.n	80077ca <_dtoa_r+0x89e>
 80077c8:	e088      	b.n	80078dc <_dtoa_r+0x9b0>
 80077ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	dc00      	bgt.n	80077d2 <_dtoa_r+0x8a6>
 80077d0:	e084      	b.n	80078dc <_dtoa_r+0x9b0>
 80077d2:	e044      	b.n	800785e <_dtoa_r+0x932>
 80077d4:	2336      	movs	r3, #54	; 0x36
 80077d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80077d8:	1a9b      	subs	r3, r3, r2
 80077da:	e747      	b.n	800766c <_dtoa_r+0x740>
 80077dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077de:	1e5d      	subs	r5, r3, #1
 80077e0:	9b04      	ldr	r3, [sp, #16]
 80077e2:	42ab      	cmp	r3, r5
 80077e4:	db08      	blt.n	80077f8 <_dtoa_r+0x8cc>
 80077e6:	1b5d      	subs	r5, r3, r5
 80077e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	da0c      	bge.n	8007808 <_dtoa_r+0x8dc>
 80077ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077f2:	1a9c      	subs	r4, r3, r2
 80077f4:	2300      	movs	r3, #0
 80077f6:	e73b      	b.n	8007670 <_dtoa_r+0x744>
 80077f8:	9b04      	ldr	r3, [sp, #16]
 80077fa:	9504      	str	r5, [sp, #16]
 80077fc:	1aea      	subs	r2, r5, r3
 80077fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007800:	2500      	movs	r5, #0
 8007802:	189b      	adds	r3, r3, r2
 8007804:	9311      	str	r3, [sp, #68]	; 0x44
 8007806:	e7ef      	b.n	80077e8 <_dtoa_r+0x8bc>
 8007808:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800780a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800780c:	e730      	b.n	8007670 <_dtoa_r+0x744>
 800780e:	9d04      	ldr	r5, [sp, #16]
 8007810:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007812:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007814:	e737      	b.n	8007686 <_dtoa_r+0x75a>
 8007816:	9a04      	ldr	r2, [sp, #16]
 8007818:	e764      	b.n	80076e4 <_dtoa_r+0x7b8>
 800781a:	2500      	movs	r5, #0
 800781c:	9b04      	ldr	r3, [sp, #16]
 800781e:	9a04      	ldr	r2, [sp, #16]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	9310      	str	r3, [sp, #64]	; 0x40
 8007824:	3303      	adds	r3, #3
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	18d3      	adds	r3, r2, r3
 800782a:	6858      	ldr	r0, [r3, #4]
 800782c:	f000 fa03 	bl	8007c36 <__hi0bits>
 8007830:	2320      	movs	r3, #32
 8007832:	1a18      	subs	r0, r3, r0
 8007834:	e785      	b.n	8007742 <_dtoa_r+0x816>
 8007836:	2b04      	cmp	r3, #4
 8007838:	d095      	beq.n	8007766 <_dtoa_r+0x83a>
 800783a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800783c:	331c      	adds	r3, #28
 800783e:	18d2      	adds	r2, r2, r3
 8007840:	920a      	str	r2, [sp, #40]	; 0x28
 8007842:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007844:	18e4      	adds	r4, r4, r3
 8007846:	18d3      	adds	r3, r2, r3
 8007848:	e78c      	b.n	8007764 <_dtoa_r+0x838>
 800784a:	0003      	movs	r3, r0
 800784c:	e7f5      	b.n	800783a <_dtoa_r+0x90e>
 800784e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007850:	2b00      	cmp	r3, #0
 8007852:	dc3d      	bgt.n	80078d0 <_dtoa_r+0x9a4>
 8007854:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007856:	2b02      	cmp	r3, #2
 8007858:	dd3a      	ble.n	80078d0 <_dtoa_r+0x9a4>
 800785a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800785c:	930c      	str	r3, [sp, #48]	; 0x30
 800785e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10c      	bne.n	800787e <_dtoa_r+0x952>
 8007864:	9904      	ldr	r1, [sp, #16]
 8007866:	2205      	movs	r2, #5
 8007868:	9802      	ldr	r0, [sp, #8]
 800786a:	f000 f9a6 	bl	8007bba <__multadd>
 800786e:	9004      	str	r0, [sp, #16]
 8007870:	0001      	movs	r1, r0
 8007872:	9803      	ldr	r0, [sp, #12]
 8007874:	f000 fb64 	bl	8007f40 <__mcmp>
 8007878:	2800      	cmp	r0, #0
 800787a:	dd00      	ble.n	800787e <_dtoa_r+0x952>
 800787c:	e5af      	b.n	80073de <_dtoa_r+0x4b2>
 800787e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007880:	9d08      	ldr	r5, [sp, #32]
 8007882:	43df      	mvns	r7, r3
 8007884:	2300      	movs	r3, #0
 8007886:	9309      	str	r3, [sp, #36]	; 0x24
 8007888:	9904      	ldr	r1, [sp, #16]
 800788a:	9802      	ldr	r0, [sp, #8]
 800788c:	f000 f97c 	bl	8007b88 <_Bfree>
 8007890:	2e00      	cmp	r6, #0
 8007892:	d100      	bne.n	8007896 <_dtoa_r+0x96a>
 8007894:	e69b      	b.n	80075ce <_dtoa_r+0x6a2>
 8007896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007898:	2b00      	cmp	r3, #0
 800789a:	d005      	beq.n	80078a8 <_dtoa_r+0x97c>
 800789c:	42b3      	cmp	r3, r6
 800789e:	d003      	beq.n	80078a8 <_dtoa_r+0x97c>
 80078a0:	0019      	movs	r1, r3
 80078a2:	9802      	ldr	r0, [sp, #8]
 80078a4:	f000 f970 	bl	8007b88 <_Bfree>
 80078a8:	0031      	movs	r1, r6
 80078aa:	9802      	ldr	r0, [sp, #8]
 80078ac:	f000 f96c 	bl	8007b88 <_Bfree>
 80078b0:	e68d      	b.n	80075ce <_dtoa_r+0x6a2>
 80078b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078b4:	9304      	str	r3, [sp, #16]
 80078b6:	001e      	movs	r6, r3
 80078b8:	e7e1      	b.n	800787e <_dtoa_r+0x952>
 80078ba:	2300      	movs	r3, #0
 80078bc:	e7fa      	b.n	80078b4 <_dtoa_r+0x988>
 80078be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078c0:	0037      	movs	r7, r6
 80078c2:	9304      	str	r3, [sp, #16]
 80078c4:	001e      	movs	r6, r3
 80078c6:	e58a      	b.n	80073de <_dtoa_r+0x4b2>
 80078c8:	40240000 	.word	0x40240000
 80078cc:	00000433 	.word	0x00000433
 80078d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d100      	bne.n	80078d8 <_dtoa_r+0x9ac>
 80078d6:	e0b2      	b.n	8007a3e <_dtoa_r+0xb12>
 80078d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078da:	930c      	str	r3, [sp, #48]	; 0x30
 80078dc:	2c00      	cmp	r4, #0
 80078de:	dd05      	ble.n	80078ec <_dtoa_r+0x9c0>
 80078e0:	0031      	movs	r1, r6
 80078e2:	0022      	movs	r2, r4
 80078e4:	9802      	ldr	r0, [sp, #8]
 80078e6:	f000 fad9 	bl	8007e9c <__lshift>
 80078ea:	0006      	movs	r6, r0
 80078ec:	0030      	movs	r0, r6
 80078ee:	2d00      	cmp	r5, #0
 80078f0:	d011      	beq.n	8007916 <_dtoa_r+0x9ea>
 80078f2:	6871      	ldr	r1, [r6, #4]
 80078f4:	9802      	ldr	r0, [sp, #8]
 80078f6:	f000 f90f 	bl	8007b18 <_Balloc>
 80078fa:	0031      	movs	r1, r6
 80078fc:	0004      	movs	r4, r0
 80078fe:	6933      	ldr	r3, [r6, #16]
 8007900:	310c      	adds	r1, #12
 8007902:	1c9a      	adds	r2, r3, #2
 8007904:	0092      	lsls	r2, r2, #2
 8007906:	300c      	adds	r0, #12
 8007908:	f7fe ff22 	bl	8006750 <memcpy>
 800790c:	2201      	movs	r2, #1
 800790e:	0021      	movs	r1, r4
 8007910:	9802      	ldr	r0, [sp, #8]
 8007912:	f000 fac3 	bl	8007e9c <__lshift>
 8007916:	9609      	str	r6, [sp, #36]	; 0x24
 8007918:	0006      	movs	r6, r0
 800791a:	9b08      	ldr	r3, [sp, #32]
 800791c:	930a      	str	r3, [sp, #40]	; 0x28
 800791e:	9904      	ldr	r1, [sp, #16]
 8007920:	9803      	ldr	r0, [sp, #12]
 8007922:	f7ff fa7c 	bl	8006e1e <quorem>
 8007926:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007928:	900d      	str	r0, [sp, #52]	; 0x34
 800792a:	0004      	movs	r4, r0
 800792c:	9803      	ldr	r0, [sp, #12]
 800792e:	f000 fb07 	bl	8007f40 <__mcmp>
 8007932:	0032      	movs	r2, r6
 8007934:	9010      	str	r0, [sp, #64]	; 0x40
 8007936:	9904      	ldr	r1, [sp, #16]
 8007938:	9802      	ldr	r0, [sp, #8]
 800793a:	f000 fb1b 	bl	8007f74 <__mdiff>
 800793e:	2301      	movs	r3, #1
 8007940:	930b      	str	r3, [sp, #44]	; 0x2c
 8007942:	68c3      	ldr	r3, [r0, #12]
 8007944:	3430      	adds	r4, #48	; 0x30
 8007946:	0005      	movs	r5, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d104      	bne.n	8007956 <_dtoa_r+0xa2a>
 800794c:	0001      	movs	r1, r0
 800794e:	9803      	ldr	r0, [sp, #12]
 8007950:	f000 faf6 	bl	8007f40 <__mcmp>
 8007954:	900b      	str	r0, [sp, #44]	; 0x2c
 8007956:	0029      	movs	r1, r5
 8007958:	9802      	ldr	r0, [sp, #8]
 800795a:	f000 f915 	bl	8007b88 <_Bfree>
 800795e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007960:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007962:	4313      	orrs	r3, r2
 8007964:	d10e      	bne.n	8007984 <_dtoa_r+0xa58>
 8007966:	9a06      	ldr	r2, [sp, #24]
 8007968:	3301      	adds	r3, #1
 800796a:	4213      	tst	r3, r2
 800796c:	d10a      	bne.n	8007984 <_dtoa_r+0xa58>
 800796e:	2c39      	cmp	r4, #57	; 0x39
 8007970:	d026      	beq.n	80079c0 <_dtoa_r+0xa94>
 8007972:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007974:	2b00      	cmp	r3, #0
 8007976:	dd01      	ble.n	800797c <_dtoa_r+0xa50>
 8007978:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800797a:	3431      	adds	r4, #49	; 0x31
 800797c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800797e:	1c5d      	adds	r5, r3, #1
 8007980:	701c      	strb	r4, [r3, #0]
 8007982:	e781      	b.n	8007888 <_dtoa_r+0x95c>
 8007984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007986:	2b00      	cmp	r3, #0
 8007988:	db07      	blt.n	800799a <_dtoa_r+0xa6e>
 800798a:	001d      	movs	r5, r3
 800798c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800798e:	431d      	orrs	r5, r3
 8007990:	d122      	bne.n	80079d8 <_dtoa_r+0xaac>
 8007992:	2301      	movs	r3, #1
 8007994:	9a06      	ldr	r2, [sp, #24]
 8007996:	4213      	tst	r3, r2
 8007998:	d11e      	bne.n	80079d8 <_dtoa_r+0xaac>
 800799a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800799c:	2b00      	cmp	r3, #0
 800799e:	dded      	ble.n	800797c <_dtoa_r+0xa50>
 80079a0:	9903      	ldr	r1, [sp, #12]
 80079a2:	2201      	movs	r2, #1
 80079a4:	9802      	ldr	r0, [sp, #8]
 80079a6:	f000 fa79 	bl	8007e9c <__lshift>
 80079aa:	9904      	ldr	r1, [sp, #16]
 80079ac:	9003      	str	r0, [sp, #12]
 80079ae:	f000 fac7 	bl	8007f40 <__mcmp>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	dc02      	bgt.n	80079bc <_dtoa_r+0xa90>
 80079b6:	d1e1      	bne.n	800797c <_dtoa_r+0xa50>
 80079b8:	07e3      	lsls	r3, r4, #31
 80079ba:	d5df      	bpl.n	800797c <_dtoa_r+0xa50>
 80079bc:	2c39      	cmp	r4, #57	; 0x39
 80079be:	d1db      	bne.n	8007978 <_dtoa_r+0xa4c>
 80079c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079c4:	1c5d      	adds	r5, r3, #1
 80079c6:	2339      	movs	r3, #57	; 0x39
 80079c8:	7013      	strb	r3, [r2, #0]
 80079ca:	1e6b      	subs	r3, r5, #1
 80079cc:	781a      	ldrb	r2, [r3, #0]
 80079ce:	2a39      	cmp	r2, #57	; 0x39
 80079d0:	d067      	beq.n	8007aa2 <_dtoa_r+0xb76>
 80079d2:	3201      	adds	r2, #1
 80079d4:	701a      	strb	r2, [r3, #0]
 80079d6:	e757      	b.n	8007888 <_dtoa_r+0x95c>
 80079d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079da:	1c5d      	adds	r5, r3, #1
 80079dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079de:	2b00      	cmp	r3, #0
 80079e0:	dd04      	ble.n	80079ec <_dtoa_r+0xac0>
 80079e2:	2c39      	cmp	r4, #57	; 0x39
 80079e4:	d0ec      	beq.n	80079c0 <_dtoa_r+0xa94>
 80079e6:	3401      	adds	r4, #1
 80079e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ea:	e7c9      	b.n	8007980 <_dtoa_r+0xa54>
 80079ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079f0:	701c      	strb	r4, [r3, #0]
 80079f2:	9b08      	ldr	r3, [sp, #32]
 80079f4:	1aeb      	subs	r3, r5, r3
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d03e      	beq.n	8007a78 <_dtoa_r+0xb4c>
 80079fa:	2300      	movs	r3, #0
 80079fc:	220a      	movs	r2, #10
 80079fe:	9903      	ldr	r1, [sp, #12]
 8007a00:	9802      	ldr	r0, [sp, #8]
 8007a02:	f000 f8da 	bl	8007bba <__multadd>
 8007a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a08:	9003      	str	r0, [sp, #12]
 8007a0a:	42b3      	cmp	r3, r6
 8007a0c:	d109      	bne.n	8007a22 <_dtoa_r+0xaf6>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	220a      	movs	r2, #10
 8007a12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a14:	9802      	ldr	r0, [sp, #8]
 8007a16:	f000 f8d0 	bl	8007bba <__multadd>
 8007a1a:	9009      	str	r0, [sp, #36]	; 0x24
 8007a1c:	0006      	movs	r6, r0
 8007a1e:	950a      	str	r5, [sp, #40]	; 0x28
 8007a20:	e77d      	b.n	800791e <_dtoa_r+0x9f2>
 8007a22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a24:	2300      	movs	r3, #0
 8007a26:	220a      	movs	r2, #10
 8007a28:	9802      	ldr	r0, [sp, #8]
 8007a2a:	f000 f8c6 	bl	8007bba <__multadd>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	9009      	str	r0, [sp, #36]	; 0x24
 8007a32:	220a      	movs	r2, #10
 8007a34:	0031      	movs	r1, r6
 8007a36:	9802      	ldr	r0, [sp, #8]
 8007a38:	f000 f8bf 	bl	8007bba <__multadd>
 8007a3c:	e7ee      	b.n	8007a1c <_dtoa_r+0xaf0>
 8007a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a40:	930c      	str	r3, [sp, #48]	; 0x30
 8007a42:	9b08      	ldr	r3, [sp, #32]
 8007a44:	9306      	str	r3, [sp, #24]
 8007a46:	9904      	ldr	r1, [sp, #16]
 8007a48:	9803      	ldr	r0, [sp, #12]
 8007a4a:	f7ff f9e8 	bl	8006e1e <quorem>
 8007a4e:	9b06      	ldr	r3, [sp, #24]
 8007a50:	3030      	adds	r0, #48	; 0x30
 8007a52:	1c5d      	adds	r5, r3, #1
 8007a54:	7018      	strb	r0, [r3, #0]
 8007a56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a58:	9b08      	ldr	r3, [sp, #32]
 8007a5a:	0004      	movs	r4, r0
 8007a5c:	1aeb      	subs	r3, r5, r3
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	dd08      	ble.n	8007a74 <_dtoa_r+0xb48>
 8007a62:	2300      	movs	r3, #0
 8007a64:	220a      	movs	r2, #10
 8007a66:	9903      	ldr	r1, [sp, #12]
 8007a68:	9802      	ldr	r0, [sp, #8]
 8007a6a:	f000 f8a6 	bl	8007bba <__multadd>
 8007a6e:	9506      	str	r5, [sp, #24]
 8007a70:	9003      	str	r0, [sp, #12]
 8007a72:	e7e8      	b.n	8007a46 <_dtoa_r+0xb1a>
 8007a74:	2300      	movs	r3, #0
 8007a76:	9309      	str	r3, [sp, #36]	; 0x24
 8007a78:	9903      	ldr	r1, [sp, #12]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	9802      	ldr	r0, [sp, #8]
 8007a7e:	f000 fa0d 	bl	8007e9c <__lshift>
 8007a82:	9904      	ldr	r1, [sp, #16]
 8007a84:	9003      	str	r0, [sp, #12]
 8007a86:	f000 fa5b 	bl	8007f40 <__mcmp>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	dc9d      	bgt.n	80079ca <_dtoa_r+0xa9e>
 8007a8e:	d101      	bne.n	8007a94 <_dtoa_r+0xb68>
 8007a90:	07e3      	lsls	r3, r4, #31
 8007a92:	d49a      	bmi.n	80079ca <_dtoa_r+0xa9e>
 8007a94:	1e6b      	subs	r3, r5, #1
 8007a96:	781a      	ldrb	r2, [r3, #0]
 8007a98:	2a30      	cmp	r2, #48	; 0x30
 8007a9a:	d000      	beq.n	8007a9e <_dtoa_r+0xb72>
 8007a9c:	e6f4      	b.n	8007888 <_dtoa_r+0x95c>
 8007a9e:	001d      	movs	r5, r3
 8007aa0:	e7f8      	b.n	8007a94 <_dtoa_r+0xb68>
 8007aa2:	9a08      	ldr	r2, [sp, #32]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d103      	bne.n	8007ab0 <_dtoa_r+0xb84>
 8007aa8:	2331      	movs	r3, #49	; 0x31
 8007aaa:	3701      	adds	r7, #1
 8007aac:	7013      	strb	r3, [r2, #0]
 8007aae:	e6eb      	b.n	8007888 <_dtoa_r+0x95c>
 8007ab0:	001d      	movs	r5, r3
 8007ab2:	e78a      	b.n	80079ca <_dtoa_r+0xa9e>
 8007ab4:	4b0b      	ldr	r3, [pc, #44]	; (8007ae4 <_dtoa_r+0xbb8>)
 8007ab6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ab8:	9308      	str	r3, [sp, #32]
 8007aba:	4b0b      	ldr	r3, [pc, #44]	; (8007ae8 <_dtoa_r+0xbbc>)
 8007abc:	2a00      	cmp	r2, #0
 8007abe:	d001      	beq.n	8007ac4 <_dtoa_r+0xb98>
 8007ac0:	f7ff fa77 	bl	8006fb2 <_dtoa_r+0x86>
 8007ac4:	f7ff fa77 	bl	8006fb6 <_dtoa_r+0x8a>
 8007ac8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	dc00      	bgt.n	8007ad0 <_dtoa_r+0xba4>
 8007ace:	e621      	b.n	8007714 <_dtoa_r+0x7e8>
 8007ad0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8007ad2:	2001      	movs	r0, #1
 8007ad4:	e635      	b.n	8007742 <_dtoa_r+0x816>
 8007ad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	dcb2      	bgt.n	8007a42 <_dtoa_r+0xb16>
 8007adc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	ddaf      	ble.n	8007a42 <_dtoa_r+0xb16>
 8007ae2:	e6bc      	b.n	800785e <_dtoa_r+0x932>
 8007ae4:	08008332 	.word	0x08008332
 8007ae8:	0800833a 	.word	0x0800833a

08007aec <_localeconv_r>:
 8007aec:	4b03      	ldr	r3, [pc, #12]	; (8007afc <_localeconv_r+0x10>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6a18      	ldr	r0, [r3, #32]
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d100      	bne.n	8007af8 <_localeconv_r+0xc>
 8007af6:	4802      	ldr	r0, [pc, #8]	; (8007b00 <_localeconv_r+0x14>)
 8007af8:	30f0      	adds	r0, #240	; 0xf0
 8007afa:	4770      	bx	lr
 8007afc:	2000000c 	.word	0x2000000c
 8007b00:	20000070 	.word	0x20000070

08007b04 <malloc>:
 8007b04:	b510      	push	{r4, lr}
 8007b06:	4b03      	ldr	r3, [pc, #12]	; (8007b14 <malloc+0x10>)
 8007b08:	0001      	movs	r1, r0
 8007b0a:	6818      	ldr	r0, [r3, #0]
 8007b0c:	f000 faf8 	bl	8008100 <_malloc_r>
 8007b10:	bd10      	pop	{r4, pc}
 8007b12:	46c0      	nop			; (mov r8, r8)
 8007b14:	2000000c 	.word	0x2000000c

08007b18 <_Balloc>:
 8007b18:	b570      	push	{r4, r5, r6, lr}
 8007b1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b1c:	0004      	movs	r4, r0
 8007b1e:	000d      	movs	r5, r1
 8007b20:	2e00      	cmp	r6, #0
 8007b22:	d107      	bne.n	8007b34 <_Balloc+0x1c>
 8007b24:	2010      	movs	r0, #16
 8007b26:	f7ff ffed 	bl	8007b04 <malloc>
 8007b2a:	6260      	str	r0, [r4, #36]	; 0x24
 8007b2c:	6046      	str	r6, [r0, #4]
 8007b2e:	6086      	str	r6, [r0, #8]
 8007b30:	6006      	str	r6, [r0, #0]
 8007b32:	60c6      	str	r6, [r0, #12]
 8007b34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b36:	68f3      	ldr	r3, [r6, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d013      	beq.n	8007b64 <_Balloc+0x4c>
 8007b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b3e:	00aa      	lsls	r2, r5, #2
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	189b      	adds	r3, r3, r2
 8007b44:	6818      	ldr	r0, [r3, #0]
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d118      	bne.n	8007b7c <_Balloc+0x64>
 8007b4a:	2101      	movs	r1, #1
 8007b4c:	000e      	movs	r6, r1
 8007b4e:	40ae      	lsls	r6, r5
 8007b50:	1d72      	adds	r2, r6, #5
 8007b52:	0092      	lsls	r2, r2, #2
 8007b54:	0020      	movs	r0, r4
 8007b56:	f000 fac5 	bl	80080e4 <_calloc_r>
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	d00c      	beq.n	8007b78 <_Balloc+0x60>
 8007b5e:	6045      	str	r5, [r0, #4]
 8007b60:	6086      	str	r6, [r0, #8]
 8007b62:	e00d      	b.n	8007b80 <_Balloc+0x68>
 8007b64:	2221      	movs	r2, #33	; 0x21
 8007b66:	2104      	movs	r1, #4
 8007b68:	0020      	movs	r0, r4
 8007b6a:	f000 fabb 	bl	80080e4 <_calloc_r>
 8007b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b70:	60f0      	str	r0, [r6, #12]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1e1      	bne.n	8007b3c <_Balloc+0x24>
 8007b78:	2000      	movs	r0, #0
 8007b7a:	bd70      	pop	{r4, r5, r6, pc}
 8007b7c:	6802      	ldr	r2, [r0, #0]
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	2300      	movs	r3, #0
 8007b82:	6103      	str	r3, [r0, #16]
 8007b84:	60c3      	str	r3, [r0, #12]
 8007b86:	e7f8      	b.n	8007b7a <_Balloc+0x62>

08007b88 <_Bfree>:
 8007b88:	b570      	push	{r4, r5, r6, lr}
 8007b8a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007b8c:	0006      	movs	r6, r0
 8007b8e:	000d      	movs	r5, r1
 8007b90:	2c00      	cmp	r4, #0
 8007b92:	d107      	bne.n	8007ba4 <_Bfree+0x1c>
 8007b94:	2010      	movs	r0, #16
 8007b96:	f7ff ffb5 	bl	8007b04 <malloc>
 8007b9a:	6270      	str	r0, [r6, #36]	; 0x24
 8007b9c:	6044      	str	r4, [r0, #4]
 8007b9e:	6084      	str	r4, [r0, #8]
 8007ba0:	6004      	str	r4, [r0, #0]
 8007ba2:	60c4      	str	r4, [r0, #12]
 8007ba4:	2d00      	cmp	r5, #0
 8007ba6:	d007      	beq.n	8007bb8 <_Bfree+0x30>
 8007ba8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007baa:	686a      	ldr	r2, [r5, #4]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	0092      	lsls	r2, r2, #2
 8007bb0:	189b      	adds	r3, r3, r2
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	602a      	str	r2, [r5, #0]
 8007bb6:	601d      	str	r5, [r3, #0]
 8007bb8:	bd70      	pop	{r4, r5, r6, pc}

08007bba <__multadd>:
 8007bba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bbc:	001e      	movs	r6, r3
 8007bbe:	2314      	movs	r3, #20
 8007bc0:	469c      	mov	ip, r3
 8007bc2:	0007      	movs	r7, r0
 8007bc4:	000c      	movs	r4, r1
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	690d      	ldr	r5, [r1, #16]
 8007bca:	448c      	add	ip, r1
 8007bcc:	4663      	mov	r3, ip
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	b299      	uxth	r1, r3
 8007bd4:	4663      	mov	r3, ip
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4351      	muls	r1, r2
 8007bda:	0c1b      	lsrs	r3, r3, #16
 8007bdc:	4353      	muls	r3, r2
 8007bde:	1989      	adds	r1, r1, r6
 8007be0:	0c0e      	lsrs	r6, r1, #16
 8007be2:	199b      	adds	r3, r3, r6
 8007be4:	b289      	uxth	r1, r1
 8007be6:	0c1e      	lsrs	r6, r3, #16
 8007be8:	041b      	lsls	r3, r3, #16
 8007bea:	185b      	adds	r3, r3, r1
 8007bec:	4661      	mov	r1, ip
 8007bee:	c108      	stmia	r1!, {r3}
 8007bf0:	468c      	mov	ip, r1
 8007bf2:	4285      	cmp	r5, r0
 8007bf4:	dcea      	bgt.n	8007bcc <__multadd+0x12>
 8007bf6:	2e00      	cmp	r6, #0
 8007bf8:	d01b      	beq.n	8007c32 <__multadd+0x78>
 8007bfa:	68a3      	ldr	r3, [r4, #8]
 8007bfc:	42ab      	cmp	r3, r5
 8007bfe:	dc12      	bgt.n	8007c26 <__multadd+0x6c>
 8007c00:	6863      	ldr	r3, [r4, #4]
 8007c02:	0038      	movs	r0, r7
 8007c04:	1c59      	adds	r1, r3, #1
 8007c06:	f7ff ff87 	bl	8007b18 <_Balloc>
 8007c0a:	0021      	movs	r1, r4
 8007c0c:	6923      	ldr	r3, [r4, #16]
 8007c0e:	9001      	str	r0, [sp, #4]
 8007c10:	1c9a      	adds	r2, r3, #2
 8007c12:	0092      	lsls	r2, r2, #2
 8007c14:	310c      	adds	r1, #12
 8007c16:	300c      	adds	r0, #12
 8007c18:	f7fe fd9a 	bl	8006750 <memcpy>
 8007c1c:	0021      	movs	r1, r4
 8007c1e:	0038      	movs	r0, r7
 8007c20:	f7ff ffb2 	bl	8007b88 <_Bfree>
 8007c24:	9c01      	ldr	r4, [sp, #4]
 8007c26:	1d2b      	adds	r3, r5, #4
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	18e3      	adds	r3, r4, r3
 8007c2c:	3501      	adds	r5, #1
 8007c2e:	605e      	str	r6, [r3, #4]
 8007c30:	6125      	str	r5, [r4, #16]
 8007c32:	0020      	movs	r0, r4
 8007c34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08007c36 <__hi0bits>:
 8007c36:	0003      	movs	r3, r0
 8007c38:	0c02      	lsrs	r2, r0, #16
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	4282      	cmp	r2, r0
 8007c3e:	d101      	bne.n	8007c44 <__hi0bits+0xe>
 8007c40:	041b      	lsls	r3, r3, #16
 8007c42:	3010      	adds	r0, #16
 8007c44:	0e1a      	lsrs	r2, r3, #24
 8007c46:	d101      	bne.n	8007c4c <__hi0bits+0x16>
 8007c48:	3008      	adds	r0, #8
 8007c4a:	021b      	lsls	r3, r3, #8
 8007c4c:	0f1a      	lsrs	r2, r3, #28
 8007c4e:	d101      	bne.n	8007c54 <__hi0bits+0x1e>
 8007c50:	3004      	adds	r0, #4
 8007c52:	011b      	lsls	r3, r3, #4
 8007c54:	0f9a      	lsrs	r2, r3, #30
 8007c56:	d101      	bne.n	8007c5c <__hi0bits+0x26>
 8007c58:	3002      	adds	r0, #2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	db03      	blt.n	8007c68 <__hi0bits+0x32>
 8007c60:	3001      	adds	r0, #1
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	d400      	bmi.n	8007c68 <__hi0bits+0x32>
 8007c66:	2020      	movs	r0, #32
 8007c68:	4770      	bx	lr

08007c6a <__lo0bits>:
 8007c6a:	2207      	movs	r2, #7
 8007c6c:	6803      	ldr	r3, [r0, #0]
 8007c6e:	b510      	push	{r4, lr}
 8007c70:	0001      	movs	r1, r0
 8007c72:	401a      	ands	r2, r3
 8007c74:	d00d      	beq.n	8007c92 <__lo0bits+0x28>
 8007c76:	2401      	movs	r4, #1
 8007c78:	2000      	movs	r0, #0
 8007c7a:	4223      	tst	r3, r4
 8007c7c:	d105      	bne.n	8007c8a <__lo0bits+0x20>
 8007c7e:	3002      	adds	r0, #2
 8007c80:	4203      	tst	r3, r0
 8007c82:	d003      	beq.n	8007c8c <__lo0bits+0x22>
 8007c84:	40e3      	lsrs	r3, r4
 8007c86:	0020      	movs	r0, r4
 8007c88:	600b      	str	r3, [r1, #0]
 8007c8a:	bd10      	pop	{r4, pc}
 8007c8c:	089b      	lsrs	r3, r3, #2
 8007c8e:	600b      	str	r3, [r1, #0]
 8007c90:	e7fb      	b.n	8007c8a <__lo0bits+0x20>
 8007c92:	b29c      	uxth	r4, r3
 8007c94:	0010      	movs	r0, r2
 8007c96:	2c00      	cmp	r4, #0
 8007c98:	d101      	bne.n	8007c9e <__lo0bits+0x34>
 8007c9a:	2010      	movs	r0, #16
 8007c9c:	0c1b      	lsrs	r3, r3, #16
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	2a00      	cmp	r2, #0
 8007ca2:	d101      	bne.n	8007ca8 <__lo0bits+0x3e>
 8007ca4:	3008      	adds	r0, #8
 8007ca6:	0a1b      	lsrs	r3, r3, #8
 8007ca8:	071a      	lsls	r2, r3, #28
 8007caa:	d101      	bne.n	8007cb0 <__lo0bits+0x46>
 8007cac:	3004      	adds	r0, #4
 8007cae:	091b      	lsrs	r3, r3, #4
 8007cb0:	079a      	lsls	r2, r3, #30
 8007cb2:	d101      	bne.n	8007cb8 <__lo0bits+0x4e>
 8007cb4:	3002      	adds	r0, #2
 8007cb6:	089b      	lsrs	r3, r3, #2
 8007cb8:	07da      	lsls	r2, r3, #31
 8007cba:	d4e8      	bmi.n	8007c8e <__lo0bits+0x24>
 8007cbc:	085b      	lsrs	r3, r3, #1
 8007cbe:	d001      	beq.n	8007cc4 <__lo0bits+0x5a>
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	e7e4      	b.n	8007c8e <__lo0bits+0x24>
 8007cc4:	2020      	movs	r0, #32
 8007cc6:	e7e0      	b.n	8007c8a <__lo0bits+0x20>

08007cc8 <__i2b>:
 8007cc8:	b510      	push	{r4, lr}
 8007cca:	000c      	movs	r4, r1
 8007ccc:	2101      	movs	r1, #1
 8007cce:	f7ff ff23 	bl	8007b18 <_Balloc>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	6144      	str	r4, [r0, #20]
 8007cd6:	6103      	str	r3, [r0, #16]
 8007cd8:	bd10      	pop	{r4, pc}

08007cda <__multiply>:
 8007cda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cdc:	690b      	ldr	r3, [r1, #16]
 8007cde:	0014      	movs	r4, r2
 8007ce0:	6912      	ldr	r2, [r2, #16]
 8007ce2:	b089      	sub	sp, #36	; 0x24
 8007ce4:	000d      	movs	r5, r1
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	da01      	bge.n	8007cee <__multiply+0x14>
 8007cea:	0025      	movs	r5, r4
 8007cec:	000c      	movs	r4, r1
 8007cee:	692f      	ldr	r7, [r5, #16]
 8007cf0:	6926      	ldr	r6, [r4, #16]
 8007cf2:	6869      	ldr	r1, [r5, #4]
 8007cf4:	19bb      	adds	r3, r7, r6
 8007cf6:	9302      	str	r3, [sp, #8]
 8007cf8:	68ab      	ldr	r3, [r5, #8]
 8007cfa:	19ba      	adds	r2, r7, r6
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	da00      	bge.n	8007d02 <__multiply+0x28>
 8007d00:	3101      	adds	r1, #1
 8007d02:	f7ff ff09 	bl	8007b18 <_Balloc>
 8007d06:	0002      	movs	r2, r0
 8007d08:	19bb      	adds	r3, r7, r6
 8007d0a:	3214      	adds	r2, #20
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	18d3      	adds	r3, r2, r3
 8007d10:	469c      	mov	ip, r3
 8007d12:	2100      	movs	r1, #0
 8007d14:	0013      	movs	r3, r2
 8007d16:	9004      	str	r0, [sp, #16]
 8007d18:	4563      	cmp	r3, ip
 8007d1a:	d31d      	bcc.n	8007d58 <__multiply+0x7e>
 8007d1c:	3514      	adds	r5, #20
 8007d1e:	00bf      	lsls	r7, r7, #2
 8007d20:	19eb      	adds	r3, r5, r7
 8007d22:	3414      	adds	r4, #20
 8007d24:	00b6      	lsls	r6, r6, #2
 8007d26:	9305      	str	r3, [sp, #20]
 8007d28:	19a3      	adds	r3, r4, r6
 8007d2a:	9503      	str	r5, [sp, #12]
 8007d2c:	9401      	str	r4, [sp, #4]
 8007d2e:	9307      	str	r3, [sp, #28]
 8007d30:	9b07      	ldr	r3, [sp, #28]
 8007d32:	9901      	ldr	r1, [sp, #4]
 8007d34:	4299      	cmp	r1, r3
 8007d36:	d311      	bcc.n	8007d5c <__multiply+0x82>
 8007d38:	9b02      	ldr	r3, [sp, #8]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	dd06      	ble.n	8007d4c <__multiply+0x72>
 8007d3e:	2304      	movs	r3, #4
 8007d40:	425b      	negs	r3, r3
 8007d42:	449c      	add	ip, r3
 8007d44:	4663      	mov	r3, ip
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d051      	beq.n	8007df0 <__multiply+0x116>
 8007d4c:	9b04      	ldr	r3, [sp, #16]
 8007d4e:	9a02      	ldr	r2, [sp, #8]
 8007d50:	0018      	movs	r0, r3
 8007d52:	611a      	str	r2, [r3, #16]
 8007d54:	b009      	add	sp, #36	; 0x24
 8007d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d58:	c302      	stmia	r3!, {r1}
 8007d5a:	e7dd      	b.n	8007d18 <__multiply+0x3e>
 8007d5c:	9b01      	ldr	r3, [sp, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	b298      	uxth	r0, r3
 8007d62:	2800      	cmp	r0, #0
 8007d64:	d01c      	beq.n	8007da0 <__multiply+0xc6>
 8007d66:	0015      	movs	r5, r2
 8007d68:	2600      	movs	r6, #0
 8007d6a:	9f03      	ldr	r7, [sp, #12]
 8007d6c:	cf02      	ldmia	r7!, {r1}
 8007d6e:	682c      	ldr	r4, [r5, #0]
 8007d70:	b28b      	uxth	r3, r1
 8007d72:	4343      	muls	r3, r0
 8007d74:	0c09      	lsrs	r1, r1, #16
 8007d76:	4341      	muls	r1, r0
 8007d78:	b2a4      	uxth	r4, r4
 8007d7a:	191b      	adds	r3, r3, r4
 8007d7c:	199b      	adds	r3, r3, r6
 8007d7e:	000e      	movs	r6, r1
 8007d80:	6829      	ldr	r1, [r5, #0]
 8007d82:	9506      	str	r5, [sp, #24]
 8007d84:	0c09      	lsrs	r1, r1, #16
 8007d86:	1871      	adds	r1, r6, r1
 8007d88:	0c1e      	lsrs	r6, r3, #16
 8007d8a:	1989      	adds	r1, r1, r6
 8007d8c:	0c0e      	lsrs	r6, r1, #16
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	0409      	lsls	r1, r1, #16
 8007d92:	430b      	orrs	r3, r1
 8007d94:	c508      	stmia	r5!, {r3}
 8007d96:	9b05      	ldr	r3, [sp, #20]
 8007d98:	42bb      	cmp	r3, r7
 8007d9a:	d8e7      	bhi.n	8007d6c <__multiply+0x92>
 8007d9c:	9b06      	ldr	r3, [sp, #24]
 8007d9e:	605e      	str	r6, [r3, #4]
 8007da0:	9b01      	ldr	r3, [sp, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	0c1d      	lsrs	r5, r3, #16
 8007da6:	d01e      	beq.n	8007de6 <__multiply+0x10c>
 8007da8:	0010      	movs	r0, r2
 8007daa:	2700      	movs	r7, #0
 8007dac:	6813      	ldr	r3, [r2, #0]
 8007dae:	9e03      	ldr	r6, [sp, #12]
 8007db0:	6831      	ldr	r1, [r6, #0]
 8007db2:	6804      	ldr	r4, [r0, #0]
 8007db4:	b289      	uxth	r1, r1
 8007db6:	4369      	muls	r1, r5
 8007db8:	0c24      	lsrs	r4, r4, #16
 8007dba:	1909      	adds	r1, r1, r4
 8007dbc:	19c9      	adds	r1, r1, r7
 8007dbe:	040f      	lsls	r7, r1, #16
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	433b      	orrs	r3, r7
 8007dc4:	6003      	str	r3, [r0, #0]
 8007dc6:	ce80      	ldmia	r6!, {r7}
 8007dc8:	6843      	ldr	r3, [r0, #4]
 8007dca:	0c3f      	lsrs	r7, r7, #16
 8007dcc:	436f      	muls	r7, r5
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	18fb      	adds	r3, r7, r3
 8007dd2:	0c09      	lsrs	r1, r1, #16
 8007dd4:	185b      	adds	r3, r3, r1
 8007dd6:	9905      	ldr	r1, [sp, #20]
 8007dd8:	9006      	str	r0, [sp, #24]
 8007dda:	0c1f      	lsrs	r7, r3, #16
 8007ddc:	3004      	adds	r0, #4
 8007dde:	42b1      	cmp	r1, r6
 8007de0:	d8e6      	bhi.n	8007db0 <__multiply+0xd6>
 8007de2:	9906      	ldr	r1, [sp, #24]
 8007de4:	604b      	str	r3, [r1, #4]
 8007de6:	9b01      	ldr	r3, [sp, #4]
 8007de8:	3204      	adds	r2, #4
 8007dea:	3304      	adds	r3, #4
 8007dec:	9301      	str	r3, [sp, #4]
 8007dee:	e79f      	b.n	8007d30 <__multiply+0x56>
 8007df0:	9b02      	ldr	r3, [sp, #8]
 8007df2:	3b01      	subs	r3, #1
 8007df4:	9302      	str	r3, [sp, #8]
 8007df6:	e79f      	b.n	8007d38 <__multiply+0x5e>

08007df8 <__pow5mult>:
 8007df8:	2303      	movs	r3, #3
 8007dfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	0005      	movs	r5, r0
 8007e00:	000e      	movs	r6, r1
 8007e02:	0014      	movs	r4, r2
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d008      	beq.n	8007e1a <__pow5mult+0x22>
 8007e08:	4922      	ldr	r1, [pc, #136]	; (8007e94 <__pow5mult+0x9c>)
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	009a      	lsls	r2, r3, #2
 8007e0e:	5852      	ldr	r2, [r2, r1]
 8007e10:	2300      	movs	r3, #0
 8007e12:	0031      	movs	r1, r6
 8007e14:	f7ff fed1 	bl	8007bba <__multadd>
 8007e18:	0006      	movs	r6, r0
 8007e1a:	10a3      	asrs	r3, r4, #2
 8007e1c:	9301      	str	r3, [sp, #4]
 8007e1e:	d036      	beq.n	8007e8e <__pow5mult+0x96>
 8007e20:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8007e22:	2c00      	cmp	r4, #0
 8007e24:	d107      	bne.n	8007e36 <__pow5mult+0x3e>
 8007e26:	2010      	movs	r0, #16
 8007e28:	f7ff fe6c 	bl	8007b04 <malloc>
 8007e2c:	6268      	str	r0, [r5, #36]	; 0x24
 8007e2e:	6044      	str	r4, [r0, #4]
 8007e30:	6084      	str	r4, [r0, #8]
 8007e32:	6004      	str	r4, [r0, #0]
 8007e34:	60c4      	str	r4, [r0, #12]
 8007e36:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8007e38:	68bc      	ldr	r4, [r7, #8]
 8007e3a:	2c00      	cmp	r4, #0
 8007e3c:	d107      	bne.n	8007e4e <__pow5mult+0x56>
 8007e3e:	4916      	ldr	r1, [pc, #88]	; (8007e98 <__pow5mult+0xa0>)
 8007e40:	0028      	movs	r0, r5
 8007e42:	f7ff ff41 	bl	8007cc8 <__i2b>
 8007e46:	2300      	movs	r3, #0
 8007e48:	0004      	movs	r4, r0
 8007e4a:	60b8      	str	r0, [r7, #8]
 8007e4c:	6003      	str	r3, [r0, #0]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	9b01      	ldr	r3, [sp, #4]
 8007e52:	4213      	tst	r3, r2
 8007e54:	d00a      	beq.n	8007e6c <__pow5mult+0x74>
 8007e56:	0031      	movs	r1, r6
 8007e58:	0022      	movs	r2, r4
 8007e5a:	0028      	movs	r0, r5
 8007e5c:	f7ff ff3d 	bl	8007cda <__multiply>
 8007e60:	0007      	movs	r7, r0
 8007e62:	0031      	movs	r1, r6
 8007e64:	0028      	movs	r0, r5
 8007e66:	f7ff fe8f 	bl	8007b88 <_Bfree>
 8007e6a:	003e      	movs	r6, r7
 8007e6c:	9b01      	ldr	r3, [sp, #4]
 8007e6e:	105b      	asrs	r3, r3, #1
 8007e70:	9301      	str	r3, [sp, #4]
 8007e72:	d00c      	beq.n	8007e8e <__pow5mult+0x96>
 8007e74:	6820      	ldr	r0, [r4, #0]
 8007e76:	2800      	cmp	r0, #0
 8007e78:	d107      	bne.n	8007e8a <__pow5mult+0x92>
 8007e7a:	0022      	movs	r2, r4
 8007e7c:	0021      	movs	r1, r4
 8007e7e:	0028      	movs	r0, r5
 8007e80:	f7ff ff2b 	bl	8007cda <__multiply>
 8007e84:	2300      	movs	r3, #0
 8007e86:	6020      	str	r0, [r4, #0]
 8007e88:	6003      	str	r3, [r0, #0]
 8007e8a:	0004      	movs	r4, r0
 8007e8c:	e7df      	b.n	8007e4e <__pow5mult+0x56>
 8007e8e:	0030      	movs	r0, r6
 8007e90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e92:	46c0      	nop			; (mov r8, r8)
 8007e94:	08008430 	.word	0x08008430
 8007e98:	00000271 	.word	0x00000271

08007e9c <__lshift>:
 8007e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e9e:	000d      	movs	r5, r1
 8007ea0:	0017      	movs	r7, r2
 8007ea2:	692b      	ldr	r3, [r5, #16]
 8007ea4:	1154      	asrs	r4, r2, #5
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	18e3      	adds	r3, r4, r3
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	3301      	adds	r3, #1
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	6849      	ldr	r1, [r1, #4]
 8007eb2:	68ab      	ldr	r3, [r5, #8]
 8007eb4:	9002      	str	r0, [sp, #8]
 8007eb6:	9a00      	ldr	r2, [sp, #0]
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	db35      	blt.n	8007f28 <__lshift+0x8c>
 8007ebc:	9802      	ldr	r0, [sp, #8]
 8007ebe:	f7ff fe2b 	bl	8007b18 <_Balloc>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	0002      	movs	r2, r0
 8007ec6:	0006      	movs	r6, r0
 8007ec8:	0019      	movs	r1, r3
 8007eca:	3214      	adds	r2, #20
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	db2e      	blt.n	8007f2e <__lshift+0x92>
 8007ed0:	43e3      	mvns	r3, r4
 8007ed2:	17db      	asrs	r3, r3, #31
 8007ed4:	401c      	ands	r4, r3
 8007ed6:	002b      	movs	r3, r5
 8007ed8:	00a4      	lsls	r4, r4, #2
 8007eda:	1914      	adds	r4, r2, r4
 8007edc:	692a      	ldr	r2, [r5, #16]
 8007ede:	3314      	adds	r3, #20
 8007ee0:	0092      	lsls	r2, r2, #2
 8007ee2:	189a      	adds	r2, r3, r2
 8007ee4:	4694      	mov	ip, r2
 8007ee6:	221f      	movs	r2, #31
 8007ee8:	4017      	ands	r7, r2
 8007eea:	d024      	beq.n	8007f36 <__lshift+0x9a>
 8007eec:	3201      	adds	r2, #1
 8007eee:	1bd2      	subs	r2, r2, r7
 8007ef0:	9203      	str	r2, [sp, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	6819      	ldr	r1, [r3, #0]
 8007ef6:	0020      	movs	r0, r4
 8007ef8:	40b9      	lsls	r1, r7
 8007efa:	430a      	orrs	r2, r1
 8007efc:	c404      	stmia	r4!, {r2}
 8007efe:	cb04      	ldmia	r3!, {r2}
 8007f00:	9903      	ldr	r1, [sp, #12]
 8007f02:	40ca      	lsrs	r2, r1
 8007f04:	459c      	cmp	ip, r3
 8007f06:	d8f5      	bhi.n	8007ef4 <__lshift+0x58>
 8007f08:	6042      	str	r2, [r0, #4]
 8007f0a:	2a00      	cmp	r2, #0
 8007f0c:	d002      	beq.n	8007f14 <__lshift+0x78>
 8007f0e:	9b01      	ldr	r3, [sp, #4]
 8007f10:	3302      	adds	r3, #2
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	9b00      	ldr	r3, [sp, #0]
 8007f16:	9802      	ldr	r0, [sp, #8]
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	6133      	str	r3, [r6, #16]
 8007f1c:	0029      	movs	r1, r5
 8007f1e:	f7ff fe33 	bl	8007b88 <_Bfree>
 8007f22:	0030      	movs	r0, r6
 8007f24:	b005      	add	sp, #20
 8007f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f28:	3101      	adds	r1, #1
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	e7c3      	b.n	8007eb6 <__lshift+0x1a>
 8007f2e:	0098      	lsls	r0, r3, #2
 8007f30:	5011      	str	r1, [r2, r0]
 8007f32:	3301      	adds	r3, #1
 8007f34:	e7ca      	b.n	8007ecc <__lshift+0x30>
 8007f36:	cb04      	ldmia	r3!, {r2}
 8007f38:	c404      	stmia	r4!, {r2}
 8007f3a:	459c      	cmp	ip, r3
 8007f3c:	d8fb      	bhi.n	8007f36 <__lshift+0x9a>
 8007f3e:	e7e9      	b.n	8007f14 <__lshift+0x78>

08007f40 <__mcmp>:
 8007f40:	690a      	ldr	r2, [r1, #16]
 8007f42:	6903      	ldr	r3, [r0, #16]
 8007f44:	b530      	push	{r4, r5, lr}
 8007f46:	1a9b      	subs	r3, r3, r2
 8007f48:	d10d      	bne.n	8007f66 <__mcmp+0x26>
 8007f4a:	0092      	lsls	r2, r2, #2
 8007f4c:	3014      	adds	r0, #20
 8007f4e:	3114      	adds	r1, #20
 8007f50:	1884      	adds	r4, r0, r2
 8007f52:	1889      	adds	r1, r1, r2
 8007f54:	3c04      	subs	r4, #4
 8007f56:	3904      	subs	r1, #4
 8007f58:	6825      	ldr	r5, [r4, #0]
 8007f5a:	680a      	ldr	r2, [r1, #0]
 8007f5c:	4295      	cmp	r5, r2
 8007f5e:	d004      	beq.n	8007f6a <__mcmp+0x2a>
 8007f60:	2301      	movs	r3, #1
 8007f62:	4295      	cmp	r5, r2
 8007f64:	d304      	bcc.n	8007f70 <__mcmp+0x30>
 8007f66:	0018      	movs	r0, r3
 8007f68:	bd30      	pop	{r4, r5, pc}
 8007f6a:	42a0      	cmp	r0, r4
 8007f6c:	d3f2      	bcc.n	8007f54 <__mcmp+0x14>
 8007f6e:	e7fa      	b.n	8007f66 <__mcmp+0x26>
 8007f70:	425b      	negs	r3, r3
 8007f72:	e7f8      	b.n	8007f66 <__mcmp+0x26>

08007f74 <__mdiff>:
 8007f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f76:	000d      	movs	r5, r1
 8007f78:	b085      	sub	sp, #20
 8007f7a:	0007      	movs	r7, r0
 8007f7c:	0011      	movs	r1, r2
 8007f7e:	0028      	movs	r0, r5
 8007f80:	0014      	movs	r4, r2
 8007f82:	f7ff ffdd 	bl	8007f40 <__mcmp>
 8007f86:	1e06      	subs	r6, r0, #0
 8007f88:	d108      	bne.n	8007f9c <__mdiff+0x28>
 8007f8a:	0001      	movs	r1, r0
 8007f8c:	0038      	movs	r0, r7
 8007f8e:	f7ff fdc3 	bl	8007b18 <_Balloc>
 8007f92:	2301      	movs	r3, #1
 8007f94:	6146      	str	r6, [r0, #20]
 8007f96:	6103      	str	r3, [r0, #16]
 8007f98:	b005      	add	sp, #20
 8007f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	9301      	str	r3, [sp, #4]
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	db04      	blt.n	8007fae <__mdiff+0x3a>
 8007fa4:	0023      	movs	r3, r4
 8007fa6:	002c      	movs	r4, r5
 8007fa8:	001d      	movs	r5, r3
 8007faa:	2300      	movs	r3, #0
 8007fac:	9301      	str	r3, [sp, #4]
 8007fae:	6861      	ldr	r1, [r4, #4]
 8007fb0:	0038      	movs	r0, r7
 8007fb2:	f7ff fdb1 	bl	8007b18 <_Balloc>
 8007fb6:	002f      	movs	r7, r5
 8007fb8:	2200      	movs	r2, #0
 8007fba:	9b01      	ldr	r3, [sp, #4]
 8007fbc:	6926      	ldr	r6, [r4, #16]
 8007fbe:	60c3      	str	r3, [r0, #12]
 8007fc0:	3414      	adds	r4, #20
 8007fc2:	00b3      	lsls	r3, r6, #2
 8007fc4:	18e3      	adds	r3, r4, r3
 8007fc6:	9302      	str	r3, [sp, #8]
 8007fc8:	692b      	ldr	r3, [r5, #16]
 8007fca:	3714      	adds	r7, #20
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	18fb      	adds	r3, r7, r3
 8007fd0:	9303      	str	r3, [sp, #12]
 8007fd2:	0003      	movs	r3, r0
 8007fd4:	4694      	mov	ip, r2
 8007fd6:	3314      	adds	r3, #20
 8007fd8:	cc20      	ldmia	r4!, {r5}
 8007fda:	cf04      	ldmia	r7!, {r2}
 8007fdc:	9201      	str	r2, [sp, #4]
 8007fde:	b2aa      	uxth	r2, r5
 8007fe0:	4494      	add	ip, r2
 8007fe2:	466a      	mov	r2, sp
 8007fe4:	4661      	mov	r1, ip
 8007fe6:	8892      	ldrh	r2, [r2, #4]
 8007fe8:	0c2d      	lsrs	r5, r5, #16
 8007fea:	1a8a      	subs	r2, r1, r2
 8007fec:	9901      	ldr	r1, [sp, #4]
 8007fee:	0c09      	lsrs	r1, r1, #16
 8007ff0:	1a69      	subs	r1, r5, r1
 8007ff2:	1415      	asrs	r5, r2, #16
 8007ff4:	1949      	adds	r1, r1, r5
 8007ff6:	140d      	asrs	r5, r1, #16
 8007ff8:	b292      	uxth	r2, r2
 8007ffa:	0409      	lsls	r1, r1, #16
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	9a03      	ldr	r2, [sp, #12]
 8008002:	46ac      	mov	ip, r5
 8008004:	3304      	adds	r3, #4
 8008006:	42ba      	cmp	r2, r7
 8008008:	d8e6      	bhi.n	8007fd8 <__mdiff+0x64>
 800800a:	9902      	ldr	r1, [sp, #8]
 800800c:	001a      	movs	r2, r3
 800800e:	428c      	cmp	r4, r1
 8008010:	d305      	bcc.n	800801e <__mdiff+0xaa>
 8008012:	3a04      	subs	r2, #4
 8008014:	6813      	ldr	r3, [r2, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00e      	beq.n	8008038 <__mdiff+0xc4>
 800801a:	6106      	str	r6, [r0, #16]
 800801c:	e7bc      	b.n	8007f98 <__mdiff+0x24>
 800801e:	cc04      	ldmia	r4!, {r2}
 8008020:	b291      	uxth	r1, r2
 8008022:	4461      	add	r1, ip
 8008024:	140d      	asrs	r5, r1, #16
 8008026:	0c12      	lsrs	r2, r2, #16
 8008028:	1952      	adds	r2, r2, r5
 800802a:	1415      	asrs	r5, r2, #16
 800802c:	b289      	uxth	r1, r1
 800802e:	0412      	lsls	r2, r2, #16
 8008030:	430a      	orrs	r2, r1
 8008032:	46ac      	mov	ip, r5
 8008034:	c304      	stmia	r3!, {r2}
 8008036:	e7e8      	b.n	800800a <__mdiff+0x96>
 8008038:	3e01      	subs	r6, #1
 800803a:	e7ea      	b.n	8008012 <__mdiff+0x9e>

0800803c <__d2b>:
 800803c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800803e:	001d      	movs	r5, r3
 8008040:	2101      	movs	r1, #1
 8008042:	0014      	movs	r4, r2
 8008044:	9f08      	ldr	r7, [sp, #32]
 8008046:	f7ff fd67 	bl	8007b18 <_Balloc>
 800804a:	032b      	lsls	r3, r5, #12
 800804c:	006d      	lsls	r5, r5, #1
 800804e:	0006      	movs	r6, r0
 8008050:	0b1b      	lsrs	r3, r3, #12
 8008052:	0d6d      	lsrs	r5, r5, #21
 8008054:	d124      	bne.n	80080a0 <__d2b+0x64>
 8008056:	9301      	str	r3, [sp, #4]
 8008058:	2c00      	cmp	r4, #0
 800805a:	d027      	beq.n	80080ac <__d2b+0x70>
 800805c:	4668      	mov	r0, sp
 800805e:	9400      	str	r4, [sp, #0]
 8008060:	f7ff fe03 	bl	8007c6a <__lo0bits>
 8008064:	9c00      	ldr	r4, [sp, #0]
 8008066:	2800      	cmp	r0, #0
 8008068:	d01e      	beq.n	80080a8 <__d2b+0x6c>
 800806a:	9b01      	ldr	r3, [sp, #4]
 800806c:	2120      	movs	r1, #32
 800806e:	001a      	movs	r2, r3
 8008070:	1a09      	subs	r1, r1, r0
 8008072:	408a      	lsls	r2, r1
 8008074:	40c3      	lsrs	r3, r0
 8008076:	4322      	orrs	r2, r4
 8008078:	6172      	str	r2, [r6, #20]
 800807a:	9301      	str	r3, [sp, #4]
 800807c:	9c01      	ldr	r4, [sp, #4]
 800807e:	61b4      	str	r4, [r6, #24]
 8008080:	1e63      	subs	r3, r4, #1
 8008082:	419c      	sbcs	r4, r3
 8008084:	3401      	adds	r4, #1
 8008086:	6134      	str	r4, [r6, #16]
 8008088:	2d00      	cmp	r5, #0
 800808a:	d018      	beq.n	80080be <__d2b+0x82>
 800808c:	4b12      	ldr	r3, [pc, #72]	; (80080d8 <__d2b+0x9c>)
 800808e:	18ed      	adds	r5, r5, r3
 8008090:	2335      	movs	r3, #53	; 0x35
 8008092:	182d      	adds	r5, r5, r0
 8008094:	603d      	str	r5, [r7, #0]
 8008096:	1a18      	subs	r0, r3, r0
 8008098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800809a:	6018      	str	r0, [r3, #0]
 800809c:	0030      	movs	r0, r6
 800809e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80080a0:	2280      	movs	r2, #128	; 0x80
 80080a2:	0352      	lsls	r2, r2, #13
 80080a4:	4313      	orrs	r3, r2
 80080a6:	e7d6      	b.n	8008056 <__d2b+0x1a>
 80080a8:	6174      	str	r4, [r6, #20]
 80080aa:	e7e7      	b.n	800807c <__d2b+0x40>
 80080ac:	a801      	add	r0, sp, #4
 80080ae:	f7ff fddc 	bl	8007c6a <__lo0bits>
 80080b2:	2401      	movs	r4, #1
 80080b4:	9b01      	ldr	r3, [sp, #4]
 80080b6:	6134      	str	r4, [r6, #16]
 80080b8:	6173      	str	r3, [r6, #20]
 80080ba:	3020      	adds	r0, #32
 80080bc:	e7e4      	b.n	8008088 <__d2b+0x4c>
 80080be:	4b07      	ldr	r3, [pc, #28]	; (80080dc <__d2b+0xa0>)
 80080c0:	18c0      	adds	r0, r0, r3
 80080c2:	4b07      	ldr	r3, [pc, #28]	; (80080e0 <__d2b+0xa4>)
 80080c4:	6038      	str	r0, [r7, #0]
 80080c6:	18e3      	adds	r3, r4, r3
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	18f3      	adds	r3, r6, r3
 80080cc:	6958      	ldr	r0, [r3, #20]
 80080ce:	f7ff fdb2 	bl	8007c36 <__hi0bits>
 80080d2:	0164      	lsls	r4, r4, #5
 80080d4:	1a20      	subs	r0, r4, r0
 80080d6:	e7df      	b.n	8008098 <__d2b+0x5c>
 80080d8:	fffffbcd 	.word	0xfffffbcd
 80080dc:	fffffbce 	.word	0xfffffbce
 80080e0:	3fffffff 	.word	0x3fffffff

080080e4 <_calloc_r>:
 80080e4:	434a      	muls	r2, r1
 80080e6:	b570      	push	{r4, r5, r6, lr}
 80080e8:	0011      	movs	r1, r2
 80080ea:	0014      	movs	r4, r2
 80080ec:	f000 f808 	bl	8008100 <_malloc_r>
 80080f0:	1e05      	subs	r5, r0, #0
 80080f2:	d003      	beq.n	80080fc <_calloc_r+0x18>
 80080f4:	0022      	movs	r2, r4
 80080f6:	2100      	movs	r1, #0
 80080f8:	f7fe fb33 	bl	8006762 <memset>
 80080fc:	0028      	movs	r0, r5
 80080fe:	bd70      	pop	{r4, r5, r6, pc}

08008100 <_malloc_r>:
 8008100:	2303      	movs	r3, #3
 8008102:	b570      	push	{r4, r5, r6, lr}
 8008104:	1ccd      	adds	r5, r1, #3
 8008106:	439d      	bics	r5, r3
 8008108:	3508      	adds	r5, #8
 800810a:	0006      	movs	r6, r0
 800810c:	2d0c      	cmp	r5, #12
 800810e:	d21e      	bcs.n	800814e <_malloc_r+0x4e>
 8008110:	250c      	movs	r5, #12
 8008112:	42a9      	cmp	r1, r5
 8008114:	d81d      	bhi.n	8008152 <_malloc_r+0x52>
 8008116:	0030      	movs	r0, r6
 8008118:	f000 f874 	bl	8008204 <__malloc_lock>
 800811c:	4a25      	ldr	r2, [pc, #148]	; (80081b4 <_malloc_r+0xb4>)
 800811e:	6814      	ldr	r4, [r2, #0]
 8008120:	0021      	movs	r1, r4
 8008122:	2900      	cmp	r1, #0
 8008124:	d119      	bne.n	800815a <_malloc_r+0x5a>
 8008126:	4c24      	ldr	r4, [pc, #144]	; (80081b8 <_malloc_r+0xb8>)
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d103      	bne.n	8008136 <_malloc_r+0x36>
 800812e:	0030      	movs	r0, r6
 8008130:	f000 f844 	bl	80081bc <_sbrk_r>
 8008134:	6020      	str	r0, [r4, #0]
 8008136:	0029      	movs	r1, r5
 8008138:	0030      	movs	r0, r6
 800813a:	f000 f83f 	bl	80081bc <_sbrk_r>
 800813e:	1c43      	adds	r3, r0, #1
 8008140:	d12b      	bne.n	800819a <_malloc_r+0x9a>
 8008142:	230c      	movs	r3, #12
 8008144:	0030      	movs	r0, r6
 8008146:	6033      	str	r3, [r6, #0]
 8008148:	f000 f85d 	bl	8008206 <__malloc_unlock>
 800814c:	e003      	b.n	8008156 <_malloc_r+0x56>
 800814e:	2d00      	cmp	r5, #0
 8008150:	dadf      	bge.n	8008112 <_malloc_r+0x12>
 8008152:	230c      	movs	r3, #12
 8008154:	6033      	str	r3, [r6, #0]
 8008156:	2000      	movs	r0, #0
 8008158:	bd70      	pop	{r4, r5, r6, pc}
 800815a:	680b      	ldr	r3, [r1, #0]
 800815c:	1b5b      	subs	r3, r3, r5
 800815e:	d419      	bmi.n	8008194 <_malloc_r+0x94>
 8008160:	2b0b      	cmp	r3, #11
 8008162:	d903      	bls.n	800816c <_malloc_r+0x6c>
 8008164:	600b      	str	r3, [r1, #0]
 8008166:	18cc      	adds	r4, r1, r3
 8008168:	6025      	str	r5, [r4, #0]
 800816a:	e003      	b.n	8008174 <_malloc_r+0x74>
 800816c:	684b      	ldr	r3, [r1, #4]
 800816e:	428c      	cmp	r4, r1
 8008170:	d10d      	bne.n	800818e <_malloc_r+0x8e>
 8008172:	6013      	str	r3, [r2, #0]
 8008174:	0030      	movs	r0, r6
 8008176:	f000 f846 	bl	8008206 <__malloc_unlock>
 800817a:	0020      	movs	r0, r4
 800817c:	2207      	movs	r2, #7
 800817e:	300b      	adds	r0, #11
 8008180:	1d23      	adds	r3, r4, #4
 8008182:	4390      	bics	r0, r2
 8008184:	1ac3      	subs	r3, r0, r3
 8008186:	d0e7      	beq.n	8008158 <_malloc_r+0x58>
 8008188:	425a      	negs	r2, r3
 800818a:	50e2      	str	r2, [r4, r3]
 800818c:	e7e4      	b.n	8008158 <_malloc_r+0x58>
 800818e:	6063      	str	r3, [r4, #4]
 8008190:	000c      	movs	r4, r1
 8008192:	e7ef      	b.n	8008174 <_malloc_r+0x74>
 8008194:	000c      	movs	r4, r1
 8008196:	6849      	ldr	r1, [r1, #4]
 8008198:	e7c3      	b.n	8008122 <_malloc_r+0x22>
 800819a:	2303      	movs	r3, #3
 800819c:	1cc4      	adds	r4, r0, #3
 800819e:	439c      	bics	r4, r3
 80081a0:	42a0      	cmp	r0, r4
 80081a2:	d0e1      	beq.n	8008168 <_malloc_r+0x68>
 80081a4:	1a21      	subs	r1, r4, r0
 80081a6:	0030      	movs	r0, r6
 80081a8:	f000 f808 	bl	80081bc <_sbrk_r>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d1db      	bne.n	8008168 <_malloc_r+0x68>
 80081b0:	e7c7      	b.n	8008142 <_malloc_r+0x42>
 80081b2:	46c0      	nop			; (mov r8, r8)
 80081b4:	20001194 	.word	0x20001194
 80081b8:	20001198 	.word	0x20001198

080081bc <_sbrk_r>:
 80081bc:	2300      	movs	r3, #0
 80081be:	b570      	push	{r4, r5, r6, lr}
 80081c0:	4c06      	ldr	r4, [pc, #24]	; (80081dc <_sbrk_r+0x20>)
 80081c2:	0005      	movs	r5, r0
 80081c4:	0008      	movs	r0, r1
 80081c6:	6023      	str	r3, [r4, #0]
 80081c8:	f7fa fbe2 	bl	8002990 <_sbrk>
 80081cc:	1c43      	adds	r3, r0, #1
 80081ce:	d103      	bne.n	80081d8 <_sbrk_r+0x1c>
 80081d0:	6823      	ldr	r3, [r4, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d000      	beq.n	80081d8 <_sbrk_r+0x1c>
 80081d6:	602b      	str	r3, [r5, #0]
 80081d8:	bd70      	pop	{r4, r5, r6, pc}
 80081da:	46c0      	nop			; (mov r8, r8)
 80081dc:	20001458 	.word	0x20001458

080081e0 <__ascii_mbtowc>:
 80081e0:	b082      	sub	sp, #8
 80081e2:	2900      	cmp	r1, #0
 80081e4:	d100      	bne.n	80081e8 <__ascii_mbtowc+0x8>
 80081e6:	a901      	add	r1, sp, #4
 80081e8:	1e10      	subs	r0, r2, #0
 80081ea:	d006      	beq.n	80081fa <__ascii_mbtowc+0x1a>
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d006      	beq.n	80081fe <__ascii_mbtowc+0x1e>
 80081f0:	7813      	ldrb	r3, [r2, #0]
 80081f2:	600b      	str	r3, [r1, #0]
 80081f4:	7810      	ldrb	r0, [r2, #0]
 80081f6:	1e43      	subs	r3, r0, #1
 80081f8:	4198      	sbcs	r0, r3
 80081fa:	b002      	add	sp, #8
 80081fc:	4770      	bx	lr
 80081fe:	2002      	movs	r0, #2
 8008200:	4240      	negs	r0, r0
 8008202:	e7fa      	b.n	80081fa <__ascii_mbtowc+0x1a>

08008204 <__malloc_lock>:
 8008204:	4770      	bx	lr

08008206 <__malloc_unlock>:
 8008206:	4770      	bx	lr

08008208 <__ascii_wctomb>:
 8008208:	1e0b      	subs	r3, r1, #0
 800820a:	d004      	beq.n	8008216 <__ascii_wctomb+0xe>
 800820c:	2aff      	cmp	r2, #255	; 0xff
 800820e:	d904      	bls.n	800821a <__ascii_wctomb+0x12>
 8008210:	238a      	movs	r3, #138	; 0x8a
 8008212:	6003      	str	r3, [r0, #0]
 8008214:	3b8b      	subs	r3, #139	; 0x8b
 8008216:	0018      	movs	r0, r3
 8008218:	4770      	bx	lr
 800821a:	700a      	strb	r2, [r1, #0]
 800821c:	2301      	movs	r3, #1
 800821e:	e7fa      	b.n	8008216 <__ascii_wctomb+0xe>

08008220 <_init>:
 8008220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008222:	46c0      	nop			; (mov r8, r8)
 8008224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008226:	bc08      	pop	{r3}
 8008228:	469e      	mov	lr, r3
 800822a:	4770      	bx	lr

0800822c <_fini>:
 800822c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800822e:	46c0      	nop			; (mov r8, r8)
 8008230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008232:	bc08      	pop	{r3}
 8008234:	469e      	mov	lr, r3
 8008236:	4770      	bx	lr
