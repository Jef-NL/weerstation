
Weerstation-Release-Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3dc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  0800b4a0  0800b4a0  0001b4a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb78  0800bb78  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800bb78  0800bb78  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bb78  0800bb78  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb78  0800bb78  0001bb78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb7c  0800bb7c  0001bb7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bb80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014ac  200001e0  0800bd60  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000168c  0800bd60  0002168c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c683  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b1a  00000000  00000000  0003c88b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001680  00000000  00000000  000403a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001498  00000000  00000000  00041a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011a72  00000000  00000000  00042ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013d78  00000000  00000000  00054932  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005d1d8  00000000  00000000  000686aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c5882  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a5c  00000000  00000000  000c5900  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b484 	.word	0x0800b484

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800b484 	.word	0x0800b484

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 fef1 	bl	8001210 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fe49 	bl	80010d0 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fee3 	bl	8001210 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fed9 	bl	8001210 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fe6b 	bl	8001148 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe61 	bl	8001148 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dadd>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	464f      	mov	r7, r9
 8000498:	4646      	mov	r6, r8
 800049a:	46d6      	mov	lr, sl
 800049c:	000c      	movs	r4, r1
 800049e:	0309      	lsls	r1, r1, #12
 80004a0:	b5c0      	push	{r6, r7, lr}
 80004a2:	0a49      	lsrs	r1, r1, #9
 80004a4:	0f47      	lsrs	r7, r0, #29
 80004a6:	005e      	lsls	r6, r3, #1
 80004a8:	4339      	orrs	r1, r7
 80004aa:	031f      	lsls	r7, r3, #12
 80004ac:	0fdb      	lsrs	r3, r3, #31
 80004ae:	469c      	mov	ip, r3
 80004b0:	0065      	lsls	r5, r4, #1
 80004b2:	0a7b      	lsrs	r3, r7, #9
 80004b4:	0f57      	lsrs	r7, r2, #29
 80004b6:	431f      	orrs	r7, r3
 80004b8:	0d6d      	lsrs	r5, r5, #21
 80004ba:	0fe4      	lsrs	r4, r4, #31
 80004bc:	0d76      	lsrs	r6, r6, #21
 80004be:	46a1      	mov	r9, r4
 80004c0:	00c0      	lsls	r0, r0, #3
 80004c2:	46b8      	mov	r8, r7
 80004c4:	00d2      	lsls	r2, r2, #3
 80004c6:	1bab      	subs	r3, r5, r6
 80004c8:	4564      	cmp	r4, ip
 80004ca:	d07b      	beq.n	80005c4 <__aeabi_dadd+0x130>
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	dd5f      	ble.n	8000590 <__aeabi_dadd+0xfc>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d000      	beq.n	80004d6 <__aeabi_dadd+0x42>
 80004d4:	e0a4      	b.n	8000620 <__aeabi_dadd+0x18c>
 80004d6:	003e      	movs	r6, r7
 80004d8:	4316      	orrs	r6, r2
 80004da:	d100      	bne.n	80004de <__aeabi_dadd+0x4a>
 80004dc:	e112      	b.n	8000704 <__aeabi_dadd+0x270>
 80004de:	1e5e      	subs	r6, r3, #1
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d000      	beq.n	80004e6 <__aeabi_dadd+0x52>
 80004e4:	e19e      	b.n	8000824 <__aeabi_dadd+0x390>
 80004e6:	1a87      	subs	r7, r0, r2
 80004e8:	4643      	mov	r3, r8
 80004ea:	42b8      	cmp	r0, r7
 80004ec:	4180      	sbcs	r0, r0
 80004ee:	2501      	movs	r5, #1
 80004f0:	1ac9      	subs	r1, r1, r3
 80004f2:	4240      	negs	r0, r0
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	020b      	lsls	r3, r1, #8
 80004f8:	d400      	bmi.n	80004fc <__aeabi_dadd+0x68>
 80004fa:	e131      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80004fc:	0249      	lsls	r1, r1, #9
 80004fe:	0a4e      	lsrs	r6, r1, #9
 8000500:	2e00      	cmp	r6, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x72>
 8000504:	e16e      	b.n	80007e4 <__aeabi_dadd+0x350>
 8000506:	0030      	movs	r0, r6
 8000508:	f001 fe38 	bl	800217c <__clzsi2>
 800050c:	0003      	movs	r3, r0
 800050e:	3b08      	subs	r3, #8
 8000510:	2b1f      	cmp	r3, #31
 8000512:	dd00      	ble.n	8000516 <__aeabi_dadd+0x82>
 8000514:	e161      	b.n	80007da <__aeabi_dadd+0x346>
 8000516:	2220      	movs	r2, #32
 8000518:	0039      	movs	r1, r7
 800051a:	1ad2      	subs	r2, r2, r3
 800051c:	409e      	lsls	r6, r3
 800051e:	40d1      	lsrs	r1, r2
 8000520:	409f      	lsls	r7, r3
 8000522:	430e      	orrs	r6, r1
 8000524:	429d      	cmp	r5, r3
 8000526:	dd00      	ble.n	800052a <__aeabi_dadd+0x96>
 8000528:	e151      	b.n	80007ce <__aeabi_dadd+0x33a>
 800052a:	1b5d      	subs	r5, r3, r5
 800052c:	1c6b      	adds	r3, r5, #1
 800052e:	2b1f      	cmp	r3, #31
 8000530:	dd00      	ble.n	8000534 <__aeabi_dadd+0xa0>
 8000532:	e17c      	b.n	800082e <__aeabi_dadd+0x39a>
 8000534:	2120      	movs	r1, #32
 8000536:	1ac9      	subs	r1, r1, r3
 8000538:	003d      	movs	r5, r7
 800053a:	0030      	movs	r0, r6
 800053c:	408f      	lsls	r7, r1
 800053e:	4088      	lsls	r0, r1
 8000540:	40dd      	lsrs	r5, r3
 8000542:	1e79      	subs	r1, r7, #1
 8000544:	418f      	sbcs	r7, r1
 8000546:	0031      	movs	r1, r6
 8000548:	2207      	movs	r2, #7
 800054a:	4328      	orrs	r0, r5
 800054c:	40d9      	lsrs	r1, r3
 800054e:	2500      	movs	r5, #0
 8000550:	4307      	orrs	r7, r0
 8000552:	403a      	ands	r2, r7
 8000554:	2a00      	cmp	r2, #0
 8000556:	d009      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000558:	230f      	movs	r3, #15
 800055a:	403b      	ands	r3, r7
 800055c:	2b04      	cmp	r3, #4
 800055e:	d005      	beq.n	800056c <__aeabi_dadd+0xd8>
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	42bb      	cmp	r3, r7
 8000564:	41bf      	sbcs	r7, r7
 8000566:	427f      	negs	r7, r7
 8000568:	19c9      	adds	r1, r1, r7
 800056a:	001f      	movs	r7, r3
 800056c:	020b      	lsls	r3, r1, #8
 800056e:	d400      	bmi.n	8000572 <__aeabi_dadd+0xde>
 8000570:	e226      	b.n	80009c0 <__aeabi_dadd+0x52c>
 8000572:	1c6a      	adds	r2, r5, #1
 8000574:	4bc6      	ldr	r3, [pc, #792]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000576:	0555      	lsls	r5, r2, #21
 8000578:	0d6d      	lsrs	r5, r5, #21
 800057a:	429a      	cmp	r2, r3
 800057c:	d100      	bne.n	8000580 <__aeabi_dadd+0xec>
 800057e:	e106      	b.n	800078e <__aeabi_dadd+0x2fa>
 8000580:	4ac4      	ldr	r2, [pc, #784]	; (8000894 <__aeabi_dadd+0x400>)
 8000582:	08ff      	lsrs	r7, r7, #3
 8000584:	400a      	ands	r2, r1
 8000586:	0753      	lsls	r3, r2, #29
 8000588:	0252      	lsls	r2, r2, #9
 800058a:	433b      	orrs	r3, r7
 800058c:	0b12      	lsrs	r2, r2, #12
 800058e:	e08e      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000590:	2b00      	cmp	r3, #0
 8000592:	d000      	beq.n	8000596 <__aeabi_dadd+0x102>
 8000594:	e0b8      	b.n	8000708 <__aeabi_dadd+0x274>
 8000596:	1c6b      	adds	r3, r5, #1
 8000598:	055b      	lsls	r3, r3, #21
 800059a:	0d5b      	lsrs	r3, r3, #21
 800059c:	2b01      	cmp	r3, #1
 800059e:	dc00      	bgt.n	80005a2 <__aeabi_dadd+0x10e>
 80005a0:	e130      	b.n	8000804 <__aeabi_dadd+0x370>
 80005a2:	1a87      	subs	r7, r0, r2
 80005a4:	4643      	mov	r3, r8
 80005a6:	42b8      	cmp	r0, r7
 80005a8:	41b6      	sbcs	r6, r6
 80005aa:	1acb      	subs	r3, r1, r3
 80005ac:	4276      	negs	r6, r6
 80005ae:	1b9e      	subs	r6, r3, r6
 80005b0:	0233      	lsls	r3, r6, #8
 80005b2:	d500      	bpl.n	80005b6 <__aeabi_dadd+0x122>
 80005b4:	e14c      	b.n	8000850 <__aeabi_dadd+0x3bc>
 80005b6:	003b      	movs	r3, r7
 80005b8:	4333      	orrs	r3, r6
 80005ba:	d1a1      	bne.n	8000500 <__aeabi_dadd+0x6c>
 80005bc:	2200      	movs	r2, #0
 80005be:	2400      	movs	r4, #0
 80005c0:	2500      	movs	r5, #0
 80005c2:	e070      	b.n	80006a6 <__aeabi_dadd+0x212>
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dc00      	bgt.n	80005ca <__aeabi_dadd+0x136>
 80005c8:	e0e5      	b.n	8000796 <__aeabi_dadd+0x302>
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d100      	bne.n	80005d0 <__aeabi_dadd+0x13c>
 80005ce:	e083      	b.n	80006d8 <__aeabi_dadd+0x244>
 80005d0:	4eaf      	ldr	r6, [pc, #700]	; (8000890 <__aeabi_dadd+0x3fc>)
 80005d2:	42b5      	cmp	r5, r6
 80005d4:	d060      	beq.n	8000698 <__aeabi_dadd+0x204>
 80005d6:	2680      	movs	r6, #128	; 0x80
 80005d8:	0436      	lsls	r6, r6, #16
 80005da:	4337      	orrs	r7, r6
 80005dc:	46b8      	mov	r8, r7
 80005de:	2b38      	cmp	r3, #56	; 0x38
 80005e0:	dc00      	bgt.n	80005e4 <__aeabi_dadd+0x150>
 80005e2:	e13e      	b.n	8000862 <__aeabi_dadd+0x3ce>
 80005e4:	4643      	mov	r3, r8
 80005e6:	4313      	orrs	r3, r2
 80005e8:	001f      	movs	r7, r3
 80005ea:	1e7a      	subs	r2, r7, #1
 80005ec:	4197      	sbcs	r7, r2
 80005ee:	183f      	adds	r7, r7, r0
 80005f0:	4287      	cmp	r7, r0
 80005f2:	4180      	sbcs	r0, r0
 80005f4:	4240      	negs	r0, r0
 80005f6:	1809      	adds	r1, r1, r0
 80005f8:	020b      	lsls	r3, r1, #8
 80005fa:	d400      	bmi.n	80005fe <__aeabi_dadd+0x16a>
 80005fc:	e0b0      	b.n	8000760 <__aeabi_dadd+0x2cc>
 80005fe:	4ba4      	ldr	r3, [pc, #656]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000600:	3501      	adds	r5, #1
 8000602:	429d      	cmp	r5, r3
 8000604:	d100      	bne.n	8000608 <__aeabi_dadd+0x174>
 8000606:	e0c3      	b.n	8000790 <__aeabi_dadd+0x2fc>
 8000608:	4aa2      	ldr	r2, [pc, #648]	; (8000894 <__aeabi_dadd+0x400>)
 800060a:	087b      	lsrs	r3, r7, #1
 800060c:	400a      	ands	r2, r1
 800060e:	2101      	movs	r1, #1
 8000610:	400f      	ands	r7, r1
 8000612:	431f      	orrs	r7, r3
 8000614:	0851      	lsrs	r1, r2, #1
 8000616:	07d3      	lsls	r3, r2, #31
 8000618:	2207      	movs	r2, #7
 800061a:	431f      	orrs	r7, r3
 800061c:	403a      	ands	r2, r7
 800061e:	e799      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000620:	4e9b      	ldr	r6, [pc, #620]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000622:	42b5      	cmp	r5, r6
 8000624:	d038      	beq.n	8000698 <__aeabi_dadd+0x204>
 8000626:	2680      	movs	r6, #128	; 0x80
 8000628:	0436      	lsls	r6, r6, #16
 800062a:	4337      	orrs	r7, r6
 800062c:	46b8      	mov	r8, r7
 800062e:	2b38      	cmp	r3, #56	; 0x38
 8000630:	dd00      	ble.n	8000634 <__aeabi_dadd+0x1a0>
 8000632:	e0dc      	b.n	80007ee <__aeabi_dadd+0x35a>
 8000634:	2b1f      	cmp	r3, #31
 8000636:	dc00      	bgt.n	800063a <__aeabi_dadd+0x1a6>
 8000638:	e130      	b.n	800089c <__aeabi_dadd+0x408>
 800063a:	001e      	movs	r6, r3
 800063c:	4647      	mov	r7, r8
 800063e:	3e20      	subs	r6, #32
 8000640:	40f7      	lsrs	r7, r6
 8000642:	46bc      	mov	ip, r7
 8000644:	2b20      	cmp	r3, #32
 8000646:	d004      	beq.n	8000652 <__aeabi_dadd+0x1be>
 8000648:	2640      	movs	r6, #64	; 0x40
 800064a:	1af3      	subs	r3, r6, r3
 800064c:	4646      	mov	r6, r8
 800064e:	409e      	lsls	r6, r3
 8000650:	4332      	orrs	r2, r6
 8000652:	0017      	movs	r7, r2
 8000654:	4663      	mov	r3, ip
 8000656:	1e7a      	subs	r2, r7, #1
 8000658:	4197      	sbcs	r7, r2
 800065a:	431f      	orrs	r7, r3
 800065c:	e0cc      	b.n	80007f8 <__aeabi_dadd+0x364>
 800065e:	2b00      	cmp	r3, #0
 8000660:	d100      	bne.n	8000664 <__aeabi_dadd+0x1d0>
 8000662:	e204      	b.n	8000a6e <__aeabi_dadd+0x5da>
 8000664:	4643      	mov	r3, r8
 8000666:	4313      	orrs	r3, r2
 8000668:	d100      	bne.n	800066c <__aeabi_dadd+0x1d8>
 800066a:	e159      	b.n	8000920 <__aeabi_dadd+0x48c>
 800066c:	074b      	lsls	r3, r1, #29
 800066e:	08c0      	lsrs	r0, r0, #3
 8000670:	4318      	orrs	r0, r3
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	08c9      	lsrs	r1, r1, #3
 8000676:	031b      	lsls	r3, r3, #12
 8000678:	4219      	tst	r1, r3
 800067a:	d008      	beq.n	800068e <__aeabi_dadd+0x1fa>
 800067c:	4645      	mov	r5, r8
 800067e:	08ed      	lsrs	r5, r5, #3
 8000680:	421d      	tst	r5, r3
 8000682:	d104      	bne.n	800068e <__aeabi_dadd+0x1fa>
 8000684:	4643      	mov	r3, r8
 8000686:	08d0      	lsrs	r0, r2, #3
 8000688:	0759      	lsls	r1, r3, #29
 800068a:	4308      	orrs	r0, r1
 800068c:	0029      	movs	r1, r5
 800068e:	0f42      	lsrs	r2, r0, #29
 8000690:	00c9      	lsls	r1, r1, #3
 8000692:	4d7f      	ldr	r5, [pc, #508]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000694:	4311      	orrs	r1, r2
 8000696:	00c0      	lsls	r0, r0, #3
 8000698:	074b      	lsls	r3, r1, #29
 800069a:	08ca      	lsrs	r2, r1, #3
 800069c:	497c      	ldr	r1, [pc, #496]	; (8000890 <__aeabi_dadd+0x3fc>)
 800069e:	08c0      	lsrs	r0, r0, #3
 80006a0:	4303      	orrs	r3, r0
 80006a2:	428d      	cmp	r5, r1
 80006a4:	d068      	beq.n	8000778 <__aeabi_dadd+0x2e4>
 80006a6:	0312      	lsls	r2, r2, #12
 80006a8:	056d      	lsls	r5, r5, #21
 80006aa:	0b12      	lsrs	r2, r2, #12
 80006ac:	0d6d      	lsrs	r5, r5, #21
 80006ae:	2100      	movs	r1, #0
 80006b0:	0312      	lsls	r2, r2, #12
 80006b2:	0018      	movs	r0, r3
 80006b4:	0b13      	lsrs	r3, r2, #12
 80006b6:	0d0a      	lsrs	r2, r1, #20
 80006b8:	0512      	lsls	r2, r2, #20
 80006ba:	431a      	orrs	r2, r3
 80006bc:	4b76      	ldr	r3, [pc, #472]	; (8000898 <__aeabi_dadd+0x404>)
 80006be:	052d      	lsls	r5, r5, #20
 80006c0:	4013      	ands	r3, r2
 80006c2:	432b      	orrs	r3, r5
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	07e4      	lsls	r4, r4, #31
 80006c8:	085b      	lsrs	r3, r3, #1
 80006ca:	4323      	orrs	r3, r4
 80006cc:	0019      	movs	r1, r3
 80006ce:	bc1c      	pop	{r2, r3, r4}
 80006d0:	4690      	mov	r8, r2
 80006d2:	4699      	mov	r9, r3
 80006d4:	46a2      	mov	sl, r4
 80006d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d8:	003e      	movs	r6, r7
 80006da:	4316      	orrs	r6, r2
 80006dc:	d012      	beq.n	8000704 <__aeabi_dadd+0x270>
 80006de:	1e5e      	subs	r6, r3, #1
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x252>
 80006e4:	e100      	b.n	80008e8 <__aeabi_dadd+0x454>
 80006e6:	1887      	adds	r7, r0, r2
 80006e8:	4287      	cmp	r7, r0
 80006ea:	4180      	sbcs	r0, r0
 80006ec:	4441      	add	r1, r8
 80006ee:	4240      	negs	r0, r0
 80006f0:	1809      	adds	r1, r1, r0
 80006f2:	2501      	movs	r5, #1
 80006f4:	020b      	lsls	r3, r1, #8
 80006f6:	d533      	bpl.n	8000760 <__aeabi_dadd+0x2cc>
 80006f8:	2502      	movs	r5, #2
 80006fa:	e785      	b.n	8000608 <__aeabi_dadd+0x174>
 80006fc:	4664      	mov	r4, ip
 80006fe:	0033      	movs	r3, r6
 8000700:	4641      	mov	r1, r8
 8000702:	0010      	movs	r0, r2
 8000704:	001d      	movs	r5, r3
 8000706:	e7c7      	b.n	8000698 <__aeabi_dadd+0x204>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d000      	beq.n	800070e <__aeabi_dadd+0x27a>
 800070c:	e0da      	b.n	80008c4 <__aeabi_dadd+0x430>
 800070e:	000c      	movs	r4, r1
 8000710:	4304      	orrs	r4, r0
 8000712:	d0f3      	beq.n	80006fc <__aeabi_dadd+0x268>
 8000714:	1c5c      	adds	r4, r3, #1
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x286>
 8000718:	e19f      	b.n	8000a5a <__aeabi_dadd+0x5c6>
 800071a:	4c5d      	ldr	r4, [pc, #372]	; (8000890 <__aeabi_dadd+0x3fc>)
 800071c:	42a6      	cmp	r6, r4
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x28e>
 8000720:	e12f      	b.n	8000982 <__aeabi_dadd+0x4ee>
 8000722:	43db      	mvns	r3, r3
 8000724:	2b38      	cmp	r3, #56	; 0x38
 8000726:	dd00      	ble.n	800072a <__aeabi_dadd+0x296>
 8000728:	e166      	b.n	80009f8 <__aeabi_dadd+0x564>
 800072a:	2b1f      	cmp	r3, #31
 800072c:	dd00      	ble.n	8000730 <__aeabi_dadd+0x29c>
 800072e:	e183      	b.n	8000a38 <__aeabi_dadd+0x5a4>
 8000730:	2420      	movs	r4, #32
 8000732:	0005      	movs	r5, r0
 8000734:	1ae4      	subs	r4, r4, r3
 8000736:	000f      	movs	r7, r1
 8000738:	40dd      	lsrs	r5, r3
 800073a:	40d9      	lsrs	r1, r3
 800073c:	40a0      	lsls	r0, r4
 800073e:	4643      	mov	r3, r8
 8000740:	40a7      	lsls	r7, r4
 8000742:	1a5b      	subs	r3, r3, r1
 8000744:	1e44      	subs	r4, r0, #1
 8000746:	41a0      	sbcs	r0, r4
 8000748:	4698      	mov	r8, r3
 800074a:	432f      	orrs	r7, r5
 800074c:	4338      	orrs	r0, r7
 800074e:	1a17      	subs	r7, r2, r0
 8000750:	42ba      	cmp	r2, r7
 8000752:	4192      	sbcs	r2, r2
 8000754:	4643      	mov	r3, r8
 8000756:	4252      	negs	r2, r2
 8000758:	1a99      	subs	r1, r3, r2
 800075a:	4664      	mov	r4, ip
 800075c:	0035      	movs	r5, r6
 800075e:	e6ca      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000760:	2207      	movs	r2, #7
 8000762:	403a      	ands	r2, r7
 8000764:	2a00      	cmp	r2, #0
 8000766:	d000      	beq.n	800076a <__aeabi_dadd+0x2d6>
 8000768:	e6f6      	b.n	8000558 <__aeabi_dadd+0xc4>
 800076a:	074b      	lsls	r3, r1, #29
 800076c:	08ca      	lsrs	r2, r1, #3
 800076e:	4948      	ldr	r1, [pc, #288]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000770:	08ff      	lsrs	r7, r7, #3
 8000772:	433b      	orrs	r3, r7
 8000774:	428d      	cmp	r5, r1
 8000776:	d196      	bne.n	80006a6 <__aeabi_dadd+0x212>
 8000778:	0019      	movs	r1, r3
 800077a:	4311      	orrs	r1, r2
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0x2ec>
 800077e:	e19e      	b.n	8000abe <__aeabi_dadd+0x62a>
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	0309      	lsls	r1, r1, #12
 8000784:	430a      	orrs	r2, r1
 8000786:	0312      	lsls	r2, r2, #12
 8000788:	0b12      	lsrs	r2, r2, #12
 800078a:	4d41      	ldr	r5, [pc, #260]	; (8000890 <__aeabi_dadd+0x3fc>)
 800078c:	e78f      	b.n	80006ae <__aeabi_dadd+0x21a>
 800078e:	0015      	movs	r5, r2
 8000790:	2200      	movs	r2, #0
 8000792:	2300      	movs	r3, #0
 8000794:	e78b      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000796:	2b00      	cmp	r3, #0
 8000798:	d000      	beq.n	800079c <__aeabi_dadd+0x308>
 800079a:	e0c7      	b.n	800092c <__aeabi_dadd+0x498>
 800079c:	1c6b      	adds	r3, r5, #1
 800079e:	055f      	lsls	r7, r3, #21
 80007a0:	0d7f      	lsrs	r7, r7, #21
 80007a2:	2f01      	cmp	r7, #1
 80007a4:	dc00      	bgt.n	80007a8 <__aeabi_dadd+0x314>
 80007a6:	e0f1      	b.n	800098c <__aeabi_dadd+0x4f8>
 80007a8:	4d39      	ldr	r5, [pc, #228]	; (8000890 <__aeabi_dadd+0x3fc>)
 80007aa:	42ab      	cmp	r3, r5
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x31c>
 80007ae:	e0b9      	b.n	8000924 <__aeabi_dadd+0x490>
 80007b0:	1885      	adds	r5, r0, r2
 80007b2:	000a      	movs	r2, r1
 80007b4:	4285      	cmp	r5, r0
 80007b6:	4189      	sbcs	r1, r1
 80007b8:	4442      	add	r2, r8
 80007ba:	4249      	negs	r1, r1
 80007bc:	1851      	adds	r1, r2, r1
 80007be:	2207      	movs	r2, #7
 80007c0:	07cf      	lsls	r7, r1, #31
 80007c2:	086d      	lsrs	r5, r5, #1
 80007c4:	432f      	orrs	r7, r5
 80007c6:	0849      	lsrs	r1, r1, #1
 80007c8:	403a      	ands	r2, r7
 80007ca:	001d      	movs	r5, r3
 80007cc:	e6c2      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007ce:	2207      	movs	r2, #7
 80007d0:	4930      	ldr	r1, [pc, #192]	; (8000894 <__aeabi_dadd+0x400>)
 80007d2:	1aed      	subs	r5, r5, r3
 80007d4:	4031      	ands	r1, r6
 80007d6:	403a      	ands	r2, r7
 80007d8:	e6bc      	b.n	8000554 <__aeabi_dadd+0xc0>
 80007da:	003e      	movs	r6, r7
 80007dc:	3828      	subs	r0, #40	; 0x28
 80007de:	4086      	lsls	r6, r0
 80007e0:	2700      	movs	r7, #0
 80007e2:	e69f      	b.n	8000524 <__aeabi_dadd+0x90>
 80007e4:	0038      	movs	r0, r7
 80007e6:	f001 fcc9 	bl	800217c <__clzsi2>
 80007ea:	3020      	adds	r0, #32
 80007ec:	e68e      	b.n	800050c <__aeabi_dadd+0x78>
 80007ee:	4643      	mov	r3, r8
 80007f0:	4313      	orrs	r3, r2
 80007f2:	001f      	movs	r7, r3
 80007f4:	1e7a      	subs	r2, r7, #1
 80007f6:	4197      	sbcs	r7, r2
 80007f8:	1bc7      	subs	r7, r0, r7
 80007fa:	42b8      	cmp	r0, r7
 80007fc:	4180      	sbcs	r0, r0
 80007fe:	4240      	negs	r0, r0
 8000800:	1a09      	subs	r1, r1, r0
 8000802:	e678      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000804:	000e      	movs	r6, r1
 8000806:	003b      	movs	r3, r7
 8000808:	4306      	orrs	r6, r0
 800080a:	4313      	orrs	r3, r2
 800080c:	2d00      	cmp	r5, #0
 800080e:	d161      	bne.n	80008d4 <__aeabi_dadd+0x440>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_dadd+0x382>
 8000814:	e0f4      	b.n	8000a00 <__aeabi_dadd+0x56c>
 8000816:	2b00      	cmp	r3, #0
 8000818:	d100      	bne.n	800081c <__aeabi_dadd+0x388>
 800081a:	e11b      	b.n	8000a54 <__aeabi_dadd+0x5c0>
 800081c:	4664      	mov	r4, ip
 800081e:	0039      	movs	r1, r7
 8000820:	0010      	movs	r0, r2
 8000822:	e739      	b.n	8000698 <__aeabi_dadd+0x204>
 8000824:	4f1a      	ldr	r7, [pc, #104]	; (8000890 <__aeabi_dadd+0x3fc>)
 8000826:	42bb      	cmp	r3, r7
 8000828:	d07a      	beq.n	8000920 <__aeabi_dadd+0x48c>
 800082a:	0033      	movs	r3, r6
 800082c:	e6ff      	b.n	800062e <__aeabi_dadd+0x19a>
 800082e:	0030      	movs	r0, r6
 8000830:	3d1f      	subs	r5, #31
 8000832:	40e8      	lsrs	r0, r5
 8000834:	2b20      	cmp	r3, #32
 8000836:	d003      	beq.n	8000840 <__aeabi_dadd+0x3ac>
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	1acb      	subs	r3, r1, r3
 800083c:	409e      	lsls	r6, r3
 800083e:	4337      	orrs	r7, r6
 8000840:	1e7b      	subs	r3, r7, #1
 8000842:	419f      	sbcs	r7, r3
 8000844:	2207      	movs	r2, #7
 8000846:	4307      	orrs	r7, r0
 8000848:	403a      	ands	r2, r7
 800084a:	2100      	movs	r1, #0
 800084c:	2500      	movs	r5, #0
 800084e:	e789      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000850:	1a17      	subs	r7, r2, r0
 8000852:	4643      	mov	r3, r8
 8000854:	42ba      	cmp	r2, r7
 8000856:	41b6      	sbcs	r6, r6
 8000858:	1a59      	subs	r1, r3, r1
 800085a:	4276      	negs	r6, r6
 800085c:	1b8e      	subs	r6, r1, r6
 800085e:	4664      	mov	r4, ip
 8000860:	e64e      	b.n	8000500 <__aeabi_dadd+0x6c>
 8000862:	2b1f      	cmp	r3, #31
 8000864:	dd00      	ble.n	8000868 <__aeabi_dadd+0x3d4>
 8000866:	e0ad      	b.n	80009c4 <__aeabi_dadd+0x530>
 8000868:	2620      	movs	r6, #32
 800086a:	4647      	mov	r7, r8
 800086c:	1af6      	subs	r6, r6, r3
 800086e:	40b7      	lsls	r7, r6
 8000870:	46b9      	mov	r9, r7
 8000872:	0017      	movs	r7, r2
 8000874:	46b2      	mov	sl, r6
 8000876:	40df      	lsrs	r7, r3
 8000878:	464e      	mov	r6, r9
 800087a:	433e      	orrs	r6, r7
 800087c:	0037      	movs	r7, r6
 800087e:	4656      	mov	r6, sl
 8000880:	40b2      	lsls	r2, r6
 8000882:	1e56      	subs	r6, r2, #1
 8000884:	41b2      	sbcs	r2, r6
 8000886:	4317      	orrs	r7, r2
 8000888:	4642      	mov	r2, r8
 800088a:	40da      	lsrs	r2, r3
 800088c:	1889      	adds	r1, r1, r2
 800088e:	e6ae      	b.n	80005ee <__aeabi_dadd+0x15a>
 8000890:	000007ff 	.word	0x000007ff
 8000894:	ff7fffff 	.word	0xff7fffff
 8000898:	800fffff 	.word	0x800fffff
 800089c:	2620      	movs	r6, #32
 800089e:	4647      	mov	r7, r8
 80008a0:	1af6      	subs	r6, r6, r3
 80008a2:	40b7      	lsls	r7, r6
 80008a4:	46b9      	mov	r9, r7
 80008a6:	0017      	movs	r7, r2
 80008a8:	46b2      	mov	sl, r6
 80008aa:	40df      	lsrs	r7, r3
 80008ac:	464e      	mov	r6, r9
 80008ae:	433e      	orrs	r6, r7
 80008b0:	0037      	movs	r7, r6
 80008b2:	4656      	mov	r6, sl
 80008b4:	40b2      	lsls	r2, r6
 80008b6:	1e56      	subs	r6, r2, #1
 80008b8:	41b2      	sbcs	r2, r6
 80008ba:	4317      	orrs	r7, r2
 80008bc:	4642      	mov	r2, r8
 80008be:	40da      	lsrs	r2, r3
 80008c0:	1a89      	subs	r1, r1, r2
 80008c2:	e799      	b.n	80007f8 <__aeabi_dadd+0x364>
 80008c4:	4c7f      	ldr	r4, [pc, #508]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008c6:	42a6      	cmp	r6, r4
 80008c8:	d05b      	beq.n	8000982 <__aeabi_dadd+0x4ee>
 80008ca:	2480      	movs	r4, #128	; 0x80
 80008cc:	0424      	lsls	r4, r4, #16
 80008ce:	425b      	negs	r3, r3
 80008d0:	4321      	orrs	r1, r4
 80008d2:	e727      	b.n	8000724 <__aeabi_dadd+0x290>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d10c      	bne.n	80008f2 <__aeabi_dadd+0x45e>
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x44a>
 80008dc:	e0cb      	b.n	8000a76 <__aeabi_dadd+0x5e2>
 80008de:	4664      	mov	r4, ip
 80008e0:	0039      	movs	r1, r7
 80008e2:	0010      	movs	r0, r2
 80008e4:	4d77      	ldr	r5, [pc, #476]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008e6:	e6d7      	b.n	8000698 <__aeabi_dadd+0x204>
 80008e8:	4f76      	ldr	r7, [pc, #472]	; (8000ac4 <__aeabi_dadd+0x630>)
 80008ea:	42bb      	cmp	r3, r7
 80008ec:	d018      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008ee:	0033      	movs	r3, r6
 80008f0:	e675      	b.n	80005de <__aeabi_dadd+0x14a>
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d014      	beq.n	8000920 <__aeabi_dadd+0x48c>
 80008f6:	074b      	lsls	r3, r1, #29
 80008f8:	08c0      	lsrs	r0, r0, #3
 80008fa:	4318      	orrs	r0, r3
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	08c9      	lsrs	r1, r1, #3
 8000900:	031b      	lsls	r3, r3, #12
 8000902:	4219      	tst	r1, r3
 8000904:	d007      	beq.n	8000916 <__aeabi_dadd+0x482>
 8000906:	08fc      	lsrs	r4, r7, #3
 8000908:	421c      	tst	r4, r3
 800090a:	d104      	bne.n	8000916 <__aeabi_dadd+0x482>
 800090c:	0779      	lsls	r1, r7, #29
 800090e:	08d0      	lsrs	r0, r2, #3
 8000910:	4308      	orrs	r0, r1
 8000912:	46e1      	mov	r9, ip
 8000914:	0021      	movs	r1, r4
 8000916:	464c      	mov	r4, r9
 8000918:	0f42      	lsrs	r2, r0, #29
 800091a:	00c9      	lsls	r1, r1, #3
 800091c:	4311      	orrs	r1, r2
 800091e:	00c0      	lsls	r0, r0, #3
 8000920:	4d68      	ldr	r5, [pc, #416]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000922:	e6b9      	b.n	8000698 <__aeabi_dadd+0x204>
 8000924:	001d      	movs	r5, r3
 8000926:	2200      	movs	r2, #0
 8000928:	2300      	movs	r3, #0
 800092a:	e6c0      	b.n	80006ae <__aeabi_dadd+0x21a>
 800092c:	2d00      	cmp	r5, #0
 800092e:	d15b      	bne.n	80009e8 <__aeabi_dadd+0x554>
 8000930:	000d      	movs	r5, r1
 8000932:	4305      	orrs	r5, r0
 8000934:	d100      	bne.n	8000938 <__aeabi_dadd+0x4a4>
 8000936:	e6e2      	b.n	80006fe <__aeabi_dadd+0x26a>
 8000938:	1c5d      	adds	r5, r3, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x4aa>
 800093c:	e0b0      	b.n	8000aa0 <__aeabi_dadd+0x60c>
 800093e:	4d61      	ldr	r5, [pc, #388]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000940:	42ae      	cmp	r6, r5
 8000942:	d01f      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 8000944:	43db      	mvns	r3, r3
 8000946:	2b38      	cmp	r3, #56	; 0x38
 8000948:	dc71      	bgt.n	8000a2e <__aeabi_dadd+0x59a>
 800094a:	2b1f      	cmp	r3, #31
 800094c:	dd00      	ble.n	8000950 <__aeabi_dadd+0x4bc>
 800094e:	e096      	b.n	8000a7e <__aeabi_dadd+0x5ea>
 8000950:	2520      	movs	r5, #32
 8000952:	000f      	movs	r7, r1
 8000954:	1aed      	subs	r5, r5, r3
 8000956:	40af      	lsls	r7, r5
 8000958:	46b9      	mov	r9, r7
 800095a:	0007      	movs	r7, r0
 800095c:	46aa      	mov	sl, r5
 800095e:	40df      	lsrs	r7, r3
 8000960:	464d      	mov	r5, r9
 8000962:	433d      	orrs	r5, r7
 8000964:	002f      	movs	r7, r5
 8000966:	4655      	mov	r5, sl
 8000968:	40a8      	lsls	r0, r5
 800096a:	40d9      	lsrs	r1, r3
 800096c:	1e45      	subs	r5, r0, #1
 800096e:	41a8      	sbcs	r0, r5
 8000970:	4488      	add	r8, r1
 8000972:	4307      	orrs	r7, r0
 8000974:	18bf      	adds	r7, r7, r2
 8000976:	4297      	cmp	r7, r2
 8000978:	4192      	sbcs	r2, r2
 800097a:	4251      	negs	r1, r2
 800097c:	4441      	add	r1, r8
 800097e:	0035      	movs	r5, r6
 8000980:	e63a      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000982:	4664      	mov	r4, ip
 8000984:	0035      	movs	r5, r6
 8000986:	4641      	mov	r1, r8
 8000988:	0010      	movs	r0, r2
 800098a:	e685      	b.n	8000698 <__aeabi_dadd+0x204>
 800098c:	000b      	movs	r3, r1
 800098e:	4303      	orrs	r3, r0
 8000990:	2d00      	cmp	r5, #0
 8000992:	d000      	beq.n	8000996 <__aeabi_dadd+0x502>
 8000994:	e663      	b.n	800065e <__aeabi_dadd+0x1ca>
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0f5      	beq.n	8000986 <__aeabi_dadd+0x4f2>
 800099a:	4643      	mov	r3, r8
 800099c:	4313      	orrs	r3, r2
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0x50e>
 80009a0:	e67a      	b.n	8000698 <__aeabi_dadd+0x204>
 80009a2:	1887      	adds	r7, r0, r2
 80009a4:	4287      	cmp	r7, r0
 80009a6:	4180      	sbcs	r0, r0
 80009a8:	2207      	movs	r2, #7
 80009aa:	4441      	add	r1, r8
 80009ac:	4240      	negs	r0, r0
 80009ae:	1809      	adds	r1, r1, r0
 80009b0:	403a      	ands	r2, r7
 80009b2:	020b      	lsls	r3, r1, #8
 80009b4:	d400      	bmi.n	80009b8 <__aeabi_dadd+0x524>
 80009b6:	e6d5      	b.n	8000764 <__aeabi_dadd+0x2d0>
 80009b8:	4b43      	ldr	r3, [pc, #268]	; (8000ac8 <__aeabi_dadd+0x634>)
 80009ba:	3501      	adds	r5, #1
 80009bc:	4019      	ands	r1, r3
 80009be:	e5c9      	b.n	8000554 <__aeabi_dadd+0xc0>
 80009c0:	0038      	movs	r0, r7
 80009c2:	e669      	b.n	8000698 <__aeabi_dadd+0x204>
 80009c4:	001e      	movs	r6, r3
 80009c6:	4647      	mov	r7, r8
 80009c8:	3e20      	subs	r6, #32
 80009ca:	40f7      	lsrs	r7, r6
 80009cc:	46bc      	mov	ip, r7
 80009ce:	2b20      	cmp	r3, #32
 80009d0:	d004      	beq.n	80009dc <__aeabi_dadd+0x548>
 80009d2:	2640      	movs	r6, #64	; 0x40
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	4646      	mov	r6, r8
 80009d8:	409e      	lsls	r6, r3
 80009da:	4332      	orrs	r2, r6
 80009dc:	0017      	movs	r7, r2
 80009de:	4663      	mov	r3, ip
 80009e0:	1e7a      	subs	r2, r7, #1
 80009e2:	4197      	sbcs	r7, r2
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e602      	b.n	80005ee <__aeabi_dadd+0x15a>
 80009e8:	4d36      	ldr	r5, [pc, #216]	; (8000ac4 <__aeabi_dadd+0x630>)
 80009ea:	42ae      	cmp	r6, r5
 80009ec:	d0ca      	beq.n	8000984 <__aeabi_dadd+0x4f0>
 80009ee:	2580      	movs	r5, #128	; 0x80
 80009f0:	042d      	lsls	r5, r5, #16
 80009f2:	425b      	negs	r3, r3
 80009f4:	4329      	orrs	r1, r5
 80009f6:	e7a6      	b.n	8000946 <__aeabi_dadd+0x4b2>
 80009f8:	4308      	orrs	r0, r1
 80009fa:	1e41      	subs	r1, r0, #1
 80009fc:	4188      	sbcs	r0, r1
 80009fe:	e6a6      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d100      	bne.n	8000a06 <__aeabi_dadd+0x572>
 8000a04:	e648      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a06:	1a87      	subs	r7, r0, r2
 8000a08:	4643      	mov	r3, r8
 8000a0a:	42b8      	cmp	r0, r7
 8000a0c:	41b6      	sbcs	r6, r6
 8000a0e:	1acb      	subs	r3, r1, r3
 8000a10:	4276      	negs	r6, r6
 8000a12:	1b9e      	subs	r6, r3, r6
 8000a14:	0233      	lsls	r3, r6, #8
 8000a16:	d54b      	bpl.n	8000ab0 <__aeabi_dadd+0x61c>
 8000a18:	1a17      	subs	r7, r2, r0
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	42ba      	cmp	r2, r7
 8000a1e:	4192      	sbcs	r2, r2
 8000a20:	1a59      	subs	r1, r3, r1
 8000a22:	4252      	negs	r2, r2
 8000a24:	1a89      	subs	r1, r1, r2
 8000a26:	2207      	movs	r2, #7
 8000a28:	4664      	mov	r4, ip
 8000a2a:	403a      	ands	r2, r7
 8000a2c:	e592      	b.n	8000554 <__aeabi_dadd+0xc0>
 8000a2e:	4301      	orrs	r1, r0
 8000a30:	000f      	movs	r7, r1
 8000a32:	1e79      	subs	r1, r7, #1
 8000a34:	418f      	sbcs	r7, r1
 8000a36:	e79d      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000a38:	001c      	movs	r4, r3
 8000a3a:	000f      	movs	r7, r1
 8000a3c:	3c20      	subs	r4, #32
 8000a3e:	40e7      	lsrs	r7, r4
 8000a40:	2b20      	cmp	r3, #32
 8000a42:	d003      	beq.n	8000a4c <__aeabi_dadd+0x5b8>
 8000a44:	2440      	movs	r4, #64	; 0x40
 8000a46:	1ae3      	subs	r3, r4, r3
 8000a48:	4099      	lsls	r1, r3
 8000a4a:	4308      	orrs	r0, r1
 8000a4c:	1e41      	subs	r1, r0, #1
 8000a4e:	4188      	sbcs	r0, r1
 8000a50:	4338      	orrs	r0, r7
 8000a52:	e67c      	b.n	800074e <__aeabi_dadd+0x2ba>
 8000a54:	2200      	movs	r2, #0
 8000a56:	2400      	movs	r4, #0
 8000a58:	e625      	b.n	80006a6 <__aeabi_dadd+0x212>
 8000a5a:	1a17      	subs	r7, r2, r0
 8000a5c:	4643      	mov	r3, r8
 8000a5e:	42ba      	cmp	r2, r7
 8000a60:	4192      	sbcs	r2, r2
 8000a62:	1a59      	subs	r1, r3, r1
 8000a64:	4252      	negs	r2, r2
 8000a66:	1a89      	subs	r1, r1, r2
 8000a68:	4664      	mov	r4, ip
 8000a6a:	0035      	movs	r5, r6
 8000a6c:	e543      	b.n	80004f6 <__aeabi_dadd+0x62>
 8000a6e:	4641      	mov	r1, r8
 8000a70:	0010      	movs	r0, r2
 8000a72:	4d14      	ldr	r5, [pc, #80]	; (8000ac4 <__aeabi_dadd+0x630>)
 8000a74:	e610      	b.n	8000698 <__aeabi_dadd+0x204>
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	2400      	movs	r4, #0
 8000a7a:	0312      	lsls	r2, r2, #12
 8000a7c:	e680      	b.n	8000780 <__aeabi_dadd+0x2ec>
 8000a7e:	001d      	movs	r5, r3
 8000a80:	000f      	movs	r7, r1
 8000a82:	3d20      	subs	r5, #32
 8000a84:	40ef      	lsrs	r7, r5
 8000a86:	46bc      	mov	ip, r7
 8000a88:	2b20      	cmp	r3, #32
 8000a8a:	d003      	beq.n	8000a94 <__aeabi_dadd+0x600>
 8000a8c:	2540      	movs	r5, #64	; 0x40
 8000a8e:	1aeb      	subs	r3, r5, r3
 8000a90:	4099      	lsls	r1, r3
 8000a92:	4308      	orrs	r0, r1
 8000a94:	0007      	movs	r7, r0
 8000a96:	4663      	mov	r3, ip
 8000a98:	1e78      	subs	r0, r7, #1
 8000a9a:	4187      	sbcs	r7, r0
 8000a9c:	431f      	orrs	r7, r3
 8000a9e:	e769      	b.n	8000974 <__aeabi_dadd+0x4e0>
 8000aa0:	1887      	adds	r7, r0, r2
 8000aa2:	4297      	cmp	r7, r2
 8000aa4:	419b      	sbcs	r3, r3
 8000aa6:	4441      	add	r1, r8
 8000aa8:	425b      	negs	r3, r3
 8000aaa:	18c9      	adds	r1, r1, r3
 8000aac:	0035      	movs	r5, r6
 8000aae:	e5a3      	b.n	80005f8 <__aeabi_dadd+0x164>
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	4333      	orrs	r3, r6
 8000ab4:	d0ce      	beq.n	8000a54 <__aeabi_dadd+0x5c0>
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	0031      	movs	r1, r6
 8000aba:	403a      	ands	r2, r7
 8000abc:	e652      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	e5f4      	b.n	80006ae <__aeabi_dadd+0x21a>
 8000ac4:	000007ff 	.word	0x000007ff
 8000ac8:	ff7fffff 	.word	0xff7fffff

08000acc <__aeabi_ddiv>:
 8000acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ace:	4657      	mov	r7, sl
 8000ad0:	46de      	mov	lr, fp
 8000ad2:	464e      	mov	r6, r9
 8000ad4:	4645      	mov	r5, r8
 8000ad6:	b5e0      	push	{r5, r6, r7, lr}
 8000ad8:	4683      	mov	fp, r0
 8000ada:	0007      	movs	r7, r0
 8000adc:	030e      	lsls	r6, r1, #12
 8000ade:	0048      	lsls	r0, r1, #1
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	4692      	mov	sl, r2
 8000ae4:	001c      	movs	r4, r3
 8000ae6:	0b36      	lsrs	r6, r6, #12
 8000ae8:	0d40      	lsrs	r0, r0, #21
 8000aea:	0fcd      	lsrs	r5, r1, #31
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d100      	bne.n	8000af2 <__aeabi_ddiv+0x26>
 8000af0:	e09d      	b.n	8000c2e <__aeabi_ddiv+0x162>
 8000af2:	4b95      	ldr	r3, [pc, #596]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000af4:	4298      	cmp	r0, r3
 8000af6:	d039      	beq.n	8000b6c <__aeabi_ddiv+0xa0>
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	00f6      	lsls	r6, r6, #3
 8000afc:	041b      	lsls	r3, r3, #16
 8000afe:	431e      	orrs	r6, r3
 8000b00:	4a92      	ldr	r2, [pc, #584]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b02:	0f7b      	lsrs	r3, r7, #29
 8000b04:	4333      	orrs	r3, r6
 8000b06:	4699      	mov	r9, r3
 8000b08:	4694      	mov	ip, r2
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	4463      	add	r3, ip
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	2600      	movs	r6, #0
 8000b14:	00ff      	lsls	r7, r7, #3
 8000b16:	9302      	str	r3, [sp, #8]
 8000b18:	0323      	lsls	r3, r4, #12
 8000b1a:	0b1b      	lsrs	r3, r3, #12
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	0063      	lsls	r3, r4, #1
 8000b20:	0fe4      	lsrs	r4, r4, #31
 8000b22:	4652      	mov	r2, sl
 8000b24:	0d5b      	lsrs	r3, r3, #21
 8000b26:	9401      	str	r4, [sp, #4]
 8000b28:	d100      	bne.n	8000b2c <__aeabi_ddiv+0x60>
 8000b2a:	e0b3      	b.n	8000c94 <__aeabi_ddiv+0x1c8>
 8000b2c:	4986      	ldr	r1, [pc, #536]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_ddiv+0x68>
 8000b32:	e09e      	b.n	8000c72 <__aeabi_ddiv+0x1a6>
 8000b34:	4642      	mov	r2, r8
 8000b36:	00d1      	lsls	r1, r2, #3
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	0412      	lsls	r2, r2, #16
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	4651      	mov	r1, sl
 8000b40:	0f49      	lsrs	r1, r1, #29
 8000b42:	4311      	orrs	r1, r2
 8000b44:	468b      	mov	fp, r1
 8000b46:	4981      	ldr	r1, [pc, #516]	; (8000d4c <__aeabi_ddiv+0x280>)
 8000b48:	4652      	mov	r2, sl
 8000b4a:	468c      	mov	ip, r1
 8000b4c:	9900      	ldr	r1, [sp, #0]
 8000b4e:	4463      	add	r3, ip
 8000b50:	1acb      	subs	r3, r1, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	00d2      	lsls	r2, r2, #3
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	002b      	movs	r3, r5
 8000b5a:	4063      	eors	r3, r4
 8000b5c:	469a      	mov	sl, r3
 8000b5e:	2e0f      	cmp	r6, #15
 8000b60:	d900      	bls.n	8000b64 <__aeabi_ddiv+0x98>
 8000b62:	e105      	b.n	8000d70 <__aeabi_ddiv+0x2a4>
 8000b64:	4b7a      	ldr	r3, [pc, #488]	; (8000d50 <__aeabi_ddiv+0x284>)
 8000b66:	00b6      	lsls	r6, r6, #2
 8000b68:	599b      	ldr	r3, [r3, r6]
 8000b6a:	469f      	mov	pc, r3
 8000b6c:	465b      	mov	r3, fp
 8000b6e:	4333      	orrs	r3, r6
 8000b70:	4699      	mov	r9, r3
 8000b72:	d000      	beq.n	8000b76 <__aeabi_ddiv+0xaa>
 8000b74:	e0b8      	b.n	8000ce8 <__aeabi_ddiv+0x21c>
 8000b76:	2302      	movs	r3, #2
 8000b78:	2608      	movs	r6, #8
 8000b7a:	2700      	movs	r7, #0
 8000b7c:	9000      	str	r0, [sp, #0]
 8000b7e:	9302      	str	r3, [sp, #8]
 8000b80:	e7ca      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000b82:	46cb      	mov	fp, r9
 8000b84:	003a      	movs	r2, r7
 8000b86:	9902      	ldr	r1, [sp, #8]
 8000b88:	9501      	str	r5, [sp, #4]
 8000b8a:	9b01      	ldr	r3, [sp, #4]
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	2902      	cmp	r1, #2
 8000b90:	d027      	beq.n	8000be2 <__aeabi_ddiv+0x116>
 8000b92:	2903      	cmp	r1, #3
 8000b94:	d100      	bne.n	8000b98 <__aeabi_ddiv+0xcc>
 8000b96:	e280      	b.n	800109a <__aeabi_ddiv+0x5ce>
 8000b98:	2901      	cmp	r1, #1
 8000b9a:	d044      	beq.n	8000c26 <__aeabi_ddiv+0x15a>
 8000b9c:	496d      	ldr	r1, [pc, #436]	; (8000d54 <__aeabi_ddiv+0x288>)
 8000b9e:	9b00      	ldr	r3, [sp, #0]
 8000ba0:	468c      	mov	ip, r1
 8000ba2:	4463      	add	r3, ip
 8000ba4:	001c      	movs	r4, r3
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	dd38      	ble.n	8000c1c <__aeabi_ddiv+0x150>
 8000baa:	0753      	lsls	r3, r2, #29
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000bae:	e213      	b.n	8000fd8 <__aeabi_ddiv+0x50c>
 8000bb0:	08d2      	lsrs	r2, r2, #3
 8000bb2:	465b      	mov	r3, fp
 8000bb4:	01db      	lsls	r3, r3, #7
 8000bb6:	d509      	bpl.n	8000bcc <__aeabi_ddiv+0x100>
 8000bb8:	4659      	mov	r1, fp
 8000bba:	4b67      	ldr	r3, [pc, #412]	; (8000d58 <__aeabi_ddiv+0x28c>)
 8000bbc:	4019      	ands	r1, r3
 8000bbe:	468b      	mov	fp, r1
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	00c9      	lsls	r1, r1, #3
 8000bc4:	468c      	mov	ip, r1
 8000bc6:	9b00      	ldr	r3, [sp, #0]
 8000bc8:	4463      	add	r3, ip
 8000bca:	001c      	movs	r4, r3
 8000bcc:	4b63      	ldr	r3, [pc, #396]	; (8000d5c <__aeabi_ddiv+0x290>)
 8000bce:	429c      	cmp	r4, r3
 8000bd0:	dc07      	bgt.n	8000be2 <__aeabi_ddiv+0x116>
 8000bd2:	465b      	mov	r3, fp
 8000bd4:	0564      	lsls	r4, r4, #21
 8000bd6:	075f      	lsls	r7, r3, #29
 8000bd8:	025b      	lsls	r3, r3, #9
 8000bda:	4317      	orrs	r7, r2
 8000bdc:	0b1b      	lsrs	r3, r3, #12
 8000bde:	0d62      	lsrs	r2, r4, #21
 8000be0:	e002      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000be2:	2300      	movs	r3, #0
 8000be4:	2700      	movs	r7, #0
 8000be6:	4a58      	ldr	r2, [pc, #352]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	031b      	lsls	r3, r3, #12
 8000bec:	0b1c      	lsrs	r4, r3, #12
 8000bee:	0d0b      	lsrs	r3, r1, #20
 8000bf0:	051b      	lsls	r3, r3, #20
 8000bf2:	4323      	orrs	r3, r4
 8000bf4:	0514      	lsls	r4, r2, #20
 8000bf6:	4a5a      	ldr	r2, [pc, #360]	; (8000d60 <__aeabi_ddiv+0x294>)
 8000bf8:	0038      	movs	r0, r7
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	431c      	orrs	r4, r3
 8000bfe:	4653      	mov	r3, sl
 8000c00:	0064      	lsls	r4, r4, #1
 8000c02:	07db      	lsls	r3, r3, #31
 8000c04:	0864      	lsrs	r4, r4, #1
 8000c06:	431c      	orrs	r4, r3
 8000c08:	0021      	movs	r1, r4
 8000c0a:	b005      	add	sp, #20
 8000c0c:	bc3c      	pop	{r2, r3, r4, r5}
 8000c0e:	4690      	mov	r8, r2
 8000c10:	4699      	mov	r9, r3
 8000c12:	46a2      	mov	sl, r4
 8000c14:	46ab      	mov	fp, r5
 8000c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4252      	negs	r2, r2
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	1b1b      	subs	r3, r3, r4
 8000c20:	2b38      	cmp	r3, #56	; 0x38
 8000c22:	dc00      	bgt.n	8000c26 <__aeabi_ddiv+0x15a>
 8000c24:	e1ad      	b.n	8000f82 <__aeabi_ddiv+0x4b6>
 8000c26:	2200      	movs	r2, #0
 8000c28:	2300      	movs	r3, #0
 8000c2a:	2700      	movs	r7, #0
 8000c2c:	e7dc      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000c2e:	465b      	mov	r3, fp
 8000c30:	4333      	orrs	r3, r6
 8000c32:	4699      	mov	r9, r3
 8000c34:	d05e      	beq.n	8000cf4 <__aeabi_ddiv+0x228>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_ddiv+0x170>
 8000c3a:	e18a      	b.n	8000f52 <__aeabi_ddiv+0x486>
 8000c3c:	0030      	movs	r0, r6
 8000c3e:	f001 fa9d 	bl	800217c <__clzsi2>
 8000c42:	0003      	movs	r3, r0
 8000c44:	3b0b      	subs	r3, #11
 8000c46:	2b1c      	cmp	r3, #28
 8000c48:	dd00      	ble.n	8000c4c <__aeabi_ddiv+0x180>
 8000c4a:	e17b      	b.n	8000f44 <__aeabi_ddiv+0x478>
 8000c4c:	221d      	movs	r2, #29
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	465a      	mov	r2, fp
 8000c52:	0001      	movs	r1, r0
 8000c54:	40da      	lsrs	r2, r3
 8000c56:	3908      	subs	r1, #8
 8000c58:	408e      	lsls	r6, r1
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	465f      	mov	r7, fp
 8000c5e:	4333      	orrs	r3, r6
 8000c60:	4699      	mov	r9, r3
 8000c62:	408f      	lsls	r7, r1
 8000c64:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <__aeabi_ddiv+0x298>)
 8000c66:	2600      	movs	r6, #0
 8000c68:	1a1b      	subs	r3, r3, r0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9302      	str	r3, [sp, #8]
 8000c70:	e752      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000c72:	4641      	mov	r1, r8
 8000c74:	4653      	mov	r3, sl
 8000c76:	430b      	orrs	r3, r1
 8000c78:	493b      	ldr	r1, [pc, #236]	; (8000d68 <__aeabi_ddiv+0x29c>)
 8000c7a:	469b      	mov	fp, r3
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	9b00      	ldr	r3, [sp, #0]
 8000c80:	4463      	add	r3, ip
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	465b      	mov	r3, fp
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d13b      	bne.n	8000d02 <__aeabi_ddiv+0x236>
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	431e      	orrs	r6, r3
 8000c90:	2102      	movs	r1, #2
 8000c92:	e761      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000c94:	4643      	mov	r3, r8
 8000c96:	4313      	orrs	r3, r2
 8000c98:	469b      	mov	fp, r3
 8000c9a:	d037      	beq.n	8000d0c <__aeabi_ddiv+0x240>
 8000c9c:	4643      	mov	r3, r8
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_ddiv+0x1d8>
 8000ca2:	e162      	b.n	8000f6a <__aeabi_ddiv+0x49e>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	f001 fa69 	bl	800217c <__clzsi2>
 8000caa:	0003      	movs	r3, r0
 8000cac:	3b0b      	subs	r3, #11
 8000cae:	2b1c      	cmp	r3, #28
 8000cb0:	dd00      	ble.n	8000cb4 <__aeabi_ddiv+0x1e8>
 8000cb2:	e153      	b.n	8000f5c <__aeabi_ddiv+0x490>
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	4641      	mov	r1, r8
 8000cb8:	3a08      	subs	r2, #8
 8000cba:	4091      	lsls	r1, r2
 8000cbc:	4688      	mov	r8, r1
 8000cbe:	211d      	movs	r1, #29
 8000cc0:	1acb      	subs	r3, r1, r3
 8000cc2:	4651      	mov	r1, sl
 8000cc4:	40d9      	lsrs	r1, r3
 8000cc6:	000b      	movs	r3, r1
 8000cc8:	4641      	mov	r1, r8
 8000cca:	430b      	orrs	r3, r1
 8000ccc:	469b      	mov	fp, r3
 8000cce:	4653      	mov	r3, sl
 8000cd0:	4093      	lsls	r3, r2
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	9b00      	ldr	r3, [sp, #0]
 8000cd6:	4925      	ldr	r1, [pc, #148]	; (8000d6c <__aeabi_ddiv+0x2a0>)
 8000cd8:	469c      	mov	ip, r3
 8000cda:	4460      	add	r0, ip
 8000cdc:	0003      	movs	r3, r0
 8000cde:	468c      	mov	ip, r1
 8000ce0:	4463      	add	r3, ip
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	e737      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	46b1      	mov	r9, r6
 8000cec:	9000      	str	r0, [sp, #0]
 8000cee:	260c      	movs	r6, #12
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	e711      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	2604      	movs	r6, #4
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	e70a      	b.n	8000b18 <__aeabi_ddiv+0x4c>
 8000d02:	2303      	movs	r3, #3
 8000d04:	46c3      	mov	fp, r8
 8000d06:	431e      	orrs	r6, r3
 8000d08:	2103      	movs	r1, #3
 8000d0a:	e725      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	431e      	orrs	r6, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	2101      	movs	r1, #1
 8000d14:	e720      	b.n	8000b58 <__aeabi_ddiv+0x8c>
 8000d16:	2300      	movs	r3, #0
 8000d18:	469a      	mov	sl, r3
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	031b      	lsls	r3, r3, #12
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d22:	e761      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	4649      	mov	r1, r9
 8000d28:	031b      	lsls	r3, r3, #12
 8000d2a:	4219      	tst	r1, r3
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x264>
 8000d2e:	e0e2      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d30:	4659      	mov	r1, fp
 8000d32:	4219      	tst	r1, r3
 8000d34:	d000      	beq.n	8000d38 <__aeabi_ddiv+0x26c>
 8000d36:	e0de      	b.n	8000ef6 <__aeabi_ddiv+0x42a>
 8000d38:	430b      	orrs	r3, r1
 8000d3a:	031b      	lsls	r3, r3, #12
 8000d3c:	0017      	movs	r7, r2
 8000d3e:	0b1b      	lsrs	r3, r3, #12
 8000d40:	46a2      	mov	sl, r4
 8000d42:	4a01      	ldr	r2, [pc, #4]	; (8000d48 <__aeabi_ddiv+0x27c>)
 8000d44:	e750      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	000007ff 	.word	0x000007ff
 8000d4c:	fffffc01 	.word	0xfffffc01
 8000d50:	0800b85c 	.word	0x0800b85c
 8000d54:	000003ff 	.word	0x000003ff
 8000d58:	feffffff 	.word	0xfeffffff
 8000d5c:	000007fe 	.word	0x000007fe
 8000d60:	800fffff 	.word	0x800fffff
 8000d64:	fffffc0d 	.word	0xfffffc0d
 8000d68:	fffff801 	.word	0xfffff801
 8000d6c:	000003f3 	.word	0x000003f3
 8000d70:	45d9      	cmp	r9, fp
 8000d72:	d900      	bls.n	8000d76 <__aeabi_ddiv+0x2aa>
 8000d74:	e0cb      	b.n	8000f0e <__aeabi_ddiv+0x442>
 8000d76:	d100      	bne.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000d78:	e0c6      	b.n	8000f08 <__aeabi_ddiv+0x43c>
 8000d7a:	003c      	movs	r4, r7
 8000d7c:	4648      	mov	r0, r9
 8000d7e:	2700      	movs	r7, #0
 8000d80:	9b00      	ldr	r3, [sp, #0]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	465b      	mov	r3, fp
 8000d88:	0e16      	lsrs	r6, r2, #24
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	0213      	lsls	r3, r2, #8
 8000d90:	4698      	mov	r8, r3
 8000d92:	0433      	lsls	r3, r6, #16
 8000d94:	0c1b      	lsrs	r3, r3, #16
 8000d96:	4699      	mov	r9, r3
 8000d98:	0c31      	lsrs	r1, r6, #16
 8000d9a:	9101      	str	r1, [sp, #4]
 8000d9c:	f7ff fa4c 	bl	8000238 <__aeabi_uidivmod>
 8000da0:	464a      	mov	r2, r9
 8000da2:	4342      	muls	r2, r0
 8000da4:	040b      	lsls	r3, r1, #16
 8000da6:	0c21      	lsrs	r1, r4, #16
 8000da8:	0005      	movs	r5, r0
 8000daa:	4319      	orrs	r1, r3
 8000dac:	428a      	cmp	r2, r1
 8000dae:	d907      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db0:	1989      	adds	r1, r1, r6
 8000db2:	3d01      	subs	r5, #1
 8000db4:	428e      	cmp	r6, r1
 8000db6:	d803      	bhi.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000db8:	428a      	cmp	r2, r1
 8000dba:	d901      	bls.n	8000dc0 <__aeabi_ddiv+0x2f4>
 8000dbc:	1e85      	subs	r5, r0, #2
 8000dbe:	1989      	adds	r1, r1, r6
 8000dc0:	1a88      	subs	r0, r1, r2
 8000dc2:	9901      	ldr	r1, [sp, #4]
 8000dc4:	f7ff fa38 	bl	8000238 <__aeabi_uidivmod>
 8000dc8:	0409      	lsls	r1, r1, #16
 8000dca:	468c      	mov	ip, r1
 8000dcc:	464a      	mov	r2, r9
 8000dce:	0421      	lsls	r1, r4, #16
 8000dd0:	4664      	mov	r4, ip
 8000dd2:	4342      	muls	r2, r0
 8000dd4:	0c09      	lsrs	r1, r1, #16
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	4321      	orrs	r1, r4
 8000dda:	428a      	cmp	r2, r1
 8000ddc:	d904      	bls.n	8000de8 <__aeabi_ddiv+0x31c>
 8000dde:	1989      	adds	r1, r1, r6
 8000de0:	3b01      	subs	r3, #1
 8000de2:	428e      	cmp	r6, r1
 8000de4:	d800      	bhi.n	8000de8 <__aeabi_ddiv+0x31c>
 8000de6:	e0f1      	b.n	8000fcc <__aeabi_ddiv+0x500>
 8000de8:	042d      	lsls	r5, r5, #16
 8000dea:	431d      	orrs	r5, r3
 8000dec:	46ab      	mov	fp, r5
 8000dee:	4643      	mov	r3, r8
 8000df0:	1a89      	subs	r1, r1, r2
 8000df2:	4642      	mov	r2, r8
 8000df4:	0c28      	lsrs	r0, r5, #16
 8000df6:	0412      	lsls	r2, r2, #16
 8000df8:	0c1d      	lsrs	r5, r3, #16
 8000dfa:	465b      	mov	r3, fp
 8000dfc:	0c14      	lsrs	r4, r2, #16
 8000dfe:	0022      	movs	r2, r4
 8000e00:	041b      	lsls	r3, r3, #16
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	435a      	muls	r2, r3
 8000e06:	9403      	str	r4, [sp, #12]
 8000e08:	436b      	muls	r3, r5
 8000e0a:	4344      	muls	r4, r0
 8000e0c:	9502      	str	r5, [sp, #8]
 8000e0e:	4368      	muls	r0, r5
 8000e10:	191b      	adds	r3, r3, r4
 8000e12:	0c15      	lsrs	r5, r2, #16
 8000e14:	18eb      	adds	r3, r5, r3
 8000e16:	429c      	cmp	r4, r3
 8000e18:	d903      	bls.n	8000e22 <__aeabi_ddiv+0x356>
 8000e1a:	2480      	movs	r4, #128	; 0x80
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	46a4      	mov	ip, r4
 8000e20:	4460      	add	r0, ip
 8000e22:	0c1c      	lsrs	r4, r3, #16
 8000e24:	0415      	lsls	r5, r2, #16
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	0c2d      	lsrs	r5, r5, #16
 8000e2a:	1820      	adds	r0, r4, r0
 8000e2c:	195d      	adds	r5, r3, r5
 8000e2e:	4281      	cmp	r1, r0
 8000e30:	d377      	bcc.n	8000f22 <__aeabi_ddiv+0x456>
 8000e32:	d073      	beq.n	8000f1c <__aeabi_ddiv+0x450>
 8000e34:	1a0c      	subs	r4, r1, r0
 8000e36:	4aa2      	ldr	r2, [pc, #648]	; (80010c0 <__aeabi_ddiv+0x5f4>)
 8000e38:	1b7d      	subs	r5, r7, r5
 8000e3a:	42af      	cmp	r7, r5
 8000e3c:	41bf      	sbcs	r7, r7
 8000e3e:	4694      	mov	ip, r2
 8000e40:	9b00      	ldr	r3, [sp, #0]
 8000e42:	427f      	negs	r7, r7
 8000e44:	4463      	add	r3, ip
 8000e46:	1be0      	subs	r0, r4, r7
 8000e48:	001c      	movs	r4, r3
 8000e4a:	4286      	cmp	r6, r0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_ddiv+0x384>
 8000e4e:	e0db      	b.n	8001008 <__aeabi_ddiv+0x53c>
 8000e50:	9901      	ldr	r1, [sp, #4]
 8000e52:	f7ff f9f1 	bl	8000238 <__aeabi_uidivmod>
 8000e56:	464a      	mov	r2, r9
 8000e58:	4342      	muls	r2, r0
 8000e5a:	040b      	lsls	r3, r1, #16
 8000e5c:	0c29      	lsrs	r1, r5, #16
 8000e5e:	0007      	movs	r7, r0
 8000e60:	4319      	orrs	r1, r3
 8000e62:	428a      	cmp	r2, r1
 8000e64:	d907      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e66:	1989      	adds	r1, r1, r6
 8000e68:	3f01      	subs	r7, #1
 8000e6a:	428e      	cmp	r6, r1
 8000e6c:	d803      	bhi.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d901      	bls.n	8000e76 <__aeabi_ddiv+0x3aa>
 8000e72:	1e87      	subs	r7, r0, #2
 8000e74:	1989      	adds	r1, r1, r6
 8000e76:	1a88      	subs	r0, r1, r2
 8000e78:	9901      	ldr	r1, [sp, #4]
 8000e7a:	f7ff f9dd 	bl	8000238 <__aeabi_uidivmod>
 8000e7e:	0409      	lsls	r1, r1, #16
 8000e80:	464a      	mov	r2, r9
 8000e82:	4689      	mov	r9, r1
 8000e84:	0429      	lsls	r1, r5, #16
 8000e86:	464d      	mov	r5, r9
 8000e88:	4342      	muls	r2, r0
 8000e8a:	0c09      	lsrs	r1, r1, #16
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	4329      	orrs	r1, r5
 8000e90:	428a      	cmp	r2, r1
 8000e92:	d907      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e94:	1989      	adds	r1, r1, r6
 8000e96:	3b01      	subs	r3, #1
 8000e98:	428e      	cmp	r6, r1
 8000e9a:	d803      	bhi.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d901      	bls.n	8000ea4 <__aeabi_ddiv+0x3d8>
 8000ea0:	1e83      	subs	r3, r0, #2
 8000ea2:	1989      	adds	r1, r1, r6
 8000ea4:	043f      	lsls	r7, r7, #16
 8000ea6:	1a89      	subs	r1, r1, r2
 8000ea8:	003a      	movs	r2, r7
 8000eaa:	9f03      	ldr	r7, [sp, #12]
 8000eac:	431a      	orrs	r2, r3
 8000eae:	0038      	movs	r0, r7
 8000eb0:	0413      	lsls	r3, r2, #16
 8000eb2:	0c1b      	lsrs	r3, r3, #16
 8000eb4:	4358      	muls	r0, r3
 8000eb6:	4681      	mov	r9, r0
 8000eb8:	9802      	ldr	r0, [sp, #8]
 8000eba:	0c15      	lsrs	r5, r2, #16
 8000ebc:	436f      	muls	r7, r5
 8000ebe:	4343      	muls	r3, r0
 8000ec0:	4345      	muls	r5, r0
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	0c00      	lsrs	r0, r0, #16
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	19db      	adds	r3, r3, r7
 8000eca:	4463      	add	r3, ip
 8000ecc:	429f      	cmp	r7, r3
 8000ece:	d903      	bls.n	8000ed8 <__aeabi_ddiv+0x40c>
 8000ed0:	2080      	movs	r0, #128	; 0x80
 8000ed2:	0240      	lsls	r0, r0, #9
 8000ed4:	4684      	mov	ip, r0
 8000ed6:	4465      	add	r5, ip
 8000ed8:	4648      	mov	r0, r9
 8000eda:	0c1f      	lsrs	r7, r3, #16
 8000edc:	0400      	lsls	r0, r0, #16
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	0c00      	lsrs	r0, r0, #16
 8000ee2:	197d      	adds	r5, r7, r5
 8000ee4:	1818      	adds	r0, r3, r0
 8000ee6:	42a9      	cmp	r1, r5
 8000ee8:	d200      	bcs.n	8000eec <__aeabi_ddiv+0x420>
 8000eea:	e084      	b.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_ddiv+0x424>
 8000eee:	e07f      	b.n	8000ff0 <__aeabi_ddiv+0x524>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	e657      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	464a      	mov	r2, r9
 8000efa:	031b      	lsls	r3, r3, #12
 8000efc:	4313      	orrs	r3, r2
 8000efe:	031b      	lsls	r3, r3, #12
 8000f00:	0b1b      	lsrs	r3, r3, #12
 8000f02:	46aa      	mov	sl, r5
 8000f04:	4a6f      	ldr	r2, [pc, #444]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 8000f06:	e66f      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000f08:	42ba      	cmp	r2, r7
 8000f0a:	d900      	bls.n	8000f0e <__aeabi_ddiv+0x442>
 8000f0c:	e735      	b.n	8000d7a <__aeabi_ddiv+0x2ae>
 8000f0e:	464b      	mov	r3, r9
 8000f10:	07dc      	lsls	r4, r3, #31
 8000f12:	0858      	lsrs	r0, r3, #1
 8000f14:	087b      	lsrs	r3, r7, #1
 8000f16:	431c      	orrs	r4, r3
 8000f18:	07ff      	lsls	r7, r7, #31
 8000f1a:	e734      	b.n	8000d86 <__aeabi_ddiv+0x2ba>
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	42af      	cmp	r7, r5
 8000f20:	d289      	bcs.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f22:	4447      	add	r7, r8
 8000f24:	4547      	cmp	r7, r8
 8000f26:	41a4      	sbcs	r4, r4
 8000f28:	465b      	mov	r3, fp
 8000f2a:	4264      	negs	r4, r4
 8000f2c:	19a4      	adds	r4, r4, r6
 8000f2e:	1864      	adds	r4, r4, r1
 8000f30:	3b01      	subs	r3, #1
 8000f32:	42a6      	cmp	r6, r4
 8000f34:	d21e      	bcs.n	8000f74 <__aeabi_ddiv+0x4a8>
 8000f36:	42a0      	cmp	r0, r4
 8000f38:	d86d      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f3c:	e0b6      	b.n	80010ac <__aeabi_ddiv+0x5e0>
 8000f3e:	1a24      	subs	r4, r4, r0
 8000f40:	469b      	mov	fp, r3
 8000f42:	e778      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f44:	0003      	movs	r3, r0
 8000f46:	465a      	mov	r2, fp
 8000f48:	3b28      	subs	r3, #40	; 0x28
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	2700      	movs	r7, #0
 8000f4e:	4691      	mov	r9, r2
 8000f50:	e688      	b.n	8000c64 <__aeabi_ddiv+0x198>
 8000f52:	4658      	mov	r0, fp
 8000f54:	f001 f912 	bl	800217c <__clzsi2>
 8000f58:	3020      	adds	r0, #32
 8000f5a:	e672      	b.n	8000c42 <__aeabi_ddiv+0x176>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	4652      	mov	r2, sl
 8000f60:	3b28      	subs	r3, #40	; 0x28
 8000f62:	409a      	lsls	r2, r3
 8000f64:	4693      	mov	fp, r2
 8000f66:	2200      	movs	r2, #0
 8000f68:	e6b4      	b.n	8000cd4 <__aeabi_ddiv+0x208>
 8000f6a:	4650      	mov	r0, sl
 8000f6c:	f001 f906 	bl	800217c <__clzsi2>
 8000f70:	3020      	adds	r0, #32
 8000f72:	e69a      	b.n	8000caa <__aeabi_ddiv+0x1de>
 8000f74:	42a6      	cmp	r6, r4
 8000f76:	d1e2      	bne.n	8000f3e <__aeabi_ddiv+0x472>
 8000f78:	45b8      	cmp	r8, r7
 8000f7a:	d9dc      	bls.n	8000f36 <__aeabi_ddiv+0x46a>
 8000f7c:	1a34      	subs	r4, r6, r0
 8000f7e:	469b      	mov	fp, r3
 8000f80:	e759      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 8000f82:	2b1f      	cmp	r3, #31
 8000f84:	dc65      	bgt.n	8001052 <__aeabi_ddiv+0x586>
 8000f86:	4c50      	ldr	r4, [pc, #320]	; (80010c8 <__aeabi_ddiv+0x5fc>)
 8000f88:	9900      	ldr	r1, [sp, #0]
 8000f8a:	46a4      	mov	ip, r4
 8000f8c:	465c      	mov	r4, fp
 8000f8e:	4461      	add	r1, ip
 8000f90:	0008      	movs	r0, r1
 8000f92:	408c      	lsls	r4, r1
 8000f94:	0011      	movs	r1, r2
 8000f96:	4082      	lsls	r2, r0
 8000f98:	40d9      	lsrs	r1, r3
 8000f9a:	1e50      	subs	r0, r2, #1
 8000f9c:	4182      	sbcs	r2, r0
 8000f9e:	430c      	orrs	r4, r1
 8000fa0:	4314      	orrs	r4, r2
 8000fa2:	465a      	mov	r2, fp
 8000fa4:	40da      	lsrs	r2, r3
 8000fa6:	0013      	movs	r3, r2
 8000fa8:	0762      	lsls	r2, r4, #29
 8000faa:	d009      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fac:	220f      	movs	r2, #15
 8000fae:	4022      	ands	r2, r4
 8000fb0:	2a04      	cmp	r2, #4
 8000fb2:	d005      	beq.n	8000fc0 <__aeabi_ddiv+0x4f4>
 8000fb4:	0022      	movs	r2, r4
 8000fb6:	1d14      	adds	r4, r2, #4
 8000fb8:	4294      	cmp	r4, r2
 8000fba:	4189      	sbcs	r1, r1
 8000fbc:	4249      	negs	r1, r1
 8000fbe:	185b      	adds	r3, r3, r1
 8000fc0:	021a      	lsls	r2, r3, #8
 8000fc2:	d562      	bpl.n	800108a <__aeabi_ddiv+0x5be>
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	2700      	movs	r7, #0
 8000fca:	e60d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 8000fcc:	428a      	cmp	r2, r1
 8000fce:	d800      	bhi.n	8000fd2 <__aeabi_ddiv+0x506>
 8000fd0:	e70a      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd2:	1e83      	subs	r3, r0, #2
 8000fd4:	1989      	adds	r1, r1, r6
 8000fd6:	e707      	b.n	8000de8 <__aeabi_ddiv+0x31c>
 8000fd8:	230f      	movs	r3, #15
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_ddiv+0x516>
 8000fe0:	e5e6      	b.n	8000bb0 <__aeabi_ddiv+0xe4>
 8000fe2:	1d17      	adds	r7, r2, #4
 8000fe4:	4297      	cmp	r7, r2
 8000fe6:	4192      	sbcs	r2, r2
 8000fe8:	4253      	negs	r3, r2
 8000fea:	449b      	add	fp, r3
 8000fec:	08fa      	lsrs	r2, r7, #3
 8000fee:	e5e0      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_ddiv+0x52a>
 8000ff4:	e5d7      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 8000ff6:	1871      	adds	r1, r6, r1
 8000ff8:	1e53      	subs	r3, r2, #1
 8000ffa:	42b1      	cmp	r1, r6
 8000ffc:	d327      	bcc.n	800104e <__aeabi_ddiv+0x582>
 8000ffe:	42a9      	cmp	r1, r5
 8001000:	d315      	bcc.n	800102e <__aeabi_ddiv+0x562>
 8001002:	d058      	beq.n	80010b6 <__aeabi_ddiv+0x5ea>
 8001004:	001a      	movs	r2, r3
 8001006:	e773      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001008:	2b00      	cmp	r3, #0
 800100a:	dc00      	bgt.n	800100e <__aeabi_ddiv+0x542>
 800100c:	e604      	b.n	8000c18 <__aeabi_ddiv+0x14c>
 800100e:	2301      	movs	r3, #1
 8001010:	2200      	movs	r2, #0
 8001012:	449b      	add	fp, r3
 8001014:	e5cd      	b.n	8000bb2 <__aeabi_ddiv+0xe6>
 8001016:	2302      	movs	r3, #2
 8001018:	4447      	add	r7, r8
 800101a:	4547      	cmp	r7, r8
 800101c:	4189      	sbcs	r1, r1
 800101e:	425b      	negs	r3, r3
 8001020:	469c      	mov	ip, r3
 8001022:	4249      	negs	r1, r1
 8001024:	1989      	adds	r1, r1, r6
 8001026:	190c      	adds	r4, r1, r4
 8001028:	44e3      	add	fp, ip
 800102a:	1a24      	subs	r4, r4, r0
 800102c:	e703      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 800102e:	4643      	mov	r3, r8
 8001030:	005f      	lsls	r7, r3, #1
 8001032:	4547      	cmp	r7, r8
 8001034:	419b      	sbcs	r3, r3
 8001036:	46b8      	mov	r8, r7
 8001038:	425b      	negs	r3, r3
 800103a:	199e      	adds	r6, r3, r6
 800103c:	3a02      	subs	r2, #2
 800103e:	1989      	adds	r1, r1, r6
 8001040:	42a9      	cmp	r1, r5
 8001042:	d000      	beq.n	8001046 <__aeabi_ddiv+0x57a>
 8001044:	e754      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 8001046:	4540      	cmp	r0, r8
 8001048:	d000      	beq.n	800104c <__aeabi_ddiv+0x580>
 800104a:	e751      	b.n	8000ef0 <__aeabi_ddiv+0x424>
 800104c:	e5ab      	b.n	8000ba6 <__aeabi_ddiv+0xda>
 800104e:	001a      	movs	r2, r3
 8001050:	e7f6      	b.n	8001040 <__aeabi_ddiv+0x574>
 8001052:	211f      	movs	r1, #31
 8001054:	465f      	mov	r7, fp
 8001056:	4249      	negs	r1, r1
 8001058:	1b0c      	subs	r4, r1, r4
 800105a:	40e7      	lsrs	r7, r4
 800105c:	2b20      	cmp	r3, #32
 800105e:	d007      	beq.n	8001070 <__aeabi_ddiv+0x5a4>
 8001060:	491a      	ldr	r1, [pc, #104]	; (80010cc <__aeabi_ddiv+0x600>)
 8001062:	9b00      	ldr	r3, [sp, #0]
 8001064:	468c      	mov	ip, r1
 8001066:	4463      	add	r3, ip
 8001068:	0018      	movs	r0, r3
 800106a:	465b      	mov	r3, fp
 800106c:	4083      	lsls	r3, r0
 800106e:	431a      	orrs	r2, r3
 8001070:	1e50      	subs	r0, r2, #1
 8001072:	4182      	sbcs	r2, r0
 8001074:	433a      	orrs	r2, r7
 8001076:	2707      	movs	r7, #7
 8001078:	2300      	movs	r3, #0
 800107a:	4017      	ands	r7, r2
 800107c:	d009      	beq.n	8001092 <__aeabi_ddiv+0x5c6>
 800107e:	210f      	movs	r1, #15
 8001080:	2300      	movs	r3, #0
 8001082:	4011      	ands	r1, r2
 8001084:	0014      	movs	r4, r2
 8001086:	2904      	cmp	r1, #4
 8001088:	d195      	bne.n	8000fb6 <__aeabi_ddiv+0x4ea>
 800108a:	0022      	movs	r2, r4
 800108c:	075f      	lsls	r7, r3, #29
 800108e:	025b      	lsls	r3, r3, #9
 8001090:	0b1b      	lsrs	r3, r3, #12
 8001092:	08d2      	lsrs	r2, r2, #3
 8001094:	4317      	orrs	r7, r2
 8001096:	2200      	movs	r2, #0
 8001098:	e5a6      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	4659      	mov	r1, fp
 800109e:	031b      	lsls	r3, r3, #12
 80010a0:	430b      	orrs	r3, r1
 80010a2:	031b      	lsls	r3, r3, #12
 80010a4:	0017      	movs	r7, r2
 80010a6:	0b1b      	lsrs	r3, r3, #12
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <__aeabi_ddiv+0x5f8>)
 80010aa:	e59d      	b.n	8000be8 <__aeabi_ddiv+0x11c>
 80010ac:	42bd      	cmp	r5, r7
 80010ae:	d8b2      	bhi.n	8001016 <__aeabi_ddiv+0x54a>
 80010b0:	469b      	mov	fp, r3
 80010b2:	2400      	movs	r4, #0
 80010b4:	e6bf      	b.n	8000e36 <__aeabi_ddiv+0x36a>
 80010b6:	4580      	cmp	r8, r0
 80010b8:	d3b9      	bcc.n	800102e <__aeabi_ddiv+0x562>
 80010ba:	001a      	movs	r2, r3
 80010bc:	e7c3      	b.n	8001046 <__aeabi_ddiv+0x57a>
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	000003ff 	.word	0x000003ff
 80010c4:	000007ff 	.word	0x000007ff
 80010c8:	0000041e 	.word	0x0000041e
 80010cc:	0000043e 	.word	0x0000043e

080010d0 <__eqdf2>:
 80010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d2:	464f      	mov	r7, r9
 80010d4:	4646      	mov	r6, r8
 80010d6:	46d6      	mov	lr, sl
 80010d8:	4684      	mov	ip, r0
 80010da:	b5c0      	push	{r6, r7, lr}
 80010dc:	4680      	mov	r8, r0
 80010de:	4e19      	ldr	r6, [pc, #100]	; (8001144 <__eqdf2+0x74>)
 80010e0:	0318      	lsls	r0, r3, #12
 80010e2:	030f      	lsls	r7, r1, #12
 80010e4:	004d      	lsls	r5, r1, #1
 80010e6:	0b00      	lsrs	r0, r0, #12
 80010e8:	005c      	lsls	r4, r3, #1
 80010ea:	4682      	mov	sl, r0
 80010ec:	0b3f      	lsrs	r7, r7, #12
 80010ee:	0d6d      	lsrs	r5, r5, #21
 80010f0:	0fc9      	lsrs	r1, r1, #31
 80010f2:	4691      	mov	r9, r2
 80010f4:	0d64      	lsrs	r4, r4, #21
 80010f6:	0fdb      	lsrs	r3, r3, #31
 80010f8:	2001      	movs	r0, #1
 80010fa:	42b5      	cmp	r5, r6
 80010fc:	d00a      	beq.n	8001114 <__eqdf2+0x44>
 80010fe:	42b4      	cmp	r4, r6
 8001100:	d003      	beq.n	800110a <__eqdf2+0x3a>
 8001102:	42a5      	cmp	r5, r4
 8001104:	d101      	bne.n	800110a <__eqdf2+0x3a>
 8001106:	4557      	cmp	r7, sl
 8001108:	d00c      	beq.n	8001124 <__eqdf2+0x54>
 800110a:	bc1c      	pop	{r2, r3, r4}
 800110c:	4690      	mov	r8, r2
 800110e:	4699      	mov	r9, r3
 8001110:	46a2      	mov	sl, r4
 8001112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001114:	4666      	mov	r6, ip
 8001116:	433e      	orrs	r6, r7
 8001118:	d1f7      	bne.n	800110a <__eqdf2+0x3a>
 800111a:	42ac      	cmp	r4, r5
 800111c:	d1f5      	bne.n	800110a <__eqdf2+0x3a>
 800111e:	4654      	mov	r4, sl
 8001120:	4314      	orrs	r4, r2
 8001122:	d1f2      	bne.n	800110a <__eqdf2+0x3a>
 8001124:	2001      	movs	r0, #1
 8001126:	45c8      	cmp	r8, r9
 8001128:	d1ef      	bne.n	800110a <__eqdf2+0x3a>
 800112a:	4299      	cmp	r1, r3
 800112c:	d007      	beq.n	800113e <__eqdf2+0x6e>
 800112e:	2d00      	cmp	r5, #0
 8001130:	d1eb      	bne.n	800110a <__eqdf2+0x3a>
 8001132:	4663      	mov	r3, ip
 8001134:	431f      	orrs	r7, r3
 8001136:	0038      	movs	r0, r7
 8001138:	1e47      	subs	r7, r0, #1
 800113a:	41b8      	sbcs	r0, r7
 800113c:	e7e5      	b.n	800110a <__eqdf2+0x3a>
 800113e:	2000      	movs	r0, #0
 8001140:	e7e3      	b.n	800110a <__eqdf2+0x3a>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	000007ff 	.word	0x000007ff

08001148 <__gedf2>:
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	464f      	mov	r7, r9
 800114c:	4646      	mov	r6, r8
 800114e:	46d6      	mov	lr, sl
 8001150:	004d      	lsls	r5, r1, #1
 8001152:	b5c0      	push	{r6, r7, lr}
 8001154:	030e      	lsls	r6, r1, #12
 8001156:	0fc9      	lsrs	r1, r1, #31
 8001158:	468a      	mov	sl, r1
 800115a:	492c      	ldr	r1, [pc, #176]	; (800120c <__gedf2+0xc4>)
 800115c:	031f      	lsls	r7, r3, #12
 800115e:	005c      	lsls	r4, r3, #1
 8001160:	4680      	mov	r8, r0
 8001162:	0b36      	lsrs	r6, r6, #12
 8001164:	0d6d      	lsrs	r5, r5, #21
 8001166:	4691      	mov	r9, r2
 8001168:	0b3f      	lsrs	r7, r7, #12
 800116a:	0d64      	lsrs	r4, r4, #21
 800116c:	0fdb      	lsrs	r3, r3, #31
 800116e:	428d      	cmp	r5, r1
 8001170:	d01e      	beq.n	80011b0 <__gedf2+0x68>
 8001172:	428c      	cmp	r4, r1
 8001174:	d016      	beq.n	80011a4 <__gedf2+0x5c>
 8001176:	2d00      	cmp	r5, #0
 8001178:	d11e      	bne.n	80011b8 <__gedf2+0x70>
 800117a:	4330      	orrs	r0, r6
 800117c:	4684      	mov	ip, r0
 800117e:	2c00      	cmp	r4, #0
 8001180:	d101      	bne.n	8001186 <__gedf2+0x3e>
 8001182:	433a      	orrs	r2, r7
 8001184:	d023      	beq.n	80011ce <__gedf2+0x86>
 8001186:	4662      	mov	r2, ip
 8001188:	2a00      	cmp	r2, #0
 800118a:	d01a      	beq.n	80011c2 <__gedf2+0x7a>
 800118c:	459a      	cmp	sl, r3
 800118e:	d029      	beq.n	80011e4 <__gedf2+0x9c>
 8001190:	4651      	mov	r1, sl
 8001192:	2002      	movs	r0, #2
 8001194:	3901      	subs	r1, #1
 8001196:	4008      	ands	r0, r1
 8001198:	3801      	subs	r0, #1
 800119a:	bc1c      	pop	{r2, r3, r4}
 800119c:	4690      	mov	r8, r2
 800119e:	4699      	mov	r9, r3
 80011a0:	46a2      	mov	sl, r4
 80011a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a4:	0039      	movs	r1, r7
 80011a6:	4311      	orrs	r1, r2
 80011a8:	d0e5      	beq.n	8001176 <__gedf2+0x2e>
 80011aa:	2002      	movs	r0, #2
 80011ac:	4240      	negs	r0, r0
 80011ae:	e7f4      	b.n	800119a <__gedf2+0x52>
 80011b0:	4330      	orrs	r0, r6
 80011b2:	d1fa      	bne.n	80011aa <__gedf2+0x62>
 80011b4:	42ac      	cmp	r4, r5
 80011b6:	d00f      	beq.n	80011d8 <__gedf2+0x90>
 80011b8:	2c00      	cmp	r4, #0
 80011ba:	d10f      	bne.n	80011dc <__gedf2+0x94>
 80011bc:	433a      	orrs	r2, r7
 80011be:	d0e7      	beq.n	8001190 <__gedf2+0x48>
 80011c0:	e00c      	b.n	80011dc <__gedf2+0x94>
 80011c2:	2201      	movs	r2, #1
 80011c4:	3b01      	subs	r3, #1
 80011c6:	4393      	bics	r3, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	3001      	adds	r0, #1
 80011cc:	e7e5      	b.n	800119a <__gedf2+0x52>
 80011ce:	4663      	mov	r3, ip
 80011d0:	2000      	movs	r0, #0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0e1      	beq.n	800119a <__gedf2+0x52>
 80011d6:	e7db      	b.n	8001190 <__gedf2+0x48>
 80011d8:	433a      	orrs	r2, r7
 80011da:	d1e6      	bne.n	80011aa <__gedf2+0x62>
 80011dc:	459a      	cmp	sl, r3
 80011de:	d1d7      	bne.n	8001190 <__gedf2+0x48>
 80011e0:	42a5      	cmp	r5, r4
 80011e2:	dcd5      	bgt.n	8001190 <__gedf2+0x48>
 80011e4:	42a5      	cmp	r5, r4
 80011e6:	db05      	blt.n	80011f4 <__gedf2+0xac>
 80011e8:	42be      	cmp	r6, r7
 80011ea:	d8d1      	bhi.n	8001190 <__gedf2+0x48>
 80011ec:	d008      	beq.n	8001200 <__gedf2+0xb8>
 80011ee:	2000      	movs	r0, #0
 80011f0:	42be      	cmp	r6, r7
 80011f2:	d2d2      	bcs.n	800119a <__gedf2+0x52>
 80011f4:	4650      	mov	r0, sl
 80011f6:	2301      	movs	r3, #1
 80011f8:	3801      	subs	r0, #1
 80011fa:	4398      	bics	r0, r3
 80011fc:	3001      	adds	r0, #1
 80011fe:	e7cc      	b.n	800119a <__gedf2+0x52>
 8001200:	45c8      	cmp	r8, r9
 8001202:	d8c5      	bhi.n	8001190 <__gedf2+0x48>
 8001204:	2000      	movs	r0, #0
 8001206:	45c8      	cmp	r8, r9
 8001208:	d3f4      	bcc.n	80011f4 <__gedf2+0xac>
 800120a:	e7c6      	b.n	800119a <__gedf2+0x52>
 800120c:	000007ff 	.word	0x000007ff

08001210 <__ledf2>:
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	464f      	mov	r7, r9
 8001214:	4646      	mov	r6, r8
 8001216:	46d6      	mov	lr, sl
 8001218:	004d      	lsls	r5, r1, #1
 800121a:	b5c0      	push	{r6, r7, lr}
 800121c:	030e      	lsls	r6, r1, #12
 800121e:	0fc9      	lsrs	r1, r1, #31
 8001220:	468a      	mov	sl, r1
 8001222:	492e      	ldr	r1, [pc, #184]	; (80012dc <__ledf2+0xcc>)
 8001224:	031f      	lsls	r7, r3, #12
 8001226:	005c      	lsls	r4, r3, #1
 8001228:	4680      	mov	r8, r0
 800122a:	0b36      	lsrs	r6, r6, #12
 800122c:	0d6d      	lsrs	r5, r5, #21
 800122e:	4691      	mov	r9, r2
 8001230:	0b3f      	lsrs	r7, r7, #12
 8001232:	0d64      	lsrs	r4, r4, #21
 8001234:	0fdb      	lsrs	r3, r3, #31
 8001236:	428d      	cmp	r5, r1
 8001238:	d018      	beq.n	800126c <__ledf2+0x5c>
 800123a:	428c      	cmp	r4, r1
 800123c:	d011      	beq.n	8001262 <__ledf2+0x52>
 800123e:	2d00      	cmp	r5, #0
 8001240:	d118      	bne.n	8001274 <__ledf2+0x64>
 8001242:	4330      	orrs	r0, r6
 8001244:	4684      	mov	ip, r0
 8001246:	2c00      	cmp	r4, #0
 8001248:	d11e      	bne.n	8001288 <__ledf2+0x78>
 800124a:	433a      	orrs	r2, r7
 800124c:	d11c      	bne.n	8001288 <__ledf2+0x78>
 800124e:	4663      	mov	r3, ip
 8001250:	2000      	movs	r0, #0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d030      	beq.n	80012b8 <__ledf2+0xa8>
 8001256:	4651      	mov	r1, sl
 8001258:	2002      	movs	r0, #2
 800125a:	3901      	subs	r1, #1
 800125c:	4008      	ands	r0, r1
 800125e:	3801      	subs	r0, #1
 8001260:	e02a      	b.n	80012b8 <__ledf2+0xa8>
 8001262:	0039      	movs	r1, r7
 8001264:	4311      	orrs	r1, r2
 8001266:	d0ea      	beq.n	800123e <__ledf2+0x2e>
 8001268:	2002      	movs	r0, #2
 800126a:	e025      	b.n	80012b8 <__ledf2+0xa8>
 800126c:	4330      	orrs	r0, r6
 800126e:	d1fb      	bne.n	8001268 <__ledf2+0x58>
 8001270:	42ac      	cmp	r4, r5
 8001272:	d026      	beq.n	80012c2 <__ledf2+0xb2>
 8001274:	2c00      	cmp	r4, #0
 8001276:	d126      	bne.n	80012c6 <__ledf2+0xb6>
 8001278:	433a      	orrs	r2, r7
 800127a:	d124      	bne.n	80012c6 <__ledf2+0xb6>
 800127c:	4651      	mov	r1, sl
 800127e:	2002      	movs	r0, #2
 8001280:	3901      	subs	r1, #1
 8001282:	4008      	ands	r0, r1
 8001284:	3801      	subs	r0, #1
 8001286:	e017      	b.n	80012b8 <__ledf2+0xa8>
 8001288:	4662      	mov	r2, ip
 800128a:	2a00      	cmp	r2, #0
 800128c:	d00f      	beq.n	80012ae <__ledf2+0x9e>
 800128e:	459a      	cmp	sl, r3
 8001290:	d1e1      	bne.n	8001256 <__ledf2+0x46>
 8001292:	42a5      	cmp	r5, r4
 8001294:	db05      	blt.n	80012a2 <__ledf2+0x92>
 8001296:	42be      	cmp	r6, r7
 8001298:	d8dd      	bhi.n	8001256 <__ledf2+0x46>
 800129a:	d019      	beq.n	80012d0 <__ledf2+0xc0>
 800129c:	2000      	movs	r0, #0
 800129e:	42be      	cmp	r6, r7
 80012a0:	d20a      	bcs.n	80012b8 <__ledf2+0xa8>
 80012a2:	4650      	mov	r0, sl
 80012a4:	2301      	movs	r3, #1
 80012a6:	3801      	subs	r0, #1
 80012a8:	4398      	bics	r0, r3
 80012aa:	3001      	adds	r0, #1
 80012ac:	e004      	b.n	80012b8 <__ledf2+0xa8>
 80012ae:	2201      	movs	r2, #1
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4393      	bics	r3, r2
 80012b4:	0018      	movs	r0, r3
 80012b6:	3001      	adds	r0, #1
 80012b8:	bc1c      	pop	{r2, r3, r4}
 80012ba:	4690      	mov	r8, r2
 80012bc:	4699      	mov	r9, r3
 80012be:	46a2      	mov	sl, r4
 80012c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c2:	433a      	orrs	r2, r7
 80012c4:	d1d0      	bne.n	8001268 <__ledf2+0x58>
 80012c6:	459a      	cmp	sl, r3
 80012c8:	d1c5      	bne.n	8001256 <__ledf2+0x46>
 80012ca:	42a5      	cmp	r5, r4
 80012cc:	dcc3      	bgt.n	8001256 <__ledf2+0x46>
 80012ce:	e7e0      	b.n	8001292 <__ledf2+0x82>
 80012d0:	45c8      	cmp	r8, r9
 80012d2:	d8c0      	bhi.n	8001256 <__ledf2+0x46>
 80012d4:	2000      	movs	r0, #0
 80012d6:	45c8      	cmp	r8, r9
 80012d8:	d3e3      	bcc.n	80012a2 <__ledf2+0x92>
 80012da:	e7ed      	b.n	80012b8 <__ledf2+0xa8>
 80012dc:	000007ff 	.word	0x000007ff

080012e0 <__aeabi_dmul>:
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	4657      	mov	r7, sl
 80012e4:	46de      	mov	lr, fp
 80012e6:	464e      	mov	r6, r9
 80012e8:	4645      	mov	r5, r8
 80012ea:	b5e0      	push	{r5, r6, r7, lr}
 80012ec:	4683      	mov	fp, r0
 80012ee:	0006      	movs	r6, r0
 80012f0:	030f      	lsls	r7, r1, #12
 80012f2:	0048      	lsls	r0, r1, #1
 80012f4:	b087      	sub	sp, #28
 80012f6:	4692      	mov	sl, r2
 80012f8:	001d      	movs	r5, r3
 80012fa:	0b3f      	lsrs	r7, r7, #12
 80012fc:	0d40      	lsrs	r0, r0, #21
 80012fe:	0fcc      	lsrs	r4, r1, #31
 8001300:	2800      	cmp	r0, #0
 8001302:	d100      	bne.n	8001306 <__aeabi_dmul+0x26>
 8001304:	e06f      	b.n	80013e6 <__aeabi_dmul+0x106>
 8001306:	4bde      	ldr	r3, [pc, #888]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001308:	4298      	cmp	r0, r3
 800130a:	d038      	beq.n	800137e <__aeabi_dmul+0x9e>
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	00ff      	lsls	r7, r7, #3
 8001310:	041b      	lsls	r3, r3, #16
 8001312:	431f      	orrs	r7, r3
 8001314:	0f73      	lsrs	r3, r6, #29
 8001316:	433b      	orrs	r3, r7
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	4bda      	ldr	r3, [pc, #872]	; (8001684 <__aeabi_dmul+0x3a4>)
 800131c:	2700      	movs	r7, #0
 800131e:	4699      	mov	r9, r3
 8001320:	2300      	movs	r3, #0
 8001322:	469b      	mov	fp, r3
 8001324:	00f6      	lsls	r6, r6, #3
 8001326:	4481      	add	r9, r0
 8001328:	032b      	lsls	r3, r5, #12
 800132a:	0069      	lsls	r1, r5, #1
 800132c:	0b1b      	lsrs	r3, r3, #12
 800132e:	4652      	mov	r2, sl
 8001330:	4698      	mov	r8, r3
 8001332:	0d49      	lsrs	r1, r1, #21
 8001334:	0fed      	lsrs	r5, r5, #31
 8001336:	2900      	cmp	r1, #0
 8001338:	d100      	bne.n	800133c <__aeabi_dmul+0x5c>
 800133a:	e085      	b.n	8001448 <__aeabi_dmul+0x168>
 800133c:	4bd0      	ldr	r3, [pc, #832]	; (8001680 <__aeabi_dmul+0x3a0>)
 800133e:	4299      	cmp	r1, r3
 8001340:	d100      	bne.n	8001344 <__aeabi_dmul+0x64>
 8001342:	e073      	b.n	800142c <__aeabi_dmul+0x14c>
 8001344:	4643      	mov	r3, r8
 8001346:	00da      	lsls	r2, r3, #3
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	4313      	orrs	r3, r2
 800134e:	4652      	mov	r2, sl
 8001350:	48cc      	ldr	r0, [pc, #816]	; (8001684 <__aeabi_dmul+0x3a4>)
 8001352:	0f52      	lsrs	r2, r2, #29
 8001354:	4684      	mov	ip, r0
 8001356:	4313      	orrs	r3, r2
 8001358:	4652      	mov	r2, sl
 800135a:	2000      	movs	r0, #0
 800135c:	4461      	add	r1, ip
 800135e:	00d2      	lsls	r2, r2, #3
 8001360:	4489      	add	r9, r1
 8001362:	0021      	movs	r1, r4
 8001364:	4069      	eors	r1, r5
 8001366:	9100      	str	r1, [sp, #0]
 8001368:	468c      	mov	ip, r1
 800136a:	2101      	movs	r1, #1
 800136c:	4449      	add	r1, r9
 800136e:	468a      	mov	sl, r1
 8001370:	2f0f      	cmp	r7, #15
 8001372:	d900      	bls.n	8001376 <__aeabi_dmul+0x96>
 8001374:	e090      	b.n	8001498 <__aeabi_dmul+0x1b8>
 8001376:	49c4      	ldr	r1, [pc, #784]	; (8001688 <__aeabi_dmul+0x3a8>)
 8001378:	00bf      	lsls	r7, r7, #2
 800137a:	59cf      	ldr	r7, [r1, r7]
 800137c:	46bf      	mov	pc, r7
 800137e:	465b      	mov	r3, fp
 8001380:	433b      	orrs	r3, r7
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	d000      	beq.n	8001388 <__aeabi_dmul+0xa8>
 8001386:	e16a      	b.n	800165e <__aeabi_dmul+0x37e>
 8001388:	2302      	movs	r3, #2
 800138a:	2708      	movs	r7, #8
 800138c:	2600      	movs	r6, #0
 800138e:	4681      	mov	r9, r0
 8001390:	469b      	mov	fp, r3
 8001392:	e7c9      	b.n	8001328 <__aeabi_dmul+0x48>
 8001394:	0032      	movs	r2, r6
 8001396:	4658      	mov	r0, fp
 8001398:	9b01      	ldr	r3, [sp, #4]
 800139a:	4661      	mov	r1, ip
 800139c:	9100      	str	r1, [sp, #0]
 800139e:	2802      	cmp	r0, #2
 80013a0:	d100      	bne.n	80013a4 <__aeabi_dmul+0xc4>
 80013a2:	e075      	b.n	8001490 <__aeabi_dmul+0x1b0>
 80013a4:	2803      	cmp	r0, #3
 80013a6:	d100      	bne.n	80013aa <__aeabi_dmul+0xca>
 80013a8:	e1fe      	b.n	80017a8 <__aeabi_dmul+0x4c8>
 80013aa:	2801      	cmp	r0, #1
 80013ac:	d000      	beq.n	80013b0 <__aeabi_dmul+0xd0>
 80013ae:	e12c      	b.n	800160a <__aeabi_dmul+0x32a>
 80013b0:	2300      	movs	r3, #0
 80013b2:	2700      	movs	r7, #0
 80013b4:	2600      	movs	r6, #0
 80013b6:	2500      	movs	r5, #0
 80013b8:	033f      	lsls	r7, r7, #12
 80013ba:	0d2a      	lsrs	r2, r5, #20
 80013bc:	0b3f      	lsrs	r7, r7, #12
 80013be:	48b3      	ldr	r0, [pc, #716]	; (800168c <__aeabi_dmul+0x3ac>)
 80013c0:	0512      	lsls	r2, r2, #20
 80013c2:	433a      	orrs	r2, r7
 80013c4:	4002      	ands	r2, r0
 80013c6:	051b      	lsls	r3, r3, #20
 80013c8:	4313      	orrs	r3, r2
 80013ca:	9a00      	ldr	r2, [sp, #0]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	07d1      	lsls	r1, r2, #31
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	430b      	orrs	r3, r1
 80013d4:	0030      	movs	r0, r6
 80013d6:	0019      	movs	r1, r3
 80013d8:	b007      	add	sp, #28
 80013da:	bc3c      	pop	{r2, r3, r4, r5}
 80013dc:	4690      	mov	r8, r2
 80013de:	4699      	mov	r9, r3
 80013e0:	46a2      	mov	sl, r4
 80013e2:	46ab      	mov	fp, r5
 80013e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e6:	465b      	mov	r3, fp
 80013e8:	433b      	orrs	r3, r7
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dmul+0x110>
 80013ee:	e12f      	b.n	8001650 <__aeabi_dmul+0x370>
 80013f0:	2f00      	cmp	r7, #0
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dmul+0x116>
 80013f4:	e1a5      	b.n	8001742 <__aeabi_dmul+0x462>
 80013f6:	0038      	movs	r0, r7
 80013f8:	f000 fec0 	bl	800217c <__clzsi2>
 80013fc:	0003      	movs	r3, r0
 80013fe:	3b0b      	subs	r3, #11
 8001400:	2b1c      	cmp	r3, #28
 8001402:	dd00      	ble.n	8001406 <__aeabi_dmul+0x126>
 8001404:	e196      	b.n	8001734 <__aeabi_dmul+0x454>
 8001406:	221d      	movs	r2, #29
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	465a      	mov	r2, fp
 800140c:	0001      	movs	r1, r0
 800140e:	40da      	lsrs	r2, r3
 8001410:	465e      	mov	r6, fp
 8001412:	3908      	subs	r1, #8
 8001414:	408f      	lsls	r7, r1
 8001416:	0013      	movs	r3, r2
 8001418:	408e      	lsls	r6, r1
 800141a:	433b      	orrs	r3, r7
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	4b9c      	ldr	r3, [pc, #624]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001420:	2700      	movs	r7, #0
 8001422:	1a1b      	subs	r3, r3, r0
 8001424:	4699      	mov	r9, r3
 8001426:	2300      	movs	r3, #0
 8001428:	469b      	mov	fp, r3
 800142a:	e77d      	b.n	8001328 <__aeabi_dmul+0x48>
 800142c:	4641      	mov	r1, r8
 800142e:	4653      	mov	r3, sl
 8001430:	430b      	orrs	r3, r1
 8001432:	4993      	ldr	r1, [pc, #588]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001434:	468c      	mov	ip, r1
 8001436:	44e1      	add	r9, ip
 8001438:	2b00      	cmp	r3, #0
 800143a:	d000      	beq.n	800143e <__aeabi_dmul+0x15e>
 800143c:	e11a      	b.n	8001674 <__aeabi_dmul+0x394>
 800143e:	2202      	movs	r2, #2
 8001440:	2002      	movs	r0, #2
 8001442:	4317      	orrs	r7, r2
 8001444:	2200      	movs	r2, #0
 8001446:	e78c      	b.n	8001362 <__aeabi_dmul+0x82>
 8001448:	4313      	orrs	r3, r2
 800144a:	d100      	bne.n	800144e <__aeabi_dmul+0x16e>
 800144c:	e10d      	b.n	800166a <__aeabi_dmul+0x38a>
 800144e:	4643      	mov	r3, r8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d100      	bne.n	8001456 <__aeabi_dmul+0x176>
 8001454:	e181      	b.n	800175a <__aeabi_dmul+0x47a>
 8001456:	4640      	mov	r0, r8
 8001458:	f000 fe90 	bl	800217c <__clzsi2>
 800145c:	0002      	movs	r2, r0
 800145e:	3a0b      	subs	r2, #11
 8001460:	2a1c      	cmp	r2, #28
 8001462:	dd00      	ble.n	8001466 <__aeabi_dmul+0x186>
 8001464:	e172      	b.n	800174c <__aeabi_dmul+0x46c>
 8001466:	0001      	movs	r1, r0
 8001468:	4643      	mov	r3, r8
 800146a:	3908      	subs	r1, #8
 800146c:	408b      	lsls	r3, r1
 800146e:	4698      	mov	r8, r3
 8001470:	231d      	movs	r3, #29
 8001472:	1a9a      	subs	r2, r3, r2
 8001474:	4653      	mov	r3, sl
 8001476:	40d3      	lsrs	r3, r2
 8001478:	001a      	movs	r2, r3
 800147a:	4643      	mov	r3, r8
 800147c:	4313      	orrs	r3, r2
 800147e:	4652      	mov	r2, sl
 8001480:	408a      	lsls	r2, r1
 8001482:	4649      	mov	r1, r9
 8001484:	1a08      	subs	r0, r1, r0
 8001486:	4982      	ldr	r1, [pc, #520]	; (8001690 <__aeabi_dmul+0x3b0>)
 8001488:	4689      	mov	r9, r1
 800148a:	4481      	add	r9, r0
 800148c:	2000      	movs	r0, #0
 800148e:	e768      	b.n	8001362 <__aeabi_dmul+0x82>
 8001490:	4b7b      	ldr	r3, [pc, #492]	; (8001680 <__aeabi_dmul+0x3a0>)
 8001492:	2700      	movs	r7, #0
 8001494:	2600      	movs	r6, #0
 8001496:	e78e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001498:	0c14      	lsrs	r4, r2, #16
 800149a:	0412      	lsls	r2, r2, #16
 800149c:	0c12      	lsrs	r2, r2, #16
 800149e:	0011      	movs	r1, r2
 80014a0:	0c37      	lsrs	r7, r6, #16
 80014a2:	0436      	lsls	r6, r6, #16
 80014a4:	0c35      	lsrs	r5, r6, #16
 80014a6:	4379      	muls	r1, r7
 80014a8:	0028      	movs	r0, r5
 80014aa:	468c      	mov	ip, r1
 80014ac:	002e      	movs	r6, r5
 80014ae:	4360      	muls	r0, r4
 80014b0:	4460      	add	r0, ip
 80014b2:	4683      	mov	fp, r0
 80014b4:	4356      	muls	r6, r2
 80014b6:	0021      	movs	r1, r4
 80014b8:	0c30      	lsrs	r0, r6, #16
 80014ba:	4680      	mov	r8, r0
 80014bc:	4658      	mov	r0, fp
 80014be:	4379      	muls	r1, r7
 80014c0:	4440      	add	r0, r8
 80014c2:	9102      	str	r1, [sp, #8]
 80014c4:	4584      	cmp	ip, r0
 80014c6:	d906      	bls.n	80014d6 <__aeabi_dmul+0x1f6>
 80014c8:	4688      	mov	r8, r1
 80014ca:	2180      	movs	r1, #128	; 0x80
 80014cc:	0249      	lsls	r1, r1, #9
 80014ce:	468c      	mov	ip, r1
 80014d0:	44e0      	add	r8, ip
 80014d2:	4641      	mov	r1, r8
 80014d4:	9102      	str	r1, [sp, #8]
 80014d6:	0436      	lsls	r6, r6, #16
 80014d8:	0c01      	lsrs	r1, r0, #16
 80014da:	0c36      	lsrs	r6, r6, #16
 80014dc:	0400      	lsls	r0, r0, #16
 80014de:	468b      	mov	fp, r1
 80014e0:	1981      	adds	r1, r0, r6
 80014e2:	0c1e      	lsrs	r6, r3, #16
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	9103      	str	r1, [sp, #12]
 80014ea:	0019      	movs	r1, r3
 80014ec:	4379      	muls	r1, r7
 80014ee:	468c      	mov	ip, r1
 80014f0:	0028      	movs	r0, r5
 80014f2:	4375      	muls	r5, r6
 80014f4:	4465      	add	r5, ip
 80014f6:	46a8      	mov	r8, r5
 80014f8:	4358      	muls	r0, r3
 80014fa:	0c05      	lsrs	r5, r0, #16
 80014fc:	4445      	add	r5, r8
 80014fe:	4377      	muls	r7, r6
 8001500:	42a9      	cmp	r1, r5
 8001502:	d903      	bls.n	800150c <__aeabi_dmul+0x22c>
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	0249      	lsls	r1, r1, #9
 8001508:	468c      	mov	ip, r1
 800150a:	4467      	add	r7, ip
 800150c:	0c29      	lsrs	r1, r5, #16
 800150e:	468c      	mov	ip, r1
 8001510:	0039      	movs	r1, r7
 8001512:	0400      	lsls	r0, r0, #16
 8001514:	0c00      	lsrs	r0, r0, #16
 8001516:	042d      	lsls	r5, r5, #16
 8001518:	182d      	adds	r5, r5, r0
 800151a:	4461      	add	r1, ip
 800151c:	44ab      	add	fp, r5
 800151e:	9105      	str	r1, [sp, #20]
 8001520:	4659      	mov	r1, fp
 8001522:	9104      	str	r1, [sp, #16]
 8001524:	9901      	ldr	r1, [sp, #4]
 8001526:	040f      	lsls	r7, r1, #16
 8001528:	0c3f      	lsrs	r7, r7, #16
 800152a:	0c08      	lsrs	r0, r1, #16
 800152c:	0039      	movs	r1, r7
 800152e:	4351      	muls	r1, r2
 8001530:	4342      	muls	r2, r0
 8001532:	4690      	mov	r8, r2
 8001534:	0002      	movs	r2, r0
 8001536:	468c      	mov	ip, r1
 8001538:	0c09      	lsrs	r1, r1, #16
 800153a:	468b      	mov	fp, r1
 800153c:	4362      	muls	r2, r4
 800153e:	437c      	muls	r4, r7
 8001540:	4444      	add	r4, r8
 8001542:	445c      	add	r4, fp
 8001544:	45a0      	cmp	r8, r4
 8001546:	d903      	bls.n	8001550 <__aeabi_dmul+0x270>
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	0249      	lsls	r1, r1, #9
 800154c:	4688      	mov	r8, r1
 800154e:	4442      	add	r2, r8
 8001550:	0c21      	lsrs	r1, r4, #16
 8001552:	4688      	mov	r8, r1
 8001554:	4661      	mov	r1, ip
 8001556:	0409      	lsls	r1, r1, #16
 8001558:	0c09      	lsrs	r1, r1, #16
 800155a:	468c      	mov	ip, r1
 800155c:	0039      	movs	r1, r7
 800155e:	4359      	muls	r1, r3
 8001560:	4343      	muls	r3, r0
 8001562:	4370      	muls	r0, r6
 8001564:	437e      	muls	r6, r7
 8001566:	0c0f      	lsrs	r7, r1, #16
 8001568:	18f6      	adds	r6, r6, r3
 800156a:	0424      	lsls	r4, r4, #16
 800156c:	19be      	adds	r6, r7, r6
 800156e:	4464      	add	r4, ip
 8001570:	4442      	add	r2, r8
 8001572:	468c      	mov	ip, r1
 8001574:	42b3      	cmp	r3, r6
 8001576:	d903      	bls.n	8001580 <__aeabi_dmul+0x2a0>
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	4698      	mov	r8, r3
 800157e:	4440      	add	r0, r8
 8001580:	9b02      	ldr	r3, [sp, #8]
 8001582:	4661      	mov	r1, ip
 8001584:	4698      	mov	r8, r3
 8001586:	9b04      	ldr	r3, [sp, #16]
 8001588:	0437      	lsls	r7, r6, #16
 800158a:	4443      	add	r3, r8
 800158c:	469b      	mov	fp, r3
 800158e:	45ab      	cmp	fp, r5
 8001590:	41ad      	sbcs	r5, r5
 8001592:	426b      	negs	r3, r5
 8001594:	040d      	lsls	r5, r1, #16
 8001596:	9905      	ldr	r1, [sp, #20]
 8001598:	0c2d      	lsrs	r5, r5, #16
 800159a:	468c      	mov	ip, r1
 800159c:	197f      	adds	r7, r7, r5
 800159e:	4467      	add	r7, ip
 80015a0:	18fd      	adds	r5, r7, r3
 80015a2:	46a8      	mov	r8, r5
 80015a4:	465d      	mov	r5, fp
 80015a6:	192d      	adds	r5, r5, r4
 80015a8:	42a5      	cmp	r5, r4
 80015aa:	41a4      	sbcs	r4, r4
 80015ac:	4693      	mov	fp, r2
 80015ae:	4264      	negs	r4, r4
 80015b0:	46a4      	mov	ip, r4
 80015b2:	44c3      	add	fp, r8
 80015b4:	44dc      	add	ip, fp
 80015b6:	428f      	cmp	r7, r1
 80015b8:	41bf      	sbcs	r7, r7
 80015ba:	4598      	cmp	r8, r3
 80015bc:	419b      	sbcs	r3, r3
 80015be:	4593      	cmp	fp, r2
 80015c0:	4192      	sbcs	r2, r2
 80015c2:	45a4      	cmp	ip, r4
 80015c4:	41a4      	sbcs	r4, r4
 80015c6:	425b      	negs	r3, r3
 80015c8:	427f      	negs	r7, r7
 80015ca:	431f      	orrs	r7, r3
 80015cc:	0c36      	lsrs	r6, r6, #16
 80015ce:	4252      	negs	r2, r2
 80015d0:	4264      	negs	r4, r4
 80015d2:	19bf      	adds	r7, r7, r6
 80015d4:	4322      	orrs	r2, r4
 80015d6:	18bf      	adds	r7, r7, r2
 80015d8:	4662      	mov	r2, ip
 80015da:	1838      	adds	r0, r7, r0
 80015dc:	0243      	lsls	r3, r0, #9
 80015de:	0dd2      	lsrs	r2, r2, #23
 80015e0:	9903      	ldr	r1, [sp, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	026a      	lsls	r2, r5, #9
 80015e6:	430a      	orrs	r2, r1
 80015e8:	1e50      	subs	r0, r2, #1
 80015ea:	4182      	sbcs	r2, r0
 80015ec:	4661      	mov	r1, ip
 80015ee:	0ded      	lsrs	r5, r5, #23
 80015f0:	432a      	orrs	r2, r5
 80015f2:	024e      	lsls	r6, r1, #9
 80015f4:	4332      	orrs	r2, r6
 80015f6:	01d9      	lsls	r1, r3, #7
 80015f8:	d400      	bmi.n	80015fc <__aeabi_dmul+0x31c>
 80015fa:	e0b3      	b.n	8001764 <__aeabi_dmul+0x484>
 80015fc:	2601      	movs	r6, #1
 80015fe:	0850      	lsrs	r0, r2, #1
 8001600:	4032      	ands	r2, r6
 8001602:	4302      	orrs	r2, r0
 8001604:	07de      	lsls	r6, r3, #31
 8001606:	4332      	orrs	r2, r6
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	4c22      	ldr	r4, [pc, #136]	; (8001694 <__aeabi_dmul+0x3b4>)
 800160c:	4454      	add	r4, sl
 800160e:	2c00      	cmp	r4, #0
 8001610:	dd62      	ble.n	80016d8 <__aeabi_dmul+0x3f8>
 8001612:	0751      	lsls	r1, r2, #29
 8001614:	d009      	beq.n	800162a <__aeabi_dmul+0x34a>
 8001616:	200f      	movs	r0, #15
 8001618:	4010      	ands	r0, r2
 800161a:	2804      	cmp	r0, #4
 800161c:	d005      	beq.n	800162a <__aeabi_dmul+0x34a>
 800161e:	1d10      	adds	r0, r2, #4
 8001620:	4290      	cmp	r0, r2
 8001622:	4192      	sbcs	r2, r2
 8001624:	4252      	negs	r2, r2
 8001626:	189b      	adds	r3, r3, r2
 8001628:	0002      	movs	r2, r0
 800162a:	01d9      	lsls	r1, r3, #7
 800162c:	d504      	bpl.n	8001638 <__aeabi_dmul+0x358>
 800162e:	2480      	movs	r4, #128	; 0x80
 8001630:	4819      	ldr	r0, [pc, #100]	; (8001698 <__aeabi_dmul+0x3b8>)
 8001632:	00e4      	lsls	r4, r4, #3
 8001634:	4003      	ands	r3, r0
 8001636:	4454      	add	r4, sl
 8001638:	4818      	ldr	r0, [pc, #96]	; (800169c <__aeabi_dmul+0x3bc>)
 800163a:	4284      	cmp	r4, r0
 800163c:	dd00      	ble.n	8001640 <__aeabi_dmul+0x360>
 800163e:	e727      	b.n	8001490 <__aeabi_dmul+0x1b0>
 8001640:	075e      	lsls	r6, r3, #29
 8001642:	025b      	lsls	r3, r3, #9
 8001644:	08d2      	lsrs	r2, r2, #3
 8001646:	0b1f      	lsrs	r7, r3, #12
 8001648:	0563      	lsls	r3, r4, #21
 800164a:	4316      	orrs	r6, r2
 800164c:	0d5b      	lsrs	r3, r3, #21
 800164e:	e6b2      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001650:	2300      	movs	r3, #0
 8001652:	4699      	mov	r9, r3
 8001654:	3301      	adds	r3, #1
 8001656:	2704      	movs	r7, #4
 8001658:	2600      	movs	r6, #0
 800165a:	469b      	mov	fp, r3
 800165c:	e664      	b.n	8001328 <__aeabi_dmul+0x48>
 800165e:	2303      	movs	r3, #3
 8001660:	9701      	str	r7, [sp, #4]
 8001662:	4681      	mov	r9, r0
 8001664:	270c      	movs	r7, #12
 8001666:	469b      	mov	fp, r3
 8001668:	e65e      	b.n	8001328 <__aeabi_dmul+0x48>
 800166a:	2201      	movs	r2, #1
 800166c:	2001      	movs	r0, #1
 800166e:	4317      	orrs	r7, r2
 8001670:	2200      	movs	r2, #0
 8001672:	e676      	b.n	8001362 <__aeabi_dmul+0x82>
 8001674:	2303      	movs	r3, #3
 8001676:	2003      	movs	r0, #3
 8001678:	431f      	orrs	r7, r3
 800167a:	4643      	mov	r3, r8
 800167c:	e671      	b.n	8001362 <__aeabi_dmul+0x82>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	000007ff 	.word	0x000007ff
 8001684:	fffffc01 	.word	0xfffffc01
 8001688:	0800b89c 	.word	0x0800b89c
 800168c:	800fffff 	.word	0x800fffff
 8001690:	fffffc0d 	.word	0xfffffc0d
 8001694:	000003ff 	.word	0x000003ff
 8001698:	feffffff 	.word	0xfeffffff
 800169c:	000007fe 	.word	0x000007fe
 80016a0:	2300      	movs	r3, #0
 80016a2:	2780      	movs	r7, #128	; 0x80
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	033f      	lsls	r7, r7, #12
 80016a8:	2600      	movs	r6, #0
 80016aa:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016ac:	e683      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016ae:	9b01      	ldr	r3, [sp, #4]
 80016b0:	0032      	movs	r2, r6
 80016b2:	46a4      	mov	ip, r4
 80016b4:	4658      	mov	r0, fp
 80016b6:	e670      	b.n	800139a <__aeabi_dmul+0xba>
 80016b8:	46ac      	mov	ip, r5
 80016ba:	e66e      	b.n	800139a <__aeabi_dmul+0xba>
 80016bc:	2780      	movs	r7, #128	; 0x80
 80016be:	9901      	ldr	r1, [sp, #4]
 80016c0:	033f      	lsls	r7, r7, #12
 80016c2:	4239      	tst	r1, r7
 80016c4:	d02d      	beq.n	8001722 <__aeabi_dmul+0x442>
 80016c6:	423b      	tst	r3, r7
 80016c8:	d12b      	bne.n	8001722 <__aeabi_dmul+0x442>
 80016ca:	431f      	orrs	r7, r3
 80016cc:	033f      	lsls	r7, r7, #12
 80016ce:	0b3f      	lsrs	r7, r7, #12
 80016d0:	9500      	str	r5, [sp, #0]
 80016d2:	0016      	movs	r6, r2
 80016d4:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80016d6:	e66e      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80016d8:	2501      	movs	r5, #1
 80016da:	1b2d      	subs	r5, r5, r4
 80016dc:	2d38      	cmp	r5, #56	; 0x38
 80016de:	dd00      	ble.n	80016e2 <__aeabi_dmul+0x402>
 80016e0:	e666      	b.n	80013b0 <__aeabi_dmul+0xd0>
 80016e2:	2d1f      	cmp	r5, #31
 80016e4:	dc40      	bgt.n	8001768 <__aeabi_dmul+0x488>
 80016e6:	4835      	ldr	r0, [pc, #212]	; (80017bc <__aeabi_dmul+0x4dc>)
 80016e8:	001c      	movs	r4, r3
 80016ea:	4450      	add	r0, sl
 80016ec:	0016      	movs	r6, r2
 80016ee:	4082      	lsls	r2, r0
 80016f0:	4084      	lsls	r4, r0
 80016f2:	40ee      	lsrs	r6, r5
 80016f4:	1e50      	subs	r0, r2, #1
 80016f6:	4182      	sbcs	r2, r0
 80016f8:	4334      	orrs	r4, r6
 80016fa:	4314      	orrs	r4, r2
 80016fc:	40eb      	lsrs	r3, r5
 80016fe:	0762      	lsls	r2, r4, #29
 8001700:	d009      	beq.n	8001716 <__aeabi_dmul+0x436>
 8001702:	220f      	movs	r2, #15
 8001704:	4022      	ands	r2, r4
 8001706:	2a04      	cmp	r2, #4
 8001708:	d005      	beq.n	8001716 <__aeabi_dmul+0x436>
 800170a:	0022      	movs	r2, r4
 800170c:	1d14      	adds	r4, r2, #4
 800170e:	4294      	cmp	r4, r2
 8001710:	4180      	sbcs	r0, r0
 8001712:	4240      	negs	r0, r0
 8001714:	181b      	adds	r3, r3, r0
 8001716:	021a      	lsls	r2, r3, #8
 8001718:	d53e      	bpl.n	8001798 <__aeabi_dmul+0x4b8>
 800171a:	2301      	movs	r3, #1
 800171c:	2700      	movs	r7, #0
 800171e:	2600      	movs	r6, #0
 8001720:	e649      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001722:	2780      	movs	r7, #128	; 0x80
 8001724:	9b01      	ldr	r3, [sp, #4]
 8001726:	033f      	lsls	r7, r7, #12
 8001728:	431f      	orrs	r7, r3
 800172a:	033f      	lsls	r7, r7, #12
 800172c:	0b3f      	lsrs	r7, r7, #12
 800172e:	9400      	str	r4, [sp, #0]
 8001730:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <__aeabi_dmul+0x4d8>)
 8001732:	e640      	b.n	80013b6 <__aeabi_dmul+0xd6>
 8001734:	0003      	movs	r3, r0
 8001736:	465a      	mov	r2, fp
 8001738:	3b28      	subs	r3, #40	; 0x28
 800173a:	409a      	lsls	r2, r3
 800173c:	2600      	movs	r6, #0
 800173e:	9201      	str	r2, [sp, #4]
 8001740:	e66d      	b.n	800141e <__aeabi_dmul+0x13e>
 8001742:	4658      	mov	r0, fp
 8001744:	f000 fd1a 	bl	800217c <__clzsi2>
 8001748:	3020      	adds	r0, #32
 800174a:	e657      	b.n	80013fc <__aeabi_dmul+0x11c>
 800174c:	0003      	movs	r3, r0
 800174e:	4652      	mov	r2, sl
 8001750:	3b28      	subs	r3, #40	; 0x28
 8001752:	409a      	lsls	r2, r3
 8001754:	0013      	movs	r3, r2
 8001756:	2200      	movs	r2, #0
 8001758:	e693      	b.n	8001482 <__aeabi_dmul+0x1a2>
 800175a:	4650      	mov	r0, sl
 800175c:	f000 fd0e 	bl	800217c <__clzsi2>
 8001760:	3020      	adds	r0, #32
 8001762:	e67b      	b.n	800145c <__aeabi_dmul+0x17c>
 8001764:	46ca      	mov	sl, r9
 8001766:	e750      	b.n	800160a <__aeabi_dmul+0x32a>
 8001768:	201f      	movs	r0, #31
 800176a:	001e      	movs	r6, r3
 800176c:	4240      	negs	r0, r0
 800176e:	1b04      	subs	r4, r0, r4
 8001770:	40e6      	lsrs	r6, r4
 8001772:	2d20      	cmp	r5, #32
 8001774:	d003      	beq.n	800177e <__aeabi_dmul+0x49e>
 8001776:	4c12      	ldr	r4, [pc, #72]	; (80017c0 <__aeabi_dmul+0x4e0>)
 8001778:	4454      	add	r4, sl
 800177a:	40a3      	lsls	r3, r4
 800177c:	431a      	orrs	r2, r3
 800177e:	1e50      	subs	r0, r2, #1
 8001780:	4182      	sbcs	r2, r0
 8001782:	4332      	orrs	r2, r6
 8001784:	2607      	movs	r6, #7
 8001786:	2700      	movs	r7, #0
 8001788:	4016      	ands	r6, r2
 800178a:	d009      	beq.n	80017a0 <__aeabi_dmul+0x4c0>
 800178c:	200f      	movs	r0, #15
 800178e:	2300      	movs	r3, #0
 8001790:	4010      	ands	r0, r2
 8001792:	0014      	movs	r4, r2
 8001794:	2804      	cmp	r0, #4
 8001796:	d1b9      	bne.n	800170c <__aeabi_dmul+0x42c>
 8001798:	0022      	movs	r2, r4
 800179a:	075e      	lsls	r6, r3, #29
 800179c:	025b      	lsls	r3, r3, #9
 800179e:	0b1f      	lsrs	r7, r3, #12
 80017a0:	08d2      	lsrs	r2, r2, #3
 80017a2:	4316      	orrs	r6, r2
 80017a4:	2300      	movs	r3, #0
 80017a6:	e606      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017a8:	2780      	movs	r7, #128	; 0x80
 80017aa:	033f      	lsls	r7, r7, #12
 80017ac:	431f      	orrs	r7, r3
 80017ae:	033f      	lsls	r7, r7, #12
 80017b0:	0b3f      	lsrs	r7, r7, #12
 80017b2:	0016      	movs	r6, r2
 80017b4:	4b00      	ldr	r3, [pc, #0]	; (80017b8 <__aeabi_dmul+0x4d8>)
 80017b6:	e5fe      	b.n	80013b6 <__aeabi_dmul+0xd6>
 80017b8:	000007ff 	.word	0x000007ff
 80017bc:	0000041e 	.word	0x0000041e
 80017c0:	0000043e 	.word	0x0000043e

080017c4 <__aeabi_dsub>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	4657      	mov	r7, sl
 80017c8:	464e      	mov	r6, r9
 80017ca:	4645      	mov	r5, r8
 80017cc:	46de      	mov	lr, fp
 80017ce:	000c      	movs	r4, r1
 80017d0:	0309      	lsls	r1, r1, #12
 80017d2:	b5e0      	push	{r5, r6, r7, lr}
 80017d4:	0a49      	lsrs	r1, r1, #9
 80017d6:	0f46      	lsrs	r6, r0, #29
 80017d8:	005f      	lsls	r7, r3, #1
 80017da:	4331      	orrs	r1, r6
 80017dc:	031e      	lsls	r6, r3, #12
 80017de:	0fdb      	lsrs	r3, r3, #31
 80017e0:	0a76      	lsrs	r6, r6, #9
 80017e2:	469b      	mov	fp, r3
 80017e4:	0f53      	lsrs	r3, r2, #29
 80017e6:	4333      	orrs	r3, r6
 80017e8:	4ec8      	ldr	r6, [pc, #800]	; (8001b0c <__aeabi_dsub+0x348>)
 80017ea:	0065      	lsls	r5, r4, #1
 80017ec:	00c0      	lsls	r0, r0, #3
 80017ee:	0fe4      	lsrs	r4, r4, #31
 80017f0:	00d2      	lsls	r2, r2, #3
 80017f2:	0d6d      	lsrs	r5, r5, #21
 80017f4:	46a2      	mov	sl, r4
 80017f6:	4681      	mov	r9, r0
 80017f8:	0d7f      	lsrs	r7, r7, #21
 80017fa:	469c      	mov	ip, r3
 80017fc:	4690      	mov	r8, r2
 80017fe:	42b7      	cmp	r7, r6
 8001800:	d100      	bne.n	8001804 <__aeabi_dsub+0x40>
 8001802:	e0b9      	b.n	8001978 <__aeabi_dsub+0x1b4>
 8001804:	465b      	mov	r3, fp
 8001806:	2601      	movs	r6, #1
 8001808:	4073      	eors	r3, r6
 800180a:	469b      	mov	fp, r3
 800180c:	1bee      	subs	r6, r5, r7
 800180e:	45a3      	cmp	fp, r4
 8001810:	d100      	bne.n	8001814 <__aeabi_dsub+0x50>
 8001812:	e083      	b.n	800191c <__aeabi_dsub+0x158>
 8001814:	2e00      	cmp	r6, #0
 8001816:	dd63      	ble.n	80018e0 <__aeabi_dsub+0x11c>
 8001818:	2f00      	cmp	r7, #0
 800181a:	d000      	beq.n	800181e <__aeabi_dsub+0x5a>
 800181c:	e0b1      	b.n	8001982 <__aeabi_dsub+0x1be>
 800181e:	4663      	mov	r3, ip
 8001820:	4313      	orrs	r3, r2
 8001822:	d100      	bne.n	8001826 <__aeabi_dsub+0x62>
 8001824:	e123      	b.n	8001a6e <__aeabi_dsub+0x2aa>
 8001826:	1e73      	subs	r3, r6, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d000      	beq.n	800182e <__aeabi_dsub+0x6a>
 800182c:	e1ba      	b.n	8001ba4 <__aeabi_dsub+0x3e0>
 800182e:	1a86      	subs	r6, r0, r2
 8001830:	4663      	mov	r3, ip
 8001832:	42b0      	cmp	r0, r6
 8001834:	4180      	sbcs	r0, r0
 8001836:	2501      	movs	r5, #1
 8001838:	1ac9      	subs	r1, r1, r3
 800183a:	4240      	negs	r0, r0
 800183c:	1a09      	subs	r1, r1, r0
 800183e:	020b      	lsls	r3, r1, #8
 8001840:	d400      	bmi.n	8001844 <__aeabi_dsub+0x80>
 8001842:	e147      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001844:	0249      	lsls	r1, r1, #9
 8001846:	0a4b      	lsrs	r3, r1, #9
 8001848:	4698      	mov	r8, r3
 800184a:	4643      	mov	r3, r8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d100      	bne.n	8001852 <__aeabi_dsub+0x8e>
 8001850:	e189      	b.n	8001b66 <__aeabi_dsub+0x3a2>
 8001852:	4640      	mov	r0, r8
 8001854:	f000 fc92 	bl	800217c <__clzsi2>
 8001858:	0003      	movs	r3, r0
 800185a:	3b08      	subs	r3, #8
 800185c:	2b1f      	cmp	r3, #31
 800185e:	dd00      	ble.n	8001862 <__aeabi_dsub+0x9e>
 8001860:	e17c      	b.n	8001b5c <__aeabi_dsub+0x398>
 8001862:	2220      	movs	r2, #32
 8001864:	0030      	movs	r0, r6
 8001866:	1ad2      	subs	r2, r2, r3
 8001868:	4641      	mov	r1, r8
 800186a:	40d0      	lsrs	r0, r2
 800186c:	4099      	lsls	r1, r3
 800186e:	0002      	movs	r2, r0
 8001870:	409e      	lsls	r6, r3
 8001872:	430a      	orrs	r2, r1
 8001874:	429d      	cmp	r5, r3
 8001876:	dd00      	ble.n	800187a <__aeabi_dsub+0xb6>
 8001878:	e16a      	b.n	8001b50 <__aeabi_dsub+0x38c>
 800187a:	1b5d      	subs	r5, r3, r5
 800187c:	1c6b      	adds	r3, r5, #1
 800187e:	2b1f      	cmp	r3, #31
 8001880:	dd00      	ble.n	8001884 <__aeabi_dsub+0xc0>
 8001882:	e194      	b.n	8001bae <__aeabi_dsub+0x3ea>
 8001884:	2120      	movs	r1, #32
 8001886:	0010      	movs	r0, r2
 8001888:	0035      	movs	r5, r6
 800188a:	1ac9      	subs	r1, r1, r3
 800188c:	408e      	lsls	r6, r1
 800188e:	40da      	lsrs	r2, r3
 8001890:	4088      	lsls	r0, r1
 8001892:	40dd      	lsrs	r5, r3
 8001894:	1e71      	subs	r1, r6, #1
 8001896:	418e      	sbcs	r6, r1
 8001898:	0011      	movs	r1, r2
 800189a:	2207      	movs	r2, #7
 800189c:	4328      	orrs	r0, r5
 800189e:	2500      	movs	r5, #0
 80018a0:	4306      	orrs	r6, r0
 80018a2:	4032      	ands	r2, r6
 80018a4:	2a00      	cmp	r2, #0
 80018a6:	d009      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018a8:	230f      	movs	r3, #15
 80018aa:	4033      	ands	r3, r6
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d005      	beq.n	80018bc <__aeabi_dsub+0xf8>
 80018b0:	1d33      	adds	r3, r6, #4
 80018b2:	42b3      	cmp	r3, r6
 80018b4:	41b6      	sbcs	r6, r6
 80018b6:	4276      	negs	r6, r6
 80018b8:	1989      	adds	r1, r1, r6
 80018ba:	001e      	movs	r6, r3
 80018bc:	020b      	lsls	r3, r1, #8
 80018be:	d400      	bmi.n	80018c2 <__aeabi_dsub+0xfe>
 80018c0:	e23d      	b.n	8001d3e <__aeabi_dsub+0x57a>
 80018c2:	1c6a      	adds	r2, r5, #1
 80018c4:	4b91      	ldr	r3, [pc, #580]	; (8001b0c <__aeabi_dsub+0x348>)
 80018c6:	0555      	lsls	r5, r2, #21
 80018c8:	0d6d      	lsrs	r5, r5, #21
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dsub+0x10c>
 80018ce:	e119      	b.n	8001b04 <__aeabi_dsub+0x340>
 80018d0:	4a8f      	ldr	r2, [pc, #572]	; (8001b10 <__aeabi_dsub+0x34c>)
 80018d2:	08f6      	lsrs	r6, r6, #3
 80018d4:	400a      	ands	r2, r1
 80018d6:	0757      	lsls	r7, r2, #29
 80018d8:	0252      	lsls	r2, r2, #9
 80018da:	4337      	orrs	r7, r6
 80018dc:	0b12      	lsrs	r2, r2, #12
 80018de:	e09b      	b.n	8001a18 <__aeabi_dsub+0x254>
 80018e0:	2e00      	cmp	r6, #0
 80018e2:	d000      	beq.n	80018e6 <__aeabi_dsub+0x122>
 80018e4:	e0c5      	b.n	8001a72 <__aeabi_dsub+0x2ae>
 80018e6:	1c6e      	adds	r6, r5, #1
 80018e8:	0576      	lsls	r6, r6, #21
 80018ea:	0d76      	lsrs	r6, r6, #21
 80018ec:	2e01      	cmp	r6, #1
 80018ee:	dc00      	bgt.n	80018f2 <__aeabi_dsub+0x12e>
 80018f0:	e148      	b.n	8001b84 <__aeabi_dsub+0x3c0>
 80018f2:	4667      	mov	r7, ip
 80018f4:	1a86      	subs	r6, r0, r2
 80018f6:	1bcb      	subs	r3, r1, r7
 80018f8:	42b0      	cmp	r0, r6
 80018fa:	41bf      	sbcs	r7, r7
 80018fc:	427f      	negs	r7, r7
 80018fe:	46b8      	mov	r8, r7
 8001900:	001f      	movs	r7, r3
 8001902:	4643      	mov	r3, r8
 8001904:	1aff      	subs	r7, r7, r3
 8001906:	003b      	movs	r3, r7
 8001908:	46b8      	mov	r8, r7
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	d500      	bpl.n	8001910 <__aeabi_dsub+0x14c>
 800190e:	e15f      	b.n	8001bd0 <__aeabi_dsub+0x40c>
 8001910:	4337      	orrs	r7, r6
 8001912:	d19a      	bne.n	800184a <__aeabi_dsub+0x86>
 8001914:	2200      	movs	r2, #0
 8001916:	2400      	movs	r4, #0
 8001918:	2500      	movs	r5, #0
 800191a:	e079      	b.n	8001a10 <__aeabi_dsub+0x24c>
 800191c:	2e00      	cmp	r6, #0
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dsub+0x15e>
 8001920:	e0fa      	b.n	8001b18 <__aeabi_dsub+0x354>
 8001922:	2f00      	cmp	r7, #0
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x164>
 8001926:	e08d      	b.n	8001a44 <__aeabi_dsub+0x280>
 8001928:	4b78      	ldr	r3, [pc, #480]	; (8001b0c <__aeabi_dsub+0x348>)
 800192a:	429d      	cmp	r5, r3
 800192c:	d067      	beq.n	80019fe <__aeabi_dsub+0x23a>
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	4667      	mov	r7, ip
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	431f      	orrs	r7, r3
 8001936:	46bc      	mov	ip, r7
 8001938:	2e38      	cmp	r6, #56	; 0x38
 800193a:	dc00      	bgt.n	800193e <__aeabi_dsub+0x17a>
 800193c:	e152      	b.n	8001be4 <__aeabi_dsub+0x420>
 800193e:	4663      	mov	r3, ip
 8001940:	4313      	orrs	r3, r2
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	4193      	sbcs	r3, r2
 8001946:	181e      	adds	r6, r3, r0
 8001948:	4286      	cmp	r6, r0
 800194a:	4180      	sbcs	r0, r0
 800194c:	4240      	negs	r0, r0
 800194e:	1809      	adds	r1, r1, r0
 8001950:	020b      	lsls	r3, r1, #8
 8001952:	d400      	bmi.n	8001956 <__aeabi_dsub+0x192>
 8001954:	e0be      	b.n	8001ad4 <__aeabi_dsub+0x310>
 8001956:	4b6d      	ldr	r3, [pc, #436]	; (8001b0c <__aeabi_dsub+0x348>)
 8001958:	3501      	adds	r5, #1
 800195a:	429d      	cmp	r5, r3
 800195c:	d100      	bne.n	8001960 <__aeabi_dsub+0x19c>
 800195e:	e0d2      	b.n	8001b06 <__aeabi_dsub+0x342>
 8001960:	4a6b      	ldr	r2, [pc, #428]	; (8001b10 <__aeabi_dsub+0x34c>)
 8001962:	0873      	lsrs	r3, r6, #1
 8001964:	400a      	ands	r2, r1
 8001966:	2101      	movs	r1, #1
 8001968:	400e      	ands	r6, r1
 800196a:	431e      	orrs	r6, r3
 800196c:	0851      	lsrs	r1, r2, #1
 800196e:	07d3      	lsls	r3, r2, #31
 8001970:	2207      	movs	r2, #7
 8001972:	431e      	orrs	r6, r3
 8001974:	4032      	ands	r2, r6
 8001976:	e795      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001978:	001e      	movs	r6, r3
 800197a:	4316      	orrs	r6, r2
 800197c:	d000      	beq.n	8001980 <__aeabi_dsub+0x1bc>
 800197e:	e745      	b.n	800180c <__aeabi_dsub+0x48>
 8001980:	e740      	b.n	8001804 <__aeabi_dsub+0x40>
 8001982:	4b62      	ldr	r3, [pc, #392]	; (8001b0c <__aeabi_dsub+0x348>)
 8001984:	429d      	cmp	r5, r3
 8001986:	d03a      	beq.n	80019fe <__aeabi_dsub+0x23a>
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	4667      	mov	r7, ip
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	431f      	orrs	r7, r3
 8001990:	46bc      	mov	ip, r7
 8001992:	2e38      	cmp	r6, #56	; 0x38
 8001994:	dd00      	ble.n	8001998 <__aeabi_dsub+0x1d4>
 8001996:	e0eb      	b.n	8001b70 <__aeabi_dsub+0x3ac>
 8001998:	2e1f      	cmp	r6, #31
 800199a:	dc00      	bgt.n	800199e <__aeabi_dsub+0x1da>
 800199c:	e13a      	b.n	8001c14 <__aeabi_dsub+0x450>
 800199e:	0033      	movs	r3, r6
 80019a0:	4667      	mov	r7, ip
 80019a2:	3b20      	subs	r3, #32
 80019a4:	40df      	lsrs	r7, r3
 80019a6:	003b      	movs	r3, r7
 80019a8:	2e20      	cmp	r6, #32
 80019aa:	d005      	beq.n	80019b8 <__aeabi_dsub+0x1f4>
 80019ac:	2740      	movs	r7, #64	; 0x40
 80019ae:	1bbf      	subs	r7, r7, r6
 80019b0:	4666      	mov	r6, ip
 80019b2:	40be      	lsls	r6, r7
 80019b4:	4332      	orrs	r2, r6
 80019b6:	4690      	mov	r8, r2
 80019b8:	4646      	mov	r6, r8
 80019ba:	1e72      	subs	r2, r6, #1
 80019bc:	4196      	sbcs	r6, r2
 80019be:	4333      	orrs	r3, r6
 80019c0:	e0da      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x204>
 80019c6:	e214      	b.n	8001df2 <__aeabi_dsub+0x62e>
 80019c8:	4663      	mov	r3, ip
 80019ca:	4313      	orrs	r3, r2
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x20c>
 80019ce:	e168      	b.n	8001ca2 <__aeabi_dsub+0x4de>
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	074e      	lsls	r6, r1, #29
 80019d4:	08c0      	lsrs	r0, r0, #3
 80019d6:	08c9      	lsrs	r1, r1, #3
 80019d8:	031b      	lsls	r3, r3, #12
 80019da:	4306      	orrs	r6, r0
 80019dc:	4219      	tst	r1, r3
 80019de:	d008      	beq.n	80019f2 <__aeabi_dsub+0x22e>
 80019e0:	4660      	mov	r0, ip
 80019e2:	08c0      	lsrs	r0, r0, #3
 80019e4:	4218      	tst	r0, r3
 80019e6:	d104      	bne.n	80019f2 <__aeabi_dsub+0x22e>
 80019e8:	4663      	mov	r3, ip
 80019ea:	0001      	movs	r1, r0
 80019ec:	08d2      	lsrs	r2, r2, #3
 80019ee:	075e      	lsls	r6, r3, #29
 80019f0:	4316      	orrs	r6, r2
 80019f2:	00f3      	lsls	r3, r6, #3
 80019f4:	4699      	mov	r9, r3
 80019f6:	00c9      	lsls	r1, r1, #3
 80019f8:	0f72      	lsrs	r2, r6, #29
 80019fa:	4d44      	ldr	r5, [pc, #272]	; (8001b0c <__aeabi_dsub+0x348>)
 80019fc:	4311      	orrs	r1, r2
 80019fe:	464b      	mov	r3, r9
 8001a00:	08de      	lsrs	r6, r3, #3
 8001a02:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a04:	074f      	lsls	r7, r1, #29
 8001a06:	4337      	orrs	r7, r6
 8001a08:	08ca      	lsrs	r2, r1, #3
 8001a0a:	429d      	cmp	r5, r3
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x24c>
 8001a0e:	e06e      	b.n	8001aee <__aeabi_dsub+0x32a>
 8001a10:	0312      	lsls	r2, r2, #12
 8001a12:	056d      	lsls	r5, r5, #21
 8001a14:	0b12      	lsrs	r2, r2, #12
 8001a16:	0d6d      	lsrs	r5, r5, #21
 8001a18:	2100      	movs	r1, #0
 8001a1a:	0312      	lsls	r2, r2, #12
 8001a1c:	0b13      	lsrs	r3, r2, #12
 8001a1e:	0d0a      	lsrs	r2, r1, #20
 8001a20:	0512      	lsls	r2, r2, #20
 8001a22:	431a      	orrs	r2, r3
 8001a24:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <__aeabi_dsub+0x350>)
 8001a26:	052d      	lsls	r5, r5, #20
 8001a28:	4013      	ands	r3, r2
 8001a2a:	432b      	orrs	r3, r5
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	07e4      	lsls	r4, r4, #31
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	4323      	orrs	r3, r4
 8001a34:	0038      	movs	r0, r7
 8001a36:	0019      	movs	r1, r3
 8001a38:	bc3c      	pop	{r2, r3, r4, r5}
 8001a3a:	4690      	mov	r8, r2
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	46a2      	mov	sl, r4
 8001a40:	46ab      	mov	fp, r5
 8001a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a44:	4663      	mov	r3, ip
 8001a46:	4313      	orrs	r3, r2
 8001a48:	d011      	beq.n	8001a6e <__aeabi_dsub+0x2aa>
 8001a4a:	1e73      	subs	r3, r6, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d000      	beq.n	8001a52 <__aeabi_dsub+0x28e>
 8001a50:	e107      	b.n	8001c62 <__aeabi_dsub+0x49e>
 8001a52:	1886      	adds	r6, r0, r2
 8001a54:	4286      	cmp	r6, r0
 8001a56:	4180      	sbcs	r0, r0
 8001a58:	4461      	add	r1, ip
 8001a5a:	4240      	negs	r0, r0
 8001a5c:	1809      	adds	r1, r1, r0
 8001a5e:	2501      	movs	r5, #1
 8001a60:	020b      	lsls	r3, r1, #8
 8001a62:	d537      	bpl.n	8001ad4 <__aeabi_dsub+0x310>
 8001a64:	2502      	movs	r5, #2
 8001a66:	e77b      	b.n	8001960 <__aeabi_dsub+0x19c>
 8001a68:	003e      	movs	r6, r7
 8001a6a:	4661      	mov	r1, ip
 8001a6c:	4691      	mov	r9, r2
 8001a6e:	0035      	movs	r5, r6
 8001a70:	e7c5      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001a72:	465c      	mov	r4, fp
 8001a74:	2d00      	cmp	r5, #0
 8001a76:	d000      	beq.n	8001a7a <__aeabi_dsub+0x2b6>
 8001a78:	e0e1      	b.n	8001c3e <__aeabi_dsub+0x47a>
 8001a7a:	000b      	movs	r3, r1
 8001a7c:	4303      	orrs	r3, r0
 8001a7e:	d0f3      	beq.n	8001a68 <__aeabi_dsub+0x2a4>
 8001a80:	1c73      	adds	r3, r6, #1
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0x2c2>
 8001a84:	e1ac      	b.n	8001de0 <__aeabi_dsub+0x61c>
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <__aeabi_dsub+0x348>)
 8001a88:	429f      	cmp	r7, r3
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dsub+0x2ca>
 8001a8c:	e13a      	b.n	8001d04 <__aeabi_dsub+0x540>
 8001a8e:	43f3      	mvns	r3, r6
 8001a90:	2b38      	cmp	r3, #56	; 0x38
 8001a92:	dd00      	ble.n	8001a96 <__aeabi_dsub+0x2d2>
 8001a94:	e16f      	b.n	8001d76 <__aeabi_dsub+0x5b2>
 8001a96:	2b1f      	cmp	r3, #31
 8001a98:	dd00      	ble.n	8001a9c <__aeabi_dsub+0x2d8>
 8001a9a:	e18c      	b.n	8001db6 <__aeabi_dsub+0x5f2>
 8001a9c:	2520      	movs	r5, #32
 8001a9e:	000e      	movs	r6, r1
 8001aa0:	1aed      	subs	r5, r5, r3
 8001aa2:	40ae      	lsls	r6, r5
 8001aa4:	46b0      	mov	r8, r6
 8001aa6:	0006      	movs	r6, r0
 8001aa8:	46aa      	mov	sl, r5
 8001aaa:	40de      	lsrs	r6, r3
 8001aac:	4645      	mov	r5, r8
 8001aae:	4335      	orrs	r5, r6
 8001ab0:	002e      	movs	r6, r5
 8001ab2:	4655      	mov	r5, sl
 8001ab4:	40d9      	lsrs	r1, r3
 8001ab6:	40a8      	lsls	r0, r5
 8001ab8:	4663      	mov	r3, ip
 8001aba:	1e45      	subs	r5, r0, #1
 8001abc:	41a8      	sbcs	r0, r5
 8001abe:	1a5b      	subs	r3, r3, r1
 8001ac0:	469c      	mov	ip, r3
 8001ac2:	4330      	orrs	r0, r6
 8001ac4:	1a16      	subs	r6, r2, r0
 8001ac6:	42b2      	cmp	r2, r6
 8001ac8:	4192      	sbcs	r2, r2
 8001aca:	4663      	mov	r3, ip
 8001acc:	4252      	negs	r2, r2
 8001ace:	1a99      	subs	r1, r3, r2
 8001ad0:	003d      	movs	r5, r7
 8001ad2:	e6b4      	b.n	800183e <__aeabi_dsub+0x7a>
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	4032      	ands	r2, r6
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	d000      	beq.n	8001ade <__aeabi_dsub+0x31a>
 8001adc:	e6e4      	b.n	80018a8 <__aeabi_dsub+0xe4>
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <__aeabi_dsub+0x348>)
 8001ae0:	08f6      	lsrs	r6, r6, #3
 8001ae2:	074f      	lsls	r7, r1, #29
 8001ae4:	4337      	orrs	r7, r6
 8001ae6:	08ca      	lsrs	r2, r1, #3
 8001ae8:	429d      	cmp	r5, r3
 8001aea:	d000      	beq.n	8001aee <__aeabi_dsub+0x32a>
 8001aec:	e790      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001aee:	003b      	movs	r3, r7
 8001af0:	4313      	orrs	r3, r2
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x332>
 8001af4:	e1a6      	b.n	8001e44 <__aeabi_dsub+0x680>
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	031b      	lsls	r3, r3, #12
 8001afa:	431a      	orrs	r2, r3
 8001afc:	0312      	lsls	r2, r2, #12
 8001afe:	0b12      	lsrs	r2, r2, #12
 8001b00:	4d02      	ldr	r5, [pc, #8]	; (8001b0c <__aeabi_dsub+0x348>)
 8001b02:	e789      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b04:	0015      	movs	r5, r2
 8001b06:	2200      	movs	r2, #0
 8001b08:	2700      	movs	r7, #0
 8001b0a:	e785      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001b0c:	000007ff 	.word	0x000007ff
 8001b10:	ff7fffff 	.word	0xff7fffff
 8001b14:	800fffff 	.word	0x800fffff
 8001b18:	2e00      	cmp	r6, #0
 8001b1a:	d000      	beq.n	8001b1e <__aeabi_dsub+0x35a>
 8001b1c:	e0c7      	b.n	8001cae <__aeabi_dsub+0x4ea>
 8001b1e:	1c6b      	adds	r3, r5, #1
 8001b20:	055e      	lsls	r6, r3, #21
 8001b22:	0d76      	lsrs	r6, r6, #21
 8001b24:	2e01      	cmp	r6, #1
 8001b26:	dc00      	bgt.n	8001b2a <__aeabi_dsub+0x366>
 8001b28:	e0f0      	b.n	8001d0c <__aeabi_dsub+0x548>
 8001b2a:	4dc8      	ldr	r5, [pc, #800]	; (8001e4c <__aeabi_dsub+0x688>)
 8001b2c:	42ab      	cmp	r3, r5
 8001b2e:	d100      	bne.n	8001b32 <__aeabi_dsub+0x36e>
 8001b30:	e0b9      	b.n	8001ca6 <__aeabi_dsub+0x4e2>
 8001b32:	1885      	adds	r5, r0, r2
 8001b34:	000a      	movs	r2, r1
 8001b36:	4285      	cmp	r5, r0
 8001b38:	4189      	sbcs	r1, r1
 8001b3a:	4462      	add	r2, ip
 8001b3c:	4249      	negs	r1, r1
 8001b3e:	1851      	adds	r1, r2, r1
 8001b40:	2207      	movs	r2, #7
 8001b42:	07ce      	lsls	r6, r1, #31
 8001b44:	086d      	lsrs	r5, r5, #1
 8001b46:	432e      	orrs	r6, r5
 8001b48:	0849      	lsrs	r1, r1, #1
 8001b4a:	4032      	ands	r2, r6
 8001b4c:	001d      	movs	r5, r3
 8001b4e:	e6a9      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b50:	49bf      	ldr	r1, [pc, #764]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001b52:	1aed      	subs	r5, r5, r3
 8001b54:	4011      	ands	r1, r2
 8001b56:	2207      	movs	r2, #7
 8001b58:	4032      	ands	r2, r6
 8001b5a:	e6a3      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001b5c:	0032      	movs	r2, r6
 8001b5e:	3828      	subs	r0, #40	; 0x28
 8001b60:	4082      	lsls	r2, r0
 8001b62:	2600      	movs	r6, #0
 8001b64:	e686      	b.n	8001874 <__aeabi_dsub+0xb0>
 8001b66:	0030      	movs	r0, r6
 8001b68:	f000 fb08 	bl	800217c <__clzsi2>
 8001b6c:	3020      	adds	r0, #32
 8001b6e:	e673      	b.n	8001858 <__aeabi_dsub+0x94>
 8001b70:	4663      	mov	r3, ip
 8001b72:	4313      	orrs	r3, r2
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	4193      	sbcs	r3, r2
 8001b78:	1ac6      	subs	r6, r0, r3
 8001b7a:	42b0      	cmp	r0, r6
 8001b7c:	4180      	sbcs	r0, r0
 8001b7e:	4240      	negs	r0, r0
 8001b80:	1a09      	subs	r1, r1, r0
 8001b82:	e65c      	b.n	800183e <__aeabi_dsub+0x7a>
 8001b84:	000e      	movs	r6, r1
 8001b86:	4667      	mov	r7, ip
 8001b88:	4306      	orrs	r6, r0
 8001b8a:	4317      	orrs	r7, r2
 8001b8c:	2d00      	cmp	r5, #0
 8001b8e:	d15e      	bne.n	8001c4e <__aeabi_dsub+0x48a>
 8001b90:	2e00      	cmp	r6, #0
 8001b92:	d000      	beq.n	8001b96 <__aeabi_dsub+0x3d2>
 8001b94:	e0f3      	b.n	8001d7e <__aeabi_dsub+0x5ba>
 8001b96:	2f00      	cmp	r7, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x3d8>
 8001b9a:	e11e      	b.n	8001dda <__aeabi_dsub+0x616>
 8001b9c:	465c      	mov	r4, fp
 8001b9e:	4661      	mov	r1, ip
 8001ba0:	4691      	mov	r9, r2
 8001ba2:	e72c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ba4:	4fa9      	ldr	r7, [pc, #676]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ba6:	42be      	cmp	r6, r7
 8001ba8:	d07b      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001baa:	001e      	movs	r6, r3
 8001bac:	e6f1      	b.n	8001992 <__aeabi_dsub+0x1ce>
 8001bae:	0010      	movs	r0, r2
 8001bb0:	3d1f      	subs	r5, #31
 8001bb2:	40e8      	lsrs	r0, r5
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d003      	beq.n	8001bc0 <__aeabi_dsub+0x3fc>
 8001bb8:	2140      	movs	r1, #64	; 0x40
 8001bba:	1acb      	subs	r3, r1, r3
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	4316      	orrs	r6, r2
 8001bc0:	1e73      	subs	r3, r6, #1
 8001bc2:	419e      	sbcs	r6, r3
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	4306      	orrs	r6, r0
 8001bc8:	4032      	ands	r2, r6
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2500      	movs	r5, #0
 8001bce:	e783      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001bd0:	1a16      	subs	r6, r2, r0
 8001bd2:	4663      	mov	r3, ip
 8001bd4:	42b2      	cmp	r2, r6
 8001bd6:	4180      	sbcs	r0, r0
 8001bd8:	1a59      	subs	r1, r3, r1
 8001bda:	4240      	negs	r0, r0
 8001bdc:	1a0b      	subs	r3, r1, r0
 8001bde:	4698      	mov	r8, r3
 8001be0:	465c      	mov	r4, fp
 8001be2:	e632      	b.n	800184a <__aeabi_dsub+0x86>
 8001be4:	2e1f      	cmp	r6, #31
 8001be6:	dd00      	ble.n	8001bea <__aeabi_dsub+0x426>
 8001be8:	e0ab      	b.n	8001d42 <__aeabi_dsub+0x57e>
 8001bea:	2720      	movs	r7, #32
 8001bec:	1bbb      	subs	r3, r7, r6
 8001bee:	469a      	mov	sl, r3
 8001bf0:	4663      	mov	r3, ip
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	40bb      	lsls	r3, r7
 8001bf6:	4699      	mov	r9, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	464f      	mov	r7, r9
 8001bfc:	40f3      	lsrs	r3, r6
 8001bfe:	431f      	orrs	r7, r3
 8001c00:	003b      	movs	r3, r7
 8001c02:	4657      	mov	r7, sl
 8001c04:	40ba      	lsls	r2, r7
 8001c06:	1e57      	subs	r7, r2, #1
 8001c08:	41ba      	sbcs	r2, r7
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	4662      	mov	r2, ip
 8001c0e:	40f2      	lsrs	r2, r6
 8001c10:	1889      	adds	r1, r1, r2
 8001c12:	e698      	b.n	8001946 <__aeabi_dsub+0x182>
 8001c14:	2720      	movs	r7, #32
 8001c16:	1bbb      	subs	r3, r7, r6
 8001c18:	469a      	mov	sl, r3
 8001c1a:	4663      	mov	r3, ip
 8001c1c:	4657      	mov	r7, sl
 8001c1e:	40bb      	lsls	r3, r7
 8001c20:	4699      	mov	r9, r3
 8001c22:	0013      	movs	r3, r2
 8001c24:	464f      	mov	r7, r9
 8001c26:	40f3      	lsrs	r3, r6
 8001c28:	431f      	orrs	r7, r3
 8001c2a:	003b      	movs	r3, r7
 8001c2c:	4657      	mov	r7, sl
 8001c2e:	40ba      	lsls	r2, r7
 8001c30:	1e57      	subs	r7, r2, #1
 8001c32:	41ba      	sbcs	r2, r7
 8001c34:	4313      	orrs	r3, r2
 8001c36:	4662      	mov	r2, ip
 8001c38:	40f2      	lsrs	r2, r6
 8001c3a:	1a89      	subs	r1, r1, r2
 8001c3c:	e79c      	b.n	8001b78 <__aeabi_dsub+0x3b4>
 8001c3e:	4b83      	ldr	r3, [pc, #524]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c40:	429f      	cmp	r7, r3
 8001c42:	d05f      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001c44:	2580      	movs	r5, #128	; 0x80
 8001c46:	042d      	lsls	r5, r5, #16
 8001c48:	4273      	negs	r3, r6
 8001c4a:	4329      	orrs	r1, r5
 8001c4c:	e720      	b.n	8001a90 <__aeabi_dsub+0x2cc>
 8001c4e:	2e00      	cmp	r6, #0
 8001c50:	d10c      	bne.n	8001c6c <__aeabi_dsub+0x4a8>
 8001c52:	2f00      	cmp	r7, #0
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x494>
 8001c56:	e0d0      	b.n	8001dfa <__aeabi_dsub+0x636>
 8001c58:	465c      	mov	r4, fp
 8001c5a:	4661      	mov	r1, ip
 8001c5c:	4691      	mov	r9, r2
 8001c5e:	4d7b      	ldr	r5, [pc, #492]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c60:	e6cd      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001c62:	4f7a      	ldr	r7, [pc, #488]	; (8001e4c <__aeabi_dsub+0x688>)
 8001c64:	42be      	cmp	r6, r7
 8001c66:	d01c      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c68:	001e      	movs	r6, r3
 8001c6a:	e665      	b.n	8001938 <__aeabi_dsub+0x174>
 8001c6c:	2f00      	cmp	r7, #0
 8001c6e:	d018      	beq.n	8001ca2 <__aeabi_dsub+0x4de>
 8001c70:	08c0      	lsrs	r0, r0, #3
 8001c72:	074e      	lsls	r6, r1, #29
 8001c74:	4306      	orrs	r6, r0
 8001c76:	2080      	movs	r0, #128	; 0x80
 8001c78:	08c9      	lsrs	r1, r1, #3
 8001c7a:	0300      	lsls	r0, r0, #12
 8001c7c:	4201      	tst	r1, r0
 8001c7e:	d008      	beq.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c80:	4663      	mov	r3, ip
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	4204      	tst	r4, r0
 8001c86:	d104      	bne.n	8001c92 <__aeabi_dsub+0x4ce>
 8001c88:	0021      	movs	r1, r4
 8001c8a:	46da      	mov	sl, fp
 8001c8c:	08d2      	lsrs	r2, r2, #3
 8001c8e:	075e      	lsls	r6, r3, #29
 8001c90:	4316      	orrs	r6, r2
 8001c92:	00f3      	lsls	r3, r6, #3
 8001c94:	4699      	mov	r9, r3
 8001c96:	2401      	movs	r4, #1
 8001c98:	4653      	mov	r3, sl
 8001c9a:	00c9      	lsls	r1, r1, #3
 8001c9c:	0f72      	lsrs	r2, r6, #29
 8001c9e:	4311      	orrs	r1, r2
 8001ca0:	401c      	ands	r4, r3
 8001ca2:	4d6a      	ldr	r5, [pc, #424]	; (8001e4c <__aeabi_dsub+0x688>)
 8001ca4:	e6ab      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001ca6:	001d      	movs	r5, r3
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2700      	movs	r7, #0
 8001cac:	e6b4      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001cae:	2d00      	cmp	r5, #0
 8001cb0:	d159      	bne.n	8001d66 <__aeabi_dsub+0x5a2>
 8001cb2:	000b      	movs	r3, r1
 8001cb4:	4303      	orrs	r3, r0
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x4f6>
 8001cb8:	e6d6      	b.n	8001a68 <__aeabi_dsub+0x2a4>
 8001cba:	1c73      	adds	r3, r6, #1
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x4fc>
 8001cbe:	e0b2      	b.n	8001e26 <__aeabi_dsub+0x662>
 8001cc0:	4b62      	ldr	r3, [pc, #392]	; (8001e4c <__aeabi_dsub+0x688>)
 8001cc2:	429f      	cmp	r7, r3
 8001cc4:	d01e      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001cc6:	43f3      	mvns	r3, r6
 8001cc8:	2b38      	cmp	r3, #56	; 0x38
 8001cca:	dc6f      	bgt.n	8001dac <__aeabi_dsub+0x5e8>
 8001ccc:	2b1f      	cmp	r3, #31
 8001cce:	dd00      	ble.n	8001cd2 <__aeabi_dsub+0x50e>
 8001cd0:	e097      	b.n	8001e02 <__aeabi_dsub+0x63e>
 8001cd2:	2520      	movs	r5, #32
 8001cd4:	000e      	movs	r6, r1
 8001cd6:	1aed      	subs	r5, r5, r3
 8001cd8:	40ae      	lsls	r6, r5
 8001cda:	46b0      	mov	r8, r6
 8001cdc:	0006      	movs	r6, r0
 8001cde:	46aa      	mov	sl, r5
 8001ce0:	40de      	lsrs	r6, r3
 8001ce2:	4645      	mov	r5, r8
 8001ce4:	4335      	orrs	r5, r6
 8001ce6:	002e      	movs	r6, r5
 8001ce8:	4655      	mov	r5, sl
 8001cea:	40a8      	lsls	r0, r5
 8001cec:	40d9      	lsrs	r1, r3
 8001cee:	1e45      	subs	r5, r0, #1
 8001cf0:	41a8      	sbcs	r0, r5
 8001cf2:	448c      	add	ip, r1
 8001cf4:	4306      	orrs	r6, r0
 8001cf6:	18b6      	adds	r6, r6, r2
 8001cf8:	4296      	cmp	r6, r2
 8001cfa:	4192      	sbcs	r2, r2
 8001cfc:	4251      	negs	r1, r2
 8001cfe:	4461      	add	r1, ip
 8001d00:	003d      	movs	r5, r7
 8001d02:	e625      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001d04:	003d      	movs	r5, r7
 8001d06:	4661      	mov	r1, ip
 8001d08:	4691      	mov	r9, r2
 8001d0a:	e678      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d0c:	000b      	movs	r3, r1
 8001d0e:	4303      	orrs	r3, r0
 8001d10:	2d00      	cmp	r5, #0
 8001d12:	d000      	beq.n	8001d16 <__aeabi_dsub+0x552>
 8001d14:	e655      	b.n	80019c2 <__aeabi_dsub+0x1fe>
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f5      	beq.n	8001d06 <__aeabi_dsub+0x542>
 8001d1a:	4663      	mov	r3, ip
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_dsub+0x55e>
 8001d20:	e66d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d22:	1886      	adds	r6, r0, r2
 8001d24:	4286      	cmp	r6, r0
 8001d26:	4180      	sbcs	r0, r0
 8001d28:	4461      	add	r1, ip
 8001d2a:	4240      	negs	r0, r0
 8001d2c:	1809      	adds	r1, r1, r0
 8001d2e:	2200      	movs	r2, #0
 8001d30:	020b      	lsls	r3, r1, #8
 8001d32:	d400      	bmi.n	8001d36 <__aeabi_dsub+0x572>
 8001d34:	e6d0      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <__aeabi_dsub+0x68c>)
 8001d38:	3501      	adds	r5, #1
 8001d3a:	4019      	ands	r1, r3
 8001d3c:	e5b2      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001d3e:	46b1      	mov	r9, r6
 8001d40:	e65d      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d42:	0033      	movs	r3, r6
 8001d44:	4667      	mov	r7, ip
 8001d46:	3b20      	subs	r3, #32
 8001d48:	40df      	lsrs	r7, r3
 8001d4a:	003b      	movs	r3, r7
 8001d4c:	2e20      	cmp	r6, #32
 8001d4e:	d005      	beq.n	8001d5c <__aeabi_dsub+0x598>
 8001d50:	2740      	movs	r7, #64	; 0x40
 8001d52:	1bbf      	subs	r7, r7, r6
 8001d54:	4666      	mov	r6, ip
 8001d56:	40be      	lsls	r6, r7
 8001d58:	4332      	orrs	r2, r6
 8001d5a:	4690      	mov	r8, r2
 8001d5c:	4646      	mov	r6, r8
 8001d5e:	1e72      	subs	r2, r6, #1
 8001d60:	4196      	sbcs	r6, r2
 8001d62:	4333      	orrs	r3, r6
 8001d64:	e5ef      	b.n	8001946 <__aeabi_dsub+0x182>
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <__aeabi_dsub+0x688>)
 8001d68:	429f      	cmp	r7, r3
 8001d6a:	d0cb      	beq.n	8001d04 <__aeabi_dsub+0x540>
 8001d6c:	2580      	movs	r5, #128	; 0x80
 8001d6e:	042d      	lsls	r5, r5, #16
 8001d70:	4273      	negs	r3, r6
 8001d72:	4329      	orrs	r1, r5
 8001d74:	e7a8      	b.n	8001cc8 <__aeabi_dsub+0x504>
 8001d76:	4308      	orrs	r0, r1
 8001d78:	1e41      	subs	r1, r0, #1
 8001d7a:	4188      	sbcs	r0, r1
 8001d7c:	e6a2      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001d7e:	2f00      	cmp	r7, #0
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x5c0>
 8001d82:	e63c      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001d84:	4663      	mov	r3, ip
 8001d86:	1a86      	subs	r6, r0, r2
 8001d88:	1acf      	subs	r7, r1, r3
 8001d8a:	42b0      	cmp	r0, r6
 8001d8c:	419b      	sbcs	r3, r3
 8001d8e:	425b      	negs	r3, r3
 8001d90:	1afb      	subs	r3, r7, r3
 8001d92:	4698      	mov	r8, r3
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	d54e      	bpl.n	8001e36 <__aeabi_dsub+0x672>
 8001d98:	1a16      	subs	r6, r2, r0
 8001d9a:	4663      	mov	r3, ip
 8001d9c:	42b2      	cmp	r2, r6
 8001d9e:	4192      	sbcs	r2, r2
 8001da0:	1a59      	subs	r1, r3, r1
 8001da2:	4252      	negs	r2, r2
 8001da4:	1a89      	subs	r1, r1, r2
 8001da6:	465c      	mov	r4, fp
 8001da8:	2200      	movs	r2, #0
 8001daa:	e57b      	b.n	80018a4 <__aeabi_dsub+0xe0>
 8001dac:	4301      	orrs	r1, r0
 8001dae:	000e      	movs	r6, r1
 8001db0:	1e71      	subs	r1, r6, #1
 8001db2:	418e      	sbcs	r6, r1
 8001db4:	e79f      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001db6:	001d      	movs	r5, r3
 8001db8:	000e      	movs	r6, r1
 8001dba:	3d20      	subs	r5, #32
 8001dbc:	40ee      	lsrs	r6, r5
 8001dbe:	46b0      	mov	r8, r6
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d004      	beq.n	8001dce <__aeabi_dsub+0x60a>
 8001dc4:	2540      	movs	r5, #64	; 0x40
 8001dc6:	1aeb      	subs	r3, r5, r3
 8001dc8:	4099      	lsls	r1, r3
 8001dca:	4308      	orrs	r0, r1
 8001dcc:	4681      	mov	r9, r0
 8001dce:	4648      	mov	r0, r9
 8001dd0:	4643      	mov	r3, r8
 8001dd2:	1e41      	subs	r1, r0, #1
 8001dd4:	4188      	sbcs	r0, r1
 8001dd6:	4318      	orrs	r0, r3
 8001dd8:	e674      	b.n	8001ac4 <__aeabi_dsub+0x300>
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2400      	movs	r4, #0
 8001dde:	e617      	b.n	8001a10 <__aeabi_dsub+0x24c>
 8001de0:	1a16      	subs	r6, r2, r0
 8001de2:	4663      	mov	r3, ip
 8001de4:	42b2      	cmp	r2, r6
 8001de6:	4192      	sbcs	r2, r2
 8001de8:	1a59      	subs	r1, r3, r1
 8001dea:	4252      	negs	r2, r2
 8001dec:	1a89      	subs	r1, r1, r2
 8001dee:	003d      	movs	r5, r7
 8001df0:	e525      	b.n	800183e <__aeabi_dsub+0x7a>
 8001df2:	4661      	mov	r1, ip
 8001df4:	4691      	mov	r9, r2
 8001df6:	4d15      	ldr	r5, [pc, #84]	; (8001e4c <__aeabi_dsub+0x688>)
 8001df8:	e601      	b.n	80019fe <__aeabi_dsub+0x23a>
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	0312      	lsls	r2, r2, #12
 8001e00:	e679      	b.n	8001af6 <__aeabi_dsub+0x332>
 8001e02:	001d      	movs	r5, r3
 8001e04:	000e      	movs	r6, r1
 8001e06:	3d20      	subs	r5, #32
 8001e08:	40ee      	lsrs	r6, r5
 8001e0a:	46b0      	mov	r8, r6
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d004      	beq.n	8001e1a <__aeabi_dsub+0x656>
 8001e10:	2540      	movs	r5, #64	; 0x40
 8001e12:	1aeb      	subs	r3, r5, r3
 8001e14:	4099      	lsls	r1, r3
 8001e16:	4308      	orrs	r0, r1
 8001e18:	4681      	mov	r9, r0
 8001e1a:	464e      	mov	r6, r9
 8001e1c:	4643      	mov	r3, r8
 8001e1e:	1e71      	subs	r1, r6, #1
 8001e20:	418e      	sbcs	r6, r1
 8001e22:	431e      	orrs	r6, r3
 8001e24:	e767      	b.n	8001cf6 <__aeabi_dsub+0x532>
 8001e26:	1886      	adds	r6, r0, r2
 8001e28:	4296      	cmp	r6, r2
 8001e2a:	419b      	sbcs	r3, r3
 8001e2c:	4461      	add	r1, ip
 8001e2e:	425b      	negs	r3, r3
 8001e30:	18c9      	adds	r1, r1, r3
 8001e32:	003d      	movs	r5, r7
 8001e34:	e58c      	b.n	8001950 <__aeabi_dsub+0x18c>
 8001e36:	4647      	mov	r7, r8
 8001e38:	4337      	orrs	r7, r6
 8001e3a:	d0ce      	beq.n	8001dda <__aeabi_dsub+0x616>
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	4641      	mov	r1, r8
 8001e40:	4032      	ands	r2, r6
 8001e42:	e649      	b.n	8001ad8 <__aeabi_dsub+0x314>
 8001e44:	2700      	movs	r7, #0
 8001e46:	003a      	movs	r2, r7
 8001e48:	e5e6      	b.n	8001a18 <__aeabi_dsub+0x254>
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	000007ff 	.word	0x000007ff
 8001e50:	ff7fffff 	.word	0xff7fffff

08001e54 <__aeabi_dcmpun>:
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	4e0c      	ldr	r6, [pc, #48]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e58:	030d      	lsls	r5, r1, #12
 8001e5a:	031c      	lsls	r4, r3, #12
 8001e5c:	0049      	lsls	r1, r1, #1
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	0b2d      	lsrs	r5, r5, #12
 8001e62:	0d49      	lsrs	r1, r1, #21
 8001e64:	0b24      	lsrs	r4, r4, #12
 8001e66:	0d5b      	lsrs	r3, r3, #21
 8001e68:	42b1      	cmp	r1, r6
 8001e6a:	d008      	beq.n	8001e7e <__aeabi_dcmpun+0x2a>
 8001e6c:	4906      	ldr	r1, [pc, #24]	; (8001e88 <__aeabi_dcmpun+0x34>)
 8001e6e:	2000      	movs	r0, #0
 8001e70:	428b      	cmp	r3, r1
 8001e72:	d103      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e74:	4314      	orrs	r4, r2
 8001e76:	0020      	movs	r0, r4
 8001e78:	1e44      	subs	r4, r0, #1
 8001e7a:	41a0      	sbcs	r0, r4
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
 8001e7e:	4305      	orrs	r5, r0
 8001e80:	2001      	movs	r0, #1
 8001e82:	2d00      	cmp	r5, #0
 8001e84:	d1fa      	bne.n	8001e7c <__aeabi_dcmpun+0x28>
 8001e86:	e7f1      	b.n	8001e6c <__aeabi_dcmpun+0x18>
 8001e88:	000007ff 	.word	0x000007ff

08001e8c <__aeabi_d2iz>:
 8001e8c:	b530      	push	{r4, r5, lr}
 8001e8e:	4d14      	ldr	r5, [pc, #80]	; (8001ee0 <__aeabi_d2iz+0x54>)
 8001e90:	030a      	lsls	r2, r1, #12
 8001e92:	004b      	lsls	r3, r1, #1
 8001e94:	0b12      	lsrs	r2, r2, #12
 8001e96:	0d5b      	lsrs	r3, r3, #21
 8001e98:	0fc9      	lsrs	r1, r1, #31
 8001e9a:	2400      	movs	r4, #0
 8001e9c:	42ab      	cmp	r3, r5
 8001e9e:	dd11      	ble.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ea0:	4c10      	ldr	r4, [pc, #64]	; (8001ee4 <__aeabi_d2iz+0x58>)
 8001ea2:	42a3      	cmp	r3, r4
 8001ea4:	dc10      	bgt.n	8001ec8 <__aeabi_d2iz+0x3c>
 8001ea6:	2480      	movs	r4, #128	; 0x80
 8001ea8:	0364      	lsls	r4, r4, #13
 8001eaa:	4322      	orrs	r2, r4
 8001eac:	4c0e      	ldr	r4, [pc, #56]	; (8001ee8 <__aeabi_d2iz+0x5c>)
 8001eae:	1ae4      	subs	r4, r4, r3
 8001eb0:	2c1f      	cmp	r4, #31
 8001eb2:	dd0c      	ble.n	8001ece <__aeabi_d2iz+0x42>
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <__aeabi_d2iz+0x60>)
 8001eb6:	1ac3      	subs	r3, r0, r3
 8001eb8:	40da      	lsrs	r2, r3
 8001eba:	0013      	movs	r3, r2
 8001ebc:	425c      	negs	r4, r3
 8001ebe:	2900      	cmp	r1, #0
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ec2:	001c      	movs	r4, r3
 8001ec4:	0020      	movs	r0, r4
 8001ec6:	bd30      	pop	{r4, r5, pc}
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <__aeabi_d2iz+0x64>)
 8001eca:	18cc      	adds	r4, r1, r3
 8001ecc:	e7fa      	b.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ece:	4d09      	ldr	r5, [pc, #36]	; (8001ef4 <__aeabi_d2iz+0x68>)
 8001ed0:	40e0      	lsrs	r0, r4
 8001ed2:	46ac      	mov	ip, r5
 8001ed4:	4463      	add	r3, ip
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	0013      	movs	r3, r2
 8001eda:	4303      	orrs	r3, r0
 8001edc:	e7ee      	b.n	8001ebc <__aeabi_d2iz+0x30>
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	000003fe 	.word	0x000003fe
 8001ee4:	0000041d 	.word	0x0000041d
 8001ee8:	00000433 	.word	0x00000433
 8001eec:	00000413 	.word	0x00000413
 8001ef0:	7fffffff 	.word	0x7fffffff
 8001ef4:	fffffbed 	.word	0xfffffbed

08001ef8 <__aeabi_i2d>:
 8001ef8:	b570      	push	{r4, r5, r6, lr}
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d02d      	beq.n	8001f5a <__aeabi_i2d+0x62>
 8001efe:	17c3      	asrs	r3, r0, #31
 8001f00:	18c5      	adds	r5, r0, r3
 8001f02:	405d      	eors	r5, r3
 8001f04:	0fc4      	lsrs	r4, r0, #31
 8001f06:	0028      	movs	r0, r5
 8001f08:	f000 f938 	bl	800217c <__clzsi2>
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <__aeabi_i2d+0x6c>)
 8001f0e:	1a1b      	subs	r3, r3, r0
 8001f10:	055b      	lsls	r3, r3, #21
 8001f12:	0d5b      	lsrs	r3, r3, #21
 8001f14:	280a      	cmp	r0, #10
 8001f16:	dd15      	ble.n	8001f44 <__aeabi_i2d+0x4c>
 8001f18:	380b      	subs	r0, #11
 8001f1a:	4085      	lsls	r5, r0
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	032d      	lsls	r5, r5, #12
 8001f20:	0b2d      	lsrs	r5, r5, #12
 8001f22:	2100      	movs	r1, #0
 8001f24:	0010      	movs	r0, r2
 8001f26:	032d      	lsls	r5, r5, #12
 8001f28:	0d0a      	lsrs	r2, r1, #20
 8001f2a:	0b2d      	lsrs	r5, r5, #12
 8001f2c:	0512      	lsls	r2, r2, #20
 8001f2e:	432a      	orrs	r2, r5
 8001f30:	4d0d      	ldr	r5, [pc, #52]	; (8001f68 <__aeabi_i2d+0x70>)
 8001f32:	051b      	lsls	r3, r3, #20
 8001f34:	402a      	ands	r2, r5
 8001f36:	4313      	orrs	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	07e4      	lsls	r4, r4, #31
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	4323      	orrs	r3, r4
 8001f40:	0019      	movs	r1, r3
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
 8001f44:	0002      	movs	r2, r0
 8001f46:	0029      	movs	r1, r5
 8001f48:	3215      	adds	r2, #21
 8001f4a:	4091      	lsls	r1, r2
 8001f4c:	000a      	movs	r2, r1
 8001f4e:	210b      	movs	r1, #11
 8001f50:	1a08      	subs	r0, r1, r0
 8001f52:	40c5      	lsrs	r5, r0
 8001f54:	032d      	lsls	r5, r5, #12
 8001f56:	0b2d      	lsrs	r5, r5, #12
 8001f58:	e7e3      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f5a:	2400      	movs	r4, #0
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2500      	movs	r5, #0
 8001f60:	2200      	movs	r2, #0
 8001f62:	e7de      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f64:	0000041e 	.word	0x0000041e
 8001f68:	800fffff 	.word	0x800fffff

08001f6c <__aeabi_ui2d>:
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	1e04      	subs	r4, r0, #0
 8001f70:	d025      	beq.n	8001fbe <__aeabi_ui2d+0x52>
 8001f72:	f000 f903 	bl	800217c <__clzsi2>
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <__aeabi_ui2d+0x5c>)
 8001f78:	1a1b      	subs	r3, r3, r0
 8001f7a:	055b      	lsls	r3, r3, #21
 8001f7c:	0d5b      	lsrs	r3, r3, #21
 8001f7e:	280a      	cmp	r0, #10
 8001f80:	dd12      	ble.n	8001fa8 <__aeabi_ui2d+0x3c>
 8001f82:	380b      	subs	r0, #11
 8001f84:	4084      	lsls	r4, r0
 8001f86:	2200      	movs	r2, #0
 8001f88:	0324      	lsls	r4, r4, #12
 8001f8a:	0b24      	lsrs	r4, r4, #12
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	0010      	movs	r0, r2
 8001f90:	0324      	lsls	r4, r4, #12
 8001f92:	0d0a      	lsrs	r2, r1, #20
 8001f94:	0b24      	lsrs	r4, r4, #12
 8001f96:	0512      	lsls	r2, r2, #20
 8001f98:	4322      	orrs	r2, r4
 8001f9a:	4c0c      	ldr	r4, [pc, #48]	; (8001fcc <__aeabi_ui2d+0x60>)
 8001f9c:	051b      	lsls	r3, r3, #20
 8001f9e:	4022      	ands	r2, r4
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	0859      	lsrs	r1, r3, #1
 8001fa6:	bd10      	pop	{r4, pc}
 8001fa8:	0002      	movs	r2, r0
 8001faa:	0021      	movs	r1, r4
 8001fac:	3215      	adds	r2, #21
 8001fae:	4091      	lsls	r1, r2
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	210b      	movs	r1, #11
 8001fb4:	1a08      	subs	r0, r1, r0
 8001fb6:	40c4      	lsrs	r4, r0
 8001fb8:	0324      	lsls	r4, r4, #12
 8001fba:	0b24      	lsrs	r4, r4, #12
 8001fbc:	e7e6      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	e7e2      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	0000041e 	.word	0x0000041e
 8001fcc:	800fffff 	.word	0x800fffff

08001fd0 <__aeabi_f2d>:
 8001fd0:	0041      	lsls	r1, r0, #1
 8001fd2:	0e09      	lsrs	r1, r1, #24
 8001fd4:	1c4b      	adds	r3, r1, #1
 8001fd6:	b570      	push	{r4, r5, r6, lr}
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	0246      	lsls	r6, r0, #9
 8001fdc:	0a75      	lsrs	r5, r6, #9
 8001fde:	0fc4      	lsrs	r4, r0, #31
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	dd14      	ble.n	800200e <__aeabi_f2d+0x3e>
 8001fe4:	23e0      	movs	r3, #224	; 0xe0
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	076d      	lsls	r5, r5, #29
 8001fea:	0b36      	lsrs	r6, r6, #12
 8001fec:	18cb      	adds	r3, r1, r3
 8001fee:	2100      	movs	r1, #0
 8001ff0:	0d0a      	lsrs	r2, r1, #20
 8001ff2:	0028      	movs	r0, r5
 8001ff4:	0512      	lsls	r2, r2, #20
 8001ff6:	4d1c      	ldr	r5, [pc, #112]	; (8002068 <__aeabi_f2d+0x98>)
 8001ff8:	4332      	orrs	r2, r6
 8001ffa:	055b      	lsls	r3, r3, #21
 8001ffc:	402a      	ands	r2, r5
 8001ffe:	085b      	lsrs	r3, r3, #1
 8002000:	4313      	orrs	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	07e4      	lsls	r4, r4, #31
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	4323      	orrs	r3, r4
 800200a:	0019      	movs	r1, r3
 800200c:	bd70      	pop	{r4, r5, r6, pc}
 800200e:	2900      	cmp	r1, #0
 8002010:	d114      	bne.n	800203c <__aeabi_f2d+0x6c>
 8002012:	2d00      	cmp	r5, #0
 8002014:	d01e      	beq.n	8002054 <__aeabi_f2d+0x84>
 8002016:	0028      	movs	r0, r5
 8002018:	f000 f8b0 	bl	800217c <__clzsi2>
 800201c:	280a      	cmp	r0, #10
 800201e:	dc1c      	bgt.n	800205a <__aeabi_f2d+0x8a>
 8002020:	230b      	movs	r3, #11
 8002022:	002a      	movs	r2, r5
 8002024:	1a1b      	subs	r3, r3, r0
 8002026:	40da      	lsrs	r2, r3
 8002028:	0003      	movs	r3, r0
 800202a:	3315      	adds	r3, #21
 800202c:	409d      	lsls	r5, r3
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <__aeabi_f2d+0x9c>)
 8002030:	0312      	lsls	r2, r2, #12
 8002032:	1a1b      	subs	r3, r3, r0
 8002034:	055b      	lsls	r3, r3, #21
 8002036:	0b16      	lsrs	r6, r2, #12
 8002038:	0d5b      	lsrs	r3, r3, #21
 800203a:	e7d8      	b.n	8001fee <__aeabi_f2d+0x1e>
 800203c:	2d00      	cmp	r5, #0
 800203e:	d006      	beq.n	800204e <__aeabi_f2d+0x7e>
 8002040:	0b32      	lsrs	r2, r6, #12
 8002042:	2680      	movs	r6, #128	; 0x80
 8002044:	0336      	lsls	r6, r6, #12
 8002046:	076d      	lsls	r5, r5, #29
 8002048:	4316      	orrs	r6, r2
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <__aeabi_f2d+0xa0>)
 800204c:	e7cf      	b.n	8001fee <__aeabi_f2d+0x1e>
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <__aeabi_f2d+0xa0>)
 8002050:	2600      	movs	r6, #0
 8002052:	e7cc      	b.n	8001fee <__aeabi_f2d+0x1e>
 8002054:	2300      	movs	r3, #0
 8002056:	2600      	movs	r6, #0
 8002058:	e7c9      	b.n	8001fee <__aeabi_f2d+0x1e>
 800205a:	0003      	movs	r3, r0
 800205c:	002a      	movs	r2, r5
 800205e:	3b0b      	subs	r3, #11
 8002060:	409a      	lsls	r2, r3
 8002062:	2500      	movs	r5, #0
 8002064:	e7e3      	b.n	800202e <__aeabi_f2d+0x5e>
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	800fffff 	.word	0x800fffff
 800206c:	00000389 	.word	0x00000389
 8002070:	000007ff 	.word	0x000007ff

08002074 <__aeabi_d2f>:
 8002074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002076:	004c      	lsls	r4, r1, #1
 8002078:	0d64      	lsrs	r4, r4, #21
 800207a:	030b      	lsls	r3, r1, #12
 800207c:	1c62      	adds	r2, r4, #1
 800207e:	0a5b      	lsrs	r3, r3, #9
 8002080:	0f46      	lsrs	r6, r0, #29
 8002082:	0552      	lsls	r2, r2, #21
 8002084:	0fc9      	lsrs	r1, r1, #31
 8002086:	431e      	orrs	r6, r3
 8002088:	00c5      	lsls	r5, r0, #3
 800208a:	0d52      	lsrs	r2, r2, #21
 800208c:	2a01      	cmp	r2, #1
 800208e:	dd29      	ble.n	80020e4 <__aeabi_d2f+0x70>
 8002090:	4b37      	ldr	r3, [pc, #220]	; (8002170 <__aeabi_d2f+0xfc>)
 8002092:	18e7      	adds	r7, r4, r3
 8002094:	2ffe      	cmp	r7, #254	; 0xfe
 8002096:	dc1c      	bgt.n	80020d2 <__aeabi_d2f+0x5e>
 8002098:	2f00      	cmp	r7, #0
 800209a:	dd3b      	ble.n	8002114 <__aeabi_d2f+0xa0>
 800209c:	0180      	lsls	r0, r0, #6
 800209e:	1e43      	subs	r3, r0, #1
 80020a0:	4198      	sbcs	r0, r3
 80020a2:	2207      	movs	r2, #7
 80020a4:	00f3      	lsls	r3, r6, #3
 80020a6:	0f6d      	lsrs	r5, r5, #29
 80020a8:	4303      	orrs	r3, r0
 80020aa:	432b      	orrs	r3, r5
 80020ac:	401a      	ands	r2, r3
 80020ae:	2a00      	cmp	r2, #0
 80020b0:	d004      	beq.n	80020bc <__aeabi_d2f+0x48>
 80020b2:	220f      	movs	r2, #15
 80020b4:	401a      	ands	r2, r3
 80020b6:	2a04      	cmp	r2, #4
 80020b8:	d000      	beq.n	80020bc <__aeabi_d2f+0x48>
 80020ba:	3304      	adds	r3, #4
 80020bc:	2280      	movs	r2, #128	; 0x80
 80020be:	04d2      	lsls	r2, r2, #19
 80020c0:	401a      	ands	r2, r3
 80020c2:	d024      	beq.n	800210e <__aeabi_d2f+0x9a>
 80020c4:	3701      	adds	r7, #1
 80020c6:	b2fa      	uxtb	r2, r7
 80020c8:	2fff      	cmp	r7, #255	; 0xff
 80020ca:	d002      	beq.n	80020d2 <__aeabi_d2f+0x5e>
 80020cc:	019b      	lsls	r3, r3, #6
 80020ce:	0a58      	lsrs	r0, r3, #9
 80020d0:	e001      	b.n	80020d6 <__aeabi_d2f+0x62>
 80020d2:	22ff      	movs	r2, #255	; 0xff
 80020d4:	2000      	movs	r0, #0
 80020d6:	0240      	lsls	r0, r0, #9
 80020d8:	05d2      	lsls	r2, r2, #23
 80020da:	0a40      	lsrs	r0, r0, #9
 80020dc:	07c9      	lsls	r1, r1, #31
 80020de:	4310      	orrs	r0, r2
 80020e0:	4308      	orrs	r0, r1
 80020e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e4:	4335      	orrs	r5, r6
 80020e6:	2c00      	cmp	r4, #0
 80020e8:	d104      	bne.n	80020f4 <__aeabi_d2f+0x80>
 80020ea:	2d00      	cmp	r5, #0
 80020ec:	d10a      	bne.n	8002104 <__aeabi_d2f+0x90>
 80020ee:	2200      	movs	r2, #0
 80020f0:	2000      	movs	r0, #0
 80020f2:	e7f0      	b.n	80020d6 <__aeabi_d2f+0x62>
 80020f4:	2d00      	cmp	r5, #0
 80020f6:	d0ec      	beq.n	80020d2 <__aeabi_d2f+0x5e>
 80020f8:	2080      	movs	r0, #128	; 0x80
 80020fa:	03c0      	lsls	r0, r0, #15
 80020fc:	4330      	orrs	r0, r6
 80020fe:	22ff      	movs	r2, #255	; 0xff
 8002100:	e7e9      	b.n	80020d6 <__aeabi_d2f+0x62>
 8002102:	2400      	movs	r4, #0
 8002104:	2300      	movs	r3, #0
 8002106:	025b      	lsls	r3, r3, #9
 8002108:	0a58      	lsrs	r0, r3, #9
 800210a:	b2e2      	uxtb	r2, r4
 800210c:	e7e3      	b.n	80020d6 <__aeabi_d2f+0x62>
 800210e:	08db      	lsrs	r3, r3, #3
 8002110:	003c      	movs	r4, r7
 8002112:	e7f8      	b.n	8002106 <__aeabi_d2f+0x92>
 8002114:	003b      	movs	r3, r7
 8002116:	3317      	adds	r3, #23
 8002118:	dbf3      	blt.n	8002102 <__aeabi_d2f+0x8e>
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	041b      	lsls	r3, r3, #16
 800211e:	4333      	orrs	r3, r6
 8002120:	261e      	movs	r6, #30
 8002122:	1bf6      	subs	r6, r6, r7
 8002124:	2e1f      	cmp	r6, #31
 8002126:	dd14      	ble.n	8002152 <__aeabi_d2f+0xde>
 8002128:	2202      	movs	r2, #2
 800212a:	4252      	negs	r2, r2
 800212c:	1bd7      	subs	r7, r2, r7
 800212e:	001a      	movs	r2, r3
 8002130:	40fa      	lsrs	r2, r7
 8002132:	0017      	movs	r7, r2
 8002134:	2e20      	cmp	r6, #32
 8002136:	d004      	beq.n	8002142 <__aeabi_d2f+0xce>
 8002138:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <__aeabi_d2f+0x100>)
 800213a:	4694      	mov	ip, r2
 800213c:	4464      	add	r4, ip
 800213e:	40a3      	lsls	r3, r4
 8002140:	431d      	orrs	r5, r3
 8002142:	002b      	movs	r3, r5
 8002144:	1e5d      	subs	r5, r3, #1
 8002146:	41ab      	sbcs	r3, r5
 8002148:	2207      	movs	r2, #7
 800214a:	433b      	orrs	r3, r7
 800214c:	401a      	ands	r2, r3
 800214e:	2700      	movs	r7, #0
 8002150:	e7ad      	b.n	80020ae <__aeabi_d2f+0x3a>
 8002152:	4a09      	ldr	r2, [pc, #36]	; (8002178 <__aeabi_d2f+0x104>)
 8002154:	0028      	movs	r0, r5
 8002156:	18a2      	adds	r2, r4, r2
 8002158:	4095      	lsls	r5, r2
 800215a:	4093      	lsls	r3, r2
 800215c:	1e6c      	subs	r4, r5, #1
 800215e:	41a5      	sbcs	r5, r4
 8002160:	40f0      	lsrs	r0, r6
 8002162:	2207      	movs	r2, #7
 8002164:	432b      	orrs	r3, r5
 8002166:	4303      	orrs	r3, r0
 8002168:	401a      	ands	r2, r3
 800216a:	2700      	movs	r7, #0
 800216c:	e79f      	b.n	80020ae <__aeabi_d2f+0x3a>
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	fffffc80 	.word	0xfffffc80
 8002174:	fffffca2 	.word	0xfffffca2
 8002178:	fffffc82 	.word	0xfffffc82

0800217c <__clzsi2>:
 800217c:	211c      	movs	r1, #28
 800217e:	2301      	movs	r3, #1
 8002180:	041b      	lsls	r3, r3, #16
 8002182:	4298      	cmp	r0, r3
 8002184:	d301      	bcc.n	800218a <__clzsi2+0xe>
 8002186:	0c00      	lsrs	r0, r0, #16
 8002188:	3910      	subs	r1, #16
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	4298      	cmp	r0, r3
 800218e:	d301      	bcc.n	8002194 <__clzsi2+0x18>
 8002190:	0a00      	lsrs	r0, r0, #8
 8002192:	3908      	subs	r1, #8
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	4298      	cmp	r0, r3
 8002198:	d301      	bcc.n	800219e <__clzsi2+0x22>
 800219a:	0900      	lsrs	r0, r0, #4
 800219c:	3904      	subs	r1, #4
 800219e:	a202      	add	r2, pc, #8	; (adr r2, 80021a8 <__clzsi2+0x2c>)
 80021a0:	5c10      	ldrb	r0, [r2, r0]
 80021a2:	1840      	adds	r0, r0, r1
 80021a4:	4770      	bx	lr
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	02020304 	.word	0x02020304
 80021ac:	01010101 	.word	0x01010101
	...

080021b8 <espInit>:
 *
 * Reset the ESP using the Uart connection
 * @param  argument: Not used
 * @retval None
 */
void espInit() {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
	consoleSend("Restarting ESP\n");
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <espInit+0x40>)
 80021c0:	0018      	movs	r0, r3
 80021c2:	f000 fb39 	bl	8002838 <consoleSend>
	// Create command
	const char Data[] = "AT+RST\r\n";
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	4a0c      	ldr	r2, [pc, #48]	; (80021fc <espInit+0x44>)
 80021ca:	ca03      	ldmia	r2!, {r0, r1}
 80021cc:	c303      	stmia	r3!, {r0, r1}
 80021ce:	7812      	ldrb	r2, [r2, #0]
 80021d0:	701a      	strb	r2, [r3, #0]

	// Send Uart command
	HAL_UART_Transmit(&huart1, (uint8_t*) Data, sizeof(Data), 100);
 80021d2:	1d39      	adds	r1, r7, #4
 80021d4:	480a      	ldr	r0, [pc, #40]	; (8002200 <espInit+0x48>)
 80021d6:	2364      	movs	r3, #100	; 0x64
 80021d8:	2209      	movs	r2, #9
 80021da:	f005 f8ef 	bl	80073bc <HAL_UART_Transmit>

	//Startup delay
	HAL_Delay(500);
 80021de:	23fa      	movs	r3, #250	; 0xfa
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	0018      	movs	r0, r3
 80021e4:	f002 f8ac 	bl	8004340 <HAL_Delay>
	consoleSend("Done restarting ESP\n");
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <espInit+0x4c>)
 80021ea:	0018      	movs	r0, r3
 80021ec:	f000 fb24 	bl	8002838 <consoleSend>
}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b004      	add	sp, #16
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	0800b4a4 	.word	0x0800b4a4
 80021fc:	0800b4cc 	.word	0x0800b4cc
 8002200:	20001334 	.word	0x20001334
 8002204:	0800b4b4 	.word	0x0800b4b4

08002208 <espConnect>:
 * Connect to a wireless network using the SSID and the Password
 * @param  ssid: Network SSID name
 * @param  passw: Network Password
 * @retval bool: Connected or not connected
 */
bool espConnect(char *ssid, char *passw) {
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b087      	sub	sp, #28
 800220c:	af02      	add	r7, sp, #8
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
	// Variables
	static char sendBuffer[80];
	memcpy(sendBuffer, "", sizeof(sendBuffer));
 8002212:	4b44      	ldr	r3, [pc, #272]	; (8002324 <espConnect+0x11c>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	3304      	adds	r3, #4
 800221a:	224c      	movs	r2, #76	; 0x4c
 800221c:	2100      	movs	r1, #0
 800221e:	0018      	movs	r0, r3
 8002220:	f007 f853 	bl	80092ca <memset>
	clearChar(receiveBuffer, sizeof(receiveBuffer));
 8002224:	4b40      	ldr	r3, [pc, #256]	; (8002328 <espConnect+0x120>)
 8002226:	21c8      	movs	r1, #200	; 0xc8
 8002228:	0018      	movs	r0, r3
 800222a:	f000 fb1d 	bl	8002868 <clearChar>

	HAL_StatusTypeDef uartRet;

	// Reset ESP
	espInit();
 800222e:	f7ff ffc3 	bl	80021b8 <espInit>

	// Create commands
	snprintf(sendBuffer, sizeof(sendBuffer), "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4a3d      	ldr	r2, [pc, #244]	; (800232c <espConnect+0x124>)
 8002236:	483b      	ldr	r0, [pc, #236]	; (8002324 <espConnect+0x11c>)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	000b      	movs	r3, r1
 800223e:	2150      	movs	r1, #80	; 0x50
 8002240:	f007 fcaa 	bl	8009b98 <sniprintf>
			passw);

	// Update User
	consoleSend("Connecting to WiFi...\n");
 8002244:	4b3a      	ldr	r3, [pc, #232]	; (8002330 <espConnect+0x128>)
 8002246:	0018      	movs	r0, r3
 8002248:	f000 faf6 	bl	8002838 <consoleSend>

	// Reset UART1
	HAL_UART_AbortReceive(&huart1);
 800224c:	4b39      	ldr	r3, [pc, #228]	; (8002334 <espConnect+0x12c>)
 800224e:	0018      	movs	r0, r3
 8002250:	f005 fa00 	bl	8007654 <HAL_UART_AbortReceive>

	// Send commands
	HAL_UART_Transmit(&huart1, (uint8_t*) sendBuffer, strlen(sendBuffer), 10);
 8002254:	4b33      	ldr	r3, [pc, #204]	; (8002324 <espConnect+0x11c>)
 8002256:	0018      	movs	r0, r3
 8002258:	f7fd ff56 	bl	8000108 <strlen>
 800225c:	0003      	movs	r3, r0
 800225e:	b29a      	uxth	r2, r3
 8002260:	4930      	ldr	r1, [pc, #192]	; (8002324 <espConnect+0x11c>)
 8002262:	4834      	ldr	r0, [pc, #208]	; (8002334 <espConnect+0x12c>)
 8002264:	230a      	movs	r3, #10
 8002266:	f005 f8a9 	bl	80073bc <HAL_UART_Transmit>

	// Receive answer
	uartRet = HAL_UART_Receive_IT(&huart1, (uint8_t*) receiveBuffer, 200);
 800226a:	230f      	movs	r3, #15
 800226c:	18fc      	adds	r4, r7, r3
 800226e:	492e      	ldr	r1, [pc, #184]	; (8002328 <espConnect+0x120>)
 8002270:	4b30      	ldr	r3, [pc, #192]	; (8002334 <espConnect+0x12c>)
 8002272:	22c8      	movs	r2, #200	; 0xc8
 8002274:	0018      	movs	r0, r3
 8002276:	f005 f949 	bl	800750c <HAL_UART_Receive_IT>
 800227a:	0003      	movs	r3, r0
 800227c:	7023      	strb	r3, [r4, #0]
	tickdelay = HAL_GetTick() + 5000;
 800227e:	f002 f855 	bl	800432c <HAL_GetTick>
 8002282:	0003      	movs	r3, r0
 8002284:	4a2c      	ldr	r2, [pc, #176]	; (8002338 <espConnect+0x130>)
 8002286:	189a      	adds	r2, r3, r2
 8002288:	4b2c      	ldr	r3, [pc, #176]	; (800233c <espConnect+0x134>)
 800228a:	601a      	str	r2, [r3, #0]
	while ((strstr(receiveBuffer, "OK") == 0
 800228c:	46c0      	nop			; (mov r8, r8)
 800228e:	4a2c      	ldr	r2, [pc, #176]	; (8002340 <espConnect+0x138>)
 8002290:	4b25      	ldr	r3, [pc, #148]	; (8002328 <espConnect+0x120>)
 8002292:	0011      	movs	r1, r2
 8002294:	0018      	movs	r0, r3
 8002296:	f007 fcb1 	bl	8009bfc <strstr>
 800229a:	1e03      	subs	r3, r0, #0
 800229c:	d10e      	bne.n	80022bc <espConnect+0xb4>
			&& strstr(receiveBuffer, "ERROR") == 0)
 800229e:	4a29      	ldr	r2, [pc, #164]	; (8002344 <espConnect+0x13c>)
 80022a0:	4b21      	ldr	r3, [pc, #132]	; (8002328 <espConnect+0x120>)
 80022a2:	0011      	movs	r1, r2
 80022a4:	0018      	movs	r0, r3
 80022a6:	f007 fca9 	bl	8009bfc <strstr>
 80022aa:	1e03      	subs	r3, r0, #0
 80022ac:	d106      	bne.n	80022bc <espConnect+0xb4>
			&& HAL_GetTick() <= tickdelay)
 80022ae:	f002 f83d 	bl	800432c <HAL_GetTick>
 80022b2:	0002      	movs	r2, r0
 80022b4:	4b21      	ldr	r3, [pc, #132]	; (800233c <espConnect+0x134>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d9e8      	bls.n	800228e <espConnect+0x86>
		;		// Hold for read

	// Check answer
	if (uartRet != HAL_ERROR) {
 80022bc:	230f      	movs	r3, #15
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d029      	beq.n	800231a <espConnect+0x112>
		if (strstr(receiveBuffer, "OK")) {
 80022c6:	4a1e      	ldr	r2, [pc, #120]	; (8002340 <espConnect+0x138>)
 80022c8:	4b17      	ldr	r3, [pc, #92]	; (8002328 <espConnect+0x120>)
 80022ca:	0011      	movs	r1, r2
 80022cc:	0018      	movs	r0, r3
 80022ce:	f007 fc95 	bl	8009bfc <strstr>
 80022d2:	1e03      	subs	r3, r0, #0
 80022d4:	d005      	beq.n	80022e2 <espConnect+0xda>
			// Update User
			consoleSend("Connected to WiFi\n");
 80022d6:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <espConnect+0x140>)
 80022d8:	0018      	movs	r0, r3
 80022da:	f000 faad 	bl	8002838 <consoleSend>
			return true;
 80022de:	2301      	movs	r3, #1
 80022e0:	e01c      	b.n	800231c <espConnect+0x114>
		} else if (strstr(receiveBuffer, "FAIL")) {
 80022e2:	4a1a      	ldr	r2, [pc, #104]	; (800234c <espConnect+0x144>)
 80022e4:	4b10      	ldr	r3, [pc, #64]	; (8002328 <espConnect+0x120>)
 80022e6:	0011      	movs	r1, r2
 80022e8:	0018      	movs	r0, r3
 80022ea:	f007 fc87 	bl	8009bfc <strstr>
 80022ee:	1e03      	subs	r3, r0, #0
 80022f0:	d005      	beq.n	80022fe <espConnect+0xf6>
			// Update User
			consoleSend("Failed to connect\n");
 80022f2:	4b17      	ldr	r3, [pc, #92]	; (8002350 <espConnect+0x148>)
 80022f4:	0018      	movs	r0, r3
 80022f6:	f000 fa9f 	bl	8002838 <consoleSend>
			return false;
 80022fa:	2300      	movs	r3, #0
 80022fc:	e00e      	b.n	800231c <espConnect+0x114>
		} else if (strstr(receiveBuffer, "ERR")) {
 80022fe:	4a15      	ldr	r2, [pc, #84]	; (8002354 <espConnect+0x14c>)
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <espConnect+0x120>)
 8002302:	0011      	movs	r1, r2
 8002304:	0018      	movs	r0, r3
 8002306:	f007 fc79 	bl	8009bfc <strstr>
 800230a:	1e03      	subs	r3, r0, #0
 800230c:	d005      	beq.n	800231a <espConnect+0x112>
			// Update User
			consoleSend("Error connecting to WiFi\n");
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <espConnect+0x150>)
 8002310:	0018      	movs	r0, r3
 8002312:	f000 fa91 	bl	8002838 <consoleSend>
			return false;
 8002316:	2300      	movs	r3, #0
 8002318:	e000      	b.n	800231c <espConnect+0x114>
		}
	}

	return false;
 800231a:	2300      	movs	r3, #0
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b005      	add	sp, #20
 8002322:	bd90      	pop	{r4, r7, pc}
 8002324:	20000200 	.word	0x20000200
 8002328:	20001474 	.word	0x20001474
 800232c:	0800b4d8 	.word	0x0800b4d8
 8002330:	0800b4f0 	.word	0x0800b4f0
 8002334:	20001334 	.word	0x20001334
 8002338:	00001388 	.word	0x00001388
 800233c:	200001fc 	.word	0x200001fc
 8002340:	0800b508 	.word	0x0800b508
 8002344:	0800b50c 	.word	0x0800b50c
 8002348:	0800b514 	.word	0x0800b514
 800234c:	0800b528 	.word	0x0800b528
 8002350:	0800b530 	.word	0x0800b530
 8002354:	0800b544 	.word	0x0800b544
 8002358:	0800b548 	.word	0x0800b548

0800235c <tcpConnect>:
 * Connect to the TCP webserver using the IP address of the server and the port
 * @param  address: Webserver IP address
 * @param  port: Webserver port
 * @retval bool: Connected or not connected
 */
bool tcpConnect(char *address, char *port) {
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b087      	sub	sp, #28
 8002360:	af02      	add	r7, sp, #8
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
	// Variables
	static char sendBuffer[50];
	memcpy(sendBuffer, "", sizeof(sendBuffer));
 8002366:	4b4c      	ldr	r3, [pc, #304]	; (8002498 <tcpConnect+0x13c>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	3304      	adds	r3, #4
 800236e:	222e      	movs	r2, #46	; 0x2e
 8002370:	2100      	movs	r1, #0
 8002372:	0018      	movs	r0, r3
 8002374:	f006 ffa9 	bl	80092ca <memset>
	clearChar(receiveBuffer, sizeof(receiveBuffer));
 8002378:	4b48      	ldr	r3, [pc, #288]	; (800249c <tcpConnect+0x140>)
 800237a:	21c8      	movs	r1, #200	; 0xc8
 800237c:	0018      	movs	r0, r3
 800237e:	f000 fa73 	bl	8002868 <clearChar>
	hostIP = address;
 8002382:	4b47      	ldr	r3, [pc, #284]	; (80024a0 <tcpConnect+0x144>)
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef uartRet;

	// Create commands
	snprintf(sendBuffer, sizeof(sendBuffer),
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4a46      	ldr	r2, [pc, #280]	; (80024a4 <tcpConnect+0x148>)
 800238c:	4842      	ldr	r0, [pc, #264]	; (8002498 <tcpConnect+0x13c>)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	000b      	movs	r3, r1
 8002394:	2132      	movs	r1, #50	; 0x32
 8002396:	f007 fbff 	bl	8009b98 <sniprintf>
			"AT+CIPSTART=\"TCP\",\"%s\",%s\r\n", address, port);

	// Update User
	consoleSend("Connecting to TCP server...\n");
 800239a:	4b43      	ldr	r3, [pc, #268]	; (80024a8 <tcpConnect+0x14c>)
 800239c:	0018      	movs	r0, r3
 800239e:	f000 fa4b 	bl	8002838 <consoleSend>

	// Reset UART1
	HAL_UART_AbortReceive(&huart1);
 80023a2:	4b42      	ldr	r3, [pc, #264]	; (80024ac <tcpConnect+0x150>)
 80023a4:	0018      	movs	r0, r3
 80023a6:	f005 f955 	bl	8007654 <HAL_UART_AbortReceive>

	// Send commands
	HAL_UART_Transmit(&huart1, (uint8_t*) sendBuffer, strlen(sendBuffer), 10);
 80023aa:	4b3b      	ldr	r3, [pc, #236]	; (8002498 <tcpConnect+0x13c>)
 80023ac:	0018      	movs	r0, r3
 80023ae:	f7fd feab 	bl	8000108 <strlen>
 80023b2:	0003      	movs	r3, r0
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	4938      	ldr	r1, [pc, #224]	; (8002498 <tcpConnect+0x13c>)
 80023b8:	483c      	ldr	r0, [pc, #240]	; (80024ac <tcpConnect+0x150>)
 80023ba:	230a      	movs	r3, #10
 80023bc:	f004 fffe 	bl	80073bc <HAL_UART_Transmit>

	// Receive answer
	uartRet = HAL_UART_Receive_IT(&huart1, (uint8_t*) receiveBuffer, 200);
 80023c0:	230f      	movs	r3, #15
 80023c2:	18fc      	adds	r4, r7, r3
 80023c4:	4935      	ldr	r1, [pc, #212]	; (800249c <tcpConnect+0x140>)
 80023c6:	4b39      	ldr	r3, [pc, #228]	; (80024ac <tcpConnect+0x150>)
 80023c8:	22c8      	movs	r2, #200	; 0xc8
 80023ca:	0018      	movs	r0, r3
 80023cc:	f005 f89e 	bl	800750c <HAL_UART_Receive_IT>
 80023d0:	0003      	movs	r3, r0
 80023d2:	7023      	strb	r3, [r4, #0]
	tickdelay = HAL_GetTick() + 5000;
 80023d4:	f001 ffaa 	bl	800432c <HAL_GetTick>
 80023d8:	0003      	movs	r3, r0
 80023da:	4a35      	ldr	r2, [pc, #212]	; (80024b0 <tcpConnect+0x154>)
 80023dc:	189a      	adds	r2, r3, r2
 80023de:	4b35      	ldr	r3, [pc, #212]	; (80024b4 <tcpConnect+0x158>)
 80023e0:	601a      	str	r2, [r3, #0]
	while ((strstr(receiveBuffer, "OK") == 0
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	4a34      	ldr	r2, [pc, #208]	; (80024b8 <tcpConnect+0x15c>)
 80023e6:	4b2d      	ldr	r3, [pc, #180]	; (800249c <tcpConnect+0x140>)
 80023e8:	0011      	movs	r1, r2
 80023ea:	0018      	movs	r0, r3
 80023ec:	f007 fc06 	bl	8009bfc <strstr>
 80023f0:	1e03      	subs	r3, r0, #0
 80023f2:	d10e      	bne.n	8002412 <tcpConnect+0xb6>
			&& strstr(receiveBuffer, "ERROR") == 0)
 80023f4:	4a31      	ldr	r2, [pc, #196]	; (80024bc <tcpConnect+0x160>)
 80023f6:	4b29      	ldr	r3, [pc, #164]	; (800249c <tcpConnect+0x140>)
 80023f8:	0011      	movs	r1, r2
 80023fa:	0018      	movs	r0, r3
 80023fc:	f007 fbfe 	bl	8009bfc <strstr>
 8002400:	1e03      	subs	r3, r0, #0
 8002402:	d106      	bne.n	8002412 <tcpConnect+0xb6>
			&& HAL_GetTick() <= tickdelay)
 8002404:	f001 ff92 	bl	800432c <HAL_GetTick>
 8002408:	0002      	movs	r2, r0
 800240a:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <tcpConnect+0x158>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d9e8      	bls.n	80023e4 <tcpConnect+0x88>
		;		// Hold for read

	// Check answer
	if (uartRet != HAL_ERROR) {
 8002412:	230f      	movs	r3, #15
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d037      	beq.n	800248c <tcpConnect+0x130>
		if (strstr(receiveBuffer, "busy")) {
 800241c:	4a28      	ldr	r2, [pc, #160]	; (80024c0 <tcpConnect+0x164>)
 800241e:	4b1f      	ldr	r3, [pc, #124]	; (800249c <tcpConnect+0x140>)
 8002420:	0011      	movs	r1, r2
 8002422:	0018      	movs	r0, r3
 8002424:	f007 fbea 	bl	8009bfc <strstr>
 8002428:	1e03      	subs	r3, r0, #0
 800242a:	d005      	beq.n	8002438 <tcpConnect+0xdc>
			// Update User
			consoleSend("Error connecting to TCP server Busy...\n");
 800242c:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <tcpConnect+0x168>)
 800242e:	0018      	movs	r0, r3
 8002430:	f000 fa02 	bl	8002838 <consoleSend>
			return false;
 8002434:	2300      	movs	r3, #0
 8002436:	e02a      	b.n	800248e <tcpConnect+0x132>
		} else if (strstr(receiveBuffer, "ALREADY CONN")) {
 8002438:	4a23      	ldr	r2, [pc, #140]	; (80024c8 <tcpConnect+0x16c>)
 800243a:	4b18      	ldr	r3, [pc, #96]	; (800249c <tcpConnect+0x140>)
 800243c:	0011      	movs	r1, r2
 800243e:	0018      	movs	r0, r3
 8002440:	f007 fbdc 	bl	8009bfc <strstr>
 8002444:	1e03      	subs	r3, r0, #0
 8002446:	d005      	beq.n	8002454 <tcpConnect+0xf8>
			// Update User
			consoleSend("Already connected to TCP Server\n");
 8002448:	4b20      	ldr	r3, [pc, #128]	; (80024cc <tcpConnect+0x170>)
 800244a:	0018      	movs	r0, r3
 800244c:	f000 f9f4 	bl	8002838 <consoleSend>
			return true;
 8002450:	2301      	movs	r3, #1
 8002452:	e01c      	b.n	800248e <tcpConnect+0x132>
		} else if (strstr(receiveBuffer, "ERR")) {
 8002454:	4a1e      	ldr	r2, [pc, #120]	; (80024d0 <tcpConnect+0x174>)
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <tcpConnect+0x140>)
 8002458:	0011      	movs	r1, r2
 800245a:	0018      	movs	r0, r3
 800245c:	f007 fbce 	bl	8009bfc <strstr>
 8002460:	1e03      	subs	r3, r0, #0
 8002462:	d005      	beq.n	8002470 <tcpConnect+0x114>
			// Update User
			consoleSend("Error connecting to TCP server\n");
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <tcpConnect+0x178>)
 8002466:	0018      	movs	r0, r3
 8002468:	f000 f9e6 	bl	8002838 <consoleSend>
			return false;
 800246c:	2300      	movs	r3, #0
 800246e:	e00e      	b.n	800248e <tcpConnect+0x132>
		} else if (strstr(receiveBuffer, "OK")) {
 8002470:	4a11      	ldr	r2, [pc, #68]	; (80024b8 <tcpConnect+0x15c>)
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <tcpConnect+0x140>)
 8002474:	0011      	movs	r1, r2
 8002476:	0018      	movs	r0, r3
 8002478:	f007 fbc0 	bl	8009bfc <strstr>
 800247c:	1e03      	subs	r3, r0, #0
 800247e:	d005      	beq.n	800248c <tcpConnect+0x130>
			// Update User
			consoleSend("Connected to TCP Server\n");
 8002480:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <tcpConnect+0x17c>)
 8002482:	0018      	movs	r0, r3
 8002484:	f000 f9d8 	bl	8002838 <consoleSend>
			return true;
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <tcpConnect+0x132>
		}
	}

	return false;
 800248c:	2300      	movs	r3, #0
}
 800248e:	0018      	movs	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	b005      	add	sp, #20
 8002494:	bd90      	pop	{r4, r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	20000250 	.word	0x20000250
 800249c:	20001474 	.word	0x20001474
 80024a0:	20000000 	.word	0x20000000
 80024a4:	0800b564 	.word	0x0800b564
 80024a8:	0800b580 	.word	0x0800b580
 80024ac:	20001334 	.word	0x20001334
 80024b0:	00001388 	.word	0x00001388
 80024b4:	200001fc 	.word	0x200001fc
 80024b8:	0800b508 	.word	0x0800b508
 80024bc:	0800b50c 	.word	0x0800b50c
 80024c0:	0800b5a0 	.word	0x0800b5a0
 80024c4:	0800b5a8 	.word	0x0800b5a8
 80024c8:	0800b5d0 	.word	0x0800b5d0
 80024cc:	0800b5e0 	.word	0x0800b5e0
 80024d0:	0800b544 	.word	0x0800b544
 80024d4:	0800b604 	.word	0x0800b604
 80024d8:	0800b624 	.word	0x0800b624

080024dc <tcpSend>:
 * @param  pressure: Pressure value
 * @param  lux: Light level
 * @param  missedCyl: Minutes data could not be stored on the database
 * @retval bool: Data send successfully or not successfully
 */
bool tcpSend(float temp, float humid, float pressure, float lux, int missedCyl) {
 80024dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024de:	46c6      	mov	lr, r8
 80024e0:	b500      	push	{lr}
 80024e2:	b0ac      	sub	sp, #176	; 0xb0
 80024e4:	af0a      	add	r7, sp, #40	; 0x28
 80024e6:	6278      	str	r0, [r7, #36]	; 0x24
 80024e8:	6239      	str	r1, [r7, #32]
 80024ea:	61fa      	str	r2, [r7, #28]
 80024ec:	61bb      	str	r3, [r7, #24]
	// Variables
	static char sendBuffer[20];
	memcpy(sendBuffer, "", sizeof(sendBuffer));
 80024ee:	4bbf      	ldr	r3, [pc, #764]	; (80027ec <tcpSend+0x310>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	3304      	adds	r3, #4
 80024f6:	2210      	movs	r2, #16
 80024f8:	2100      	movs	r1, #0
 80024fa:	0018      	movs	r0, r3
 80024fc:	f006 fee5 	bl	80092ca <memset>
	clearChar(receiveBuffer, sizeof(receiveBuffer));
 8002500:	4bbb      	ldr	r3, [pc, #748]	; (80027f0 <tcpSend+0x314>)
 8002502:	21c8      	movs	r1, #200	; 0xc8
 8002504:	0018      	movs	r0, r3
 8002506:	f000 f9af 	bl	8002868 <clearChar>

	HAL_StatusTypeDef uartRet;

	static char dataOut[100];									// Data for post
	int dataLength = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	2284      	movs	r2, #132	; 0x84
 800250e:	18ba      	adds	r2, r7, r2
 8002510:	6013      	str	r3, [r2, #0]

	const char headerOut[] = "POST /weerstationPost.php HTTP/1.1\r\n";// Post header
 8002512:	2544      	movs	r5, #68	; 0x44
 8002514:	2410      	movs	r4, #16
 8002516:	2308      	movs	r3, #8
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	191a      	adds	r2, r3, r4
 800251c:	1953      	adds	r3, r2, r5
 800251e:	4ab5      	ldr	r2, [pc, #724]	; (80027f4 <tcpSend+0x318>)
 8002520:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002522:	c313      	stmia	r3!, {r0, r1, r4}
 8002524:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002526:	c313      	stmia	r3!, {r0, r1, r4}
 8002528:	ca13      	ldmia	r2!, {r0, r1, r4}
 800252a:	c313      	stmia	r3!, {r0, r1, r4}
 800252c:	7812      	ldrb	r2, [r2, #0]
 800252e:	701a      	strb	r2, [r3, #0]
	static char hostOut[30];								// Host IP for post
	const char contentOut[] =
 8002530:	2610      	movs	r6, #16
 8002532:	2410      	movs	r4, #16
 8002534:	2308      	movs	r3, #8
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	191a      	adds	r2, r3, r4
 800253a:	1992      	adds	r2, r2, r6
 800253c:	4bae      	ldr	r3, [pc, #696]	; (80027f8 <tcpSend+0x31c>)
 800253e:	0010      	movs	r0, r2
 8002540:	0019      	movs	r1, r3
 8002542:	2332      	movs	r3, #50	; 0x32
 8002544:	001a      	movs	r2, r3
 8002546:	f006 feb7 	bl	80092b8 <memcpy>
			"Content-Type: application/x-www-form-urlencoded\r\n";// Content Type for post
	static char dataLenOut[30] = "";			// Length of dataOut for post

	// Create commands
	memcpy(dataOut, "", sizeof(dataOut));
 800254a:	4bac      	ldr	r3, [pc, #688]	; (80027fc <tcpSend+0x320>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	3304      	adds	r3, #4
 8002552:	2260      	movs	r2, #96	; 0x60
 8002554:	2100      	movs	r1, #0
 8002556:	0018      	movs	r0, r3
 8002558:	f006 feb7 	bl	80092ca <memset>
	snprintf(dataOut, sizeof(dataOut),
 800255c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800255e:	f7ff fd37 	bl	8001fd0 <__aeabi_f2d>
 8002562:	0004      	movs	r4, r0
 8002564:	000d      	movs	r5, r1
 8002566:	6a38      	ldr	r0, [r7, #32]
 8002568:	f7ff fd32 	bl	8001fd0 <__aeabi_f2d>
 800256c:	6138      	str	r0, [r7, #16]
 800256e:	6179      	str	r1, [r7, #20]
 8002570:	69f8      	ldr	r0, [r7, #28]
 8002572:	f7ff fd2d 	bl	8001fd0 <__aeabi_f2d>
 8002576:	60b8      	str	r0, [r7, #8]
 8002578:	60f9      	str	r1, [r7, #12]
 800257a:	69b8      	ldr	r0, [r7, #24]
 800257c:	f7ff fd28 	bl	8001fd0 <__aeabi_f2d>
 8002580:	6038      	str	r0, [r7, #0]
 8002582:	6079      	str	r1, [r7, #4]
 8002584:	4e9e      	ldr	r6, [pc, #632]	; (8002800 <tcpSend+0x324>)
 8002586:	489d      	ldr	r0, [pc, #628]	; (80027fc <tcpSend+0x320>)
 8002588:	2188      	movs	r1, #136	; 0x88
 800258a:	2210      	movs	r2, #16
 800258c:	4694      	mov	ip, r2
 800258e:	2308      	movs	r3, #8
 8002590:	4698      	mov	r8, r3
 8002592:	44b8      	add	r8, r7
 8002594:	44c4      	add	ip, r8
 8002596:	4461      	add	r1, ip
 8002598:	6809      	ldr	r1, [r1, #0]
 800259a:	9108      	str	r1, [sp, #32]
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	9206      	str	r2, [sp, #24]
 80025a2:	9307      	str	r3, [sp, #28]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	9204      	str	r2, [sp, #16]
 80025aa:	9305      	str	r3, [sp, #20]
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	9202      	str	r2, [sp, #8]
 80025b2:	9303      	str	r3, [sp, #12]
 80025b4:	9400      	str	r4, [sp, #0]
 80025b6:	9501      	str	r5, [sp, #4]
 80025b8:	0032      	movs	r2, r6
 80025ba:	2164      	movs	r1, #100	; 0x64
 80025bc:	f007 faec 	bl	8009b98 <sniprintf>
			"api_key=tPmAT5Ab3j7F9&temp=%0.2f&humid=%0.2f&pressure=%0.2f&lux=%0.2f&date=%d",
			temp, humid, pressure, lux, missedCyl);	// Set data

	memcpy(hostOut, "", sizeof(hostOut));
 80025c0:	4b90      	ldr	r3, [pc, #576]	; (8002804 <tcpSend+0x328>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	3304      	adds	r3, #4
 80025c8:	221a      	movs	r2, #26
 80025ca:	2100      	movs	r1, #0
 80025cc:	0018      	movs	r0, r3
 80025ce:	f006 fe7c 	bl	80092ca <memset>
	snprintf(hostOut, sizeof(hostOut), "Host: %s\r\n", hostIP);	// Set Host IP
 80025d2:	4b8d      	ldr	r3, [pc, #564]	; (8002808 <tcpSend+0x32c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a8d      	ldr	r2, [pc, #564]	; (800280c <tcpSend+0x330>)
 80025d8:	488a      	ldr	r0, [pc, #552]	; (8002804 <tcpSend+0x328>)
 80025da:	211e      	movs	r1, #30
 80025dc:	f007 fadc 	bl	8009b98 <sniprintf>

	memcpy(dataLenOut, "", sizeof(dataLenOut));
 80025e0:	4b8b      	ldr	r3, [pc, #556]	; (8002810 <tcpSend+0x334>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	3304      	adds	r3, #4
 80025e8:	221a      	movs	r2, #26
 80025ea:	2100      	movs	r1, #0
 80025ec:	0018      	movs	r0, r3
 80025ee:	f006 fe6c 	bl	80092ca <memset>
	snprintf(dataLenOut, sizeof(dataLenOut), "Content-Length: %d\r\n\r\n",
 80025f2:	4b82      	ldr	r3, [pc, #520]	; (80027fc <tcpSend+0x320>)
 80025f4:	0018      	movs	r0, r3
 80025f6:	f7fd fd87 	bl	8000108 <strlen>
 80025fa:	0003      	movs	r3, r0
 80025fc:	4a85      	ldr	r2, [pc, #532]	; (8002814 <tcpSend+0x338>)
 80025fe:	4884      	ldr	r0, [pc, #528]	; (8002810 <tcpSend+0x334>)
 8002600:	211e      	movs	r1, #30
 8002602:	f007 fac9 	bl	8009b98 <sniprintf>
			strlen(dataOut));	// Get data length

	strcat(dataOut, "\r\n");										// Add Tale
 8002606:	4b7d      	ldr	r3, [pc, #500]	; (80027fc <tcpSend+0x320>)
 8002608:	0018      	movs	r0, r3
 800260a:	f7fd fd7d 	bl	8000108 <strlen>
 800260e:	0003      	movs	r3, r0
 8002610:	001a      	movs	r2, r3
 8002612:	4b7a      	ldr	r3, [pc, #488]	; (80027fc <tcpSend+0x320>)
 8002614:	18d2      	adds	r2, r2, r3
 8002616:	4b80      	ldr	r3, [pc, #512]	; (8002818 <tcpSend+0x33c>)
 8002618:	0010      	movs	r0, r2
 800261a:	0019      	movs	r1, r3
 800261c:	2303      	movs	r3, #3
 800261e:	001a      	movs	r2, r3
 8002620:	f006 fe4a 	bl	80092b8 <memcpy>

	dataLength = strlen(headerOut) + strlen(hostOut) + strlen(contentOut)
 8002624:	2544      	movs	r5, #68	; 0x44
 8002626:	2410      	movs	r4, #16
 8002628:	2308      	movs	r3, #8
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	191a      	adds	r2, r3, r4
 800262e:	1953      	adds	r3, r2, r5
 8002630:	0018      	movs	r0, r3
 8002632:	f7fd fd69 	bl	8000108 <strlen>
 8002636:	0004      	movs	r4, r0
 8002638:	4b72      	ldr	r3, [pc, #456]	; (8002804 <tcpSend+0x328>)
 800263a:	0018      	movs	r0, r3
 800263c:	f7fd fd64 	bl	8000108 <strlen>
 8002640:	0003      	movs	r3, r0
 8002642:	18e4      	adds	r4, r4, r3
 8002644:	2610      	movs	r6, #16
 8002646:	2310      	movs	r3, #16
 8002648:	2208      	movs	r2, #8
 800264a:	18ba      	adds	r2, r7, r2
 800264c:	18d2      	adds	r2, r2, r3
 800264e:	1993      	adds	r3, r2, r6
 8002650:	0018      	movs	r0, r3
 8002652:	f7fd fd59 	bl	8000108 <strlen>
 8002656:	0003      	movs	r3, r0
 8002658:	18e4      	adds	r4, r4, r3
			+ strlen(dataLenOut) + strlen(dataOut);
 800265a:	4b6d      	ldr	r3, [pc, #436]	; (8002810 <tcpSend+0x334>)
 800265c:	0018      	movs	r0, r3
 800265e:	f7fd fd53 	bl	8000108 <strlen>
 8002662:	0003      	movs	r3, r0
 8002664:	18e4      	adds	r4, r4, r3
 8002666:	4b65      	ldr	r3, [pc, #404]	; (80027fc <tcpSend+0x320>)
 8002668:	0018      	movs	r0, r3
 800266a:	f7fd fd4d 	bl	8000108 <strlen>
 800266e:	0003      	movs	r3, r0
 8002670:	18e3      	adds	r3, r4, r3
	dataLength = strlen(headerOut) + strlen(hostOut) + strlen(contentOut)
 8002672:	2284      	movs	r2, #132	; 0x84
 8002674:	18ba      	adds	r2, r7, r2
 8002676:	6013      	str	r3, [r2, #0]

	snprintf(sendBuffer, sizeof(sendBuffer), "AT+CIPSEND=%d\r\n", dataLength);
 8002678:	2384      	movs	r3, #132	; 0x84
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a67      	ldr	r2, [pc, #412]	; (800281c <tcpSend+0x340>)
 8002680:	485a      	ldr	r0, [pc, #360]	; (80027ec <tcpSend+0x310>)
 8002682:	2114      	movs	r1, #20
 8002684:	f007 fa88 	bl	8009b98 <sniprintf>

	// Update User
	consoleSend("Sending HTTP Post...\n");
 8002688:	4b65      	ldr	r3, [pc, #404]	; (8002820 <tcpSend+0x344>)
 800268a:	0018      	movs	r0, r3
 800268c:	f000 f8d4 	bl	8002838 <consoleSend>

	// Send commands
	HAL_UART_Transmit(&huart1, (uint8_t*) sendBuffer, strlen(sendBuffer), 10);// Send start command
 8002690:	4b56      	ldr	r3, [pc, #344]	; (80027ec <tcpSend+0x310>)
 8002692:	0018      	movs	r0, r3
 8002694:	f7fd fd38 	bl	8000108 <strlen>
 8002698:	0003      	movs	r3, r0
 800269a:	b29a      	uxth	r2, r3
 800269c:	4953      	ldr	r1, [pc, #332]	; (80027ec <tcpSend+0x310>)
 800269e:	4861      	ldr	r0, [pc, #388]	; (8002824 <tcpSend+0x348>)
 80026a0:	230a      	movs	r3, #10
 80026a2:	f004 fe8b 	bl	80073bc <HAL_UART_Transmit>
	HAL_Delay(2);
 80026a6:	2002      	movs	r0, #2
 80026a8:	f001 fe4a 	bl	8004340 <HAL_Delay>

	HAL_UART_Transmit(&huart1, (uint8_t*) headerOut, strlen(headerOut), 10);
 80026ac:	2410      	movs	r4, #16
 80026ae:	2308      	movs	r3, #8
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	191b      	adds	r3, r3, r4
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	0018      	movs	r0, r3
 80026b8:	f7fd fd26 	bl	8000108 <strlen>
 80026bc:	0003      	movs	r3, r0
 80026be:	b29a      	uxth	r2, r3
 80026c0:	2308      	movs	r3, #8
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	191b      	adds	r3, r3, r4
 80026c6:	1959      	adds	r1, r3, r5
 80026c8:	4856      	ldr	r0, [pc, #344]	; (8002824 <tcpSend+0x348>)
 80026ca:	230a      	movs	r3, #10
 80026cc:	f004 fe76 	bl	80073bc <HAL_UART_Transmit>
	HAL_Delay(2);
 80026d0:	2002      	movs	r0, #2
 80026d2:	f001 fe35 	bl	8004340 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) hostOut, strlen(hostOut), 10);
 80026d6:	4b4b      	ldr	r3, [pc, #300]	; (8002804 <tcpSend+0x328>)
 80026d8:	0018      	movs	r0, r3
 80026da:	f7fd fd15 	bl	8000108 <strlen>
 80026de:	0003      	movs	r3, r0
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	4948      	ldr	r1, [pc, #288]	; (8002804 <tcpSend+0x328>)
 80026e4:	484f      	ldr	r0, [pc, #316]	; (8002824 <tcpSend+0x348>)
 80026e6:	230a      	movs	r3, #10
 80026e8:	f004 fe68 	bl	80073bc <HAL_UART_Transmit>
	HAL_Delay(2);
 80026ec:	2002      	movs	r0, #2
 80026ee:	f001 fe27 	bl	8004340 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) contentOut, strlen(contentOut), 10);
 80026f2:	2308      	movs	r3, #8
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	191b      	adds	r3, r3, r4
 80026f8:	199b      	adds	r3, r3, r6
 80026fa:	0018      	movs	r0, r3
 80026fc:	f7fd fd04 	bl	8000108 <strlen>
 8002700:	0003      	movs	r3, r0
 8002702:	b29a      	uxth	r2, r3
 8002704:	2308      	movs	r3, #8
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	191b      	adds	r3, r3, r4
 800270a:	1999      	adds	r1, r3, r6
 800270c:	4845      	ldr	r0, [pc, #276]	; (8002824 <tcpSend+0x348>)
 800270e:	230a      	movs	r3, #10
 8002710:	f004 fe54 	bl	80073bc <HAL_UART_Transmit>
	HAL_Delay(2);
 8002714:	2002      	movs	r0, #2
 8002716:	f001 fe13 	bl	8004340 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) dataLenOut, strlen(dataLenOut), 10);
 800271a:	4b3d      	ldr	r3, [pc, #244]	; (8002810 <tcpSend+0x334>)
 800271c:	0018      	movs	r0, r3
 800271e:	f7fd fcf3 	bl	8000108 <strlen>
 8002722:	0003      	movs	r3, r0
 8002724:	b29a      	uxth	r2, r3
 8002726:	493a      	ldr	r1, [pc, #232]	; (8002810 <tcpSend+0x334>)
 8002728:	483e      	ldr	r0, [pc, #248]	; (8002824 <tcpSend+0x348>)
 800272a:	230a      	movs	r3, #10
 800272c:	f004 fe46 	bl	80073bc <HAL_UART_Transmit>
	HAL_Delay(2);
 8002730:	2002      	movs	r0, #2
 8002732:	f001 fe05 	bl	8004340 <HAL_Delay>

	// Reset UART1
	HAL_UART_AbortReceive(&huart1);
 8002736:	4b3b      	ldr	r3, [pc, #236]	; (8002824 <tcpSend+0x348>)
 8002738:	0018      	movs	r0, r3
 800273a:	f004 ff8b 	bl	8007654 <HAL_UART_AbortReceive>

	// Last Send
	HAL_UART_Transmit(&huart1, (uint8_t*) dataOut, strlen(dataOut), 10);
 800273e:	4b2f      	ldr	r3, [pc, #188]	; (80027fc <tcpSend+0x320>)
 8002740:	0018      	movs	r0, r3
 8002742:	f7fd fce1 	bl	8000108 <strlen>
 8002746:	0003      	movs	r3, r0
 8002748:	b29a      	uxth	r2, r3
 800274a:	492c      	ldr	r1, [pc, #176]	; (80027fc <tcpSend+0x320>)
 800274c:	4835      	ldr	r0, [pc, #212]	; (8002824 <tcpSend+0x348>)
 800274e:	230a      	movs	r3, #10
 8002750:	f004 fe34 	bl	80073bc <HAL_UART_Transmit>

	// Receive answer
	uartRet = HAL_UART_Receive_IT(&huart1, (uint8_t*) receiveBuffer, 200);
 8002754:	236b      	movs	r3, #107	; 0x6b
 8002756:	2208      	movs	r2, #8
 8002758:	18ba      	adds	r2, r7, r2
 800275a:	1912      	adds	r2, r2, r4
 800275c:	18d4      	adds	r4, r2, r3
 800275e:	4924      	ldr	r1, [pc, #144]	; (80027f0 <tcpSend+0x314>)
 8002760:	4b30      	ldr	r3, [pc, #192]	; (8002824 <tcpSend+0x348>)
 8002762:	22c8      	movs	r2, #200	; 0xc8
 8002764:	0018      	movs	r0, r3
 8002766:	f004 fed1 	bl	800750c <HAL_UART_Receive_IT>
 800276a:	0003      	movs	r3, r0
 800276c:	7023      	strb	r3, [r4, #0]
	tickdelay = HAL_GetTick() + 2000;
 800276e:	f001 fddd 	bl	800432c <HAL_GetTick>
 8002772:	0003      	movs	r3, r0
 8002774:	22fa      	movs	r2, #250	; 0xfa
 8002776:	00d2      	lsls	r2, r2, #3
 8002778:	189a      	adds	r2, r3, r2
 800277a:	4b2b      	ldr	r3, [pc, #172]	; (8002828 <tcpSend+0x34c>)
 800277c:	601a      	str	r2, [r3, #0]
	while (strstr(receiveBuffer, "200 OK") == 0 && HAL_GetTick() <= tickdelay)
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	4a2a      	ldr	r2, [pc, #168]	; (800282c <tcpSend+0x350>)
 8002782:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <tcpSend+0x314>)
 8002784:	0011      	movs	r1, r2
 8002786:	0018      	movs	r0, r3
 8002788:	f007 fa38 	bl	8009bfc <strstr>
 800278c:	1e03      	subs	r3, r0, #0
 800278e:	d106      	bne.n	800279e <tcpSend+0x2c2>
 8002790:	f001 fdcc 	bl	800432c <HAL_GetTick>
 8002794:	0002      	movs	r2, r0
 8002796:	4b24      	ldr	r3, [pc, #144]	; (8002828 <tcpSend+0x34c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d9f0      	bls.n	8002780 <tcpSend+0x2a4>
		;		// Hold for read

	// Check answer
	if (uartRet != HAL_ERROR) {
 800279e:	236b      	movs	r3, #107	; 0x6b
 80027a0:	2210      	movs	r2, #16
 80027a2:	4694      	mov	ip, r2
 80027a4:	2208      	movs	r2, #8
 80027a6:	4690      	mov	r8, r2
 80027a8:	44b8      	add	r8, r7
 80027aa:	44c4      	add	ip, r8
 80027ac:	4463      	add	r3, ip
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d013      	beq.n	80027dc <tcpSend+0x300>
		if (strstr(receiveBuffer, "200 OK")) {
 80027b4:	4a1d      	ldr	r2, [pc, #116]	; (800282c <tcpSend+0x350>)
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <tcpSend+0x314>)
 80027b8:	0011      	movs	r1, r2
 80027ba:	0018      	movs	r0, r3
 80027bc:	f007 fa1e 	bl	8009bfc <strstr>
 80027c0:	1e03      	subs	r3, r0, #0
 80027c2:	d005      	beq.n	80027d0 <tcpSend+0x2f4>
			// Update User
			consoleSend("Success\n");
 80027c4:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <tcpSend+0x354>)
 80027c6:	0018      	movs	r0, r3
 80027c8:	f000 f836 	bl	8002838 <consoleSend>
			return true;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e006      	b.n	80027de <tcpSend+0x302>
		} else {
			// Update User
			consoleSend("Failed\n");
 80027d0:	4b18      	ldr	r3, [pc, #96]	; (8002834 <tcpSend+0x358>)
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 f830 	bl	8002838 <consoleSend>
			return false;
 80027d8:	2300      	movs	r3, #0
 80027da:	e000      	b.n	80027de <tcpSend+0x302>
		}
	}

	return false;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	0018      	movs	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b022      	add	sp, #136	; 0x88
 80027e4:	bc04      	pop	{r2}
 80027e6:	4690      	mov	r8, r2
 80027e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	20000284 	.word	0x20000284
 80027f0:	20001474 	.word	0x20001474
 80027f4:	0800b6fc 	.word	0x0800b6fc
 80027f8:	0800b724 	.word	0x0800b724
 80027fc:	20000298 	.word	0x20000298
 8002800:	0800b640 	.word	0x0800b640
 8002804:	200002fc 	.word	0x200002fc
 8002808:	20000000 	.word	0x20000000
 800280c:	0800b690 	.word	0x0800b690
 8002810:	2000031c 	.word	0x2000031c
 8002814:	0800b69c 	.word	0x0800b69c
 8002818:	0800b6b4 	.word	0x0800b6b4
 800281c:	0800b6b8 	.word	0x0800b6b8
 8002820:	0800b6c8 	.word	0x0800b6c8
 8002824:	20001334 	.word	0x20001334
 8002828:	200001fc 	.word	0x200001fc
 800282c:	0800b6e0 	.word	0x0800b6e0
 8002830:	0800b6e8 	.word	0x0800b6e8
 8002834:	0800b6f4 	.word	0x0800b6f4

08002838 <consoleSend>:
/**
 * @brief  Function send Uart message to the USB
 * @param  message: Message to send to the Uart
 * @retval None
 */
void consoleSend(char *message) {
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) message, strlen(message), 10);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	0018      	movs	r0, r3
 8002844:	f7fd fc60 	bl	8000108 <strlen>
 8002848:	0003      	movs	r3, r0
 800284a:	b29a      	uxth	r2, r3
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	4805      	ldr	r0, [pc, #20]	; (8002864 <consoleSend+0x2c>)
 8002850:	230a      	movs	r3, #10
 8002852:	f004 fdb3 	bl	80073bc <HAL_UART_Transmit>
	HAL_Delay(10);
 8002856:	200a      	movs	r0, #10
 8002858:	f001 fd72 	bl	8004340 <HAL_Delay>
}
 800285c:	46c0      	nop			; (mov r8, r8)
 800285e:	46bd      	mov	sp, r7
 8002860:	b002      	add	sp, #8
 8002862:	bd80      	pop	{r7, pc}
 8002864:	200013b4 	.word	0x200013b4

08002868 <clearChar>:
 * @brief  Function clear char array
 * @param  arr: char array to be cleared
 * @param  leng: length of the char array
 * @retval None
 */
void clearChar(char *arr, int leng) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < leng; i++) {
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	e007      	b.n	8002888 <clearChar+0x20>
		arr[i] = '\0';
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	18d3      	adds	r3, r2, r3
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < leng; i++) {
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	3301      	adds	r3, #1
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	dbf3      	blt.n	8002878 <clearChar+0x10>
	}
}
 8002890:	46c0      	nop			; (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	b004      	add	sp, #16
 8002896:	bd80      	pop	{r7, pc}

08002898 <Read_Sensor_16_unsigned>:
 * This will be done in two i2c read cycles.
 * @param  sensoradres: address van slave-address
 * @param  sensAddress: address van register-address
 * @retval uint16_t: data
 */
uint16_t Read_Sensor_16_unsigned(uint8_t sensoradres, uint16_t sensAddress) {
 8002898:	b590      	push	{r4, r7, lr}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af02      	add	r7, sp, #8
 800289e:	0002      	movs	r2, r0
 80028a0:	1dfb      	adds	r3, r7, #7
 80028a2:	701a      	strb	r2, [r3, #0]
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	1c0a      	adds	r2, r1, #0
 80028a8:	801a      	strh	r2, [r3, #0]
	uint16_t Data2;
	if (HAL_I2C_IsDeviceReady(&hi2c1, sensAddress, 2, 1000) == HAL_ERROR) {
 80028aa:	23fa      	movs	r3, #250	; 0xfa
 80028ac:	009a      	lsls	r2, r3, #2
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	8819      	ldrh	r1, [r3, #0]
 80028b2:	4829      	ldr	r0, [pc, #164]	; (8002958 <Read_Sensor_16_unsigned+0xc0>)
 80028b4:	0013      	movs	r3, r2
 80028b6:	2202      	movs	r2, #2
 80028b8:	f002 fe72 	bl	80055a0 <HAL_I2C_IsDeviceReady>
 80028bc:	0003      	movs	r3, r0
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d107      	bne.n	80028d2 <Read_Sensor_16_unsigned+0x3a>
		HAL_UART_Transmit(&huart2, (uint8_t*) "I2c error\n",
 80028c2:	4926      	ldr	r1, [pc, #152]	; (800295c <Read_Sensor_16_unsigned+0xc4>)
 80028c4:	4826      	ldr	r0, [pc, #152]	; (8002960 <Read_Sensor_16_unsigned+0xc8>)
 80028c6:	2364      	movs	r3, #100	; 0x64
 80028c8:	220b      	movs	r2, #11
 80028ca:	f004 fd77 	bl	80073bc <HAL_UART_Transmit>
		I2C_MEMADD_SIZE_8BIT, 1000);
		Data2 = (Data[1] << 8) + Data[0];
		return Data2;
	}

	return 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e03d      	b.n	800294e <Read_Sensor_16_unsigned+0xb6>
		Data[0] = sensoradres;
 80028d2:	240c      	movs	r4, #12
 80028d4:	193b      	adds	r3, r7, r4
 80028d6:	1dfa      	adds	r2, r7, #7
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c1, sensAddress, (uint8_t*) &Data[0],
 80028dc:	193a      	adds	r2, r7, r4
 80028de:	1d3b      	adds	r3, r7, #4
 80028e0:	8819      	ldrh	r1, [r3, #0]
 80028e2:	481d      	ldr	r0, [pc, #116]	; (8002958 <Read_Sensor_16_unsigned+0xc0>)
 80028e4:	23fa      	movs	r3, #250	; 0xfa
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	2301      	movs	r3, #1
 80028ec:	f002 fc48 	bl	8005180 <HAL_I2C_Master_Transmit>
		HAL_Delay(200);
 80028f0:	20c8      	movs	r0, #200	; 0xc8
 80028f2:	f001 fd25 	bl	8004340 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, sensAddress, (uint8_t*) &Data[0],
 80028f6:	193a      	adds	r2, r7, r4
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	8819      	ldrh	r1, [r3, #0]
 80028fc:	4816      	ldr	r0, [pc, #88]	; (8002958 <Read_Sensor_16_unsigned+0xc0>)
 80028fe:	23fa      	movs	r3, #250	; 0xfa
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	2301      	movs	r3, #1
 8002906:	f002 fd43 	bl	8005390 <HAL_I2C_Master_Receive>
		HAL_Delay(200);
 800290a:	20c8      	movs	r0, #200	; 0xc8
 800290c:	f001 fd18 	bl	8004340 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, sensAddress |= 0x01, (uint8_t*) &Data[1],
 8002910:	1d3b      	adds	r3, r7, #4
 8002912:	1d3a      	adds	r2, r7, #4
 8002914:	8812      	ldrh	r2, [r2, #0]
 8002916:	2101      	movs	r1, #1
 8002918:	430a      	orrs	r2, r1
 800291a:	801a      	strh	r2, [r3, #0]
 800291c:	193b      	adds	r3, r7, r4
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	1d3b      	adds	r3, r7, #4
 8002922:	8819      	ldrh	r1, [r3, #0]
 8002924:	480c      	ldr	r0, [pc, #48]	; (8002958 <Read_Sensor_16_unsigned+0xc0>)
 8002926:	23fa      	movs	r3, #250	; 0xfa
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	2301      	movs	r3, #1
 800292e:	f002 fd2f 	bl	8005390 <HAL_I2C_Master_Receive>
		Data2 = (Data[1] << 8) + Data[0];
 8002932:	193b      	adds	r3, r7, r4
 8002934:	785b      	ldrb	r3, [r3, #1]
 8002936:	b29b      	uxth	r3, r3
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	b299      	uxth	r1, r3
 800293c:	193b      	adds	r3, r7, r4
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	b29a      	uxth	r2, r3
 8002942:	2016      	movs	r0, #22
 8002944:	183b      	adds	r3, r7, r0
 8002946:	188a      	adds	r2, r1, r2
 8002948:	801a      	strh	r2, [r3, #0]
		return Data2;
 800294a:	183b      	adds	r3, r7, r0
 800294c:	881b      	ldrh	r3, [r3, #0]
}
 800294e:	0018      	movs	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	b007      	add	sp, #28
 8002954:	bd90      	pop	{r4, r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	200012e8 	.word	0x200012e8
 800295c:	0800b758 	.word	0x0800b758
 8002960:	200013b4 	.word	0x200013b4

08002964 <Read_Sensor_16_signed>:
 * This will be done in two i2c read cycles.
 * @param  sensoradres: address van slave-address
 * @param  sensAddress: address van register-address
 * @retval int16_t: data
 */
int16_t Read_Sensor_16_signed(uint8_t sensoradres, uint16_t sensAddress) {
 8002964:	b590      	push	{r4, r7, lr}
 8002966:	b089      	sub	sp, #36	; 0x24
 8002968:	af02      	add	r7, sp, #8
 800296a:	0002      	movs	r2, r0
 800296c:	1dfb      	adds	r3, r7, #7
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	1d3b      	adds	r3, r7, #4
 8002972:	1c0a      	adds	r2, r1, #0
 8002974:	801a      	strh	r2, [r3, #0]
	int16_t Data2;
	if (HAL_I2C_IsDeviceReady(&hi2c1, sensAddress, 2, 1000) == HAL_ERROR) {
 8002976:	23fa      	movs	r3, #250	; 0xfa
 8002978:	009a      	lsls	r2, r3, #2
 800297a:	1d3b      	adds	r3, r7, #4
 800297c:	8819      	ldrh	r1, [r3, #0]
 800297e:	482a      	ldr	r0, [pc, #168]	; (8002a28 <Read_Sensor_16_signed+0xc4>)
 8002980:	0013      	movs	r3, r2
 8002982:	2202      	movs	r2, #2
 8002984:	f002 fe0c 	bl	80055a0 <HAL_I2C_IsDeviceReady>
 8002988:	0003      	movs	r3, r0
 800298a:	2b01      	cmp	r3, #1
 800298c:	d107      	bne.n	800299e <Read_Sensor_16_signed+0x3a>
		HAL_UART_Transmit(&huart2, (uint8_t*) "I2c error\n",
 800298e:	4927      	ldr	r1, [pc, #156]	; (8002a2c <Read_Sensor_16_signed+0xc8>)
 8002990:	4827      	ldr	r0, [pc, #156]	; (8002a30 <Read_Sensor_16_signed+0xcc>)
 8002992:	2364      	movs	r3, #100	; 0x64
 8002994:	220b      	movs	r2, #11
 8002996:	f004 fd11 	bl	80073bc <HAL_UART_Transmit>
		I2C_MEMADD_SIZE_8BIT, 1000);
		Data2 = (Data[1] << 8) + (Data[0]);
		return Data2;
	}

	return 0;
 800299a:	2300      	movs	r3, #0
 800299c:	e03f      	b.n	8002a1e <Read_Sensor_16_signed+0xba>
		Data[0] = sensoradres;
 800299e:	240c      	movs	r4, #12
 80029a0:	193b      	adds	r3, r7, r4
 80029a2:	1dfa      	adds	r2, r7, #7
 80029a4:	7812      	ldrb	r2, [r2, #0]
 80029a6:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c1, sensAddress, (uint8_t*) &Data[0],
 80029a8:	193a      	adds	r2, r7, r4
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	8819      	ldrh	r1, [r3, #0]
 80029ae:	481e      	ldr	r0, [pc, #120]	; (8002a28 <Read_Sensor_16_signed+0xc4>)
 80029b0:	23fa      	movs	r3, #250	; 0xfa
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	2301      	movs	r3, #1
 80029b8:	f002 fbe2 	bl	8005180 <HAL_I2C_Master_Transmit>
		HAL_Delay(200);
 80029bc:	20c8      	movs	r0, #200	; 0xc8
 80029be:	f001 fcbf 	bl	8004340 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, sensAddress, (uint8_t*) &Data[0],
 80029c2:	193a      	adds	r2, r7, r4
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	8819      	ldrh	r1, [r3, #0]
 80029c8:	4817      	ldr	r0, [pc, #92]	; (8002a28 <Read_Sensor_16_signed+0xc4>)
 80029ca:	23fa      	movs	r3, #250	; 0xfa
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	2301      	movs	r3, #1
 80029d2:	f002 fcdd 	bl	8005390 <HAL_I2C_Master_Receive>
		HAL_Delay(200);
 80029d6:	20c8      	movs	r0, #200	; 0xc8
 80029d8:	f001 fcb2 	bl	8004340 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, sensAddress |= 0x01, (uint8_t*) &Data[1],
 80029dc:	1d3b      	adds	r3, r7, #4
 80029de:	1d3a      	adds	r2, r7, #4
 80029e0:	8812      	ldrh	r2, [r2, #0]
 80029e2:	2101      	movs	r1, #1
 80029e4:	430a      	orrs	r2, r1
 80029e6:	801a      	strh	r2, [r3, #0]
 80029e8:	193b      	adds	r3, r7, r4
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	8819      	ldrh	r1, [r3, #0]
 80029f0:	480d      	ldr	r0, [pc, #52]	; (8002a28 <Read_Sensor_16_signed+0xc4>)
 80029f2:	23fa      	movs	r3, #250	; 0xfa
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2301      	movs	r3, #1
 80029fa:	f002 fcc9 	bl	8005390 <HAL_I2C_Master_Receive>
		Data2 = (Data[1] << 8) + (Data[0]);
 80029fe:	193b      	adds	r3, r7, r4
 8002a00:	785b      	ldrb	r3, [r3, #1]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	021b      	lsls	r3, r3, #8
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	18d3      	adds	r3, r2, r3
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	2116      	movs	r1, #22
 8002a14:	187b      	adds	r3, r7, r1
 8002a16:	801a      	strh	r2, [r3, #0]
		return Data2;
 8002a18:	187b      	adds	r3, r7, r1
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002a1e:	0018      	movs	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b007      	add	sp, #28
 8002a24:	bd90      	pop	{r4, r7, pc}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	200012e8 	.word	0x200012e8
 8002a2c:	0800b758 	.word	0x0800b758
 8002a30:	200013b4 	.word	0x200013b4

08002a34 <Read_Sensor_20>:
 * This will be done in two i2c read cycles.
 * @param  sensoradres: address van slave-address
 * @param  sensAddress: address van register-address
 * @retval double: Pressure value
 */
int Read_Sensor_20(uint8_t sensoradres, uint16_t sensAddress) {
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b089      	sub	sp, #36	; 0x24
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	0002      	movs	r2, r0
 8002a3c:	1dfb      	adds	r3, r7, #7
 8002a3e:	701a      	strb	r2, [r3, #0]
 8002a40:	1d3b      	adds	r3, r7, #4
 8002a42:	1c0a      	adds	r2, r1, #0
 8002a44:	801a      	strh	r2, [r3, #0]
	int Data2;
	if (HAL_I2C_IsDeviceReady(&hi2c1, sensAddress, 2, 1000) == HAL_ERROR) {
 8002a46:	23fa      	movs	r3, #250	; 0xfa
 8002a48:	009a      	lsls	r2, r3, #2
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	8819      	ldrh	r1, [r3, #0]
 8002a4e:	4838      	ldr	r0, [pc, #224]	; (8002b30 <Read_Sensor_20+0xfc>)
 8002a50:	0013      	movs	r3, r2
 8002a52:	2202      	movs	r2, #2
 8002a54:	f002 fda4 	bl	80055a0 <HAL_I2C_IsDeviceReady>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d107      	bne.n	8002a6e <Read_Sensor_20+0x3a>

		HAL_UART_Transmit(&huart2, (uint8_t*) "I2c error\n",
 8002a5e:	4935      	ldr	r1, [pc, #212]	; (8002b34 <Read_Sensor_20+0x100>)
 8002a60:	4835      	ldr	r0, [pc, #212]	; (8002b38 <Read_Sensor_20+0x104>)
 8002a62:	2364      	movs	r3, #100	; 0x64
 8002a64:	2217      	movs	r2, #23
 8002a66:	f004 fca9 	bl	80073bc <HAL_UART_Transmit>
		I2C_MEMADD_SIZE_8BIT, 1000);
		Data2 = (((Data[0] << 8) + Data[1]) << 4) + (Data[3] >> 3);

		return Data2;
	}
	return 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e05b      	b.n	8002b26 <Read_Sensor_20+0xf2>
		Data[5] = sensoradres;
 8002a6e:	2408      	movs	r4, #8
 8002a70:	193b      	adds	r3, r7, r4
 8002a72:	1dfa      	adds	r2, r7, #7
 8002a74:	7812      	ldrb	r2, [r2, #0]
 8002a76:	715a      	strb	r2, [r3, #5]
		HAL_I2C_Master_Transmit(&hi2c1, sensAddress, (uint8_t*) &Data[5],
 8002a78:	193b      	adds	r3, r7, r4
 8002a7a:	1d5a      	adds	r2, r3, #5
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	8819      	ldrh	r1, [r3, #0]
 8002a80:	482b      	ldr	r0, [pc, #172]	; (8002b30 <Read_Sensor_20+0xfc>)
 8002a82:	23fa      	movs	r3, #250	; 0xfa
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	2301      	movs	r3, #1
 8002a8a:	f002 fb79 	bl	8005180 <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 8002a8e:	2001      	movs	r0, #1
 8002a90:	f001 fc56 	bl	8004340 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, sensAddress, (uint8_t*) &Data[0],
 8002a94:	193a      	adds	r2, r7, r4
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	8819      	ldrh	r1, [r3, #0]
 8002a9a:	4825      	ldr	r0, [pc, #148]	; (8002b30 <Read_Sensor_20+0xfc>)
 8002a9c:	23fa      	movs	r3, #250	; 0xfa
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	f002 fc74 	bl	8005390 <HAL_I2C_Master_Receive>
		HAL_Delay(1);
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	f001 fc49 	bl	8004340 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, sensAddress |= 0x01, (uint8_t*) &Data[1],
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	1d3a      	adds	r2, r7, #4
 8002ab2:	8812      	ldrh	r2, [r2, #0]
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	801a      	strh	r2, [r3, #0]
 8002aba:	193b      	adds	r3, r7, r4
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	1d3b      	adds	r3, r7, #4
 8002ac0:	8819      	ldrh	r1, [r3, #0]
 8002ac2:	481b      	ldr	r0, [pc, #108]	; (8002b30 <Read_Sensor_20+0xfc>)
 8002ac4:	23fa      	movs	r3, #250	; 0xfa
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2301      	movs	r3, #1
 8002acc:	f002 fc60 	bl	8005390 <HAL_I2C_Master_Receive>
		HAL_Delay(1);
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	f001 fc35 	bl	8004340 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c1, sensAddress, (uint8_t*) &Data[5],
 8002ad6:	193b      	adds	r3, r7, r4
 8002ad8:	1d5a      	adds	r2, r3, #5
 8002ada:	1d3b      	adds	r3, r7, #4
 8002adc:	8819      	ldrh	r1, [r3, #0]
 8002ade:	4814      	ldr	r0, [pc, #80]	; (8002b30 <Read_Sensor_20+0xfc>)
 8002ae0:	23fa      	movs	r3, #250	; 0xfa
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	f002 fb4a 	bl	8005180 <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 8002aec:	2001      	movs	r0, #1
 8002aee:	f001 fc27 	bl	8004340 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, sensAddress, (uint8_t*) &Data[3],
 8002af2:	193b      	adds	r3, r7, r4
 8002af4:	1cda      	adds	r2, r3, #3
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	8819      	ldrh	r1, [r3, #0]
 8002afa:	480d      	ldr	r0, [pc, #52]	; (8002b30 <Read_Sensor_20+0xfc>)
 8002afc:	23fa      	movs	r3, #250	; 0xfa
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	2301      	movs	r3, #1
 8002b04:	f002 fc44 	bl	8005390 <HAL_I2C_Master_Receive>
		Data2 = (((Data[0] << 8) + Data[1]) << 4) + (Data[3] >> 3);
 8002b08:	0021      	movs	r1, r4
 8002b0a:	187b      	adds	r3, r7, r1
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	021b      	lsls	r3, r3, #8
 8002b10:	187a      	adds	r2, r7, r1
 8002b12:	7852      	ldrb	r2, [r2, #1]
 8002b14:	189b      	adds	r3, r3, r2
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	187a      	adds	r2, r7, r1
 8002b1a:	78d2      	ldrb	r2, [r2, #3]
 8002b1c:	08d2      	lsrs	r2, r2, #3
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	189b      	adds	r3, r3, r2
 8002b22:	617b      	str	r3, [r7, #20]
		return Data2;
 8002b24:	697b      	ldr	r3, [r7, #20]
}
 8002b26:	0018      	movs	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b007      	add	sp, #28
 8002b2c:	bd90      	pop	{r4, r7, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	200012e8 	.word	0x200012e8
 8002b34:	0800b758 	.word	0x0800b758
 8002b38:	200013b4 	.word	0x200013b4

08002b3c <readFlash_cycles>:
 * @param  cycles_counter: the address of the cycles_counter variable.
 * @param  input: The address of the stored struct.
 * @retval double: Pressure value
 */

void readFlash_cycles(int *cycles_counter, SensorData *input) {
 8002b3c:	b590      	push	{r4, r7, lr}
 8002b3e:	b08b      	sub	sp, #44	; 0x2c
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
	uint8_t Data[10];
	Data[0] = 0x00;
 8002b46:	2414      	movs	r4, #20
 8002b48:	193b      	adds	r3, r7, r4
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
	Data[1] = 0x00;
 8002b4e:	193b      	adds	r3, r7, r4
 8002b50:	2200      	movs	r2, #0
 8002b52:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, 0xA1, (uint8_t*) &Data, 2, 1000);
 8002b54:	193a      	adds	r2, r7, r4
 8002b56:	481a      	ldr	r0, [pc, #104]	; (8002bc0 <readFlash_cycles+0x84>)
 8002b58:	23fa      	movs	r3, #250	; 0xfa
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	2302      	movs	r3, #2
 8002b60:	21a1      	movs	r1, #161	; 0xa1
 8002b62:	f002 fb0d 	bl	8005180 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8002b66:	200a      	movs	r0, #10
 8002b68:	f001 fbea 	bl	8004340 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, 0xA0, (uint8_t*) &Data, 1, 1000);
 8002b6c:	193a      	adds	r2, r7, r4
 8002b6e:	4814      	ldr	r0, [pc, #80]	; (8002bc0 <readFlash_cycles+0x84>)
 8002b70:	23fa      	movs	r3, #250	; 0xfa
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	2301      	movs	r3, #1
 8002b78:	21a0      	movs	r1, #160	; 0xa0
 8002b7a:	f002 fc09 	bl	8005390 <HAL_I2C_Master_Receive>
	HAL_Delay(10);
 8002b7e:	200a      	movs	r0, #10
 8002b80:	f001 fbde 	bl	8004340 <HAL_Delay>

	char Data3[10];
	*cycles_counter = Data[0];
 8002b84:	0021      	movs	r1, r4
 8002b86:	187b      	adds	r3, r7, r1
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	001a      	movs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	601a      	str	r2, [r3, #0]
	itoa(Data[0], Data3, 10);
 8002b90:	187b      	adds	r3, r7, r1
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	0018      	movs	r0, r3
 8002b96:	2408      	movs	r4, #8
 8002b98:	193b      	adds	r3, r7, r4
 8002b9a:	220a      	movs	r2, #10
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	f006 fb87 	bl	80092b0 <itoa>
	HAL_UART_Transmit(&huart2, (uint8_t*) Data3, strlen(Data3), 100);
 8002ba2:	193b      	adds	r3, r7, r4
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f7fd faaf 	bl	8000108 <strlen>
 8002baa:	0003      	movs	r3, r0
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	1939      	adds	r1, r7, r4
 8002bb0:	4804      	ldr	r0, [pc, #16]	; (8002bc4 <readFlash_cycles+0x88>)
 8002bb2:	2364      	movs	r3, #100	; 0x64
 8002bb4:	f004 fc02 	bl	80073bc <HAL_UART_Transmit>

}
 8002bb8:	46c0      	nop			; (mov r8, r8)
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b009      	add	sp, #36	; 0x24
 8002bbe:	bd90      	pop	{r4, r7, pc}
 8002bc0:	200012e8 	.word	0x200012e8
 8002bc4:	200013b4 	.word	0x200013b4

08002bc8 <readFlash_Measure_DATA>:
 *
 * @param  cycles_counter: the address of the cycles_counter variable.
 * @param  input: The address of the stored struct.
 * @retval double: Pressure value
 */
void readFlash_Measure_DATA(int *cycles_counter, SensorData *input) {
 8002bc8:	b590      	push	{r4, r7, lr}
 8002bca:	b08f      	sub	sp, #60	; 0x3c
 8002bcc:	af02      	add	r7, sp, #8
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
	int i = *cycles_counter;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
	float g[4];
	uint8_t Data[10];
	HAL_Delay(1);
 8002bd8:	2001      	movs	r0, #1
 8002bda:	f001 fbb1 	bl	8004340 <HAL_Delay>
	for (int j = 0; j < 4; j++) {
 8002bde:	2300      	movs	r3, #0
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be2:	e041      	b.n	8002c68 <readFlash_Measure_DATA+0xa0>
		uint16_t address = 0x05 + 0x05 * j + i * 0x20;
 8002be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be6:	3301      	adds	r3, #1
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	1c1a      	adds	r2, r3, #0
 8002bec:	0092      	lsls	r2, r2, #2
 8002bee:	18d3      	adds	r3, r2, r3
 8002bf0:	b299      	uxth	r1, r3
 8002bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	015b      	lsls	r3, r3, #5
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	2026      	movs	r0, #38	; 0x26
 8002bfc:	183b      	adds	r3, r7, r0
 8002bfe:	188a      	adds	r2, r1, r2
 8002c00:	801a      	strh	r2, [r3, #0]
		Data[0] = (address >> 8);
 8002c02:	183b      	adds	r3, r7, r0
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	0a1b      	lsrs	r3, r3, #8
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	2108      	movs	r1, #8
 8002c0e:	187b      	adds	r3, r7, r1
 8002c10:	701a      	strb	r2, [r3, #0]
		Data[1] = address;
 8002c12:	183b      	adds	r3, r7, r0
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	000c      	movs	r4, r1
 8002c1a:	193b      	adds	r3, r7, r4
 8002c1c:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, 0xA1, (uint8_t*) &Data, 2, 1000);
 8002c1e:	193a      	adds	r2, r7, r4
 8002c20:	482b      	ldr	r0, [pc, #172]	; (8002cd0 <readFlash_Measure_DATA+0x108>)
 8002c22:	23fa      	movs	r3, #250	; 0xfa
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	2302      	movs	r3, #2
 8002c2a:	21a1      	movs	r1, #161	; 0xa1
 8002c2c:	f002 faa8 	bl	8005180 <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 8002c30:	2001      	movs	r0, #1
 8002c32:	f001 fb85 	bl	8004340 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, 0xA0, (uint8_t*) &Data, 4, 1000);
 8002c36:	193a      	adds	r2, r7, r4
 8002c38:	4825      	ldr	r0, [pc, #148]	; (8002cd0 <readFlash_Measure_DATA+0x108>)
 8002c3a:	23fa      	movs	r3, #250	; 0xfa
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	2304      	movs	r3, #4
 8002c42:	21a0      	movs	r1, #160	; 0xa0
 8002c44:	f002 fba4 	bl	8005390 <HAL_I2C_Master_Receive>
		HAL_Delay(1);
 8002c48:	2001      	movs	r0, #1
 8002c4a:	f001 fb79 	bl	8004340 <HAL_Delay>
		memcpy(&g[j], Data, sizeof g[j]);
 8002c4e:	2314      	movs	r3, #20
 8002c50:	18fa      	adds	r2, r7, r3
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	18d3      	adds	r3, r2, r3
 8002c58:	1939      	adds	r1, r7, r4
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f006 fb2b 	bl	80092b8 <memcpy>
	for (int j = 0; j < 4; j++) {
 8002c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c64:	3301      	adds	r3, #1
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	ddba      	ble.n	8002be4 <readFlash_Measure_DATA+0x1c>
	}
	input[i].T = g[0];
 8002c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c70:	0013      	movs	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	189b      	adds	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	001a      	movs	r2, r3
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	189b      	adds	r3, r3, r2
 8002c7e:	2114      	movs	r1, #20
 8002c80:	187a      	adds	r2, r7, r1
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	601a      	str	r2, [r3, #0]
	input[i].H = g[1];
 8002c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c88:	0013      	movs	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	189b      	adds	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	001a      	movs	r2, r3
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	189b      	adds	r3, r3, r2
 8002c96:	187a      	adds	r2, r7, r1
 8002c98:	6852      	ldr	r2, [r2, #4]
 8002c9a:	605a      	str	r2, [r3, #4]
	input[i].A = g[2];
 8002c9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c9e:	0013      	movs	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	189b      	adds	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	001a      	movs	r2, r3
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	189b      	adds	r3, r3, r2
 8002cac:	187a      	adds	r2, r7, r1
 8002cae:	6892      	ldr	r2, [r2, #8]
 8002cb0:	609a      	str	r2, [r3, #8]
	input[i].L = g[3];
 8002cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb4:	0013      	movs	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	189b      	adds	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	001a      	movs	r2, r3
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	189b      	adds	r3, r3, r2
 8002cc2:	187a      	adds	r2, r7, r1
 8002cc4:	68d2      	ldr	r2, [r2, #12]
 8002cc6:	60da      	str	r2, [r3, #12]
}
 8002cc8:	46c0      	nop			; (mov r8, r8)
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b00d      	add	sp, #52	; 0x34
 8002cce:	bd90      	pop	{r4, r7, pc}
 8002cd0:	200012e8 	.word	0x200012e8

08002cd4 <writeFlash>:
 *
 * @param  cycles_counter: the address of the cycles_counter variable.
 * @param  input: The address of the stored struct.
 * @retval double: Pressure value
 */
void writeFlash(int *cycles_counter, SensorData *input) {
 8002cd4:	b5b0      	push	{r4, r5, r7, lr}
 8002cd6:	b092      	sub	sp, #72	; 0x48
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
	char Data3[10];
	if (HAL_I2C_IsDeviceReady(&hi2c1, 0xA1, 2, 1000) == HAL_ERROR) {
 8002cde:	23fa      	movs	r3, #250	; 0xfa
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	485e      	ldr	r0, [pc, #376]	; (8002e5c <writeFlash+0x188>)
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	21a1      	movs	r1, #161	; 0xa1
 8002ce8:	f002 fc5a 	bl	80055a0 <HAL_I2C_IsDeviceReady>
 8002cec:	0003      	movs	r3, r0
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d116      	bne.n	8002d20 <writeFlash+0x4c>
		strcpy(Data3, "ERROR With External EEPROM\n");
 8002cf2:	212c      	movs	r1, #44	; 0x2c
 8002cf4:	187b      	adds	r3, r7, r1
 8002cf6:	4a5a      	ldr	r2, [pc, #360]	; (8002e60 <writeFlash+0x18c>)
 8002cf8:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002cfa:	c331      	stmia	r3!, {r0, r4, r5}
 8002cfc:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002cfe:	c331      	stmia	r3!, {r0, r4, r5}
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) Data3, strlen(Data3), 100);
 8002d04:	000c      	movs	r4, r1
 8002d06:	187b      	adds	r3, r7, r1
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f7fd f9fd 	bl	8000108 <strlen>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	0021      	movs	r1, r4
 8002d14:	1879      	adds	r1, r7, r1
 8002d16:	4853      	ldr	r0, [pc, #332]	; (8002e64 <writeFlash+0x190>)
 8002d18:	2364      	movs	r3, #100	; 0x64
 8002d1a:	f004 fb4f 	bl	80073bc <HAL_UART_Transmit>
			Data[5] = Data2[3];
			HAL_Delay(1);
			HAL_I2C_Master_Transmit(&hi2c1, 0xA1, (uint8_t*) &Data, 6, 1000);
		}
	}
}
 8002d1e:	e099      	b.n	8002e54 <writeFlash+0x180>
		Data[0] = 0x00;
 8002d20:	2120      	movs	r1, #32
 8002d22:	187b      	adds	r3, r7, r1
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]
		Data[1] = 0x00;
 8002d28:	187b      	adds	r3, r7, r1
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	705a      	strb	r2, [r3, #1]
		Data[2] = *cycles_counter & 0xFF;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	187b      	adds	r3, r7, r1
 8002d36:	709a      	strb	r2, [r3, #2]
		HAL_I2C_Master_Transmit(&hi2c1, 0xA1, (uint8_t*) &Data, 3, 1000);
 8002d38:	000c      	movs	r4, r1
 8002d3a:	187a      	adds	r2, r7, r1
 8002d3c:	4847      	ldr	r0, [pc, #284]	; (8002e5c <writeFlash+0x188>)
 8002d3e:	23fa      	movs	r3, #250	; 0xfa
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	2303      	movs	r3, #3
 8002d46:	21a1      	movs	r1, #161	; 0xa1
 8002d48:	f002 fa1a 	bl	8005180 <HAL_I2C_Master_Transmit>
		itoa(Data[2], Data3, 10);
 8002d4c:	0021      	movs	r1, r4
 8002d4e:	187b      	adds	r3, r7, r1
 8002d50:	789b      	ldrb	r3, [r3, #2]
 8002d52:	0018      	movs	r0, r3
 8002d54:	242c      	movs	r4, #44	; 0x2c
 8002d56:	193b      	adds	r3, r7, r4
 8002d58:	220a      	movs	r2, #10
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	f006 faa8 	bl	80092b0 <itoa>
		HAL_UART_Transmit(&huart2, (uint8_t*) Data3, strlen(Data3), 100);
 8002d60:	193b      	adds	r3, r7, r4
 8002d62:	0018      	movs	r0, r3
 8002d64:	f7fd f9d0 	bl	8000108 <strlen>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	1939      	adds	r1, r7, r4
 8002d6e:	483d      	ldr	r0, [pc, #244]	; (8002e64 <writeFlash+0x190>)
 8002d70:	2364      	movs	r3, #100	; 0x64
 8002d72:	f004 fb23 	bl	80073bc <HAL_UART_Transmit>
		int i = *cycles_counter - 1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	63bb      	str	r3, [r7, #56]	; 0x38
		float in[4] = { input[10].T, input[10].H, input[10].A, input[10].L };
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	33c8      	adds	r3, #200	; 0xc8
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	210c      	movs	r1, #12
 8002d86:	187b      	adds	r3, r7, r1
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	33c8      	adds	r3, #200	; 0xc8
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	187b      	adds	r3, r7, r1
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	33c8      	adds	r3, #200	; 0xc8
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	609a      	str	r2, [r3, #8]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	33c8      	adds	r3, #200	; 0xc8
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	187b      	adds	r3, r7, r1
 8002da6:	60da      	str	r2, [r3, #12]
		for (int j = 0; j < 5; j++) {
 8002da8:	2300      	movs	r3, #0
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dac:	e04f      	b.n	8002e4e <writeFlash+0x17a>
			memcpy(Data2, &in[j], sizeof in[j]);
 8002dae:	230c      	movs	r3, #12
 8002db0:	18fa      	adds	r2, r7, r3
 8002db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	18d1      	adds	r1, r2, r3
 8002db8:	241c      	movs	r4, #28
 8002dba:	193b      	adds	r3, r7, r4
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f006 fa7a 	bl	80092b8 <memcpy>
			uint16_t address = 0x05 + 0x05 * j + i * 0x20;
 8002dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	1c1a      	adds	r2, r3, #0
 8002dcc:	0092      	lsls	r2, r2, #2
 8002dce:	18d3      	adds	r3, r2, r3
 8002dd0:	b299      	uxth	r1, r3
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	015b      	lsls	r3, r3, #5
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	2036      	movs	r0, #54	; 0x36
 8002ddc:	183b      	adds	r3, r7, r0
 8002dde:	188a      	adds	r2, r1, r2
 8002de0:	801a      	strh	r2, [r3, #0]
			Data[0] = (address >> 8);
 8002de2:	183b      	adds	r3, r7, r0
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	2120      	movs	r1, #32
 8002dee:	187b      	adds	r3, r7, r1
 8002df0:	701a      	strb	r2, [r3, #0]
			Data[1] = address;
 8002df2:	183b      	adds	r3, r7, r0
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	705a      	strb	r2, [r3, #1]
			Data[2] = Data2[0];
 8002dfc:	193b      	adds	r3, r7, r4
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	b25b      	sxtb	r3, r3
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	187b      	adds	r3, r7, r1
 8002e06:	709a      	strb	r2, [r3, #2]
			Data[3] = Data2[1];
 8002e08:	193b      	adds	r3, r7, r4
 8002e0a:	785b      	ldrb	r3, [r3, #1]
 8002e0c:	b25b      	sxtb	r3, r3
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	187b      	adds	r3, r7, r1
 8002e12:	70da      	strb	r2, [r3, #3]
			Data[4] = Data2[2];
 8002e14:	193b      	adds	r3, r7, r4
 8002e16:	789b      	ldrb	r3, [r3, #2]
 8002e18:	b25b      	sxtb	r3, r3
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	187b      	adds	r3, r7, r1
 8002e1e:	711a      	strb	r2, [r3, #4]
			Data[5] = Data2[3];
 8002e20:	193b      	adds	r3, r7, r4
 8002e22:	78db      	ldrb	r3, [r3, #3]
 8002e24:	b25b      	sxtb	r3, r3
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	000c      	movs	r4, r1
 8002e2a:	187b      	adds	r3, r7, r1
 8002e2c:	715a      	strb	r2, [r3, #5]
			HAL_Delay(1);
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f001 fa86 	bl	8004340 <HAL_Delay>
			HAL_I2C_Master_Transmit(&hi2c1, 0xA1, (uint8_t*) &Data, 6, 1000);
 8002e34:	0021      	movs	r1, r4
 8002e36:	187a      	adds	r2, r7, r1
 8002e38:	4808      	ldr	r0, [pc, #32]	; (8002e5c <writeFlash+0x188>)
 8002e3a:	23fa      	movs	r3, #250	; 0xfa
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	2306      	movs	r3, #6
 8002e42:	21a1      	movs	r1, #161	; 0xa1
 8002e44:	f002 f99c 	bl	8005180 <HAL_I2C_Master_Transmit>
		for (int j = 0; j < 5; j++) {
 8002e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	ddac      	ble.n	8002dae <writeFlash+0xda>
}
 8002e54:	46c0      	nop			; (mov r8, r8)
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b010      	add	sp, #64	; 0x40
 8002e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e5c:	200012e8 	.word	0x200012e8
 8002e60:	0800b764 	.word	0x0800b764
 8002e64:	200013b4 	.word	0x200013b4

08002e68 <Read_Pressure_Sensor>:
 * Read the registers of the bmp280 and calculate the temperature
 * and after that it will use that value to calculate the pressure.
 * @param  argument: Not used
 * @retval double: Pressure value
 */
double Read_Pressure_Sensor() {
 8002e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e6a:	b093      	sub	sp, #76	; 0x4c
 8002e6c:	af00      	add	r7, sp, #0
	uint16_t dig_value_T1 = Read_Sensor_16_unsigned(0x88, (0x76 << 1));
 8002e6e:	263e      	movs	r6, #62	; 0x3e
 8002e70:	2508      	movs	r5, #8
 8002e72:	197b      	adds	r3, r7, r5
 8002e74:	199c      	adds	r4, r3, r6
 8002e76:	21ec      	movs	r1, #236	; 0xec
 8002e78:	2088      	movs	r0, #136	; 0x88
 8002e7a:	f7ff fd0d 	bl	8002898 <Read_Sensor_16_unsigned>
 8002e7e:	0003      	movs	r3, r0
 8002e80:	8023      	strh	r3, [r4, #0]
	int16_t dig_value_T2 = Read_Sensor_16_signed(0x8A, (0x76 << 1));
 8002e82:	233c      	movs	r3, #60	; 0x3c
 8002e84:	197a      	adds	r2, r7, r5
 8002e86:	18d4      	adds	r4, r2, r3
 8002e88:	21ec      	movs	r1, #236	; 0xec
 8002e8a:	208a      	movs	r0, #138	; 0x8a
 8002e8c:	f7ff fd6a 	bl	8002964 <Read_Sensor_16_signed>
 8002e90:	0003      	movs	r3, r0
 8002e92:	8023      	strh	r3, [r4, #0]
	int16_t dig_value_T3 = Read_Sensor_16_signed(0x8C, (0x76 << 1));
 8002e94:	223a      	movs	r2, #58	; 0x3a
 8002e96:	197b      	adds	r3, r7, r5
 8002e98:	189c      	adds	r4, r3, r2
 8002e9a:	21ec      	movs	r1, #236	; 0xec
 8002e9c:	208c      	movs	r0, #140	; 0x8c
 8002e9e:	f7ff fd61 	bl	8002964 <Read_Sensor_16_signed>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	8023      	strh	r3, [r4, #0]
	uint16_t dig_value_P1 = Read_Sensor_16_unsigned(0x8E, (0x76 << 1));
 8002ea6:	2138      	movs	r1, #56	; 0x38
 8002ea8:	197b      	adds	r3, r7, r5
 8002eaa:	185c      	adds	r4, r3, r1
 8002eac:	21ec      	movs	r1, #236	; 0xec
 8002eae:	208e      	movs	r0, #142	; 0x8e
 8002eb0:	f7ff fcf2 	bl	8002898 <Read_Sensor_16_unsigned>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	8023      	strh	r3, [r4, #0]
	int16_t dig_value_P2 = Read_Sensor_16_signed(0x90, (0x76 << 1));
 8002eb8:	2036      	movs	r0, #54	; 0x36
 8002eba:	002b      	movs	r3, r5
 8002ebc:	18fa      	adds	r2, r7, r3
 8002ebe:	1814      	adds	r4, r2, r0
 8002ec0:	21ec      	movs	r1, #236	; 0xec
 8002ec2:	2090      	movs	r0, #144	; 0x90
 8002ec4:	f7ff fd4e 	bl	8002964 <Read_Sensor_16_signed>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	8023      	strh	r3, [r4, #0]
	int16_t dig_value_P3 = Read_Sensor_16_signed(0x92, (0x76 << 1));
 8002ecc:	2434      	movs	r4, #52	; 0x34
 8002ece:	2208      	movs	r2, #8
 8002ed0:	4694      	mov	ip, r2
 8002ed2:	44bc      	add	ip, r7
 8002ed4:	4464      	add	r4, ip
 8002ed6:	21ec      	movs	r1, #236	; 0xec
 8002ed8:	2092      	movs	r0, #146	; 0x92
 8002eda:	f7ff fd43 	bl	8002964 <Read_Sensor_16_signed>
 8002ede:	0003      	movs	r3, r0
 8002ee0:	8023      	strh	r3, [r4, #0]
	int16_t dig_value_P4 = Read_Sensor_16_signed(0x94, (0x76 << 1));
 8002ee2:	2532      	movs	r5, #50	; 0x32
 8002ee4:	2308      	movs	r3, #8
 8002ee6:	18fa      	adds	r2, r7, r3
 8002ee8:	1954      	adds	r4, r2, r5
 8002eea:	21ec      	movs	r1, #236	; 0xec
 8002eec:	2094      	movs	r0, #148	; 0x94
 8002eee:	f7ff fd39 	bl	8002964 <Read_Sensor_16_signed>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	8023      	strh	r3, [r4, #0]
	int16_t dig_value_P5 = Read_Sensor_16_signed(0x96, (0x76 << 1));
 8002ef6:	2530      	movs	r5, #48	; 0x30
 8002ef8:	2308      	movs	r3, #8
 8002efa:	18fa      	adds	r2, r7, r3
 8002efc:	1954      	adds	r4, r2, r5
 8002efe:	21ec      	movs	r1, #236	; 0xec
 8002f00:	2096      	movs	r0, #150	; 0x96
 8002f02:	f7ff fd2f 	bl	8002964 <Read_Sensor_16_signed>
 8002f06:	0003      	movs	r3, r0
 8002f08:	8023      	strh	r3, [r4, #0]
	int16_t dig_value_P6 = Read_Sensor_16_signed(0x98, (0x76 << 1));
 8002f0a:	212e      	movs	r1, #46	; 0x2e
 8002f0c:	2508      	movs	r5, #8
 8002f0e:	197b      	adds	r3, r7, r5
 8002f10:	185c      	adds	r4, r3, r1
 8002f12:	21ec      	movs	r1, #236	; 0xec
 8002f14:	2098      	movs	r0, #152	; 0x98
 8002f16:	f7ff fd25 	bl	8002964 <Read_Sensor_16_signed>
 8002f1a:	0003      	movs	r3, r0
 8002f1c:	8023      	strh	r3, [r4, #0]
	int16_t dig_value_P7 = Read_Sensor_16_signed(0x9A, (0x76 << 1));
 8002f1e:	202c      	movs	r0, #44	; 0x2c
 8002f20:	002b      	movs	r3, r5
 8002f22:	18fa      	adds	r2, r7, r3
 8002f24:	1814      	adds	r4, r2, r0
 8002f26:	21ec      	movs	r1, #236	; 0xec
 8002f28:	209a      	movs	r0, #154	; 0x9a
 8002f2a:	f7ff fd1b 	bl	8002964 <Read_Sensor_16_signed>
 8002f2e:	0003      	movs	r3, r0
 8002f30:	8023      	strh	r3, [r4, #0]
	int16_t dig_value_P8 = Read_Sensor_16_signed(0x9C, (0x76 << 1));
 8002f32:	242a      	movs	r4, #42	; 0x2a
 8002f34:	2208      	movs	r2, #8
 8002f36:	4694      	mov	ip, r2
 8002f38:	44bc      	add	ip, r7
 8002f3a:	4464      	add	r4, ip
 8002f3c:	21ec      	movs	r1, #236	; 0xec
 8002f3e:	209c      	movs	r0, #156	; 0x9c
 8002f40:	f7ff fd10 	bl	8002964 <Read_Sensor_16_signed>
 8002f44:	0003      	movs	r3, r0
 8002f46:	8023      	strh	r3, [r4, #0]
	int16_t dig_value_P9 = Read_Sensor_16_signed(0x9E, (0x76 << 1));
 8002f48:	2528      	movs	r5, #40	; 0x28
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	18fa      	adds	r2, r7, r3
 8002f4e:	1954      	adds	r4, r2, r5
 8002f50:	21ec      	movs	r1, #236	; 0xec
 8002f52:	209e      	movs	r0, #158	; 0x9e
 8002f54:	f7ff fd06 	bl	8002964 <Read_Sensor_16_signed>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	8023      	strh	r3, [r4, #0]
	int value1 = Read_Sensor_20(0xF7, (0x76 << 1));
 8002f5c:	21ec      	movs	r1, #236	; 0xec
 8002f5e:	20f7      	movs	r0, #247	; 0xf7
 8002f60:	f7ff fd68 	bl	8002a34 <Read_Sensor_20>
 8002f64:	0003      	movs	r3, r0
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
	int value2 = Read_Sensor_20(0xF, (0x76 << 1));
 8002f68:	21ec      	movs	r1, #236	; 0xec
 8002f6a:	200f      	movs	r0, #15
 8002f6c:	f7ff fd62 	bl	8002a34 <Read_Sensor_20>
 8002f70:	0003      	movs	r3, r0
 8002f72:	62bb      	str	r3, [r7, #40]	; 0x28

	double var1 = ((value1 / 16384.0) - (dig_value_T1 / 1024.0)) * dig_value_T2;
 8002f74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f76:	f7fe ffbf 	bl	8001ef8 <__aeabi_i2d>
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	4bf1      	ldr	r3, [pc, #964]	; (8003344 <Read_Pressure_Sensor+0x4dc>)
 8002f7e:	f7fd fda5 	bl	8000acc <__aeabi_ddiv>
 8002f82:	0003      	movs	r3, r0
 8002f84:	000c      	movs	r4, r1
 8002f86:	0025      	movs	r5, r4
 8002f88:	001c      	movs	r4, r3
 8002f8a:	2308      	movs	r3, #8
 8002f8c:	18fb      	adds	r3, r7, r3
 8002f8e:	199b      	adds	r3, r3, r6
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	0018      	movs	r0, r3
 8002f94:	f7fe ffb0 	bl	8001ef8 <__aeabi_i2d>
 8002f98:	2200      	movs	r2, #0
 8002f9a:	4beb      	ldr	r3, [pc, #940]	; (8003348 <Read_Pressure_Sensor+0x4e0>)
 8002f9c:	f7fd fd96 	bl	8000acc <__aeabi_ddiv>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	000b      	movs	r3, r1
 8002fa4:	0020      	movs	r0, r4
 8002fa6:	0029      	movs	r1, r5
 8002fa8:	f7fe fc0c 	bl	80017c4 <__aeabi_dsub>
 8002fac:	0003      	movs	r3, r0
 8002fae:	000c      	movs	r4, r1
 8002fb0:	0025      	movs	r5, r4
 8002fb2:	001c      	movs	r4, r3
 8002fb4:	233c      	movs	r3, #60	; 0x3c
 8002fb6:	2208      	movs	r2, #8
 8002fb8:	4694      	mov	ip, r2
 8002fba:	44bc      	add	ip, r7
 8002fbc:	4463      	add	r3, ip
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	5e9b      	ldrsh	r3, [r3, r2]
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f7fe ff98 	bl	8001ef8 <__aeabi_i2d>
 8002fc8:	0002      	movs	r2, r0
 8002fca:	000b      	movs	r3, r1
 8002fcc:	0020      	movs	r0, r4
 8002fce:	0029      	movs	r1, r5
 8002fd0:	f7fe f986 	bl	80012e0 <__aeabi_dmul>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	000c      	movs	r4, r1
 8002fd8:	623b      	str	r3, [r7, #32]
 8002fda:	627c      	str	r4, [r7, #36]	; 0x24
	double var2 = ((value1 / 131072.0) - (dig_value_T1 / 8192.0))
 8002fdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fde:	f7fe ff8b 	bl	8001ef8 <__aeabi_i2d>
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2382      	movs	r3, #130	; 0x82
 8002fe6:	05db      	lsls	r3, r3, #23
 8002fe8:	f7fd fd70 	bl	8000acc <__aeabi_ddiv>
 8002fec:	0003      	movs	r3, r0
 8002fee:	000c      	movs	r4, r1
 8002ff0:	0025      	movs	r5, r4
 8002ff2:	001c      	movs	r4, r3
 8002ff4:	2308      	movs	r3, #8
 8002ff6:	18fa      	adds	r2, r7, r3
 8002ff8:	1993      	adds	r3, r2, r6
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f7fe ff7b 	bl	8001ef8 <__aeabi_i2d>
 8003002:	2200      	movs	r2, #0
 8003004:	4bd1      	ldr	r3, [pc, #836]	; (800334c <Read_Pressure_Sensor+0x4e4>)
 8003006:	f7fd fd61 	bl	8000acc <__aeabi_ddiv>
 800300a:	0002      	movs	r2, r0
 800300c:	000b      	movs	r3, r1
 800300e:	0020      	movs	r0, r4
 8003010:	0029      	movs	r1, r5
 8003012:	f7fe fbd7 	bl	80017c4 <__aeabi_dsub>
 8003016:	0003      	movs	r3, r0
 8003018:	000c      	movs	r4, r1
 800301a:	0025      	movs	r5, r4
 800301c:	001c      	movs	r4, r3
			* ((value1 / 131072.0) - (dig_value_T1 / 8192.0)) * dig_value_T3;
 800301e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003020:	f7fe ff6a 	bl	8001ef8 <__aeabi_i2d>
 8003024:	2200      	movs	r2, #0
 8003026:	2382      	movs	r3, #130	; 0x82
 8003028:	05db      	lsls	r3, r3, #23
 800302a:	f7fd fd4f 	bl	8000acc <__aeabi_ddiv>
 800302e:	0002      	movs	r2, r0
 8003030:	000b      	movs	r3, r1
 8003032:	603a      	str	r2, [r7, #0]
 8003034:	607b      	str	r3, [r7, #4]
 8003036:	2308      	movs	r3, #8
 8003038:	18fa      	adds	r2, r7, r3
 800303a:	1993      	adds	r3, r2, r6
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	0018      	movs	r0, r3
 8003040:	f7fe ff5a 	bl	8001ef8 <__aeabi_i2d>
 8003044:	2200      	movs	r2, #0
 8003046:	4bc1      	ldr	r3, [pc, #772]	; (800334c <Read_Pressure_Sensor+0x4e4>)
 8003048:	f7fd fd40 	bl	8000acc <__aeabi_ddiv>
 800304c:	0002      	movs	r2, r0
 800304e:	000b      	movs	r3, r1
 8003050:	6838      	ldr	r0, [r7, #0]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	f7fe fbb6 	bl	80017c4 <__aeabi_dsub>
 8003058:	0002      	movs	r2, r0
 800305a:	000b      	movs	r3, r1
 800305c:	0020      	movs	r0, r4
 800305e:	0029      	movs	r1, r5
 8003060:	f7fe f93e 	bl	80012e0 <__aeabi_dmul>
 8003064:	0003      	movs	r3, r0
 8003066:	000c      	movs	r4, r1
 8003068:	0025      	movs	r5, r4
 800306a:	001c      	movs	r4, r3
 800306c:	223a      	movs	r2, #58	; 0x3a
 800306e:	2608      	movs	r6, #8
 8003070:	19b9      	adds	r1, r7, r6
 8003072:	188b      	adds	r3, r1, r2
 8003074:	2200      	movs	r2, #0
 8003076:	5e9b      	ldrsh	r3, [r3, r2]
 8003078:	0018      	movs	r0, r3
 800307a:	f7fe ff3d 	bl	8001ef8 <__aeabi_i2d>
 800307e:	0002      	movs	r2, r0
 8003080:	000b      	movs	r3, r1
	double var2 = ((value1 / 131072.0) - (dig_value_T1 / 8192.0))
 8003082:	0020      	movs	r0, r4
 8003084:	0029      	movs	r1, r5
 8003086:	f7fe f92b 	bl	80012e0 <__aeabi_dmul>
 800308a:	0003      	movs	r3, r0
 800308c:	000c      	movs	r4, r1
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	61fc      	str	r4, [r7, #28]
	//double T= (var1+var2)/5120.0;
	double var3 = var1 + var2;
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	6a38      	ldr	r0, [r7, #32]
 8003098:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800309a:	f7fd f9fb 	bl	8000494 <__aeabi_dadd>
 800309e:	0003      	movs	r3, r0
 80030a0:	000c      	movs	r4, r1
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	617c      	str	r4, [r7, #20]

	var1 = (var3 / 2.0) - 64000.0;
 80030a6:	2200      	movs	r2, #0
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	05db      	lsls	r3, r3, #23
 80030ac:	6938      	ldr	r0, [r7, #16]
 80030ae:	6979      	ldr	r1, [r7, #20]
 80030b0:	f7fd fd0c 	bl	8000acc <__aeabi_ddiv>
 80030b4:	0003      	movs	r3, r0
 80030b6:	000c      	movs	r4, r1
 80030b8:	0018      	movs	r0, r3
 80030ba:	0021      	movs	r1, r4
 80030bc:	2200      	movs	r2, #0
 80030be:	4ba4      	ldr	r3, [pc, #656]	; (8003350 <Read_Pressure_Sensor+0x4e8>)
 80030c0:	f7fe fb80 	bl	80017c4 <__aeabi_dsub>
 80030c4:	0003      	movs	r3, r0
 80030c6:	000c      	movs	r4, r1
 80030c8:	623b      	str	r3, [r7, #32]
 80030ca:	627c      	str	r4, [r7, #36]	; 0x24
	var2 = var1 * var1 * dig_value_P6 / 32768.0;
 80030cc:	6a3a      	ldr	r2, [r7, #32]
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	6a38      	ldr	r0, [r7, #32]
 80030d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030d4:	f7fe f904 	bl	80012e0 <__aeabi_dmul>
 80030d8:	0003      	movs	r3, r0
 80030da:	000c      	movs	r4, r1
 80030dc:	0025      	movs	r5, r4
 80030de:	001c      	movs	r4, r3
 80030e0:	262e      	movs	r6, #46	; 0x2e
 80030e2:	2308      	movs	r3, #8
 80030e4:	18fa      	adds	r2, r7, r3
 80030e6:	1993      	adds	r3, r2, r6
 80030e8:	2600      	movs	r6, #0
 80030ea:	5f9b      	ldrsh	r3, [r3, r6]
 80030ec:	0018      	movs	r0, r3
 80030ee:	f7fe ff03 	bl	8001ef8 <__aeabi_i2d>
 80030f2:	0002      	movs	r2, r0
 80030f4:	000b      	movs	r3, r1
 80030f6:	0020      	movs	r0, r4
 80030f8:	0029      	movs	r1, r5
 80030fa:	f7fe f8f1 	bl	80012e0 <__aeabi_dmul>
 80030fe:	0003      	movs	r3, r0
 8003100:	000c      	movs	r4, r1
 8003102:	0018      	movs	r0, r3
 8003104:	0021      	movs	r1, r4
 8003106:	2200      	movs	r2, #0
 8003108:	4b92      	ldr	r3, [pc, #584]	; (8003354 <Read_Pressure_Sensor+0x4ec>)
 800310a:	f7fd fcdf 	bl	8000acc <__aeabi_ddiv>
 800310e:	0003      	movs	r3, r0
 8003110:	000c      	movs	r4, r1
 8003112:	61bb      	str	r3, [r7, #24]
 8003114:	61fc      	str	r4, [r7, #28]
	var2 = var2 + var1 * dig_value_P5 * 2.0;
 8003116:	2230      	movs	r2, #48	; 0x30
 8003118:	2608      	movs	r6, #8
 800311a:	19bb      	adds	r3, r7, r6
 800311c:	189b      	adds	r3, r3, r2
 800311e:	2200      	movs	r2, #0
 8003120:	5e9b      	ldrsh	r3, [r3, r2]
 8003122:	0018      	movs	r0, r3
 8003124:	f7fe fee8 	bl	8001ef8 <__aeabi_i2d>
 8003128:	6a3a      	ldr	r2, [r7, #32]
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	f7fe f8d8 	bl	80012e0 <__aeabi_dmul>
 8003130:	0003      	movs	r3, r0
 8003132:	000c      	movs	r4, r1
 8003134:	0018      	movs	r0, r3
 8003136:	0021      	movs	r1, r4
 8003138:	0002      	movs	r2, r0
 800313a:	000b      	movs	r3, r1
 800313c:	f7fd f9aa 	bl	8000494 <__aeabi_dadd>
 8003140:	0003      	movs	r3, r0
 8003142:	000c      	movs	r4, r1
 8003144:	001a      	movs	r2, r3
 8003146:	0023      	movs	r3, r4
 8003148:	69b8      	ldr	r0, [r7, #24]
 800314a:	69f9      	ldr	r1, [r7, #28]
 800314c:	f7fd f9a2 	bl	8000494 <__aeabi_dadd>
 8003150:	0003      	movs	r3, r0
 8003152:	000c      	movs	r4, r1
 8003154:	61bb      	str	r3, [r7, #24]
 8003156:	61fc      	str	r4, [r7, #28]
	var2 = (var2 / 4.0) + (dig_value_P4 * 65536.0);
 8003158:	2200      	movs	r2, #0
 800315a:	4b7f      	ldr	r3, [pc, #508]	; (8003358 <Read_Pressure_Sensor+0x4f0>)
 800315c:	69b8      	ldr	r0, [r7, #24]
 800315e:	69f9      	ldr	r1, [r7, #28]
 8003160:	f7fd fcb4 	bl	8000acc <__aeabi_ddiv>
 8003164:	0003      	movs	r3, r0
 8003166:	000c      	movs	r4, r1
 8003168:	0025      	movs	r5, r4
 800316a:	001c      	movs	r4, r3
 800316c:	2332      	movs	r3, #50	; 0x32
 800316e:	2208      	movs	r2, #8
 8003170:	4694      	mov	ip, r2
 8003172:	44bc      	add	ip, r7
 8003174:	4463      	add	r3, ip
 8003176:	2200      	movs	r2, #0
 8003178:	5e9b      	ldrsh	r3, [r3, r2]
 800317a:	0018      	movs	r0, r3
 800317c:	f7fe febc 	bl	8001ef8 <__aeabi_i2d>
 8003180:	2200      	movs	r2, #0
 8003182:	4b76      	ldr	r3, [pc, #472]	; (800335c <Read_Pressure_Sensor+0x4f4>)
 8003184:	f7fe f8ac 	bl	80012e0 <__aeabi_dmul>
 8003188:	0002      	movs	r2, r0
 800318a:	000b      	movs	r3, r1
 800318c:	0020      	movs	r0, r4
 800318e:	0029      	movs	r1, r5
 8003190:	f7fd f980 	bl	8000494 <__aeabi_dadd>
 8003194:	0003      	movs	r3, r0
 8003196:	000c      	movs	r4, r1
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	61fc      	str	r4, [r7, #28]
	var1 = (dig_value_P3 * var1 * var1 / 524288.0 + dig_value_P2 * var1)
 800319c:	2434      	movs	r4, #52	; 0x34
 800319e:	19bb      	adds	r3, r7, r6
 80031a0:	191b      	adds	r3, r3, r4
 80031a2:	2200      	movs	r2, #0
 80031a4:	5e9b      	ldrsh	r3, [r3, r2]
 80031a6:	0018      	movs	r0, r3
 80031a8:	f7fe fea6 	bl	8001ef8 <__aeabi_i2d>
 80031ac:	6a3a      	ldr	r2, [r7, #32]
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	f7fe f896 	bl	80012e0 <__aeabi_dmul>
 80031b4:	0003      	movs	r3, r0
 80031b6:	000c      	movs	r4, r1
 80031b8:	0018      	movs	r0, r3
 80031ba:	0021      	movs	r1, r4
 80031bc:	6a3a      	ldr	r2, [r7, #32]
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	f7fe f88e 	bl	80012e0 <__aeabi_dmul>
 80031c4:	0003      	movs	r3, r0
 80031c6:	000c      	movs	r4, r1
 80031c8:	0018      	movs	r0, r3
 80031ca:	0021      	movs	r1, r4
 80031cc:	2200      	movs	r2, #0
 80031ce:	4b64      	ldr	r3, [pc, #400]	; (8003360 <Read_Pressure_Sensor+0x4f8>)
 80031d0:	f7fd fc7c 	bl	8000acc <__aeabi_ddiv>
 80031d4:	0003      	movs	r3, r0
 80031d6:	000c      	movs	r4, r1
 80031d8:	0025      	movs	r5, r4
 80031da:	001c      	movs	r4, r3
 80031dc:	2036      	movs	r0, #54	; 0x36
 80031de:	19bb      	adds	r3, r7, r6
 80031e0:	181b      	adds	r3, r3, r0
 80031e2:	2200      	movs	r2, #0
 80031e4:	5e9b      	ldrsh	r3, [r3, r2]
 80031e6:	0018      	movs	r0, r3
 80031e8:	f7fe fe86 	bl	8001ef8 <__aeabi_i2d>
 80031ec:	6a3a      	ldr	r2, [r7, #32]
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	f7fe f876 	bl	80012e0 <__aeabi_dmul>
 80031f4:	0002      	movs	r2, r0
 80031f6:	000b      	movs	r3, r1
 80031f8:	0020      	movs	r0, r4
 80031fa:	0029      	movs	r1, r5
 80031fc:	f7fd f94a 	bl	8000494 <__aeabi_dadd>
 8003200:	0003      	movs	r3, r0
 8003202:	000c      	movs	r4, r1
 8003204:	0018      	movs	r0, r3
 8003206:	0021      	movs	r1, r4
 8003208:	2200      	movs	r2, #0
 800320a:	4b55      	ldr	r3, [pc, #340]	; (8003360 <Read_Pressure_Sensor+0x4f8>)
 800320c:	f7fd fc5e 	bl	8000acc <__aeabi_ddiv>
 8003210:	0003      	movs	r3, r0
 8003212:	000c      	movs	r4, r1
 8003214:	623b      	str	r3, [r7, #32]
 8003216:	627c      	str	r4, [r7, #36]	; 0x24
			/ 524288.0;
	var1 = (1.0 + var1 / 32768) * dig_value_P1;
 8003218:	2200      	movs	r2, #0
 800321a:	4b4e      	ldr	r3, [pc, #312]	; (8003354 <Read_Pressure_Sensor+0x4ec>)
 800321c:	6a38      	ldr	r0, [r7, #32]
 800321e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003220:	f7fd fc54 	bl	8000acc <__aeabi_ddiv>
 8003224:	0003      	movs	r3, r0
 8003226:	000c      	movs	r4, r1
 8003228:	0018      	movs	r0, r3
 800322a:	0021      	movs	r1, r4
 800322c:	2200      	movs	r2, #0
 800322e:	4b4d      	ldr	r3, [pc, #308]	; (8003364 <Read_Pressure_Sensor+0x4fc>)
 8003230:	f7fd f930 	bl	8000494 <__aeabi_dadd>
 8003234:	0003      	movs	r3, r0
 8003236:	000c      	movs	r4, r1
 8003238:	0025      	movs	r5, r4
 800323a:	001c      	movs	r4, r3
 800323c:	2138      	movs	r1, #56	; 0x38
 800323e:	19bb      	adds	r3, r7, r6
 8003240:	185b      	adds	r3, r3, r1
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	0018      	movs	r0, r3
 8003246:	f7fe fe57 	bl	8001ef8 <__aeabi_i2d>
 800324a:	0002      	movs	r2, r0
 800324c:	000b      	movs	r3, r1
 800324e:	0020      	movs	r0, r4
 8003250:	0029      	movs	r1, r5
 8003252:	f7fe f845 	bl	80012e0 <__aeabi_dmul>
 8003256:	0003      	movs	r3, r0
 8003258:	000c      	movs	r4, r1
 800325a:	623b      	str	r3, [r7, #32]
 800325c:	627c      	str	r4, [r7, #36]	; 0x24
	double P = 1048576 - value2;
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	2280      	movs	r2, #128	; 0x80
 8003262:	0352      	lsls	r2, r2, #13
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	0018      	movs	r0, r3
 8003268:	f7fe fe46 	bl	8001ef8 <__aeabi_i2d>
 800326c:	0003      	movs	r3, r0
 800326e:	000c      	movs	r4, r1
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	60fc      	str	r4, [r7, #12]
	P = (P - (var2 / 4096)) * 6250 / var1;
 8003274:	2200      	movs	r2, #0
 8003276:	4b3c      	ldr	r3, [pc, #240]	; (8003368 <Read_Pressure_Sensor+0x500>)
 8003278:	69b8      	ldr	r0, [r7, #24]
 800327a:	69f9      	ldr	r1, [r7, #28]
 800327c:	f7fd fc26 	bl	8000acc <__aeabi_ddiv>
 8003280:	0003      	movs	r3, r0
 8003282:	000c      	movs	r4, r1
 8003284:	001a      	movs	r2, r3
 8003286:	0023      	movs	r3, r4
 8003288:	68b8      	ldr	r0, [r7, #8]
 800328a:	68f9      	ldr	r1, [r7, #12]
 800328c:	f7fe fa9a 	bl	80017c4 <__aeabi_dsub>
 8003290:	0003      	movs	r3, r0
 8003292:	000c      	movs	r4, r1
 8003294:	0018      	movs	r0, r3
 8003296:	0021      	movs	r1, r4
 8003298:	2200      	movs	r2, #0
 800329a:	4b34      	ldr	r3, [pc, #208]	; (800336c <Read_Pressure_Sensor+0x504>)
 800329c:	f7fe f820 	bl	80012e0 <__aeabi_dmul>
 80032a0:	0003      	movs	r3, r0
 80032a2:	000c      	movs	r4, r1
 80032a4:	0018      	movs	r0, r3
 80032a6:	0021      	movs	r1, r4
 80032a8:	6a3a      	ldr	r2, [r7, #32]
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	f7fd fc0e 	bl	8000acc <__aeabi_ddiv>
 80032b0:	0003      	movs	r3, r0
 80032b2:	000c      	movs	r4, r1
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	60fc      	str	r4, [r7, #12]
	var1 = dig_value_P9 * P * P / 2147483648.0;
 80032b8:	2528      	movs	r5, #40	; 0x28
 80032ba:	19bb      	adds	r3, r7, r6
 80032bc:	195b      	adds	r3, r3, r5
 80032be:	2200      	movs	r2, #0
 80032c0:	5e9b      	ldrsh	r3, [r3, r2]
 80032c2:	0018      	movs	r0, r3
 80032c4:	f7fe fe18 	bl	8001ef8 <__aeabi_i2d>
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f7fe f808 	bl	80012e0 <__aeabi_dmul>
 80032d0:	0003      	movs	r3, r0
 80032d2:	000c      	movs	r4, r1
 80032d4:	0018      	movs	r0, r3
 80032d6:	0021      	movs	r1, r4
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f7fe f800 	bl	80012e0 <__aeabi_dmul>
 80032e0:	0003      	movs	r3, r0
 80032e2:	000c      	movs	r4, r1
 80032e4:	0018      	movs	r0, r3
 80032e6:	0021      	movs	r1, r4
 80032e8:	2200      	movs	r2, #0
 80032ea:	4b21      	ldr	r3, [pc, #132]	; (8003370 <Read_Pressure_Sensor+0x508>)
 80032ec:	f7fd fbee 	bl	8000acc <__aeabi_ddiv>
 80032f0:	0003      	movs	r3, r0
 80032f2:	000c      	movs	r4, r1
 80032f4:	623b      	str	r3, [r7, #32]
 80032f6:	627c      	str	r4, [r7, #36]	; 0x24
	var2 = P * dig_value_P8 / 32768;
 80032f8:	242a      	movs	r4, #42	; 0x2a
 80032fa:	19bb      	adds	r3, r7, r6
 80032fc:	191b      	adds	r3, r3, r4
 80032fe:	2200      	movs	r2, #0
 8003300:	5e9b      	ldrsh	r3, [r3, r2]
 8003302:	0018      	movs	r0, r3
 8003304:	f7fe fdf8 	bl	8001ef8 <__aeabi_i2d>
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f7fd ffe8 	bl	80012e0 <__aeabi_dmul>
 8003310:	0003      	movs	r3, r0
 8003312:	000c      	movs	r4, r1
 8003314:	0018      	movs	r0, r3
 8003316:	0021      	movs	r1, r4
 8003318:	2200      	movs	r2, #0
 800331a:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <Read_Pressure_Sensor+0x4ec>)
 800331c:	f7fd fbd6 	bl	8000acc <__aeabi_ddiv>
 8003320:	0003      	movs	r3, r0
 8003322:	000c      	movs	r4, r1
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	61fc      	str	r4, [r7, #28]
	P = P + (var1 + var2 + dig_value_P7) / 16;
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	6a38      	ldr	r0, [r7, #32]
 800332e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003330:	f7fd f8b0 	bl	8000494 <__aeabi_dadd>
 8003334:	0003      	movs	r3, r0
 8003336:	000c      	movs	r4, r1
 8003338:	0025      	movs	r5, r4
 800333a:	001c      	movs	r4, r3
 800333c:	202c      	movs	r0, #44	; 0x2c
 800333e:	19bb      	adds	r3, r7, r6
 8003340:	181b      	adds	r3, r3, r0
 8003342:	e017      	b.n	8003374 <Read_Pressure_Sensor+0x50c>
 8003344:	40d00000 	.word	0x40d00000
 8003348:	40900000 	.word	0x40900000
 800334c:	40c00000 	.word	0x40c00000
 8003350:	40ef4000 	.word	0x40ef4000
 8003354:	40e00000 	.word	0x40e00000
 8003358:	40100000 	.word	0x40100000
 800335c:	40f00000 	.word	0x40f00000
 8003360:	41200000 	.word	0x41200000
 8003364:	3ff00000 	.word	0x3ff00000
 8003368:	40b00000 	.word	0x40b00000
 800336c:	40b86a00 	.word	0x40b86a00
 8003370:	41e00000 	.word	0x41e00000
 8003374:	2200      	movs	r2, #0
 8003376:	5e9b      	ldrsh	r3, [r3, r2]
 8003378:	0018      	movs	r0, r3
 800337a:	f7fe fdbd 	bl	8001ef8 <__aeabi_i2d>
 800337e:	0002      	movs	r2, r0
 8003380:	000b      	movs	r3, r1
 8003382:	0020      	movs	r0, r4
 8003384:	0029      	movs	r1, r5
 8003386:	f7fd f885 	bl	8000494 <__aeabi_dadd>
 800338a:	0003      	movs	r3, r0
 800338c:	000c      	movs	r4, r1
 800338e:	0018      	movs	r0, r3
 8003390:	0021      	movs	r1, r4
 8003392:	2200      	movs	r2, #0
 8003394:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <Read_Pressure_Sensor+0x558>)
 8003396:	f7fd fb99 	bl	8000acc <__aeabi_ddiv>
 800339a:	0003      	movs	r3, r0
 800339c:	000c      	movs	r4, r1
 800339e:	001a      	movs	r2, r3
 80033a0:	0023      	movs	r3, r4
 80033a2:	68b8      	ldr	r0, [r7, #8]
 80033a4:	68f9      	ldr	r1, [r7, #12]
 80033a6:	f7fd f875 	bl	8000494 <__aeabi_dadd>
 80033aa:	0003      	movs	r3, r0
 80033ac:	000c      	movs	r4, r1
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	60fc      	str	r4, [r7, #12]
	return P;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	68fc      	ldr	r4, [r7, #12]
}
 80033b6:	0018      	movs	r0, r3
 80033b8:	0021      	movs	r1, r4
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b013      	add	sp, #76	; 0x4c
 80033be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033c0:	40300000 	.word	0x40300000

080033c4 <Tem_Sensor>:
 *
 * Read the sensor via i2c and calculate the temperature.
 * @param  argument: Not used
 * @retval double: Temperature value
 */
double Tem_Sensor() {
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
	double T =
			((175.72 * ((Read_Sensor_16_signed(0xF3, (0x40 << 1)))) / (65536))
 80033ca:	2180      	movs	r1, #128	; 0x80
 80033cc:	20f3      	movs	r0, #243	; 0xf3
 80033ce:	f7ff fac9 	bl	8002964 <Read_Sensor_16_signed>
 80033d2:	0003      	movs	r3, r0
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7fe fd8f 	bl	8001ef8 <__aeabi_i2d>
 80033da:	4a0f      	ldr	r2, [pc, #60]	; (8003418 <Tem_Sensor+0x54>)
 80033dc:	4b0f      	ldr	r3, [pc, #60]	; (800341c <Tem_Sensor+0x58>)
 80033de:	f7fd ff7f 	bl	80012e0 <__aeabi_dmul>
 80033e2:	0003      	movs	r3, r0
 80033e4:	000c      	movs	r4, r1
 80033e6:	0018      	movs	r0, r3
 80033e8:	0021      	movs	r1, r4
 80033ea:	2200      	movs	r2, #0
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <Tem_Sensor+0x5c>)
 80033ee:	f7fd fb6d 	bl	8000acc <__aeabi_ddiv>
 80033f2:	0003      	movs	r3, r0
 80033f4:	000c      	movs	r4, r1
 80033f6:	0018      	movs	r0, r3
 80033f8:	0021      	movs	r1, r4
	double T =
 80033fa:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <Tem_Sensor+0x60>)
 80033fc:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <Tem_Sensor+0x64>)
 80033fe:	f7fe f9e1 	bl	80017c4 <__aeabi_dsub>
 8003402:	0003      	movs	r3, r0
 8003404:	000c      	movs	r4, r1
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	607c      	str	r4, [r7, #4]
					- 46.85);
	return T;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	687c      	ldr	r4, [r7, #4]
}
 800340e:	0018      	movs	r0, r3
 8003410:	0021      	movs	r1, r4
 8003412:	46bd      	mov	sp, r7
 8003414:	b003      	add	sp, #12
 8003416:	bd90      	pop	{r4, r7, pc}
 8003418:	3d70a3d7 	.word	0x3d70a3d7
 800341c:	4065f70a 	.word	0x4065f70a
 8003420:	40f00000 	.word	0x40f00000
 8003424:	cccccccd 	.word	0xcccccccd
 8003428:	40476ccc 	.word	0x40476ccc

0800342c <Hum_Sensor>:
 *
 * Read the sensor via i2c and calculate the humidity.
 * @param  argument: Not used
 * @retval double: humidity value
 */
double Hum_Sensor() {
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
	double H = (((125 * (Read_Sensor_16_unsigned(0xF5, (0x40 << 1)))) / 65536)
 8003432:	2180      	movs	r1, #128	; 0x80
 8003434:	20f5      	movs	r0, #245	; 0xf5
 8003436:	f7ff fa2f 	bl	8002898 <Read_Sensor_16_unsigned>
 800343a:	0003      	movs	r3, r0
 800343c:	001a      	movs	r2, r3
 800343e:	0013      	movs	r3, r2
 8003440:	015b      	lsls	r3, r3, #5
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	189b      	adds	r3, r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	da02      	bge.n	8003452 <Hum_Sensor+0x26>
 800344c:	4a09      	ldr	r2, [pc, #36]	; (8003474 <Hum_Sensor+0x48>)
 800344e:	4694      	mov	ip, r2
 8003450:	4463      	add	r3, ip
 8003452:	141b      	asrs	r3, r3, #16
			- 6);
 8003454:	3b06      	subs	r3, #6
	double H = (((125 * (Read_Sensor_16_unsigned(0xF5, (0x40 << 1)))) / 65536)
 8003456:	0018      	movs	r0, r3
 8003458:	f7fe fd4e 	bl	8001ef8 <__aeabi_i2d>
 800345c:	0003      	movs	r3, r0
 800345e:	000c      	movs	r4, r1
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	607c      	str	r4, [r7, #4]
	return H;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	687c      	ldr	r4, [r7, #4]
}
 8003468:	0018      	movs	r0, r3
 800346a:	0021      	movs	r1, r4
 800346c:	46bd      	mov	sp, r7
 800346e:	b003      	add	sp, #12
 8003470:	bd90      	pop	{r4, r7, pc}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	0000ffff 	.word	0x0000ffff

08003478 <LUX_Sensor>:
 *
 * Read the LDR via the ADC and calculate the light intensity.
 * @param  argument: Not used
 * @retval double: humidity value
 */
double LUX_Sensor() {
 8003478:	b590      	push	{r4, r7, lr}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
	uint16_t analogValue;
	double returnValue = 0.0;
 800347e:	2300      	movs	r3, #0
 8003480:	2400      	movs	r4, #0
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	617c      	str	r4, [r7, #20]
	double voltage = 0.0;
 8003486:	2300      	movs	r3, #0
 8003488:	2400      	movs	r4, #0
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	60fc      	str	r4, [r7, #12]

	HAL_ADC_Start(&hadc);
 800348e:	4b24      	ldr	r3, [pc, #144]	; (8003520 <LUX_Sensor+0xa8>)
 8003490:	0018      	movs	r0, r3
 8003492:	f001 f8b7 	bl	8004604 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8003496:	2301      	movs	r3, #1
 8003498:	425a      	negs	r2, r3
 800349a:	4b21      	ldr	r3, [pc, #132]	; (8003520 <LUX_Sensor+0xa8>)
 800349c:	0011      	movs	r1, r2
 800349e:	0018      	movs	r0, r3
 80034a0:	f001 f904 	bl	80046ac <HAL_ADC_PollForConversion>
	analogValue = HAL_ADC_GetValue(&hadc);
 80034a4:	4b1e      	ldr	r3, [pc, #120]	; (8003520 <LUX_Sensor+0xa8>)
 80034a6:	0018      	movs	r0, r3
 80034a8:	f001 f992 	bl	80047d0 <HAL_ADC_GetValue>
 80034ac:	0002      	movs	r2, r0
 80034ae:	1dbb      	adds	r3, r7, #6
 80034b0:	801a      	strh	r2, [r3, #0]

	voltage = 3.3 - (((double) analogValue / 4095) * 3.3);
 80034b2:	1dbb      	adds	r3, r7, #6
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	0018      	movs	r0, r3
 80034b8:	f7fe fd58 	bl	8001f6c <__aeabi_ui2d>
 80034bc:	2200      	movs	r2, #0
 80034be:	4b19      	ldr	r3, [pc, #100]	; (8003524 <LUX_Sensor+0xac>)
 80034c0:	f7fd fb04 	bl	8000acc <__aeabi_ddiv>
 80034c4:	0003      	movs	r3, r0
 80034c6:	000c      	movs	r4, r1
 80034c8:	0018      	movs	r0, r3
 80034ca:	0021      	movs	r1, r4
 80034cc:	4a16      	ldr	r2, [pc, #88]	; (8003528 <LUX_Sensor+0xb0>)
 80034ce:	4b17      	ldr	r3, [pc, #92]	; (800352c <LUX_Sensor+0xb4>)
 80034d0:	f7fd ff06 	bl	80012e0 <__aeabi_dmul>
 80034d4:	0003      	movs	r3, r0
 80034d6:	000c      	movs	r4, r1
 80034d8:	001a      	movs	r2, r3
 80034da:	0023      	movs	r3, r4
 80034dc:	4812      	ldr	r0, [pc, #72]	; (8003528 <LUX_Sensor+0xb0>)
 80034de:	4913      	ldr	r1, [pc, #76]	; (800352c <LUX_Sensor+0xb4>)
 80034e0:	f7fe f970 	bl	80017c4 <__aeabi_dsub>
 80034e4:	0003      	movs	r3, r0
 80034e6:	000c      	movs	r4, r1
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	60fc      	str	r4, [r7, #12]

	returnValue = (250.0 / voltage) - 50.0;
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2000      	movs	r0, #0
 80034f2:	490f      	ldr	r1, [pc, #60]	; (8003530 <LUX_Sensor+0xb8>)
 80034f4:	f7fd faea 	bl	8000acc <__aeabi_ddiv>
 80034f8:	0003      	movs	r3, r0
 80034fa:	000c      	movs	r4, r1
 80034fc:	0018      	movs	r0, r3
 80034fe:	0021      	movs	r1, r4
 8003500:	2200      	movs	r2, #0
 8003502:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <LUX_Sensor+0xbc>)
 8003504:	f7fe f95e 	bl	80017c4 <__aeabi_dsub>
 8003508:	0003      	movs	r3, r0
 800350a:	000c      	movs	r4, r1
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	617c      	str	r4, [r7, #20]
	return returnValue;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	697c      	ldr	r4, [r7, #20]
}
 8003514:	0018      	movs	r0, r3
 8003516:	0021      	movs	r1, r4
 8003518:	46bd      	mov	sp, r7
 800351a:	b007      	add	sp, #28
 800351c:	bd90      	pop	{r4, r7, pc}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	20001434 	.word	0x20001434
 8003524:	40affe00 	.word	0x40affe00
 8003528:	66666666 	.word	0x66666666
 800352c:	400a6666 	.word	0x400a6666
 8003530:	406f4000 	.word	0x406f4000
 8003534:	40490000 	.word	0x40490000

08003538 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4a06      	ldr	r2, [pc, #24]	; (8003560 <vApplicationGetIdleTaskMemory+0x28>)
 8003548:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	4a05      	ldr	r2, [pc, #20]	; (8003564 <vApplicationGetIdleTaskMemory+0x2c>)
 800354e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2280      	movs	r2, #128	; 0x80
 8003554:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	46bd      	mov	sp, r7
 800355a:	b004      	add	sp, #16
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	2000033c 	.word	0x2000033c
 8003564:	20000390 	.word	0x20000390

08003568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003568:	b5b0      	push	{r4, r5, r7, lr}
 800356a:	b096      	sub	sp, #88	; 0x58
 800356c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800356e:	f000 feb7 	bl	80042e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003572:	f000 f84d 	bl	8003610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003576:	f000 fa55 	bl	8003a24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800357a:	f000 fa23 	bl	80039c4 <MX_USART2_UART_Init>
  MX_ADC_Init();
 800357e:	f000 f8bb 	bl	80036f8 <MX_ADC_Init>
  MX_I2C1_Init();
 8003582:	f000 f915 	bl	80037b0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8003586:	f000 f9ed 	bl	8003964 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800358a:	f000 f951 	bl	8003830 <MX_RTC_Init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 256);
 800358e:	213c      	movs	r1, #60	; 0x3c
 8003590:	187b      	adds	r3, r7, r1
 8003592:	4a19      	ldr	r2, [pc, #100]	; (80035f8 <main+0x90>)
 8003594:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003596:	c331      	stmia	r3!, {r0, r4, r5}
 8003598:	ca31      	ldmia	r2!, {r0, r4, r5}
 800359a:	c331      	stmia	r3!, {r0, r4, r5}
 800359c:	6812      	ldr	r2, [r2, #0]
 800359e:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80035a0:	187b      	adds	r3, r7, r1
 80035a2:	2100      	movs	r1, #0
 80035a4:	0018      	movs	r0, r3
 80035a6:	f004 fe1c 	bl	80081e2 <osThreadCreate>
 80035aa:	0002      	movs	r2, r0
 80035ac:	4b13      	ldr	r3, [pc, #76]	; (80035fc <main+0x94>)
 80035ae:	601a      	str	r2, [r3, #0]

  /* definition and creation of Read_T_H_A_L_Se */
  osThreadDef(Read_T_H_A_L_Se, ReadSensors, osPriorityNormal, 0, 128);
 80035b0:	2120      	movs	r1, #32
 80035b2:	187b      	adds	r3, r7, r1
 80035b4:	4a12      	ldr	r2, [pc, #72]	; (8003600 <main+0x98>)
 80035b6:	ca31      	ldmia	r2!, {r0, r4, r5}
 80035b8:	c331      	stmia	r3!, {r0, r4, r5}
 80035ba:	ca31      	ldmia	r2!, {r0, r4, r5}
 80035bc:	c331      	stmia	r3!, {r0, r4, r5}
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	601a      	str	r2, [r3, #0]
  Read_T_H_A_L_SeHandle = osThreadCreate(osThread(Read_T_H_A_L_Se), NULL);
 80035c2:	187b      	adds	r3, r7, r1
 80035c4:	2100      	movs	r1, #0
 80035c6:	0018      	movs	r0, r3
 80035c8:	f004 fe0b 	bl	80081e2 <osThreadCreate>
 80035cc:	0002      	movs	r2, r0
 80035ce:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <main+0x9c>)
 80035d0:	601a      	str	r2, [r3, #0]

  /* definition and creation of ConnectToESP */
  osThreadDef(ConnectToESP, ConnectToServer, osPriorityAboveNormal, 0, 256);
 80035d2:	1d3b      	adds	r3, r7, #4
 80035d4:	4a0c      	ldr	r2, [pc, #48]	; (8003608 <main+0xa0>)
 80035d6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80035d8:	c313      	stmia	r3!, {r0, r1, r4}
 80035da:	ca13      	ldmia	r2!, {r0, r1, r4}
 80035dc:	c313      	stmia	r3!, {r0, r1, r4}
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	601a      	str	r2, [r3, #0]
  ConnectToESPHandle = osThreadCreate(osThread(ConnectToESP), NULL);
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	2100      	movs	r1, #0
 80035e6:	0018      	movs	r0, r3
 80035e8:	f004 fdfb 	bl	80081e2 <osThreadCreate>
 80035ec:	0002      	movs	r2, r0
 80035ee:	4b07      	ldr	r3, [pc, #28]	; (800360c <main+0xa4>)
 80035f0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80035f2:	f004 fdee 	bl	80081d2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80035f6:	e7fe      	b.n	80035f6 <main+0x8e>
 80035f8:	0800b78c 	.word	0x0800b78c
 80035fc:	2000153c 	.word	0x2000153c
 8003600:	0800b7b8 	.word	0x0800b7b8
 8003604:	20001540 	.word	0x20001540
 8003608:	0800b7e4 	.word	0x0800b7e4
 800360c:	20001640 	.word	0x20001640

08003610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003610:	b590      	push	{r4, r7, lr}
 8003612:	b095      	sub	sp, #84	; 0x54
 8003614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003616:	2420      	movs	r4, #32
 8003618:	193b      	adds	r3, r7, r4
 800361a:	0018      	movs	r0, r3
 800361c:	2330      	movs	r3, #48	; 0x30
 800361e:	001a      	movs	r2, r3
 8003620:	2100      	movs	r1, #0
 8003622:	f005 fe52 	bl	80092ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003626:	2310      	movs	r3, #16
 8003628:	18fb      	adds	r3, r7, r3
 800362a:	0018      	movs	r0, r3
 800362c:	2310      	movs	r3, #16
 800362e:	001a      	movs	r2, r3
 8003630:	2100      	movs	r1, #0
 8003632:	f005 fe4a 	bl	80092ca <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003636:	003b      	movs	r3, r7
 8003638:	0018      	movs	r0, r3
 800363a:	2310      	movs	r3, #16
 800363c:	001a      	movs	r2, r3
 800363e:	2100      	movs	r1, #0
 8003640:	f005 fe43 	bl	80092ca <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8003644:	0021      	movs	r1, r4
 8003646:	187b      	adds	r3, r7, r1
 8003648:	221a      	movs	r2, #26
 800364a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800364c:	187b      	adds	r3, r7, r1
 800364e:	2201      	movs	r2, #1
 8003650:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003652:	187b      	adds	r3, r7, r1
 8003654:	2201      	movs	r2, #1
 8003656:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003658:	187b      	adds	r3, r7, r1
 800365a:	2210      	movs	r2, #16
 800365c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800365e:	187b      	adds	r3, r7, r1
 8003660:	2210      	movs	r2, #16
 8003662:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003664:	187b      	adds	r3, r7, r1
 8003666:	2201      	movs	r2, #1
 8003668:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800366a:	187b      	adds	r3, r7, r1
 800366c:	2202      	movs	r2, #2
 800366e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003670:	187b      	adds	r3, r7, r1
 8003672:	2200      	movs	r2, #0
 8003674:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003676:	187b      	adds	r3, r7, r1
 8003678:	22a0      	movs	r2, #160	; 0xa0
 800367a:	0392      	lsls	r2, r2, #14
 800367c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800367e:	187b      	adds	r3, r7, r1
 8003680:	2200      	movs	r2, #0
 8003682:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003684:	187b      	adds	r3, r7, r1
 8003686:	0018      	movs	r0, r3
 8003688:	f002 fb36 	bl	8005cf8 <HAL_RCC_OscConfig>
 800368c:	1e03      	subs	r3, r0, #0
 800368e:	d001      	beq.n	8003694 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8003690:	f000 fba6 	bl	8003de0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003694:	2110      	movs	r1, #16
 8003696:	187b      	adds	r3, r7, r1
 8003698:	2207      	movs	r2, #7
 800369a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800369c:	187b      	adds	r3, r7, r1
 800369e:	2202      	movs	r2, #2
 80036a0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036a2:	187b      	adds	r3, r7, r1
 80036a4:	2200      	movs	r2, #0
 80036a6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036a8:	187b      	adds	r3, r7, r1
 80036aa:	2200      	movs	r2, #0
 80036ac:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80036ae:	187b      	adds	r3, r7, r1
 80036b0:	2101      	movs	r1, #1
 80036b2:	0018      	movs	r0, r3
 80036b4:	f002 fe3c 	bl	8006330 <HAL_RCC_ClockConfig>
 80036b8:	1e03      	subs	r3, r0, #0
 80036ba:	d001      	beq.n	80036c0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80036bc:	f000 fb90 	bl	8003de0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80036c0:	003b      	movs	r3, r7
 80036c2:	4a0c      	ldr	r2, [pc, #48]	; (80036f4 <SystemClock_Config+0xe4>)
 80036c4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80036c6:	003b      	movs	r3, r7
 80036c8:	2200      	movs	r2, #0
 80036ca:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80036cc:	003b      	movs	r3, r7
 80036ce:	2200      	movs	r2, #0
 80036d0:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80036d2:	003b      	movs	r3, r7
 80036d4:	2280      	movs	r2, #128	; 0x80
 80036d6:	0092      	lsls	r2, r2, #2
 80036d8:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036da:	003b      	movs	r3, r7
 80036dc:	0018      	movs	r0, r3
 80036de:	f002 ffa3 	bl	8006628 <HAL_RCCEx_PeriphCLKConfig>
 80036e2:	1e03      	subs	r3, r0, #0
 80036e4:	d001      	beq.n	80036ea <SystemClock_Config+0xda>
  {
    Error_Handler();
 80036e6:	f000 fb7b 	bl	8003de0 <Error_Handler>
  }
}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b015      	add	sp, #84	; 0x54
 80036f0:	bd90      	pop	{r4, r7, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	00010021 	.word	0x00010021

080036f8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80036fe:	1d3b      	adds	r3, r7, #4
 8003700:	0018      	movs	r0, r3
 8003702:	230c      	movs	r3, #12
 8003704:	001a      	movs	r2, r3
 8003706:	2100      	movs	r1, #0
 8003708:	f005 fddf 	bl	80092ca <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800370c:	4b26      	ldr	r3, [pc, #152]	; (80037a8 <MX_ADC_Init+0xb0>)
 800370e:	4a27      	ldr	r2, [pc, #156]	; (80037ac <MX_ADC_Init+0xb4>)
 8003710:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003712:	4b25      	ldr	r3, [pc, #148]	; (80037a8 <MX_ADC_Init+0xb0>)
 8003714:	2200      	movs	r2, #0
 8003716:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003718:	4b23      	ldr	r3, [pc, #140]	; (80037a8 <MX_ADC_Init+0xb0>)
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800371e:	4b22      	ldr	r3, [pc, #136]	; (80037a8 <MX_ADC_Init+0xb0>)
 8003720:	2200      	movs	r2, #0
 8003722:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003724:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <MX_ADC_Init+0xb0>)
 8003726:	2201      	movs	r2, #1
 8003728:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800372a:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <MX_ADC_Init+0xb0>)
 800372c:	2204      	movs	r2, #4
 800372e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003730:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <MX_ADC_Init+0xb0>)
 8003732:	2200      	movs	r2, #0
 8003734:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003736:	4b1c      	ldr	r3, [pc, #112]	; (80037a8 <MX_ADC_Init+0xb0>)
 8003738:	2200      	movs	r2, #0
 800373a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800373c:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <MX_ADC_Init+0xb0>)
 800373e:	2200      	movs	r2, #0
 8003740:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003742:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <MX_ADC_Init+0xb0>)
 8003744:	2200      	movs	r2, #0
 8003746:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003748:	4b17      	ldr	r3, [pc, #92]	; (80037a8 <MX_ADC_Init+0xb0>)
 800374a:	22c2      	movs	r2, #194	; 0xc2
 800374c:	32ff      	adds	r2, #255	; 0xff
 800374e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003750:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <MX_ADC_Init+0xb0>)
 8003752:	2200      	movs	r2, #0
 8003754:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003756:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <MX_ADC_Init+0xb0>)
 8003758:	2224      	movs	r2, #36	; 0x24
 800375a:	2100      	movs	r1, #0
 800375c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <MX_ADC_Init+0xb0>)
 8003760:	2201      	movs	r2, #1
 8003762:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003764:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <MX_ADC_Init+0xb0>)
 8003766:	0018      	movs	r0, r3
 8003768:	f000 fe0c 	bl	8004384 <HAL_ADC_Init>
 800376c:	1e03      	subs	r3, r0, #0
 800376e:	d001      	beq.n	8003774 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8003770:	f000 fb36 	bl	8003de0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003774:	1d3b      	adds	r3, r7, #4
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800377a:	1d3b      	adds	r3, r7, #4
 800377c:	2280      	movs	r2, #128	; 0x80
 800377e:	0152      	lsls	r2, r2, #5
 8003780:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003782:	1d3b      	adds	r3, r7, #4
 8003784:	2280      	movs	r2, #128	; 0x80
 8003786:	0552      	lsls	r2, r2, #21
 8003788:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800378a:	1d3a      	adds	r2, r7, #4
 800378c:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <MX_ADC_Init+0xb0>)
 800378e:	0011      	movs	r1, r2
 8003790:	0018      	movs	r0, r3
 8003792:	f001 f829 	bl	80047e8 <HAL_ADC_ConfigChannel>
 8003796:	1e03      	subs	r3, r0, #0
 8003798:	d001      	beq.n	800379e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800379a:	f000 fb21 	bl	8003de0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b004      	add	sp, #16
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	20001434 	.word	0x20001434
 80037ac:	40012400 	.word	0x40012400

080037b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80037b4:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <MX_I2C1_Init+0x74>)
 80037b6:	4a1c      	ldr	r2, [pc, #112]	; (8003828 <MX_I2C1_Init+0x78>)
 80037b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80037ba:	4b1a      	ldr	r3, [pc, #104]	; (8003824 <MX_I2C1_Init+0x74>)
 80037bc:	4a1b      	ldr	r2, [pc, #108]	; (800382c <MX_I2C1_Init+0x7c>)
 80037be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80037c0:	4b18      	ldr	r3, [pc, #96]	; (8003824 <MX_I2C1_Init+0x74>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037c6:	4b17      	ldr	r3, [pc, #92]	; (8003824 <MX_I2C1_Init+0x74>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037cc:	4b15      	ldr	r3, [pc, #84]	; (8003824 <MX_I2C1_Init+0x74>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80037d2:	4b14      	ldr	r3, [pc, #80]	; (8003824 <MX_I2C1_Init+0x74>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80037d8:	4b12      	ldr	r3, [pc, #72]	; (8003824 <MX_I2C1_Init+0x74>)
 80037da:	2200      	movs	r2, #0
 80037dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037de:	4b11      	ldr	r3, [pc, #68]	; (8003824 <MX_I2C1_Init+0x74>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037e4:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <MX_I2C1_Init+0x74>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80037ea:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <MX_I2C1_Init+0x74>)
 80037ec:	0018      	movs	r0, r3
 80037ee:	f001 fc31 	bl	8005054 <HAL_I2C_Init>
 80037f2:	1e03      	subs	r3, r0, #0
 80037f4:	d001      	beq.n	80037fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80037f6:	f000 faf3 	bl	8003de0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80037fa:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <MX_I2C1_Init+0x74>)
 80037fc:	2100      	movs	r1, #0
 80037fe:	0018      	movs	r0, r3
 8003800:	f002 f9cc 	bl	8005b9c <HAL_I2CEx_ConfigAnalogFilter>
 8003804:	1e03      	subs	r3, r0, #0
 8003806:	d001      	beq.n	800380c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003808:	f000 faea 	bl	8003de0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <MX_I2C1_Init+0x74>)
 800380e:	2100      	movs	r1, #0
 8003810:	0018      	movs	r0, r3
 8003812:	f002 fa0f 	bl	8005c34 <HAL_I2CEx_ConfigDigitalFilter>
 8003816:	1e03      	subs	r3, r0, #0
 8003818:	d001      	beq.n	800381e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800381a:	f000 fae1 	bl	8003de0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	200012e8 	.word	0x200012e8
 8003828:	40005400 	.word	0x40005400
 800382c:	2000090e 	.word	0x2000090e

08003830 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b090      	sub	sp, #64	; 0x40
 8003834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003836:	232c      	movs	r3, #44	; 0x2c
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	0018      	movs	r0, r3
 800383c:	2314      	movs	r3, #20
 800383e:	001a      	movs	r2, r3
 8003840:	2100      	movs	r1, #0
 8003842:	f005 fd42 	bl	80092ca <memset>
  RTC_DateTypeDef sDate = {0};
 8003846:	2328      	movs	r3, #40	; 0x28
 8003848:	18fb      	adds	r3, r7, r3
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800384e:	003b      	movs	r3, r7
 8003850:	0018      	movs	r0, r3
 8003852:	2328      	movs	r3, #40	; 0x28
 8003854:	001a      	movs	r2, r3
 8003856:	2100      	movs	r1, #0
 8003858:	f005 fd37 	bl	80092ca <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800385c:	4b3f      	ldr	r3, [pc, #252]	; (800395c <MX_RTC_Init+0x12c>)
 800385e:	4a40      	ldr	r2, [pc, #256]	; (8003960 <MX_RTC_Init+0x130>)
 8003860:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003862:	4b3e      	ldr	r3, [pc, #248]	; (800395c <MX_RTC_Init+0x12c>)
 8003864:	2200      	movs	r2, #0
 8003866:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003868:	4b3c      	ldr	r3, [pc, #240]	; (800395c <MX_RTC_Init+0x12c>)
 800386a:	227f      	movs	r2, #127	; 0x7f
 800386c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800386e:	4b3b      	ldr	r3, [pc, #236]	; (800395c <MX_RTC_Init+0x12c>)
 8003870:	22ff      	movs	r2, #255	; 0xff
 8003872:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003874:	4b39      	ldr	r3, [pc, #228]	; (800395c <MX_RTC_Init+0x12c>)
 8003876:	2200      	movs	r2, #0
 8003878:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800387a:	4b38      	ldr	r3, [pc, #224]	; (800395c <MX_RTC_Init+0x12c>)
 800387c:	2200      	movs	r2, #0
 800387e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003880:	4b36      	ldr	r3, [pc, #216]	; (800395c <MX_RTC_Init+0x12c>)
 8003882:	2200      	movs	r2, #0
 8003884:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003886:	4b35      	ldr	r3, [pc, #212]	; (800395c <MX_RTC_Init+0x12c>)
 8003888:	0018      	movs	r0, r3
 800388a:	f002 ff9b 	bl	80067c4 <HAL_RTC_Init>
 800388e:	1e03      	subs	r3, r0, #0
 8003890:	d001      	beq.n	8003896 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8003892:	f000 faa5 	bl	8003de0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	187b      	adds	r3, r7, r1
 800389a:	2200      	movs	r2, #0
 800389c:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800389e:	187b      	adds	r3, r7, r1
 80038a0:	2200      	movs	r2, #0
 80038a2:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80038a4:	187b      	adds	r3, r7, r1
 80038a6:	2200      	movs	r2, #0
 80038a8:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80038aa:	187b      	adds	r3, r7, r1
 80038ac:	2200      	movs	r2, #0
 80038ae:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80038b0:	187b      	adds	r3, r7, r1
 80038b2:	2200      	movs	r2, #0
 80038b4:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80038b6:	1879      	adds	r1, r7, r1
 80038b8:	4b28      	ldr	r3, [pc, #160]	; (800395c <MX_RTC_Init+0x12c>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	0018      	movs	r0, r3
 80038be:	f003 f815 	bl	80068ec <HAL_RTC_SetTime>
 80038c2:	1e03      	subs	r3, r0, #0
 80038c4:	d001      	beq.n	80038ca <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 80038c6:	f000 fa8b 	bl	8003de0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80038ca:	2128      	movs	r1, #40	; 0x28
 80038cc:	187b      	adds	r3, r7, r1
 80038ce:	2201      	movs	r2, #1
 80038d0:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80038d2:	187b      	adds	r3, r7, r1
 80038d4:	2201      	movs	r2, #1
 80038d6:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80038d8:	187b      	adds	r3, r7, r1
 80038da:	2201      	movs	r2, #1
 80038dc:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80038de:	187b      	adds	r3, r7, r1
 80038e0:	2200      	movs	r2, #0
 80038e2:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80038e4:	1879      	adds	r1, r7, r1
 80038e6:	4b1d      	ldr	r3, [pc, #116]	; (800395c <MX_RTC_Init+0x12c>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	0018      	movs	r0, r3
 80038ec:	f003 f8ba 	bl	8006a64 <HAL_RTC_SetDate>
 80038f0:	1e03      	subs	r3, r0, #0
 80038f2:	d001      	beq.n	80038f8 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80038f4:	f000 fa74 	bl	8003de0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80038f8:	003b      	movs	r3, r7
 80038fa:	2200      	movs	r2, #0
 80038fc:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 80038fe:	003b      	movs	r3, r7
 8003900:	2201      	movs	r2, #1
 8003902:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8003904:	003b      	movs	r3, r7
 8003906:	2200      	movs	r2, #0
 8003908:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800390a:	003b      	movs	r3, r7
 800390c:	2200      	movs	r2, #0
 800390e:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003910:	003b      	movs	r3, r7
 8003912:	2200      	movs	r2, #0
 8003914:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003916:	003b      	movs	r3, r7
 8003918:	2200      	movs	r2, #0
 800391a:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800391c:	003b      	movs	r3, r7
 800391e:	2200      	movs	r2, #0
 8003920:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003922:	003b      	movs	r3, r7
 8003924:	2200      	movs	r2, #0
 8003926:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003928:	003b      	movs	r3, r7
 800392a:	2200      	movs	r2, #0
 800392c:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800392e:	003b      	movs	r3, r7
 8003930:	2220      	movs	r2, #32
 8003932:	2101      	movs	r1, #1
 8003934:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8003936:	003b      	movs	r3, r7
 8003938:	2280      	movs	r2, #128	; 0x80
 800393a:	0052      	lsls	r2, r2, #1
 800393c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800393e:	0039      	movs	r1, r7
 8003940:	4b06      	ldr	r3, [pc, #24]	; (800395c <MX_RTC_Init+0x12c>)
 8003942:	2201      	movs	r2, #1
 8003944:	0018      	movs	r0, r3
 8003946:	f003 f933 	bl	8006bb0 <HAL_RTC_SetAlarm_IT>
 800394a:	1e03      	subs	r3, r0, #0
 800394c:	d001      	beq.n	8003952 <MX_RTC_Init+0x122>
  {
    Error_Handler();
 800394e:	f000 fa47 	bl	8003de0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	46bd      	mov	sp, r7
 8003956:	b010      	add	sp, #64	; 0x40
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	20001620 	.word	0x20001620
 8003960:	40002800 	.word	0x40002800

08003964 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003968:	4b14      	ldr	r3, [pc, #80]	; (80039bc <MX_USART1_UART_Init+0x58>)
 800396a:	4a15      	ldr	r2, [pc, #84]	; (80039c0 <MX_USART1_UART_Init+0x5c>)
 800396c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800396e:	4b13      	ldr	r3, [pc, #76]	; (80039bc <MX_USART1_UART_Init+0x58>)
 8003970:	22e1      	movs	r2, #225	; 0xe1
 8003972:	0252      	lsls	r2, r2, #9
 8003974:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <MX_USART1_UART_Init+0x58>)
 8003978:	2200      	movs	r2, #0
 800397a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800397c:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <MX_USART1_UART_Init+0x58>)
 800397e:	2200      	movs	r2, #0
 8003980:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003982:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <MX_USART1_UART_Init+0x58>)
 8003984:	2200      	movs	r2, #0
 8003986:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <MX_USART1_UART_Init+0x58>)
 800398a:	220c      	movs	r2, #12
 800398c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800398e:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <MX_USART1_UART_Init+0x58>)
 8003990:	2200      	movs	r2, #0
 8003992:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003994:	4b09      	ldr	r3, [pc, #36]	; (80039bc <MX_USART1_UART_Init+0x58>)
 8003996:	2200      	movs	r2, #0
 8003998:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800399a:	4b08      	ldr	r3, [pc, #32]	; (80039bc <MX_USART1_UART_Init+0x58>)
 800399c:	2200      	movs	r2, #0
 800399e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039a0:	4b06      	ldr	r3, [pc, #24]	; (80039bc <MX_USART1_UART_Init+0x58>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <MX_USART1_UART_Init+0x58>)
 80039a8:	0018      	movs	r0, r3
 80039aa:	f003 fcb3 	bl	8007314 <HAL_UART_Init>
 80039ae:	1e03      	subs	r3, r0, #0
 80039b0:	d001      	beq.n	80039b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80039b2:	f000 fa15 	bl	8003de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20001334 	.word	0x20001334
 80039c0:	40013800 	.word	0x40013800

080039c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039c8:	4b14      	ldr	r3, [pc, #80]	; (8003a1c <MX_USART2_UART_Init+0x58>)
 80039ca:	4a15      	ldr	r2, [pc, #84]	; (8003a20 <MX_USART2_UART_Init+0x5c>)
 80039cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80039ce:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <MX_USART2_UART_Init+0x58>)
 80039d0:	22e1      	movs	r2, #225	; 0xe1
 80039d2:	0252      	lsls	r2, r2, #9
 80039d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039d6:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <MX_USART2_UART_Init+0x58>)
 80039d8:	2200      	movs	r2, #0
 80039da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039dc:	4b0f      	ldr	r3, [pc, #60]	; (8003a1c <MX_USART2_UART_Init+0x58>)
 80039de:	2200      	movs	r2, #0
 80039e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039e2:	4b0e      	ldr	r3, [pc, #56]	; (8003a1c <MX_USART2_UART_Init+0x58>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039e8:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <MX_USART2_UART_Init+0x58>)
 80039ea:	220c      	movs	r2, #12
 80039ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039ee:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <MX_USART2_UART_Init+0x58>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039f4:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <MX_USART2_UART_Init+0x58>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039fa:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <MX_USART2_UART_Init+0x58>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <MX_USART2_UART_Init+0x58>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <MX_USART2_UART_Init+0x58>)
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f003 fc83 	bl	8007314 <HAL_UART_Init>
 8003a0e:	1e03      	subs	r3, r0, #0
 8003a10:	d001      	beq.n	8003a16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003a12:	f000 f9e5 	bl	8003de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	200013b4 	.word	0x200013b4
 8003a20:	40004400 	.word	0x40004400

08003a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a24:	b590      	push	{r4, r7, lr}
 8003a26:	b08b      	sub	sp, #44	; 0x2c
 8003a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a2a:	2414      	movs	r4, #20
 8003a2c:	193b      	adds	r3, r7, r4
 8003a2e:	0018      	movs	r0, r3
 8003a30:	2314      	movs	r3, #20
 8003a32:	001a      	movs	r2, r3
 8003a34:	2100      	movs	r1, #0
 8003a36:	f005 fc48 	bl	80092ca <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a3a:	4b33      	ldr	r3, [pc, #204]	; (8003b08 <MX_GPIO_Init+0xe4>)
 8003a3c:	695a      	ldr	r2, [r3, #20]
 8003a3e:	4b32      	ldr	r3, [pc, #200]	; (8003b08 <MX_GPIO_Init+0xe4>)
 8003a40:	2180      	movs	r1, #128	; 0x80
 8003a42:	0309      	lsls	r1, r1, #12
 8003a44:	430a      	orrs	r2, r1
 8003a46:	615a      	str	r2, [r3, #20]
 8003a48:	4b2f      	ldr	r3, [pc, #188]	; (8003b08 <MX_GPIO_Init+0xe4>)
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	031b      	lsls	r3, r3, #12
 8003a50:	4013      	ands	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a56:	4b2c      	ldr	r3, [pc, #176]	; (8003b08 <MX_GPIO_Init+0xe4>)
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <MX_GPIO_Init+0xe4>)
 8003a5c:	2180      	movs	r1, #128	; 0x80
 8003a5e:	03c9      	lsls	r1, r1, #15
 8003a60:	430a      	orrs	r2, r1
 8003a62:	615a      	str	r2, [r3, #20]
 8003a64:	4b28      	ldr	r3, [pc, #160]	; (8003b08 <MX_GPIO_Init+0xe4>)
 8003a66:	695a      	ldr	r2, [r3, #20]
 8003a68:	2380      	movs	r3, #128	; 0x80
 8003a6a:	03db      	lsls	r3, r3, #15
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a72:	4b25      	ldr	r3, [pc, #148]	; (8003b08 <MX_GPIO_Init+0xe4>)
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	4b24      	ldr	r3, [pc, #144]	; (8003b08 <MX_GPIO_Init+0xe4>)
 8003a78:	2180      	movs	r1, #128	; 0x80
 8003a7a:	0289      	lsls	r1, r1, #10
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	615a      	str	r2, [r3, #20]
 8003a80:	4b21      	ldr	r3, [pc, #132]	; (8003b08 <MX_GPIO_Init+0xe4>)
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	2380      	movs	r3, #128	; 0x80
 8003a86:	029b      	lsls	r3, r3, #10
 8003a88:	4013      	ands	r3, r2
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a8e:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <MX_GPIO_Init+0xe4>)
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	4b1d      	ldr	r3, [pc, #116]	; (8003b08 <MX_GPIO_Init+0xe4>)
 8003a94:	2180      	movs	r1, #128	; 0x80
 8003a96:	02c9      	lsls	r1, r1, #11
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	615a      	str	r2, [r3, #20]
 8003a9c:	4b1a      	ldr	r3, [pc, #104]	; (8003b08 <MX_GPIO_Init+0xe4>)
 8003a9e:	695a      	ldr	r2, [r3, #20]
 8003aa0:	2380      	movs	r3, #128	; 0x80
 8003aa2:	02db      	lsls	r3, r3, #11
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	607b      	str	r3, [r7, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003aaa:	2390      	movs	r3, #144	; 0x90
 8003aac:	05db      	lsls	r3, r3, #23
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2120      	movs	r1, #32
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f001 fab0 	bl	8005018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003ab8:	193b      	adds	r3, r7, r4
 8003aba:	2280      	movs	r2, #128	; 0x80
 8003abc:	0192      	lsls	r2, r2, #6
 8003abe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ac0:	193b      	adds	r3, r7, r4
 8003ac2:	4a12      	ldr	r2, [pc, #72]	; (8003b0c <MX_GPIO_Init+0xe8>)
 8003ac4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac6:	193b      	adds	r3, r7, r4
 8003ac8:	2200      	movs	r2, #0
 8003aca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003acc:	193b      	adds	r3, r7, r4
 8003ace:	4a10      	ldr	r2, [pc, #64]	; (8003b10 <MX_GPIO_Init+0xec>)
 8003ad0:	0019      	movs	r1, r3
 8003ad2:	0010      	movs	r0, r2
 8003ad4:	f001 f930 	bl	8004d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003ad8:	0021      	movs	r1, r4
 8003ada:	187b      	adds	r3, r7, r1
 8003adc:	2220      	movs	r2, #32
 8003ade:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ae0:	187b      	adds	r3, r7, r1
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae6:	187b      	adds	r3, r7, r1
 8003ae8:	2200      	movs	r2, #0
 8003aea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	2200      	movs	r2, #0
 8003af0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003af2:	187a      	adds	r2, r7, r1
 8003af4:	2390      	movs	r3, #144	; 0x90
 8003af6:	05db      	lsls	r3, r3, #23
 8003af8:	0011      	movs	r1, r2
 8003afa:	0018      	movs	r0, r3
 8003afc:	f001 f91c 	bl	8004d38 <HAL_GPIO_Init>

}
 8003b00:	46c0      	nop			; (mov r8, r8)
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b00b      	add	sp, #44	; 0x2c
 8003b06:	bd90      	pop	{r4, r7, pc}
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	10210000 	.word	0x10210000
 8003b10:	48000800 	.word	0x48000800

08003b14 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	resetStandBy();
 8003b1c:	f000 f966 	bl	8003dec <resetStandBy>

	if (Sensor_Read_status == 2 && Connection_Server_status == 2) {
 8003b20:	4b5b      	ldr	r3, [pc, #364]	; (8003c90 <StartDefaultTask+0x17c>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d000      	beq.n	8003b2a <StartDefaultTask+0x16>
 8003b28:	e088      	b.n	8003c3c <StartDefaultTask+0x128>
 8003b2a:	4b5a      	ldr	r3, [pc, #360]	; (8003c94 <StartDefaultTask+0x180>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d000      	beq.n	8003b34 <StartDefaultTask+0x20>
 8003b32:	e083      	b.n	8003c3c <StartDefaultTask+0x128>

		int i = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60fb      	str	r3, [r7, #12]
		while (i < missed_cycles) {
 8003b38:	e057      	b.n	8003bea <StartDefaultTask+0xd6>
			for (int j = 0; j < 10; j++) {
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	e051      	b.n	8003be4 <StartDefaultTask+0xd0>
				readFlash_Measure_DATA(&j, &sensorData);
 8003b40:	4a55      	ldr	r2, [pc, #340]	; (8003c98 <StartDefaultTask+0x184>)
 8003b42:	2308      	movs	r3, #8
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	0011      	movs	r1, r2
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f7ff f83d 	bl	8002bc8 <readFlash_Measure_DATA>
				sensorData[j].minutes_expired = missed_cycles - i;
 8003b4e:	4b53      	ldr	r3, [pc, #332]	; (8003c9c <StartDefaultTask+0x188>)
 8003b50:	6819      	ldr	r1, [r3, #0]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1ac9      	subs	r1, r1, r3
 8003b58:	484f      	ldr	r0, [pc, #316]	; (8003c98 <StartDefaultTask+0x184>)
 8003b5a:	0013      	movs	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	189b      	adds	r3, r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	18c3      	adds	r3, r0, r3
 8003b64:	3310      	adds	r3, #16
 8003b66:	6019      	str	r1, [r3, #0]
				tcpSend(sensorData[j].T, sensorData[j].H, sensorData[j].A,
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	494b      	ldr	r1, [pc, #300]	; (8003c98 <StartDefaultTask+0x184>)
 8003b6c:	0013      	movs	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	189b      	adds	r3, r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	5858      	ldr	r0, [r3, r1]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	4947      	ldr	r1, [pc, #284]	; (8003c98 <StartDefaultTask+0x184>)
 8003b7a:	0013      	movs	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	189b      	adds	r3, r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	18cb      	adds	r3, r1, r3
 8003b84:	3304      	adds	r3, #4
 8003b86:	681c      	ldr	r4, [r3, #0]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	4943      	ldr	r1, [pc, #268]	; (8003c98 <StartDefaultTask+0x184>)
 8003b8c:	0013      	movs	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	189b      	adds	r3, r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	18cb      	adds	r3, r1, r3
 8003b96:	3308      	adds	r3, #8
 8003b98:	681d      	ldr	r5, [r3, #0]
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	493e      	ldr	r1, [pc, #248]	; (8003c98 <StartDefaultTask+0x184>)
 8003b9e:	0013      	movs	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	189b      	adds	r3, r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	18cb      	adds	r3, r1, r3
 8003ba8:	330c      	adds	r3, #12
 8003baa:	681e      	ldr	r6, [r3, #0]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	493a      	ldr	r1, [pc, #232]	; (8003c98 <StartDefaultTask+0x184>)
 8003bb0:	0013      	movs	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	189b      	adds	r3, r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	18cb      	adds	r3, r1, r3
 8003bba:	3310      	adds	r3, #16
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	1c33      	adds	r3, r6, #0
 8003bc2:	1c2a      	adds	r2, r5, #0
 8003bc4:	1c21      	adds	r1, r4, #0
 8003bc6:	f7fe fc89 	bl	80024dc <tcpSend>
						sensorData[j].L, sensorData[j].minutes_expired);
				i++;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	60fb      	str	r3, [r7, #12]

				if (i == missed_cycles) {
 8003bd0:	4b32      	ldr	r3, [pc, #200]	; (8003c9c <StartDefaultTask+0x188>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d101      	bne.n	8003bde <StartDefaultTask+0xca>
					j = 10;
 8003bda:	230a      	movs	r3, #10
 8003bdc:	60bb      	str	r3, [r7, #8]
			for (int j = 0; j < 10; j++) {
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	3301      	adds	r3, #1
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b09      	cmp	r3, #9
 8003be8:	ddaa      	ble.n	8003b40 <StartDefaultTask+0x2c>
		while (i < missed_cycles) {
 8003bea:	4b2c      	ldr	r3, [pc, #176]	; (8003c9c <StartDefaultTask+0x188>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	dba2      	blt.n	8003b3a <StartDefaultTask+0x26>

			}

		}
		//send current data
		tcpSend(sensorData[10].T, sensorData[10].H, sensorData[10].A,
 8003bf4:	4b28      	ldr	r3, [pc, #160]	; (8003c98 <StartDefaultTask+0x184>)
 8003bf6:	22c8      	movs	r2, #200	; 0xc8
 8003bf8:	5898      	ldr	r0, [r3, r2]
 8003bfa:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <StartDefaultTask+0x184>)
 8003bfc:	22cc      	movs	r2, #204	; 0xcc
 8003bfe:	5899      	ldr	r1, [r3, r2]
 8003c00:	4b25      	ldr	r3, [pc, #148]	; (8003c98 <StartDefaultTask+0x184>)
 8003c02:	22d0      	movs	r2, #208	; 0xd0
 8003c04:	589c      	ldr	r4, [r3, r2]
 8003c06:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <StartDefaultTask+0x184>)
 8003c08:	22d4      	movs	r2, #212	; 0xd4
 8003c0a:	589a      	ldr	r2, [r3, r2]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	1c13      	adds	r3, r2, #0
 8003c12:	1c22      	adds	r2, r4, #0
 8003c14:	f7fe fc62 	bl	80024dc <tcpSend>
				sensorData[10].L, 0);
		missed_cycles = 0;
 8003c18:	4b20      	ldr	r3, [pc, #128]	; (8003c9c <StartDefaultTask+0x188>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
		Sensor_Read_status = 0;
 8003c1e:	4b1c      	ldr	r3, [pc, #112]	; (8003c90 <StartDefaultTask+0x17c>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	701a      	strb	r2, [r3, #0]
		Connection_Server_status = 0;
 8003c24:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <StartDefaultTask+0x180>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]
		writeFlash(&missed_cycles, &sensorData);
 8003c2a:	4a1b      	ldr	r2, [pc, #108]	; (8003c98 <StartDefaultTask+0x184>)
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <StartDefaultTask+0x188>)
 8003c2e:	0011      	movs	r1, r2
 8003c30:	0018      	movs	r0, r3
 8003c32:	f7ff f84f 	bl	8002cd4 <writeFlash>
		startStandBy();
 8003c36:	f000 f8f3 	bl	8003e20 <startStandBy>
	if (Sensor_Read_status == 2 && Connection_Server_status == 2) {
 8003c3a:	e022      	b.n	8003c82 <StartDefaultTask+0x16e>

	} else if (Sensor_Read_status == 2 && Connection_Server_status == 1) {
 8003c3c:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <StartDefaultTask+0x17c>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d111      	bne.n	8003c68 <StartDefaultTask+0x154>
 8003c44:	4b13      	ldr	r3, [pc, #76]	; (8003c94 <StartDefaultTask+0x180>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d10d      	bne.n	8003c68 <StartDefaultTask+0x154>
		missed_cycles++;
 8003c4c:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <StartDefaultTask+0x188>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <StartDefaultTask+0x188>)
 8003c54:	601a      	str	r2, [r3, #0]
		writeFlash(&missed_cycles, &sensorData);
 8003c56:	4a10      	ldr	r2, [pc, #64]	; (8003c98 <StartDefaultTask+0x184>)
 8003c58:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <StartDefaultTask+0x188>)
 8003c5a:	0011      	movs	r1, r2
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f7ff f839 	bl	8002cd4 <writeFlash>
		startStandBy();
 8003c62:	f000 f8dd 	bl	8003e20 <startStandBy>
 8003c66:	e00c      	b.n	8003c82 <StartDefaultTask+0x16e>
	} else {
		//sleep mode
		missed_cycles++;
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <StartDefaultTask+0x188>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <StartDefaultTask+0x188>)
 8003c70:	601a      	str	r2, [r3, #0]
		writeFlash(&missed_cycles, &sensorData);
 8003c72:	4a09      	ldr	r2, [pc, #36]	; (8003c98 <StartDefaultTask+0x184>)
 8003c74:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <StartDefaultTask+0x188>)
 8003c76:	0011      	movs	r1, r2
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f7ff f82b 	bl	8002cd4 <writeFlash>
		startStandBy();
 8003c7e:	f000 f8cf 	bl	8003e20 <startStandBy>
	}
	//startStandBy();
	vTaskDelete( NULL);
 8003c82:	2000      	movs	r0, #0
 8003c84:	f004 fcda 	bl	800863c <vTaskDelete>

  /* USER CODE END 5 */
}
 8003c88:	46c0      	nop			; (mov r8, r8)
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b005      	add	sp, #20
 8003c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c90:	20000595 	.word	0x20000595
 8003c94:	20000594 	.word	0x20000594
 8003c98:	20001544 	.word	0x20001544
 8003c9c:	20000590 	.word	0x20000590

08003ca0 <ReadSensors>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ReadSensors */
void ReadSensors(void const * argument)
{
 8003ca0:	b590      	push	{r4, r7, lr}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReadSensors */
	/* Infinite loop */
	readFlash_cycles(&missed_cycles, &sensorData);
 8003ca8:	4a21      	ldr	r2, [pc, #132]	; (8003d30 <ReadSensors+0x90>)
 8003caa:	4b22      	ldr	r3, [pc, #136]	; (8003d34 <ReadSensors+0x94>)
 8003cac:	0011      	movs	r1, r2
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f7fe ff44 	bl	8002b3c <readFlash_cycles>
	if (Sensor_Read_status == 0) {
 8003cb4:	4b20      	ldr	r3, [pc, #128]	; (8003d38 <ReadSensors+0x98>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d132      	bne.n	8003d22 <ReadSensors+0x82>
		sensorData[10].T = Tem_Sensor();
 8003cbc:	f7ff fb82 	bl	80033c4 <Tem_Sensor>
 8003cc0:	0003      	movs	r3, r0
 8003cc2:	000c      	movs	r4, r1
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	0021      	movs	r1, r4
 8003cc8:	f7fe f9d4 	bl	8002074 <__aeabi_d2f>
 8003ccc:	1c01      	adds	r1, r0, #0
 8003cce:	4b18      	ldr	r3, [pc, #96]	; (8003d30 <ReadSensors+0x90>)
 8003cd0:	22c8      	movs	r2, #200	; 0xc8
 8003cd2:	5099      	str	r1, [r3, r2]
		sensorData[10].H = Hum_Sensor();
 8003cd4:	f7ff fbaa 	bl	800342c <Hum_Sensor>
 8003cd8:	0003      	movs	r3, r0
 8003cda:	000c      	movs	r4, r1
 8003cdc:	0018      	movs	r0, r3
 8003cde:	0021      	movs	r1, r4
 8003ce0:	f7fe f9c8 	bl	8002074 <__aeabi_d2f>
 8003ce4:	1c01      	adds	r1, r0, #0
 8003ce6:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <ReadSensors+0x90>)
 8003ce8:	22cc      	movs	r2, #204	; 0xcc
 8003cea:	5099      	str	r1, [r3, r2]
		sensorData[10].A = Read_Pressure_Sensor();
 8003cec:	f7ff f8bc 	bl	8002e68 <Read_Pressure_Sensor>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	000c      	movs	r4, r1
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	0021      	movs	r1, r4
 8003cf8:	f7fe f9bc 	bl	8002074 <__aeabi_d2f>
 8003cfc:	1c01      	adds	r1, r0, #0
 8003cfe:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <ReadSensors+0x90>)
 8003d00:	22d0      	movs	r2, #208	; 0xd0
 8003d02:	5099      	str	r1, [r3, r2]
		sensorData[10].L = LUX_Sensor();
 8003d04:	f7ff fbb8 	bl	8003478 <LUX_Sensor>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	000c      	movs	r4, r1
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	0021      	movs	r1, r4
 8003d10:	f7fe f9b0 	bl	8002074 <__aeabi_d2f>
 8003d14:	1c01      	adds	r1, r0, #0
 8003d16:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <ReadSensors+0x90>)
 8003d18:	22d4      	movs	r2, #212	; 0xd4
 8003d1a:	5099      	str	r1, [r3, r2]
		Sensor_Read_status = 2;
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <ReadSensors+0x98>)
 8003d1e:	2202      	movs	r2, #2
 8003d20:	701a      	strb	r2, [r3, #0]
	}
	vTaskDelete( NULL);
 8003d22:	2000      	movs	r0, #0
 8003d24:	f004 fc8a 	bl	800863c <vTaskDelete>

  /* USER CODE END ReadSensors */
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b003      	add	sp, #12
 8003d2e:	bd90      	pop	{r4, r7, pc}
 8003d30:	20001544 	.word	0x20001544
 8003d34:	20000590 	.word	0x20000590
 8003d38:	20000595 	.word	0x20000595

08003d3c <ConnectToServer>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ConnectToServer */
void ConnectToServer(void const * argument)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ConnectToServer */
	/* Infinite loop */

	static _Bool Connection = 0;
	if (Connection_Server_status == 0) {
 8003d44:	4b17      	ldr	r3, [pc, #92]	; (8003da4 <ConnectToServer+0x68>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d124      	bne.n	8003d96 <ConnectToServer+0x5a>
		Connection = espConnect("Quinnvanderschaar", "test1234");
 8003d4c:	4a16      	ldr	r2, [pc, #88]	; (8003da8 <ConnectToServer+0x6c>)
 8003d4e:	4b17      	ldr	r3, [pc, #92]	; (8003dac <ConnectToServer+0x70>)
 8003d50:	0011      	movs	r1, r2
 8003d52:	0018      	movs	r0, r3
 8003d54:	f7fe fa58 	bl	8002208 <espConnect>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	001a      	movs	r2, r3
 8003d5c:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <ConnectToServer+0x74>)
 8003d5e:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 8003d60:	200a      	movs	r0, #10
 8003d62:	f000 faed 	bl	8004340 <HAL_Delay>
		Connection = tcpConnect("192.168.178.80", "80");
 8003d66:	4a13      	ldr	r2, [pc, #76]	; (8003db4 <ConnectToServer+0x78>)
 8003d68:	4b13      	ldr	r3, [pc, #76]	; (8003db8 <ConnectToServer+0x7c>)
 8003d6a:	0011      	movs	r1, r2
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f7fe faf5 	bl	800235c <tcpConnect>
 8003d72:	0003      	movs	r3, r0
 8003d74:	001a      	movs	r2, r3
 8003d76:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <ConnectToServer+0x74>)
 8003d78:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 8003d7a:	200a      	movs	r0, #10
 8003d7c:	f000 fae0 	bl	8004340 <HAL_Delay>
		if (Connection == 1) {
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <ConnectToServer+0x74>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <ConnectToServer+0x54>
			Connection_Server_status = 2;
 8003d88:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <ConnectToServer+0x68>)
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	e002      	b.n	8003d96 <ConnectToServer+0x5a>
		} else {
			Connection_Server_status = 1;
 8003d90:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <ConnectToServer+0x68>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	701a      	strb	r2, [r3, #0]
		}
	}
	vTaskDelete( NULL);
 8003d96:	2000      	movs	r0, #0
 8003d98:	f004 fc50 	bl	800863c <vTaskDelete>

  /* USER CODE END ConnectToServer */
}
 8003d9c:	46c0      	nop			; (mov r8, r8)
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b002      	add	sp, #8
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	20000594 	.word	0x20000594
 8003da8:	0800b800 	.word	0x0800b800
 8003dac:	0800b80c 	.word	0x0800b80c
 8003db0:	20000596 	.word	0x20000596
 8003db4:	0800b820 	.word	0x0800b820
 8003db8:	0800b824 	.word	0x0800b824

08003dbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a04      	ldr	r2, [pc, #16]	; (8003ddc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d101      	bne.n	8003dd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003dce:	f000 fa9b 	bl	8004308 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	b002      	add	sp, #8
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	40012c00 	.word	0x40012c00

08003de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003de4:	46c0      	nop			; (mov r8, r8)
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <resetStandBy>:
 *
 * Reset the StandBy and WakeUp flag.
 * @param  argument: Not used
 * @retval None
 */
void resetStandBy() {
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
	// Check if flag haven't been reset
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 8003df0:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <resetStandBy+0x30>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2202      	movs	r2, #2
 8003df6:	4013      	ands	r3, r2
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d10b      	bne.n	8003e14 <resetStandBy+0x28>
		// Reset flags
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8003dfc:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <resetStandBy+0x30>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <resetStandBy+0x30>)
 8003e02:	2108      	movs	r1, #8
 8003e04:	430a      	orrs	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8003e08:	4b04      	ldr	r3, [pc, #16]	; (8003e1c <resetStandBy+0x30>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	4b03      	ldr	r3, [pc, #12]	; (8003e1c <resetStandBy+0x30>)
 8003e0e:	2104      	movs	r1, #4
 8003e10:	430a      	orrs	r2, r1
 8003e12:	601a      	str	r2, [r3, #0]
	}
}
 8003e14:	46c0      	nop			; (mov r8, r8)
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	40007000 	.word	0x40007000

08003e20 <startStandBy>:
 *
 * Start the StandBy mode using the Hal Library.
 * @param  argument: Not used
 * @retval None
 */
void startStandBy() {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
	// Enter standby mode
	HAL_PWR_EnterSTANDBYMode();
 8003e24:	f001 ff52 	bl	8005ccc <HAL_PWR_EnterSTANDBYMode>
}
 8003e28:	46c0      	nop			; (mov r8, r8)
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e36:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <HAL_MspInit+0x44>)
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	4b0e      	ldr	r3, [pc, #56]	; (8003e74 <HAL_MspInit+0x44>)
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	619a      	str	r2, [r3, #24]
 8003e42:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <HAL_MspInit+0x44>)
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	2201      	movs	r2, #1
 8003e48:	4013      	ands	r3, r2
 8003e4a:	607b      	str	r3, [r7, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e4e:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <HAL_MspInit+0x44>)
 8003e50:	69da      	ldr	r2, [r3, #28]
 8003e52:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <HAL_MspInit+0x44>)
 8003e54:	2180      	movs	r1, #128	; 0x80
 8003e56:	0549      	lsls	r1, r1, #21
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	61da      	str	r2, [r3, #28]
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <HAL_MspInit+0x44>)
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	055b      	lsls	r3, r3, #21
 8003e64:	4013      	ands	r3, r2
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b002      	add	sp, #8
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	40021000 	.word	0x40021000

08003e78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e80:	2314      	movs	r3, #20
 8003e82:	18fb      	adds	r3, r7, r3
 8003e84:	0018      	movs	r0, r3
 8003e86:	2314      	movs	r3, #20
 8003e88:	001a      	movs	r2, r3
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	f005 fa1d 	bl	80092ca <memset>
  if(hadc->Instance==ADC1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a19      	ldr	r2, [pc, #100]	; (8003efc <HAL_ADC_MspInit+0x84>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d12c      	bne.n	8003ef4 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003e9a:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <HAL_ADC_MspInit+0x88>)
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	4b18      	ldr	r3, [pc, #96]	; (8003f00 <HAL_ADC_MspInit+0x88>)
 8003ea0:	2180      	movs	r1, #128	; 0x80
 8003ea2:	0089      	lsls	r1, r1, #2
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	619a      	str	r2, [r3, #24]
 8003ea8:	4b15      	ldr	r3, [pc, #84]	; (8003f00 <HAL_ADC_MspInit+0x88>)
 8003eaa:	699a      	ldr	r2, [r3, #24]
 8003eac:	2380      	movs	r3, #128	; 0x80
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb6:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <HAL_ADC_MspInit+0x88>)
 8003eb8:	695a      	ldr	r2, [r3, #20]
 8003eba:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <HAL_ADC_MspInit+0x88>)
 8003ebc:	2180      	movs	r1, #128	; 0x80
 8003ebe:	0289      	lsls	r1, r1, #10
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	615a      	str	r2, [r3, #20]
 8003ec4:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <HAL_ADC_MspInit+0x88>)
 8003ec6:	695a      	ldr	r2, [r3, #20]
 8003ec8:	2380      	movs	r3, #128	; 0x80
 8003eca:	029b      	lsls	r3, r3, #10
 8003ecc:	4013      	ands	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003ed2:	2114      	movs	r1, #20
 8003ed4:	187b      	adds	r3, r7, r1
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eda:	187b      	adds	r3, r7, r1
 8003edc:	2203      	movs	r2, #3
 8003ede:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee0:	187b      	adds	r3, r7, r1
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee6:	187a      	adds	r2, r7, r1
 8003ee8:	2390      	movs	r3, #144	; 0x90
 8003eea:	05db      	lsls	r3, r3, #23
 8003eec:	0011      	movs	r1, r2
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f000 ff22 	bl	8004d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003ef4:	46c0      	nop			; (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b00a      	add	sp, #40	; 0x28
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40012400 	.word	0x40012400
 8003f00:	40021000 	.word	0x40021000

08003f04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08a      	sub	sp, #40	; 0x28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f0c:	2314      	movs	r3, #20
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	0018      	movs	r0, r3
 8003f12:	2314      	movs	r3, #20
 8003f14:	001a      	movs	r2, r3
 8003f16:	2100      	movs	r1, #0
 8003f18:	f005 f9d7 	bl	80092ca <memset>
  if(hi2c->Instance==I2C1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a1c      	ldr	r2, [pc, #112]	; (8003f94 <HAL_I2C_MspInit+0x90>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d132      	bne.n	8003f8c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f26:	4b1c      	ldr	r3, [pc, #112]	; (8003f98 <HAL_I2C_MspInit+0x94>)
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <HAL_I2C_MspInit+0x94>)
 8003f2c:	2180      	movs	r1, #128	; 0x80
 8003f2e:	02c9      	lsls	r1, r1, #11
 8003f30:	430a      	orrs	r2, r1
 8003f32:	615a      	str	r2, [r3, #20]
 8003f34:	4b18      	ldr	r3, [pc, #96]	; (8003f98 <HAL_I2C_MspInit+0x94>)
 8003f36:	695a      	ldr	r2, [r3, #20]
 8003f38:	2380      	movs	r3, #128	; 0x80
 8003f3a:	02db      	lsls	r3, r3, #11
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
 8003f40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003f42:	2114      	movs	r1, #20
 8003f44:	187b      	adds	r3, r7, r1
 8003f46:	2290      	movs	r2, #144	; 0x90
 8003f48:	0092      	lsls	r2, r2, #2
 8003f4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f4c:	187b      	adds	r3, r7, r1
 8003f4e:	2212      	movs	r2, #18
 8003f50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f52:	187b      	adds	r3, r7, r1
 8003f54:	2201      	movs	r2, #1
 8003f56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f58:	187b      	adds	r3, r7, r1
 8003f5a:	2203      	movs	r2, #3
 8003f5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003f5e:	187b      	adds	r3, r7, r1
 8003f60:	2201      	movs	r2, #1
 8003f62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f64:	187b      	adds	r3, r7, r1
 8003f66:	4a0d      	ldr	r2, [pc, #52]	; (8003f9c <HAL_I2C_MspInit+0x98>)
 8003f68:	0019      	movs	r1, r3
 8003f6a:	0010      	movs	r0, r2
 8003f6c:	f000 fee4 	bl	8004d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f70:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <HAL_I2C_MspInit+0x94>)
 8003f72:	69da      	ldr	r2, [r3, #28]
 8003f74:	4b08      	ldr	r3, [pc, #32]	; (8003f98 <HAL_I2C_MspInit+0x94>)
 8003f76:	2180      	movs	r1, #128	; 0x80
 8003f78:	0389      	lsls	r1, r1, #14
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	61da      	str	r2, [r3, #28]
 8003f7e:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <HAL_I2C_MspInit+0x94>)
 8003f80:	69da      	ldr	r2, [r3, #28]
 8003f82:	2380      	movs	r3, #128	; 0x80
 8003f84:	039b      	lsls	r3, r3, #14
 8003f86:	4013      	ands	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003f8c:	46c0      	nop			; (mov r8, r8)
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b00a      	add	sp, #40	; 0x28
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40005400 	.word	0x40005400
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	48000400 	.word	0x48000400

08003fa0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <HAL_RTC_MspInit+0x38>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d10e      	bne.n	8003fd0 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003fb2:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <HAL_RTC_MspInit+0x3c>)
 8003fb4:	6a1a      	ldr	r2, [r3, #32]
 8003fb6:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <HAL_RTC_MspInit+0x3c>)
 8003fb8:	2180      	movs	r1, #128	; 0x80
 8003fba:	0209      	lsls	r1, r1, #8
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	621a      	str	r2, [r3, #32]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	2002      	movs	r0, #2
 8003fc6:	f000 fe09 	bl	8004bdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003fca:	2002      	movs	r0, #2
 8003fcc:	f000 fe1b 	bl	8004c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003fd0:	46c0      	nop			; (mov r8, r8)
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b002      	add	sp, #8
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40002800 	.word	0x40002800
 8003fdc:	40021000 	.word	0x40021000

08003fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08c      	sub	sp, #48	; 0x30
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe8:	231c      	movs	r3, #28
 8003fea:	18fb      	adds	r3, r7, r3
 8003fec:	0018      	movs	r0, r3
 8003fee:	2314      	movs	r3, #20
 8003ff0:	001a      	movs	r2, r3
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	f005 f969 	bl	80092ca <memset>
  if(huart->Instance==USART1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a3d      	ldr	r2, [pc, #244]	; (80040f4 <HAL_UART_MspInit+0x114>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d13c      	bne.n	800407c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004002:	4b3d      	ldr	r3, [pc, #244]	; (80040f8 <HAL_UART_MspInit+0x118>)
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	4b3c      	ldr	r3, [pc, #240]	; (80040f8 <HAL_UART_MspInit+0x118>)
 8004008:	2180      	movs	r1, #128	; 0x80
 800400a:	01c9      	lsls	r1, r1, #7
 800400c:	430a      	orrs	r2, r1
 800400e:	619a      	str	r2, [r3, #24]
 8004010:	4b39      	ldr	r3, [pc, #228]	; (80040f8 <HAL_UART_MspInit+0x118>)
 8004012:	699a      	ldr	r2, [r3, #24]
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	01db      	lsls	r3, r3, #7
 8004018:	4013      	ands	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
 800401c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800401e:	4b36      	ldr	r3, [pc, #216]	; (80040f8 <HAL_UART_MspInit+0x118>)
 8004020:	695a      	ldr	r2, [r3, #20]
 8004022:	4b35      	ldr	r3, [pc, #212]	; (80040f8 <HAL_UART_MspInit+0x118>)
 8004024:	2180      	movs	r1, #128	; 0x80
 8004026:	0289      	lsls	r1, r1, #10
 8004028:	430a      	orrs	r2, r1
 800402a:	615a      	str	r2, [r3, #20]
 800402c:	4b32      	ldr	r3, [pc, #200]	; (80040f8 <HAL_UART_MspInit+0x118>)
 800402e:	695a      	ldr	r2, [r3, #20]
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	029b      	lsls	r3, r3, #10
 8004034:	4013      	ands	r3, r2
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800403a:	211c      	movs	r1, #28
 800403c:	187b      	adds	r3, r7, r1
 800403e:	22c0      	movs	r2, #192	; 0xc0
 8004040:	00d2      	lsls	r2, r2, #3
 8004042:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004044:	187b      	adds	r3, r7, r1
 8004046:	2202      	movs	r2, #2
 8004048:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404a:	187b      	adds	r3, r7, r1
 800404c:	2200      	movs	r2, #0
 800404e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004050:	187b      	adds	r3, r7, r1
 8004052:	2203      	movs	r2, #3
 8004054:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004056:	187b      	adds	r3, r7, r1
 8004058:	2201      	movs	r2, #1
 800405a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800405c:	187a      	adds	r2, r7, r1
 800405e:	2390      	movs	r3, #144	; 0x90
 8004060:	05db      	lsls	r3, r3, #23
 8004062:	0011      	movs	r1, r2
 8004064:	0018      	movs	r0, r3
 8004066:	f000 fe67 	bl	8004d38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800406a:	2200      	movs	r2, #0
 800406c:	2100      	movs	r1, #0
 800406e:	201b      	movs	r0, #27
 8004070:	f000 fdb4 	bl	8004bdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004074:	201b      	movs	r0, #27
 8004076:	f000 fdc6 	bl	8004c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800407a:	e037      	b.n	80040ec <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a1e      	ldr	r2, [pc, #120]	; (80040fc <HAL_UART_MspInit+0x11c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d132      	bne.n	80040ec <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004086:	4b1c      	ldr	r3, [pc, #112]	; (80040f8 <HAL_UART_MspInit+0x118>)
 8004088:	69da      	ldr	r2, [r3, #28]
 800408a:	4b1b      	ldr	r3, [pc, #108]	; (80040f8 <HAL_UART_MspInit+0x118>)
 800408c:	2180      	movs	r1, #128	; 0x80
 800408e:	0289      	lsls	r1, r1, #10
 8004090:	430a      	orrs	r2, r1
 8004092:	61da      	str	r2, [r3, #28]
 8004094:	4b18      	ldr	r3, [pc, #96]	; (80040f8 <HAL_UART_MspInit+0x118>)
 8004096:	69da      	ldr	r2, [r3, #28]
 8004098:	2380      	movs	r3, #128	; 0x80
 800409a:	029b      	lsls	r3, r3, #10
 800409c:	4013      	ands	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040a2:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <HAL_UART_MspInit+0x118>)
 80040a4:	695a      	ldr	r2, [r3, #20]
 80040a6:	4b14      	ldr	r3, [pc, #80]	; (80040f8 <HAL_UART_MspInit+0x118>)
 80040a8:	2180      	movs	r1, #128	; 0x80
 80040aa:	0289      	lsls	r1, r1, #10
 80040ac:	430a      	orrs	r2, r1
 80040ae:	615a      	str	r2, [r3, #20]
 80040b0:	4b11      	ldr	r3, [pc, #68]	; (80040f8 <HAL_UART_MspInit+0x118>)
 80040b2:	695a      	ldr	r2, [r3, #20]
 80040b4:	2380      	movs	r3, #128	; 0x80
 80040b6:	029b      	lsls	r3, r3, #10
 80040b8:	4013      	ands	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80040be:	211c      	movs	r1, #28
 80040c0:	187b      	adds	r3, r7, r1
 80040c2:	220c      	movs	r2, #12
 80040c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c6:	187b      	adds	r3, r7, r1
 80040c8:	2202      	movs	r2, #2
 80040ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040cc:	187b      	adds	r3, r7, r1
 80040ce:	2200      	movs	r2, #0
 80040d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d2:	187b      	adds	r3, r7, r1
 80040d4:	2200      	movs	r2, #0
 80040d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80040d8:	187b      	adds	r3, r7, r1
 80040da:	2201      	movs	r2, #1
 80040dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040de:	187a      	adds	r2, r7, r1
 80040e0:	2390      	movs	r3, #144	; 0x90
 80040e2:	05db      	lsls	r3, r3, #23
 80040e4:	0011      	movs	r1, r2
 80040e6:	0018      	movs	r0, r3
 80040e8:	f000 fe26 	bl	8004d38 <HAL_GPIO_Init>
}
 80040ec:	46c0      	nop			; (mov r8, r8)
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b00c      	add	sp, #48	; 0x30
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40013800 	.word	0x40013800
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40004400 	.word	0x40004400

08004100 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	; 0x28
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004108:	2300      	movs	r3, #0
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 800410c:	2300      	movs	r3, #0
 800410e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	0019      	movs	r1, r3
 8004116:	200d      	movs	r0, #13
 8004118:	f000 fd60 	bl	8004bdc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800411c:	200d      	movs	r0, #13
 800411e:	f000 fd72 	bl	8004c06 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004122:	4b21      	ldr	r3, [pc, #132]	; (80041a8 <HAL_InitTick+0xa8>)
 8004124:	699a      	ldr	r2, [r3, #24]
 8004126:	4b20      	ldr	r3, [pc, #128]	; (80041a8 <HAL_InitTick+0xa8>)
 8004128:	2180      	movs	r1, #128	; 0x80
 800412a:	0109      	lsls	r1, r1, #4
 800412c:	430a      	orrs	r2, r1
 800412e:	619a      	str	r2, [r3, #24]
 8004130:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <HAL_InitTick+0xa8>)
 8004132:	699a      	ldr	r2, [r3, #24]
 8004134:	2380      	movs	r3, #128	; 0x80
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	4013      	ands	r3, r2
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800413e:	230c      	movs	r3, #12
 8004140:	18fa      	adds	r2, r7, r3
 8004142:	2310      	movs	r3, #16
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	0011      	movs	r1, r2
 8004148:	0018      	movs	r0, r3
 800414a:	f002 fa43 	bl	80065d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800414e:	f002 fa2b 	bl	80065a8 <HAL_RCC_GetPCLK1Freq>
 8004152:	0003      	movs	r3, r0
 8004154:	627b      	str	r3, [r7, #36]	; 0x24

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	4914      	ldr	r1, [pc, #80]	; (80041ac <HAL_InitTick+0xac>)
 800415a:	0018      	movs	r0, r3
 800415c:	f7fb ffe6 	bl	800012c <__udivsi3>
 8004160:	0003      	movs	r3, r0
 8004162:	3b01      	subs	r3, #1
 8004164:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004166:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <HAL_InitTick+0xb0>)
 8004168:	4a12      	ldr	r2, [pc, #72]	; (80041b4 <HAL_InitTick+0xb4>)
 800416a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800416c:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <HAL_InitTick+0xb0>)
 800416e:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <HAL_InitTick+0xb8>)
 8004170:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004172:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <HAL_InitTick+0xb0>)
 8004174:	6a3a      	ldr	r2, [r7, #32]
 8004176:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8004178:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <HAL_InitTick+0xb0>)
 800417a:	2200      	movs	r2, #0
 800417c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800417e:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <HAL_InitTick+0xb0>)
 8004180:	2200      	movs	r2, #0
 8004182:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004184:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <HAL_InitTick+0xb0>)
 8004186:	0018      	movs	r0, r3
 8004188:	f002 feb2 	bl	8006ef0 <HAL_TIM_Base_Init>
 800418c:	1e03      	subs	r3, r0, #0
 800418e:	d105      	bne.n	800419c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004190:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <HAL_InitTick+0xb0>)
 8004192:	0018      	movs	r0, r3
 8004194:	f002 fee0 	bl	8006f58 <HAL_TIM_Base_Start_IT>
 8004198:	0003      	movs	r3, r0
 800419a:	e000      	b.n	800419e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
}
 800419e:	0018      	movs	r0, r3
 80041a0:	46bd      	mov	sp, r7
 80041a2:	b00a      	add	sp, #40	; 0x28
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	40021000 	.word	0x40021000
 80041ac:	000f4240 	.word	0x000f4240
 80041b0:	20001644 	.word	0x20001644
 80041b4:	40012c00 	.word	0x40012c00
 80041b8:	000003e7 	.word	0x000003e7

080041bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80041c0:	46c0      	nop			; (mov r8, r8)
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041ca:	e7fe      	b.n	80041ca <HardFault_Handler+0x4>

080041cc <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20.
  */
void RTC_IRQHandler(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80041d0:	4b03      	ldr	r3, [pc, #12]	; (80041e0 <RTC_IRQHandler+0x14>)
 80041d2:	0018      	movs	r0, r3
 80041d4:	f002 fdde 	bl	8006d94 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80041d8:	46c0      	nop			; (mov r8, r8)
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	20001620 	.word	0x20001620

080041e4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041e8:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80041ea:	0018      	movs	r0, r3
 80041ec:	f002 fed6 	bl	8006f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80041f0:	46c0      	nop			; (mov r8, r8)
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	20001644 	.word	0x20001644

080041fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004200:	4b03      	ldr	r3, [pc, #12]	; (8004210 <USART1_IRQHandler+0x14>)
 8004202:	0018      	movs	r0, r3
 8004204:	f003 fa80 	bl	8007708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004208:	46c0      	nop			; (mov r8, r8)
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	20001334 	.word	0x20001334

08004214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800421c:	4a14      	ldr	r2, [pc, #80]	; (8004270 <_sbrk+0x5c>)
 800421e:	4b15      	ldr	r3, [pc, #84]	; (8004274 <_sbrk+0x60>)
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004228:	4b13      	ldr	r3, [pc, #76]	; (8004278 <_sbrk+0x64>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d102      	bne.n	8004236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004230:	4b11      	ldr	r3, [pc, #68]	; (8004278 <_sbrk+0x64>)
 8004232:	4a12      	ldr	r2, [pc, #72]	; (800427c <_sbrk+0x68>)
 8004234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004236:	4b10      	ldr	r3, [pc, #64]	; (8004278 <_sbrk+0x64>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	18d3      	adds	r3, r2, r3
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	429a      	cmp	r2, r3
 8004242:	d207      	bcs.n	8004254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004244:	f004 fff2 	bl	800922c <__errno>
 8004248:	0003      	movs	r3, r0
 800424a:	220c      	movs	r2, #12
 800424c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800424e:	2301      	movs	r3, #1
 8004250:	425b      	negs	r3, r3
 8004252:	e009      	b.n	8004268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004254:	4b08      	ldr	r3, [pc, #32]	; (8004278 <_sbrk+0x64>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800425a:	4b07      	ldr	r3, [pc, #28]	; (8004278 <_sbrk+0x64>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	18d2      	adds	r2, r2, r3
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <_sbrk+0x64>)
 8004264:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004266:	68fb      	ldr	r3, [r7, #12]
}
 8004268:	0018      	movs	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	b006      	add	sp, #24
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20002000 	.word	0x20002000
 8004274:	00000400 	.word	0x00000400
 8004278:	20000598 	.word	0x20000598
 800427c:	20001690 	.word	0x20001690

08004280 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004284:	46c0      	nop			; (mov r8, r8)
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
	...

0800428c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800428c:	480d      	ldr	r0, [pc, #52]	; (80042c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800428e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004290:	480d      	ldr	r0, [pc, #52]	; (80042c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004292:	490e      	ldr	r1, [pc, #56]	; (80042cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004294:	4a0e      	ldr	r2, [pc, #56]	; (80042d0 <LoopForever+0xe>)
  movs r3, #0
 8004296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004298:	e002      	b.n	80042a0 <LoopCopyDataInit>

0800429a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800429a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800429c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800429e:	3304      	adds	r3, #4

080042a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042a4:	d3f9      	bcc.n	800429a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042a6:	4a0b      	ldr	r2, [pc, #44]	; (80042d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80042a8:	4c0b      	ldr	r4, [pc, #44]	; (80042d8 <LoopForever+0x16>)
  movs r3, #0
 80042aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042ac:	e001      	b.n	80042b2 <LoopFillZerobss>

080042ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042b0:	3204      	adds	r2, #4

080042b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042b4:	d3fb      	bcc.n	80042ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80042b6:	f7ff ffe3 	bl	8004280 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80042ba:	f004 ffbd 	bl	8009238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80042be:	f7ff f953 	bl	8003568 <main>

080042c2 <LoopForever>:

LoopForever:
    b LoopForever
 80042c2:	e7fe      	b.n	80042c2 <LoopForever>
  ldr   r0, =_estack
 80042c4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80042c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042cc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80042d0:	0800bb80 	.word	0x0800bb80
  ldr r2, =_sbss
 80042d4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80042d8:	2000168c 	.word	0x2000168c

080042dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042dc:	e7fe      	b.n	80042dc <ADC1_IRQHandler>
	...

080042e0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042e4:	4b07      	ldr	r3, [pc, #28]	; (8004304 <HAL_Init+0x24>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4b06      	ldr	r3, [pc, #24]	; (8004304 <HAL_Init+0x24>)
 80042ea:	2110      	movs	r1, #16
 80042ec:	430a      	orrs	r2, r1
 80042ee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80042f0:	2000      	movs	r0, #0
 80042f2:	f7ff ff05 	bl	8004100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042f6:	f7ff fd9b 	bl	8003e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	0018      	movs	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	40022000 	.word	0x40022000

08004308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <HAL_IncTick+0x1c>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	001a      	movs	r2, r3
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <HAL_IncTick+0x20>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	18d2      	adds	r2, r2, r3
 8004318:	4b03      	ldr	r3, [pc, #12]	; (8004328 <HAL_IncTick+0x20>)
 800431a:	601a      	str	r2, [r3, #0]
}
 800431c:	46c0      	nop			; (mov r8, r8)
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	20000008 	.word	0x20000008
 8004328:	20001684 	.word	0x20001684

0800432c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  return uwTick;
 8004330:	4b02      	ldr	r3, [pc, #8]	; (800433c <HAL_GetTick+0x10>)
 8004332:	681b      	ldr	r3, [r3, #0]
}
 8004334:	0018      	movs	r0, r3
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	20001684 	.word	0x20001684

08004340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004348:	f7ff fff0 	bl	800432c <HAL_GetTick>
 800434c:	0003      	movs	r3, r0
 800434e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	3301      	adds	r3, #1
 8004358:	d005      	beq.n	8004366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800435a:	4b09      	ldr	r3, [pc, #36]	; (8004380 <HAL_Delay+0x40>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	001a      	movs	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	189b      	adds	r3, r3, r2
 8004364:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	f7ff ffe0 	bl	800432c <HAL_GetTick>
 800436c:	0002      	movs	r2, r0
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	429a      	cmp	r2, r3
 8004376:	d8f7      	bhi.n	8004368 <HAL_Delay+0x28>
  {
  }
}
 8004378:	46c0      	nop			; (mov r8, r8)
 800437a:	46bd      	mov	sp, r7
 800437c:	b004      	add	sp, #16
 800437e:	bd80      	pop	{r7, pc}
 8004380:	20000008 	.word	0x20000008

08004384 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800438c:	230f      	movs	r3, #15
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	2200      	movs	r2, #0
 8004392:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e125      	b.n	80045ee <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2234      	movs	r2, #52	; 0x34
 80043b4:	2100      	movs	r1, #0
 80043b6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	0018      	movs	r0, r3
 80043bc:	f7ff fd5c 	bl	8003e78 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	2210      	movs	r2, #16
 80043c6:	4013      	ands	r3, r2
 80043c8:	d000      	beq.n	80043cc <HAL_ADC_Init+0x48>
 80043ca:	e103      	b.n	80045d4 <HAL_ADC_Init+0x250>
 80043cc:	230f      	movs	r3, #15
 80043ce:	18fb      	adds	r3, r7, r3
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d000      	beq.n	80043d8 <HAL_ADC_Init+0x54>
 80043d6:	e0fd      	b.n	80045d4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2204      	movs	r2, #4
 80043e0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80043e2:	d000      	beq.n	80043e6 <HAL_ADC_Init+0x62>
 80043e4:	e0f6      	b.n	80045d4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	4a83      	ldr	r2, [pc, #524]	; (80045f8 <HAL_ADC_Init+0x274>)
 80043ec:	4013      	ands	r3, r2
 80043ee:	2202      	movs	r2, #2
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2203      	movs	r2, #3
 80043fe:	4013      	ands	r3, r2
 8004400:	2b01      	cmp	r3, #1
 8004402:	d112      	bne.n	800442a <HAL_ADC_Init+0xa6>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2201      	movs	r2, #1
 800440c:	4013      	ands	r3, r2
 800440e:	2b01      	cmp	r3, #1
 8004410:	d009      	beq.n	8004426 <HAL_ADC_Init+0xa2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	2380      	movs	r3, #128	; 0x80
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	401a      	ands	r2, r3
 800441e:	2380      	movs	r3, #128	; 0x80
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	429a      	cmp	r2, r3
 8004424:	d101      	bne.n	800442a <HAL_ADC_Init+0xa6>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <HAL_ADC_Init+0xa8>
 800442a:	2300      	movs	r3, #0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d116      	bne.n	800445e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	2218      	movs	r2, #24
 8004438:	4393      	bics	r3, r2
 800443a:	0019      	movs	r1, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	0899      	lsrs	r1, r3, #2
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4964      	ldr	r1, [pc, #400]	; (80045fc <HAL_ADC_Init+0x278>)
 800446a:	400a      	ands	r2, r1
 800446c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	7e1b      	ldrb	r3, [r3, #24]
 8004472:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	7e5b      	ldrb	r3, [r3, #25]
 8004478:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800447a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	7e9b      	ldrb	r3, [r3, #26]
 8004480:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004482:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004488:	2b01      	cmp	r3, #1
 800448a:	d002      	beq.n	8004492 <HAL_ADC_Init+0x10e>
 800448c:	2380      	movs	r3, #128	; 0x80
 800448e:	015b      	lsls	r3, r3, #5
 8004490:	e000      	b.n	8004494 <HAL_ADC_Init+0x110>
 8004492:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004494:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800449a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d101      	bne.n	80044a8 <HAL_ADC_Init+0x124>
 80044a4:	2304      	movs	r3, #4
 80044a6:	e000      	b.n	80044aa <HAL_ADC_Init+0x126>
 80044a8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80044aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2124      	movs	r1, #36	; 0x24
 80044b0:	5c5b      	ldrb	r3, [r3, r1]
 80044b2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80044b4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	7edb      	ldrb	r3, [r3, #27]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d115      	bne.n	80044f0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	7e9b      	ldrb	r3, [r3, #26]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d105      	bne.n	80044d8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2280      	movs	r2, #128	; 0x80
 80044d0:	0252      	lsls	r2, r2, #9
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	e00b      	b.n	80044f0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	2220      	movs	r2, #32
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e8:	2201      	movs	r2, #1
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69da      	ldr	r2, [r3, #28]
 80044f4:	23c2      	movs	r3, #194	; 0xc2
 80044f6:	33ff      	adds	r3, #255	; 0xff
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d007      	beq.n	800450c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004504:	4313      	orrs	r3, r2
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	4313      	orrs	r3, r2
 800450a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68d9      	ldr	r1, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	430a      	orrs	r2, r1
 800451a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	055b      	lsls	r3, r3, #21
 8004524:	429a      	cmp	r2, r3
 8004526:	d01b      	beq.n	8004560 <HAL_ADC_Init+0x1dc>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452c:	2b01      	cmp	r3, #1
 800452e:	d017      	beq.n	8004560 <HAL_ADC_Init+0x1dc>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	2b02      	cmp	r3, #2
 8004536:	d013      	beq.n	8004560 <HAL_ADC_Init+0x1dc>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	2b03      	cmp	r3, #3
 800453e:	d00f      	beq.n	8004560 <HAL_ADC_Init+0x1dc>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004544:	2b04      	cmp	r3, #4
 8004546:	d00b      	beq.n	8004560 <HAL_ADC_Init+0x1dc>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	2b05      	cmp	r3, #5
 800454e:	d007      	beq.n	8004560 <HAL_ADC_Init+0x1dc>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	2b06      	cmp	r3, #6
 8004556:	d003      	beq.n	8004560 <HAL_ADC_Init+0x1dc>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	2b07      	cmp	r3, #7
 800455e:	d112      	bne.n	8004586 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695a      	ldr	r2, [r3, #20]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2107      	movs	r1, #7
 800456c:	438a      	bics	r2, r1
 800456e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6959      	ldr	r1, [r3, #20]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	2207      	movs	r2, #7
 800457c:	401a      	ands	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	4a1c      	ldr	r2, [pc, #112]	; (8004600 <HAL_ADC_Init+0x27c>)
 800458e:	4013      	ands	r3, r2
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	429a      	cmp	r2, r3
 8004594:	d10b      	bne.n	80045ae <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a0:	2203      	movs	r2, #3
 80045a2:	4393      	bics	r3, r2
 80045a4:	2201      	movs	r2, #1
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80045ac:	e01c      	b.n	80045e8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	2212      	movs	r2, #18
 80045b4:	4393      	bics	r3, r2
 80045b6:	2210      	movs	r2, #16
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c2:	2201      	movs	r2, #1
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80045ca:	230f      	movs	r3, #15
 80045cc:	18fb      	adds	r3, r7, r3
 80045ce:	2201      	movs	r2, #1
 80045d0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80045d2:	e009      	b.n	80045e8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d8:	2210      	movs	r2, #16
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80045e0:	230f      	movs	r3, #15
 80045e2:	18fb      	adds	r3, r7, r3
 80045e4:	2201      	movs	r2, #1
 80045e6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80045e8:	230f      	movs	r3, #15
 80045ea:	18fb      	adds	r3, r7, r3
 80045ec:	781b      	ldrb	r3, [r3, #0]
}
 80045ee:	0018      	movs	r0, r3
 80045f0:	46bd      	mov	sp, r7
 80045f2:	b004      	add	sp, #16
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	fffffefd 	.word	0xfffffefd
 80045fc:	fffe0219 	.word	0xfffe0219
 8004600:	833fffe7 	.word	0x833fffe7

08004604 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004604:	b590      	push	{r4, r7, lr}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800460c:	230f      	movs	r3, #15
 800460e:	18fb      	adds	r3, r7, r3
 8004610:	2200      	movs	r2, #0
 8004612:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	2204      	movs	r2, #4
 800461c:	4013      	ands	r3, r2
 800461e:	d138      	bne.n	8004692 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2234      	movs	r2, #52	; 0x34
 8004624:	5c9b      	ldrb	r3, [r3, r2]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_ADC_Start+0x2a>
 800462a:	2302      	movs	r3, #2
 800462c:	e038      	b.n	80046a0 <HAL_ADC_Start+0x9c>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2234      	movs	r2, #52	; 0x34
 8004632:	2101      	movs	r1, #1
 8004634:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	7e5b      	ldrb	r3, [r3, #25]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d007      	beq.n	800464e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800463e:	230f      	movs	r3, #15
 8004640:	18fc      	adds	r4, r7, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	0018      	movs	r0, r3
 8004646:	f000 f9c5 	bl	80049d4 <ADC_Enable>
 800464a:	0003      	movs	r3, r0
 800464c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800464e:	230f      	movs	r3, #15
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d120      	bne.n	800469a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	4a12      	ldr	r2, [pc, #72]	; (80046a8 <HAL_ADC_Start+0xa4>)
 800465e:	4013      	ands	r3, r2
 8004660:	2280      	movs	r2, #128	; 0x80
 8004662:	0052      	lsls	r2, r2, #1
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2234      	movs	r2, #52	; 0x34
 8004674:	2100      	movs	r1, #0
 8004676:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	221c      	movs	r2, #28
 800467e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2104      	movs	r1, #4
 800468c:	430a      	orrs	r2, r1
 800468e:	609a      	str	r2, [r3, #8]
 8004690:	e003      	b.n	800469a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004692:	230f      	movs	r3, #15
 8004694:	18fb      	adds	r3, r7, r3
 8004696:	2202      	movs	r2, #2
 8004698:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800469a:	230f      	movs	r3, #15
 800469c:	18fb      	adds	r3, r7, r3
 800469e:	781b      	ldrb	r3, [r3, #0]
}
 80046a0:	0018      	movs	r0, r3
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b005      	add	sp, #20
 80046a6:	bd90      	pop	{r4, r7, pc}
 80046a8:	fffff0fe 	.word	0xfffff0fe

080046ac <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d102      	bne.n	80046c4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80046be:	2308      	movs	r3, #8
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	e014      	b.n	80046ee <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	2201      	movs	r2, #1
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d10b      	bne.n	80046ea <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	2220      	movs	r2, #32
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2234      	movs	r2, #52	; 0x34
 80046e2:	2100      	movs	r1, #0
 80046e4:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e06b      	b.n	80047c2 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80046ea:	230c      	movs	r3, #12
 80046ec:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80046ee:	f7ff fe1d 	bl	800432c <HAL_GetTick>
 80046f2:	0003      	movs	r3, r0
 80046f4:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80046f6:	e019      	b.n	800472c <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	3301      	adds	r3, #1
 80046fc:	d016      	beq.n	800472c <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d007      	beq.n	8004714 <HAL_ADC_PollForConversion+0x68>
 8004704:	f7ff fe12 	bl	800432c <HAL_GetTick>
 8004708:	0002      	movs	r2, r0
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d20b      	bcs.n	800472c <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004718:	2204      	movs	r2, #4
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2234      	movs	r2, #52	; 0x34
 8004724:	2100      	movs	r1, #0
 8004726:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e04a      	b.n	80047c2 <HAL_ADC_PollForConversion+0x116>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4013      	ands	r3, r2
 8004736:	d0df      	beq.n	80046f8 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	2280      	movs	r2, #128	; 0x80
 800473e:	0092      	lsls	r2, r2, #2
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	23c0      	movs	r3, #192	; 0xc0
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	4013      	ands	r3, r2
 8004752:	d12d      	bne.n	80047b0 <HAL_ADC_PollForConversion+0x104>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004758:	2b00      	cmp	r3, #0
 800475a:	d129      	bne.n	80047b0 <HAL_ADC_PollForConversion+0x104>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2208      	movs	r2, #8
 8004764:	4013      	ands	r3, r2
 8004766:	2b08      	cmp	r3, #8
 8004768:	d122      	bne.n	80047b0 <HAL_ADC_PollForConversion+0x104>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	2204      	movs	r2, #4
 8004772:	4013      	ands	r3, r2
 8004774:	d110      	bne.n	8004798 <HAL_ADC_PollForConversion+0xec>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	210c      	movs	r1, #12
 8004782:	438a      	bics	r2, r1
 8004784:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	4a10      	ldr	r2, [pc, #64]	; (80047cc <HAL_ADC_PollForConversion+0x120>)
 800478c:	4013      	ands	r3, r2
 800478e:	2201      	movs	r2, #1
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	639a      	str	r2, [r3, #56]	; 0x38
 8004796:	e00b      	b.n	80047b0 <HAL_ADC_PollForConversion+0x104>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479c:	2220      	movs	r2, #32
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a8:	2201      	movs	r2, #1
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	7e1b      	ldrb	r3, [r3, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d103      	bne.n	80047c0 <HAL_ADC_PollForConversion+0x114>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	220c      	movs	r2, #12
 80047be:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	0018      	movs	r0, r3
 80047c4:	46bd      	mov	sp, r7
 80047c6:	b004      	add	sp, #16
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	fffffefe 	.word	0xfffffefe

080047d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80047de:	0018      	movs	r0, r3
 80047e0:	46bd      	mov	sp, r7
 80047e2:	b002      	add	sp, #8
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047f2:	230f      	movs	r3, #15
 80047f4:	18fb      	adds	r3, r7, r3
 80047f6:	2200      	movs	r2, #0
 80047f8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004802:	2380      	movs	r3, #128	; 0x80
 8004804:	055b      	lsls	r3, r3, #21
 8004806:	429a      	cmp	r2, r3
 8004808:	d011      	beq.n	800482e <HAL_ADC_ConfigChannel+0x46>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	2b01      	cmp	r3, #1
 8004810:	d00d      	beq.n	800482e <HAL_ADC_ConfigChannel+0x46>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004816:	2b02      	cmp	r3, #2
 8004818:	d009      	beq.n	800482e <HAL_ADC_ConfigChannel+0x46>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481e:	2b03      	cmp	r3, #3
 8004820:	d005      	beq.n	800482e <HAL_ADC_ConfigChannel+0x46>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	2b04      	cmp	r3, #4
 8004828:	d001      	beq.n	800482e <HAL_ADC_ConfigChannel+0x46>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2234      	movs	r2, #52	; 0x34
 8004832:	5c9b      	ldrb	r3, [r3, r2]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_ADC_ConfigChannel+0x54>
 8004838:	2302      	movs	r3, #2
 800483a:	e0bb      	b.n	80049b4 <HAL_ADC_ConfigChannel+0x1cc>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2234      	movs	r2, #52	; 0x34
 8004840:	2101      	movs	r1, #1
 8004842:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2204      	movs	r2, #4
 800484c:	4013      	ands	r3, r2
 800484e:	d000      	beq.n	8004852 <HAL_ADC_ConfigChannel+0x6a>
 8004850:	e09f      	b.n	8004992 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	4a59      	ldr	r2, [pc, #356]	; (80049bc <HAL_ADC_ConfigChannel+0x1d4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d100      	bne.n	800485e <HAL_ADC_ConfigChannel+0x76>
 800485c:	e077      	b.n	800494e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2201      	movs	r2, #1
 800486a:	409a      	lsls	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004878:	2380      	movs	r3, #128	; 0x80
 800487a:	055b      	lsls	r3, r3, #21
 800487c:	429a      	cmp	r2, r3
 800487e:	d037      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x108>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	2b01      	cmp	r3, #1
 8004886:	d033      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x108>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488c:	2b02      	cmp	r3, #2
 800488e:	d02f      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x108>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	2b03      	cmp	r3, #3
 8004896:	d02b      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x108>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	2b04      	cmp	r3, #4
 800489e:	d027      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x108>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	2b05      	cmp	r3, #5
 80048a6:	d023      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x108>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	2b06      	cmp	r3, #6
 80048ae:	d01f      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x108>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	2b07      	cmp	r3, #7
 80048b6:	d01b      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	2107      	movs	r1, #7
 80048c4:	400b      	ands	r3, r1
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d012      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695a      	ldr	r2, [r3, #20]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2107      	movs	r1, #7
 80048d6:	438a      	bics	r2, r1
 80048d8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6959      	ldr	r1, [r3, #20]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2207      	movs	r2, #7
 80048e6:	401a      	ands	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d003      	beq.n	8004900 <HAL_ADC_ConfigChannel+0x118>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b11      	cmp	r3, #17
 80048fe:	d152      	bne.n	80049a6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004900:	4b2f      	ldr	r3, [pc, #188]	; (80049c0 <HAL_ADC_ConfigChannel+0x1d8>)
 8004902:	6819      	ldr	r1, [r3, #0]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b10      	cmp	r3, #16
 800490a:	d102      	bne.n	8004912 <HAL_ADC_ConfigChannel+0x12a>
 800490c:	2380      	movs	r3, #128	; 0x80
 800490e:	041b      	lsls	r3, r3, #16
 8004910:	e001      	b.n	8004916 <HAL_ADC_ConfigChannel+0x12e>
 8004912:	2380      	movs	r3, #128	; 0x80
 8004914:	03db      	lsls	r3, r3, #15
 8004916:	4a2a      	ldr	r2, [pc, #168]	; (80049c0 <HAL_ADC_ConfigChannel+0x1d8>)
 8004918:	430b      	orrs	r3, r1
 800491a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b10      	cmp	r3, #16
 8004922:	d140      	bne.n	80049a6 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004924:	4b27      	ldr	r3, [pc, #156]	; (80049c4 <HAL_ADC_ConfigChannel+0x1dc>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4927      	ldr	r1, [pc, #156]	; (80049c8 <HAL_ADC_ConfigChannel+0x1e0>)
 800492a:	0018      	movs	r0, r3
 800492c:	f7fb fbfe 	bl	800012c <__udivsi3>
 8004930:	0003      	movs	r3, r0
 8004932:	001a      	movs	r2, r3
 8004934:	0013      	movs	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	189b      	adds	r3, r3, r2
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800493e:	e002      	b.n	8004946 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	3b01      	subs	r3, #1
 8004944:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1f9      	bne.n	8004940 <HAL_ADC_ConfigChannel+0x158>
 800494c:	e02b      	b.n	80049a6 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2101      	movs	r1, #1
 800495a:	4099      	lsls	r1, r3
 800495c:	000b      	movs	r3, r1
 800495e:	43d9      	mvns	r1, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	400a      	ands	r2, r1
 8004966:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b10      	cmp	r3, #16
 800496e:	d003      	beq.n	8004978 <HAL_ADC_ConfigChannel+0x190>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b11      	cmp	r3, #17
 8004976:	d116      	bne.n	80049a6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004978:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <HAL_ADC_ConfigChannel+0x1d8>)
 800497a:	6819      	ldr	r1, [r3, #0]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b10      	cmp	r3, #16
 8004982:	d101      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x1a0>
 8004984:	4a11      	ldr	r2, [pc, #68]	; (80049cc <HAL_ADC_ConfigChannel+0x1e4>)
 8004986:	e000      	b.n	800498a <HAL_ADC_ConfigChannel+0x1a2>
 8004988:	4a11      	ldr	r2, [pc, #68]	; (80049d0 <HAL_ADC_ConfigChannel+0x1e8>)
 800498a:	4b0d      	ldr	r3, [pc, #52]	; (80049c0 <HAL_ADC_ConfigChannel+0x1d8>)
 800498c:	400a      	ands	r2, r1
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	e009      	b.n	80049a6 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	2220      	movs	r2, #32
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800499e:	230f      	movs	r3, #15
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	2201      	movs	r2, #1
 80049a4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2234      	movs	r2, #52	; 0x34
 80049aa:	2100      	movs	r1, #0
 80049ac:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80049ae:	230f      	movs	r3, #15
 80049b0:	18fb      	adds	r3, r7, r3
 80049b2:	781b      	ldrb	r3, [r3, #0]
}
 80049b4:	0018      	movs	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b004      	add	sp, #16
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	00001001 	.word	0x00001001
 80049c0:	40012708 	.word	0x40012708
 80049c4:	20000004 	.word	0x20000004
 80049c8:	000f4240 	.word	0x000f4240
 80049cc:	ff7fffff 	.word	0xff7fffff
 80049d0:	ffbfffff 	.word	0xffbfffff

080049d4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	2203      	movs	r2, #3
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d112      	bne.n	8004a18 <ADC_Enable+0x44>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2201      	movs	r2, #1
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d009      	beq.n	8004a14 <ADC_Enable+0x40>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	2380      	movs	r3, #128	; 0x80
 8004a08:	021b      	lsls	r3, r3, #8
 8004a0a:	401a      	ands	r2, r3
 8004a0c:	2380      	movs	r3, #128	; 0x80
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d101      	bne.n	8004a18 <ADC_Enable+0x44>
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <ADC_Enable+0x46>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d14b      	bne.n	8004ab6 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	4a26      	ldr	r2, [pc, #152]	; (8004ac0 <ADC_Enable+0xec>)
 8004a26:	4013      	ands	r3, r2
 8004a28:	d00d      	beq.n	8004a46 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2e:	2210      	movs	r2, #16
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e038      	b.n	8004ab8 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2101      	movs	r1, #1
 8004a52:	430a      	orrs	r2, r1
 8004a54:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004a56:	4b1b      	ldr	r3, [pc, #108]	; (8004ac4 <ADC_Enable+0xf0>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	491b      	ldr	r1, [pc, #108]	; (8004ac8 <ADC_Enable+0xf4>)
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f7fb fb65 	bl	800012c <__udivsi3>
 8004a62:	0003      	movs	r3, r0
 8004a64:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004a66:	e002      	b.n	8004a6e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1f9      	bne.n	8004a68 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004a74:	f7ff fc5a 	bl	800432c <HAL_GetTick>
 8004a78:	0003      	movs	r3, r0
 8004a7a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004a7c:	e014      	b.n	8004aa8 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a7e:	f7ff fc55 	bl	800432c <HAL_GetTick>
 8004a82:	0002      	movs	r2, r0
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d90d      	bls.n	8004aa8 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	2210      	movs	r2, #16
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e007      	b.n	8004ab8 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d1e3      	bne.n	8004a7e <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	0018      	movs	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	b004      	add	sp, #16
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	80000017 	.word	0x80000017
 8004ac4:	20000004 	.word	0x20000004
 8004ac8:	000f4240 	.word	0x000f4240

08004acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	0002      	movs	r2, r0
 8004ad4:	1dfb      	adds	r3, r7, #7
 8004ad6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004ad8:	1dfb      	adds	r3, r7, #7
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b7f      	cmp	r3, #127	; 0x7f
 8004ade:	d809      	bhi.n	8004af4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ae0:	1dfb      	adds	r3, r7, #7
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	001a      	movs	r2, r3
 8004ae6:	231f      	movs	r3, #31
 8004ae8:	401a      	ands	r2, r3
 8004aea:	4b04      	ldr	r3, [pc, #16]	; (8004afc <__NVIC_EnableIRQ+0x30>)
 8004aec:	2101      	movs	r1, #1
 8004aee:	4091      	lsls	r1, r2
 8004af0:	000a      	movs	r2, r1
 8004af2:	601a      	str	r2, [r3, #0]
  }
}
 8004af4:	46c0      	nop			; (mov r8, r8)
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b002      	add	sp, #8
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	e000e100 	.word	0xe000e100

08004b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b00:	b590      	push	{r4, r7, lr}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	0002      	movs	r2, r0
 8004b08:	6039      	str	r1, [r7, #0]
 8004b0a:	1dfb      	adds	r3, r7, #7
 8004b0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004b0e:	1dfb      	adds	r3, r7, #7
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	2b7f      	cmp	r3, #127	; 0x7f
 8004b14:	d828      	bhi.n	8004b68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b16:	4a2f      	ldr	r2, [pc, #188]	; (8004bd4 <__NVIC_SetPriority+0xd4>)
 8004b18:	1dfb      	adds	r3, r7, #7
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	b25b      	sxtb	r3, r3
 8004b1e:	089b      	lsrs	r3, r3, #2
 8004b20:	33c0      	adds	r3, #192	; 0xc0
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	589b      	ldr	r3, [r3, r2]
 8004b26:	1dfa      	adds	r2, r7, #7
 8004b28:	7812      	ldrb	r2, [r2, #0]
 8004b2a:	0011      	movs	r1, r2
 8004b2c:	2203      	movs	r2, #3
 8004b2e:	400a      	ands	r2, r1
 8004b30:	00d2      	lsls	r2, r2, #3
 8004b32:	21ff      	movs	r1, #255	; 0xff
 8004b34:	4091      	lsls	r1, r2
 8004b36:	000a      	movs	r2, r1
 8004b38:	43d2      	mvns	r2, r2
 8004b3a:	401a      	ands	r2, r3
 8004b3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	019b      	lsls	r3, r3, #6
 8004b42:	22ff      	movs	r2, #255	; 0xff
 8004b44:	401a      	ands	r2, r3
 8004b46:	1dfb      	adds	r3, r7, #7
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	4003      	ands	r3, r0
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b54:	481f      	ldr	r0, [pc, #124]	; (8004bd4 <__NVIC_SetPriority+0xd4>)
 8004b56:	1dfb      	adds	r3, r7, #7
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	b25b      	sxtb	r3, r3
 8004b5c:	089b      	lsrs	r3, r3, #2
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	33c0      	adds	r3, #192	; 0xc0
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004b66:	e031      	b.n	8004bcc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b68:	4a1b      	ldr	r2, [pc, #108]	; (8004bd8 <__NVIC_SetPriority+0xd8>)
 8004b6a:	1dfb      	adds	r3, r7, #7
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	0019      	movs	r1, r3
 8004b70:	230f      	movs	r3, #15
 8004b72:	400b      	ands	r3, r1
 8004b74:	3b08      	subs	r3, #8
 8004b76:	089b      	lsrs	r3, r3, #2
 8004b78:	3306      	adds	r3, #6
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	18d3      	adds	r3, r2, r3
 8004b7e:	3304      	adds	r3, #4
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	1dfa      	adds	r2, r7, #7
 8004b84:	7812      	ldrb	r2, [r2, #0]
 8004b86:	0011      	movs	r1, r2
 8004b88:	2203      	movs	r2, #3
 8004b8a:	400a      	ands	r2, r1
 8004b8c:	00d2      	lsls	r2, r2, #3
 8004b8e:	21ff      	movs	r1, #255	; 0xff
 8004b90:	4091      	lsls	r1, r2
 8004b92:	000a      	movs	r2, r1
 8004b94:	43d2      	mvns	r2, r2
 8004b96:	401a      	ands	r2, r3
 8004b98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	019b      	lsls	r3, r3, #6
 8004b9e:	22ff      	movs	r2, #255	; 0xff
 8004ba0:	401a      	ands	r2, r3
 8004ba2:	1dfb      	adds	r3, r7, #7
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	2303      	movs	r3, #3
 8004baa:	4003      	ands	r3, r0
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004bb0:	4809      	ldr	r0, [pc, #36]	; (8004bd8 <__NVIC_SetPriority+0xd8>)
 8004bb2:	1dfb      	adds	r3, r7, #7
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	001c      	movs	r4, r3
 8004bb8:	230f      	movs	r3, #15
 8004bba:	4023      	ands	r3, r4
 8004bbc:	3b08      	subs	r3, #8
 8004bbe:	089b      	lsrs	r3, r3, #2
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	3306      	adds	r3, #6
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	18c3      	adds	r3, r0, r3
 8004bc8:	3304      	adds	r3, #4
 8004bca:	601a      	str	r2, [r3, #0]
}
 8004bcc:	46c0      	nop			; (mov r8, r8)
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	b003      	add	sp, #12
 8004bd2:	bd90      	pop	{r4, r7, pc}
 8004bd4:	e000e100 	.word	0xe000e100
 8004bd8:	e000ed00 	.word	0xe000ed00

08004bdc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	607a      	str	r2, [r7, #4]
 8004be6:	210f      	movs	r1, #15
 8004be8:	187b      	adds	r3, r7, r1
 8004bea:	1c02      	adds	r2, r0, #0
 8004bec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	187b      	adds	r3, r7, r1
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	b25b      	sxtb	r3, r3
 8004bf6:	0011      	movs	r1, r2
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f7ff ff81 	bl	8004b00 <__NVIC_SetPriority>
}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b004      	add	sp, #16
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	0002      	movs	r2, r0
 8004c0e:	1dfb      	adds	r3, r7, #7
 8004c10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c12:	1dfb      	adds	r3, r7, #7
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	b25b      	sxtb	r3, r3
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f7ff ff57 	bl	8004acc <__NVIC_EnableIRQ>
}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	46bd      	mov	sp, r7
 8004c22:	b002      	add	sp, #8
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2221      	movs	r2, #33	; 0x21
 8004c32:	5c9b      	ldrb	r3, [r3, r2]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d008      	beq.n	8004c4c <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2220      	movs	r2, #32
 8004c44:	2100      	movs	r1, #0
 8004c46:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e020      	b.n	8004c8e <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	210e      	movs	r1, #14
 8004c58:	438a      	bics	r2, r1
 8004c5a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2101      	movs	r1, #1
 8004c68:	438a      	bics	r2, r1
 8004c6a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c74:	2101      	movs	r1, #1
 8004c76:	4091      	lsls	r1, r2
 8004c78:	000a      	movs	r2, r1
 8004c7a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2221      	movs	r2, #33	; 0x21
 8004c80:	2101      	movs	r1, #1
 8004c82:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2220      	movs	r2, #32
 8004c88:	2100      	movs	r1, #0
 8004c8a:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	0018      	movs	r0, r3
 8004c90:	46bd      	mov	sp, r7
 8004c92:	b002      	add	sp, #8
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c9e:	230f      	movs	r3, #15
 8004ca0:	18fb      	adds	r3, r7, r3
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2221      	movs	r2, #33	; 0x21
 8004caa:	5c9b      	ldrb	r3, [r3, r2]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d007      	beq.n	8004cc2 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2204      	movs	r2, #4
 8004cb6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004cb8:	230f      	movs	r3, #15
 8004cba:	18fb      	adds	r3, r7, r3
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	701a      	strb	r2, [r3, #0]
 8004cc0:	e028      	b.n	8004d14 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	210e      	movs	r1, #14
 8004cce:	438a      	bics	r2, r1
 8004cd0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2101      	movs	r1, #1
 8004cde:	438a      	bics	r2, r1
 8004ce0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cea:	2101      	movs	r1, #1
 8004cec:	4091      	lsls	r1, r2
 8004cee:	000a      	movs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2221      	movs	r2, #33	; 0x21
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	2100      	movs	r1, #0
 8004d00:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d004      	beq.n	8004d14 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	0010      	movs	r0, r2
 8004d12:	4798      	blx	r3
    } 
  }
  return status;
 8004d14:	230f      	movs	r3, #15
 8004d16:	18fb      	adds	r3, r7, r3
 8004d18:	781b      	ldrb	r3, [r3, #0]
}
 8004d1a:	0018      	movs	r0, r3
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	b004      	add	sp, #16
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8004d2e:	0018      	movs	r0, r3
 8004d30:	46bd      	mov	sp, r7
 8004d32:	b002      	add	sp, #8
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d42:	2300      	movs	r3, #0
 8004d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d46:	e14f      	b.n	8004fe8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4091      	lsls	r1, r2
 8004d52:	000a      	movs	r2, r1
 8004d54:	4013      	ands	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d100      	bne.n	8004d60 <HAL_GPIO_Init+0x28>
 8004d5e:	e140      	b.n	8004fe2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d00b      	beq.n	8004d80 <HAL_GPIO_Init+0x48>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d007      	beq.n	8004d80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d74:	2b11      	cmp	r3, #17
 8004d76:	d003      	beq.n	8004d80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2b12      	cmp	r3, #18
 8004d7e:	d130      	bne.n	8004de2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	2203      	movs	r2, #3
 8004d8c:	409a      	lsls	r2, r3
 8004d8e:	0013      	movs	r3, r2
 8004d90:	43da      	mvns	r2, r3
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4013      	ands	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	409a      	lsls	r2, r3
 8004da2:	0013      	movs	r3, r2
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004db6:	2201      	movs	r2, #1
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	409a      	lsls	r2, r3
 8004dbc:	0013      	movs	r3, r2
 8004dbe:	43da      	mvns	r2, r3
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	091b      	lsrs	r3, r3, #4
 8004dcc:	2201      	movs	r2, #1
 8004dce:	401a      	ands	r2, r3
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	409a      	lsls	r2, r3
 8004dd4:	0013      	movs	r3, r2
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	2203      	movs	r2, #3
 8004dee:	409a      	lsls	r2, r3
 8004df0:	0013      	movs	r3, r2
 8004df2:	43da      	mvns	r2, r3
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	4013      	ands	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	409a      	lsls	r2, r3
 8004e04:	0013      	movs	r3, r2
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d003      	beq.n	8004e22 <HAL_GPIO_Init+0xea>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b12      	cmp	r3, #18
 8004e20:	d123      	bne.n	8004e6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	08da      	lsrs	r2, r3, #3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3208      	adds	r2, #8
 8004e2a:	0092      	lsls	r2, r2, #2
 8004e2c:	58d3      	ldr	r3, [r2, r3]
 8004e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2207      	movs	r2, #7
 8004e34:	4013      	ands	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	220f      	movs	r2, #15
 8004e3a:	409a      	lsls	r2, r3
 8004e3c:	0013      	movs	r3, r2
 8004e3e:	43da      	mvns	r2, r3
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	4013      	ands	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2107      	movs	r1, #7
 8004e4e:	400b      	ands	r3, r1
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	409a      	lsls	r2, r3
 8004e54:	0013      	movs	r3, r2
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	08da      	lsrs	r2, r3, #3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3208      	adds	r2, #8
 8004e64:	0092      	lsls	r2, r2, #2
 8004e66:	6939      	ldr	r1, [r7, #16]
 8004e68:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	2203      	movs	r2, #3
 8004e76:	409a      	lsls	r2, r3
 8004e78:	0013      	movs	r3, r2
 8004e7a:	43da      	mvns	r2, r3
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2203      	movs	r2, #3
 8004e88:	401a      	ands	r2, r3
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	409a      	lsls	r2, r3
 8004e90:	0013      	movs	r3, r2
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	2380      	movs	r3, #128	; 0x80
 8004ea4:	055b      	lsls	r3, r3, #21
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	d100      	bne.n	8004eac <HAL_GPIO_Init+0x174>
 8004eaa:	e09a      	b.n	8004fe2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eac:	4b54      	ldr	r3, [pc, #336]	; (8005000 <HAL_GPIO_Init+0x2c8>)
 8004eae:	699a      	ldr	r2, [r3, #24]
 8004eb0:	4b53      	ldr	r3, [pc, #332]	; (8005000 <HAL_GPIO_Init+0x2c8>)
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	619a      	str	r2, [r3, #24]
 8004eb8:	4b51      	ldr	r3, [pc, #324]	; (8005000 <HAL_GPIO_Init+0x2c8>)
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	60bb      	str	r3, [r7, #8]
 8004ec2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004ec4:	4a4f      	ldr	r2, [pc, #316]	; (8005004 <HAL_GPIO_Init+0x2cc>)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	089b      	lsrs	r3, r3, #2
 8004eca:	3302      	adds	r3, #2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	589b      	ldr	r3, [r3, r2]
 8004ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2203      	movs	r2, #3
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	220f      	movs	r2, #15
 8004edc:	409a      	lsls	r2, r3
 8004ede:	0013      	movs	r3, r2
 8004ee0:	43da      	mvns	r2, r3
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	2390      	movs	r3, #144	; 0x90
 8004eec:	05db      	lsls	r3, r3, #23
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d013      	beq.n	8004f1a <HAL_GPIO_Init+0x1e2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a44      	ldr	r2, [pc, #272]	; (8005008 <HAL_GPIO_Init+0x2d0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00d      	beq.n	8004f16 <HAL_GPIO_Init+0x1de>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a43      	ldr	r2, [pc, #268]	; (800500c <HAL_GPIO_Init+0x2d4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d007      	beq.n	8004f12 <HAL_GPIO_Init+0x1da>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a42      	ldr	r2, [pc, #264]	; (8005010 <HAL_GPIO_Init+0x2d8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d101      	bne.n	8004f0e <HAL_GPIO_Init+0x1d6>
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e006      	b.n	8004f1c <HAL_GPIO_Init+0x1e4>
 8004f0e:	2305      	movs	r3, #5
 8004f10:	e004      	b.n	8004f1c <HAL_GPIO_Init+0x1e4>
 8004f12:	2302      	movs	r3, #2
 8004f14:	e002      	b.n	8004f1c <HAL_GPIO_Init+0x1e4>
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <HAL_GPIO_Init+0x1e4>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	2103      	movs	r1, #3
 8004f20:	400a      	ands	r2, r1
 8004f22:	0092      	lsls	r2, r2, #2
 8004f24:	4093      	lsls	r3, r2
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f2c:	4935      	ldr	r1, [pc, #212]	; (8005004 <HAL_GPIO_Init+0x2cc>)
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	089b      	lsrs	r3, r3, #2
 8004f32:	3302      	adds	r3, #2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f3a:	4b36      	ldr	r3, [pc, #216]	; (8005014 <HAL_GPIO_Init+0x2dc>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	43da      	mvns	r2, r3
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	4013      	ands	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	2380      	movs	r3, #128	; 0x80
 8004f50:	025b      	lsls	r3, r3, #9
 8004f52:	4013      	ands	r3, r2
 8004f54:	d003      	beq.n	8004f5e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004f5e:	4b2d      	ldr	r3, [pc, #180]	; (8005014 <HAL_GPIO_Init+0x2dc>)
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004f64:	4b2b      	ldr	r3, [pc, #172]	; (8005014 <HAL_GPIO_Init+0x2dc>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	43da      	mvns	r2, r3
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	4013      	ands	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	2380      	movs	r3, #128	; 0x80
 8004f7a:	029b      	lsls	r3, r3, #10
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004f88:	4b22      	ldr	r3, [pc, #136]	; (8005014 <HAL_GPIO_Init+0x2dc>)
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f8e:	4b21      	ldr	r3, [pc, #132]	; (8005014 <HAL_GPIO_Init+0x2dc>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	43da      	mvns	r2, r3
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	2380      	movs	r3, #128	; 0x80
 8004fa4:	035b      	lsls	r3, r3, #13
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	d003      	beq.n	8004fb2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004fb2:	4b18      	ldr	r3, [pc, #96]	; (8005014 <HAL_GPIO_Init+0x2dc>)
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004fb8:	4b16      	ldr	r3, [pc, #88]	; (8005014 <HAL_GPIO_Init+0x2dc>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	43da      	mvns	r2, r3
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	2380      	movs	r3, #128	; 0x80
 8004fce:	039b      	lsls	r3, r3, #14
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	d003      	beq.n	8004fdc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004fdc:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <HAL_GPIO_Init+0x2dc>)
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	40da      	lsrs	r2, r3
 8004ff0:	1e13      	subs	r3, r2, #0
 8004ff2:	d000      	beq.n	8004ff6 <HAL_GPIO_Init+0x2be>
 8004ff4:	e6a8      	b.n	8004d48 <HAL_GPIO_Init+0x10>
  } 
}
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	b006      	add	sp, #24
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	46c0      	nop			; (mov r8, r8)
 8005000:	40021000 	.word	0x40021000
 8005004:	40010000 	.word	0x40010000
 8005008:	48000400 	.word	0x48000400
 800500c:	48000800 	.word	0x48000800
 8005010:	48000c00 	.word	0x48000c00
 8005014:	40010400 	.word	0x40010400

08005018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	0008      	movs	r0, r1
 8005022:	0011      	movs	r1, r2
 8005024:	1cbb      	adds	r3, r7, #2
 8005026:	1c02      	adds	r2, r0, #0
 8005028:	801a      	strh	r2, [r3, #0]
 800502a:	1c7b      	adds	r3, r7, #1
 800502c:	1c0a      	adds	r2, r1, #0
 800502e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005030:	1c7b      	adds	r3, r7, #1
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d004      	beq.n	8005042 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005038:	1cbb      	adds	r3, r7, #2
 800503a:	881a      	ldrh	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005040:	e003      	b.n	800504a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005042:	1cbb      	adds	r3, r7, #2
 8005044:	881a      	ldrh	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	629a      	str	r2, [r3, #40]	; 0x28
}
 800504a:	46c0      	nop			; (mov r8, r8)
 800504c:	46bd      	mov	sp, r7
 800504e:	b002      	add	sp, #8
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e082      	b.n	800516c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2241      	movs	r2, #65	; 0x41
 800506a:	5c9b      	ldrb	r3, [r3, r2]
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d107      	bne.n	8005082 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2240      	movs	r2, #64	; 0x40
 8005076:	2100      	movs	r1, #0
 8005078:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	0018      	movs	r0, r3
 800507e:	f7fe ff41 	bl	8003f04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2241      	movs	r2, #65	; 0x41
 8005086:	2124      	movs	r1, #36	; 0x24
 8005088:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2101      	movs	r1, #1
 8005096:	438a      	bics	r2, r1
 8005098:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4934      	ldr	r1, [pc, #208]	; (8005174 <HAL_I2C_Init+0x120>)
 80050a4:	400a      	ands	r2, r1
 80050a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689a      	ldr	r2, [r3, #8]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4931      	ldr	r1, [pc, #196]	; (8005178 <HAL_I2C_Init+0x124>)
 80050b4:	400a      	ands	r2, r1
 80050b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d108      	bne.n	80050d2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2180      	movs	r1, #128	; 0x80
 80050ca:	0209      	lsls	r1, r1, #8
 80050cc:	430a      	orrs	r2, r1
 80050ce:	609a      	str	r2, [r3, #8]
 80050d0:	e007      	b.n	80050e2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2184      	movs	r1, #132	; 0x84
 80050dc:	0209      	lsls	r1, r1, #8
 80050de:	430a      	orrs	r2, r1
 80050e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d104      	bne.n	80050f4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2280      	movs	r2, #128	; 0x80
 80050f0:	0112      	lsls	r2, r2, #4
 80050f2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	491f      	ldr	r1, [pc, #124]	; (800517c <HAL_I2C_Init+0x128>)
 8005100:	430a      	orrs	r2, r1
 8005102:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	491a      	ldr	r1, [pc, #104]	; (8005178 <HAL_I2C_Init+0x124>)
 8005110:	400a      	ands	r2, r1
 8005112:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691a      	ldr	r2, [r3, #16]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	431a      	orrs	r2, r3
 800511e:	0011      	movs	r1, r2
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	021a      	lsls	r2, r3, #8
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69d9      	ldr	r1, [r3, #28]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1a      	ldr	r2, [r3, #32]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2101      	movs	r1, #1
 800514a:	430a      	orrs	r2, r1
 800514c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2241      	movs	r2, #65	; 0x41
 8005158:	2120      	movs	r1, #32
 800515a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2242      	movs	r2, #66	; 0x42
 8005166:	2100      	movs	r1, #0
 8005168:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	0018      	movs	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	b002      	add	sp, #8
 8005172:	bd80      	pop	{r7, pc}
 8005174:	f0ffffff 	.word	0xf0ffffff
 8005178:	ffff7fff 	.word	0xffff7fff
 800517c:	02008000 	.word	0x02008000

08005180 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005180:	b590      	push	{r4, r7, lr}
 8005182:	b089      	sub	sp, #36	; 0x24
 8005184:	af02      	add	r7, sp, #8
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	0008      	movs	r0, r1
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	0019      	movs	r1, r3
 800518e:	230a      	movs	r3, #10
 8005190:	18fb      	adds	r3, r7, r3
 8005192:	1c02      	adds	r2, r0, #0
 8005194:	801a      	strh	r2, [r3, #0]
 8005196:	2308      	movs	r3, #8
 8005198:	18fb      	adds	r3, r7, r3
 800519a:	1c0a      	adds	r2, r1, #0
 800519c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2241      	movs	r2, #65	; 0x41
 80051a2:	5c9b      	ldrb	r3, [r3, r2]
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	d000      	beq.n	80051ac <HAL_I2C_Master_Transmit+0x2c>
 80051aa:	e0e7      	b.n	800537c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2240      	movs	r2, #64	; 0x40
 80051b0:	5c9b      	ldrb	r3, [r3, r2]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d101      	bne.n	80051ba <HAL_I2C_Master_Transmit+0x3a>
 80051b6:	2302      	movs	r3, #2
 80051b8:	e0e1      	b.n	800537e <HAL_I2C_Master_Transmit+0x1fe>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2240      	movs	r2, #64	; 0x40
 80051be:	2101      	movs	r1, #1
 80051c0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051c2:	f7ff f8b3 	bl	800432c <HAL_GetTick>
 80051c6:	0003      	movs	r3, r0
 80051c8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051ca:	2380      	movs	r3, #128	; 0x80
 80051cc:	0219      	lsls	r1, r3, #8
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	2319      	movs	r3, #25
 80051d6:	2201      	movs	r2, #1
 80051d8:	f000 fb1e 	bl	8005818 <I2C_WaitOnFlagUntilTimeout>
 80051dc:	1e03      	subs	r3, r0, #0
 80051de:	d001      	beq.n	80051e4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e0cc      	b.n	800537e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2241      	movs	r2, #65	; 0x41
 80051e8:	2121      	movs	r1, #33	; 0x21
 80051ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2242      	movs	r2, #66	; 0x42
 80051f0:	2110      	movs	r1, #16
 80051f2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2208      	movs	r2, #8
 8005204:	18ba      	adds	r2, r7, r2
 8005206:	8812      	ldrh	r2, [r2, #0]
 8005208:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005214:	b29b      	uxth	r3, r3
 8005216:	2bff      	cmp	r3, #255	; 0xff
 8005218:	d911      	bls.n	800523e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	22ff      	movs	r2, #255	; 0xff
 800521e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005224:	b2da      	uxtb	r2, r3
 8005226:	2380      	movs	r3, #128	; 0x80
 8005228:	045c      	lsls	r4, r3, #17
 800522a:	230a      	movs	r3, #10
 800522c:	18fb      	adds	r3, r7, r3
 800522e:	8819      	ldrh	r1, [r3, #0]
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	4b55      	ldr	r3, [pc, #340]	; (8005388 <HAL_I2C_Master_Transmit+0x208>)
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	0023      	movs	r3, r4
 8005238:	f000 fc7a 	bl	8005b30 <I2C_TransferConfig>
 800523c:	e075      	b.n	800532a <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005242:	b29a      	uxth	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524c:	b2da      	uxtb	r2, r3
 800524e:	2380      	movs	r3, #128	; 0x80
 8005250:	049c      	lsls	r4, r3, #18
 8005252:	230a      	movs	r3, #10
 8005254:	18fb      	adds	r3, r7, r3
 8005256:	8819      	ldrh	r1, [r3, #0]
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	4b4b      	ldr	r3, [pc, #300]	; (8005388 <HAL_I2C_Master_Transmit+0x208>)
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	0023      	movs	r3, r4
 8005260:	f000 fc66 	bl	8005b30 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005264:	e061      	b.n	800532a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	0018      	movs	r0, r3
 800526e:	f000 fb12 	bl	8005896 <I2C_WaitOnTXISFlagUntilTimeout>
 8005272:	1e03      	subs	r3, r0, #0
 8005274:	d001      	beq.n	800527a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e081      	b.n	800537e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	781a      	ldrb	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	1c5a      	adds	r2, r3, #1
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005294:	b29b      	uxth	r3, r3
 8005296:	3b01      	subs	r3, #1
 8005298:	b29a      	uxth	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d03a      	beq.n	800532a <HAL_I2C_Master_Transmit+0x1aa>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d136      	bne.n	800532a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	0013      	movs	r3, r2
 80052c6:	2200      	movs	r2, #0
 80052c8:	2180      	movs	r1, #128	; 0x80
 80052ca:	f000 faa5 	bl	8005818 <I2C_WaitOnFlagUntilTimeout>
 80052ce:	1e03      	subs	r3, r0, #0
 80052d0:	d001      	beq.n	80052d6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e053      	b.n	800537e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2bff      	cmp	r3, #255	; 0xff
 80052de:	d911      	bls.n	8005304 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	22ff      	movs	r2, #255	; 0xff
 80052e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	2380      	movs	r3, #128	; 0x80
 80052ee:	045c      	lsls	r4, r3, #17
 80052f0:	230a      	movs	r3, #10
 80052f2:	18fb      	adds	r3, r7, r3
 80052f4:	8819      	ldrh	r1, [r3, #0]
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	2300      	movs	r3, #0
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	0023      	movs	r3, r4
 80052fe:	f000 fc17 	bl	8005b30 <I2C_TransferConfig>
 8005302:	e012      	b.n	800532a <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005308:	b29a      	uxth	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005312:	b2da      	uxtb	r2, r3
 8005314:	2380      	movs	r3, #128	; 0x80
 8005316:	049c      	lsls	r4, r3, #18
 8005318:	230a      	movs	r3, #10
 800531a:	18fb      	adds	r3, r7, r3
 800531c:	8819      	ldrh	r1, [r3, #0]
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	2300      	movs	r3, #0
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	0023      	movs	r3, r4
 8005326:	f000 fc03 	bl	8005b30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532e:	b29b      	uxth	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d198      	bne.n	8005266 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	0018      	movs	r0, r3
 800533c:	f000 faea 	bl	8005914 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005340:	1e03      	subs	r3, r0, #0
 8005342:	d001      	beq.n	8005348 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e01a      	b.n	800537e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2220      	movs	r2, #32
 800534e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	490c      	ldr	r1, [pc, #48]	; (800538c <HAL_I2C_Master_Transmit+0x20c>)
 800535c:	400a      	ands	r2, r1
 800535e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2241      	movs	r2, #65	; 0x41
 8005364:	2120      	movs	r1, #32
 8005366:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2242      	movs	r2, #66	; 0x42
 800536c:	2100      	movs	r1, #0
 800536e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2240      	movs	r2, #64	; 0x40
 8005374:	2100      	movs	r1, #0
 8005376:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005378:	2300      	movs	r3, #0
 800537a:	e000      	b.n	800537e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800537c:	2302      	movs	r3, #2
  }
}
 800537e:	0018      	movs	r0, r3
 8005380:	46bd      	mov	sp, r7
 8005382:	b007      	add	sp, #28
 8005384:	bd90      	pop	{r4, r7, pc}
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	80002000 	.word	0x80002000
 800538c:	fe00e800 	.word	0xfe00e800

08005390 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8005390:	b590      	push	{r4, r7, lr}
 8005392:	b089      	sub	sp, #36	; 0x24
 8005394:	af02      	add	r7, sp, #8
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	0008      	movs	r0, r1
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	0019      	movs	r1, r3
 800539e:	230a      	movs	r3, #10
 80053a0:	18fb      	adds	r3, r7, r3
 80053a2:	1c02      	adds	r2, r0, #0
 80053a4:	801a      	strh	r2, [r3, #0]
 80053a6:	2308      	movs	r3, #8
 80053a8:	18fb      	adds	r3, r7, r3
 80053aa:	1c0a      	adds	r2, r1, #0
 80053ac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2241      	movs	r2, #65	; 0x41
 80053b2:	5c9b      	ldrb	r3, [r3, r2]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d000      	beq.n	80053bc <HAL_I2C_Master_Receive+0x2c>
 80053ba:	e0e8      	b.n	800558e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2240      	movs	r2, #64	; 0x40
 80053c0:	5c9b      	ldrb	r3, [r3, r2]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d101      	bne.n	80053ca <HAL_I2C_Master_Receive+0x3a>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e0e2      	b.n	8005590 <HAL_I2C_Master_Receive+0x200>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2240      	movs	r2, #64	; 0x40
 80053ce:	2101      	movs	r1, #1
 80053d0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80053d2:	f7fe ffab 	bl	800432c <HAL_GetTick>
 80053d6:	0003      	movs	r3, r0
 80053d8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053da:	2380      	movs	r3, #128	; 0x80
 80053dc:	0219      	lsls	r1, r3, #8
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	2319      	movs	r3, #25
 80053e6:	2201      	movs	r2, #1
 80053e8:	f000 fa16 	bl	8005818 <I2C_WaitOnFlagUntilTimeout>
 80053ec:	1e03      	subs	r3, r0, #0
 80053ee:	d001      	beq.n	80053f4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e0cd      	b.n	8005590 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2241      	movs	r2, #65	; 0x41
 80053f8:	2122      	movs	r1, #34	; 0x22
 80053fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2242      	movs	r2, #66	; 0x42
 8005400:	2110      	movs	r1, #16
 8005402:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2208      	movs	r2, #8
 8005414:	18ba      	adds	r2, r7, r2
 8005416:	8812      	ldrh	r2, [r2, #0]
 8005418:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005424:	b29b      	uxth	r3, r3
 8005426:	2bff      	cmp	r3, #255	; 0xff
 8005428:	d911      	bls.n	800544e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	22ff      	movs	r2, #255	; 0xff
 800542e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005434:	b2da      	uxtb	r2, r3
 8005436:	2380      	movs	r3, #128	; 0x80
 8005438:	045c      	lsls	r4, r3, #17
 800543a:	230a      	movs	r3, #10
 800543c:	18fb      	adds	r3, r7, r3
 800543e:	8819      	ldrh	r1, [r3, #0]
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	4b55      	ldr	r3, [pc, #340]	; (8005598 <HAL_I2C_Master_Receive+0x208>)
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	0023      	movs	r3, r4
 8005448:	f000 fb72 	bl	8005b30 <I2C_TransferConfig>
 800544c:	e076      	b.n	800553c <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800545c:	b2da      	uxtb	r2, r3
 800545e:	2380      	movs	r3, #128	; 0x80
 8005460:	049c      	lsls	r4, r3, #18
 8005462:	230a      	movs	r3, #10
 8005464:	18fb      	adds	r3, r7, r3
 8005466:	8819      	ldrh	r1, [r3, #0]
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	4b4b      	ldr	r3, [pc, #300]	; (8005598 <HAL_I2C_Master_Receive+0x208>)
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	0023      	movs	r3, r4
 8005470:	f000 fb5e 	bl	8005b30 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005474:	e062      	b.n	800553c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	0018      	movs	r0, r3
 800547e:	f000 fa85 	bl	800598c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005482:	1e03      	subs	r3, r0, #0
 8005484:	d001      	beq.n	800548a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e082      	b.n	8005590 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d03a      	beq.n	800553c <HAL_I2C_Master_Receive+0x1ac>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d136      	bne.n	800553c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	0013      	movs	r3, r2
 80054d8:	2200      	movs	r2, #0
 80054da:	2180      	movs	r1, #128	; 0x80
 80054dc:	f000 f99c 	bl	8005818 <I2C_WaitOnFlagUntilTimeout>
 80054e0:	1e03      	subs	r3, r0, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e053      	b.n	8005590 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2bff      	cmp	r3, #255	; 0xff
 80054f0:	d911      	bls.n	8005516 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	22ff      	movs	r2, #255	; 0xff
 80054f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	2380      	movs	r3, #128	; 0x80
 8005500:	045c      	lsls	r4, r3, #17
 8005502:	230a      	movs	r3, #10
 8005504:	18fb      	adds	r3, r7, r3
 8005506:	8819      	ldrh	r1, [r3, #0]
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	2300      	movs	r3, #0
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	0023      	movs	r3, r4
 8005510:	f000 fb0e 	bl	8005b30 <I2C_TransferConfig>
 8005514:	e012      	b.n	800553c <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551a:	b29a      	uxth	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005524:	b2da      	uxtb	r2, r3
 8005526:	2380      	movs	r3, #128	; 0x80
 8005528:	049c      	lsls	r4, r3, #18
 800552a:	230a      	movs	r3, #10
 800552c:	18fb      	adds	r3, r7, r3
 800552e:	8819      	ldrh	r1, [r3, #0]
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	2300      	movs	r3, #0
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	0023      	movs	r3, r4
 8005538:	f000 fafa 	bl	8005b30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d197      	bne.n	8005476 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	0018      	movs	r0, r3
 800554e:	f000 f9e1 	bl	8005914 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005552:	1e03      	subs	r3, r0, #0
 8005554:	d001      	beq.n	800555a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e01a      	b.n	8005590 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2220      	movs	r2, #32
 8005560:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	490b      	ldr	r1, [pc, #44]	; (800559c <HAL_I2C_Master_Receive+0x20c>)
 800556e:	400a      	ands	r2, r1
 8005570:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2241      	movs	r2, #65	; 0x41
 8005576:	2120      	movs	r1, #32
 8005578:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2242      	movs	r2, #66	; 0x42
 800557e:	2100      	movs	r1, #0
 8005580:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2240      	movs	r2, #64	; 0x40
 8005586:	2100      	movs	r1, #0
 8005588:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800558a:	2300      	movs	r3, #0
 800558c:	e000      	b.n	8005590 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800558e:	2302      	movs	r3, #2
  }
}
 8005590:	0018      	movs	r0, r3
 8005592:	46bd      	mov	sp, r7
 8005594:	b007      	add	sp, #28
 8005596:	bd90      	pop	{r4, r7, pc}
 8005598:	80002400 	.word	0x80002400
 800559c:	fe00e800 	.word	0xfe00e800

080055a0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08a      	sub	sp, #40	; 0x28
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	607a      	str	r2, [r7, #4]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	230a      	movs	r3, #10
 80055ae:	18fb      	adds	r3, r7, r3
 80055b0:	1c0a      	adds	r2, r1, #0
 80055b2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2241      	movs	r2, #65	; 0x41
 80055bc:	5c9b      	ldrb	r3, [r3, r2]
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	d000      	beq.n	80055c6 <HAL_I2C_IsDeviceReady+0x26>
 80055c4:	e0fe      	b.n	80057c4 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699a      	ldr	r2, [r3, #24]
 80055cc:	2380      	movs	r3, #128	; 0x80
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	401a      	ands	r2, r3
 80055d2:	2380      	movs	r3, #128	; 0x80
 80055d4:	021b      	lsls	r3, r3, #8
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d101      	bne.n	80055de <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80055da:	2302      	movs	r3, #2
 80055dc:	e0f3      	b.n	80057c6 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2240      	movs	r2, #64	; 0x40
 80055e2:	5c9b      	ldrb	r3, [r3, r2]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_I2C_IsDeviceReady+0x4c>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e0ec      	b.n	80057c6 <HAL_I2C_IsDeviceReady+0x226>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2240      	movs	r2, #64	; 0x40
 80055f0:	2101      	movs	r1, #1
 80055f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2241      	movs	r2, #65	; 0x41
 80055f8:	2124      	movs	r1, #36	; 0x24
 80055fa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d107      	bne.n	800561a <HAL_I2C_IsDeviceReady+0x7a>
 800560a:	230a      	movs	r3, #10
 800560c:	18fb      	adds	r3, r7, r3
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	059b      	lsls	r3, r3, #22
 8005612:	0d9b      	lsrs	r3, r3, #22
 8005614:	4a6e      	ldr	r2, [pc, #440]	; (80057d0 <HAL_I2C_IsDeviceReady+0x230>)
 8005616:	431a      	orrs	r2, r3
 8005618:	e007      	b.n	800562a <HAL_I2C_IsDeviceReady+0x8a>
 800561a:	230a      	movs	r3, #10
 800561c:	18fb      	adds	r3, r7, r3
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	059b      	lsls	r3, r3, #22
 8005622:	0d9b      	lsrs	r3, r3, #22
 8005624:	22a0      	movs	r2, #160	; 0xa0
 8005626:	0192      	lsls	r2, r2, #6
 8005628:	431a      	orrs	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005630:	f7fe fe7c 	bl	800432c <HAL_GetTick>
 8005634:	0003      	movs	r3, r0
 8005636:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	2220      	movs	r2, #32
 8005640:	4013      	ands	r3, r2
 8005642:	3b20      	subs	r3, #32
 8005644:	425a      	negs	r2, r3
 8005646:	4153      	adcs	r3, r2
 8005648:	b2da      	uxtb	r2, r3
 800564a:	231f      	movs	r3, #31
 800564c:	18fb      	adds	r3, r7, r3
 800564e:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	2210      	movs	r2, #16
 8005658:	4013      	ands	r3, r2
 800565a:	3b10      	subs	r3, #16
 800565c:	425a      	negs	r2, r3
 800565e:	4153      	adcs	r3, r2
 8005660:	b2da      	uxtb	r2, r3
 8005662:	231e      	movs	r3, #30
 8005664:	18fb      	adds	r3, r7, r3
 8005666:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005668:	e035      	b.n	80056d6 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	3301      	adds	r3, #1
 800566e:	d01a      	beq.n	80056a6 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005670:	f7fe fe5c 	bl	800432c <HAL_GetTick>
 8005674:	0002      	movs	r2, r0
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d302      	bcc.n	8005686 <HAL_I2C_IsDeviceReady+0xe6>
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10f      	bne.n	80056a6 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2241      	movs	r2, #65	; 0x41
 800568a:	2120      	movs	r1, #32
 800568c:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005692:	2220      	movs	r2, #32
 8005694:	431a      	orrs	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2240      	movs	r2, #64	; 0x40
 800569e:	2100      	movs	r1, #0
 80056a0:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e08f      	b.n	80057c6 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	2220      	movs	r2, #32
 80056ae:	4013      	ands	r3, r2
 80056b0:	3b20      	subs	r3, #32
 80056b2:	425a      	negs	r2, r3
 80056b4:	4153      	adcs	r3, r2
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	231f      	movs	r3, #31
 80056ba:	18fb      	adds	r3, r7, r3
 80056bc:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	2210      	movs	r2, #16
 80056c6:	4013      	ands	r3, r2
 80056c8:	3b10      	subs	r3, #16
 80056ca:	425a      	negs	r2, r3
 80056cc:	4153      	adcs	r3, r2
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	231e      	movs	r3, #30
 80056d2:	18fb      	adds	r3, r7, r3
 80056d4:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80056d6:	231f      	movs	r3, #31
 80056d8:	18fb      	adds	r3, r7, r3
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d104      	bne.n	80056ea <HAL_I2C_IsDeviceReady+0x14a>
 80056e0:	231e      	movs	r3, #30
 80056e2:	18fb      	adds	r3, r7, r3
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0bf      	beq.n	800566a <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	2210      	movs	r2, #16
 80056f2:	4013      	ands	r3, r2
 80056f4:	2b10      	cmp	r3, #16
 80056f6:	d01a      	beq.n	800572e <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	0013      	movs	r3, r2
 8005702:	2200      	movs	r2, #0
 8005704:	2120      	movs	r1, #32
 8005706:	f000 f887 	bl	8005818 <I2C_WaitOnFlagUntilTimeout>
 800570a:	1e03      	subs	r3, r0, #0
 800570c:	d001      	beq.n	8005712 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e059      	b.n	80057c6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2220      	movs	r2, #32
 8005718:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2241      	movs	r2, #65	; 0x41
 800571e:	2120      	movs	r1, #32
 8005720:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2240      	movs	r2, #64	; 0x40
 8005726:	2100      	movs	r1, #0
 8005728:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	e04b      	b.n	80057c6 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	0013      	movs	r3, r2
 8005738:	2200      	movs	r2, #0
 800573a:	2120      	movs	r1, #32
 800573c:	f000 f86c 	bl	8005818 <I2C_WaitOnFlagUntilTimeout>
 8005740:	1e03      	subs	r3, r0, #0
 8005742:	d001      	beq.n	8005748 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e03e      	b.n	80057c6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2210      	movs	r2, #16
 800574e:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2220      	movs	r2, #32
 8005756:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	429a      	cmp	r2, r3
 800575e:	d119      	bne.n	8005794 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2180      	movs	r1, #128	; 0x80
 800576c:	01c9      	lsls	r1, r1, #7
 800576e:	430a      	orrs	r2, r1
 8005770:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	0013      	movs	r3, r2
 800577c:	2200      	movs	r2, #0
 800577e:	2120      	movs	r1, #32
 8005780:	f000 f84a 	bl	8005818 <I2C_WaitOnFlagUntilTimeout>
 8005784:	1e03      	subs	r3, r0, #0
 8005786:	d001      	beq.n	800578c <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e01c      	b.n	80057c6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2220      	movs	r2, #32
 8005792:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	3301      	adds	r3, #1
 8005798:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d900      	bls.n	80057a4 <HAL_I2C_IsDeviceReady+0x204>
 80057a2:	e72e      	b.n	8005602 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2241      	movs	r2, #65	; 0x41
 80057a8:	2120      	movs	r1, #32
 80057aa:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b0:	2220      	movs	r2, #32
 80057b2:	431a      	orrs	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2240      	movs	r2, #64	; 0x40
 80057bc:	2100      	movs	r1, #0
 80057be:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e000      	b.n	80057c6 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 80057c4:	2302      	movs	r3, #2
  }
}
 80057c6:	0018      	movs	r0, r3
 80057c8:	46bd      	mov	sp, r7
 80057ca:	b008      	add	sp, #32
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	02002000 	.word	0x02002000

080057d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	2202      	movs	r2, #2
 80057e4:	4013      	ands	r3, r2
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d103      	bne.n	80057f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2200      	movs	r2, #0
 80057f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	2201      	movs	r2, #1
 80057fa:	4013      	ands	r3, r2
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d007      	beq.n	8005810 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2101      	movs	r1, #1
 800580c:	430a      	orrs	r2, r1
 800580e:	619a      	str	r2, [r3, #24]
  }
}
 8005810:	46c0      	nop			; (mov r8, r8)
 8005812:	46bd      	mov	sp, r7
 8005814:	b002      	add	sp, #8
 8005816:	bd80      	pop	{r7, pc}

08005818 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	1dfb      	adds	r3, r7, #7
 8005826:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005828:	e021      	b.n	800586e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	3301      	adds	r3, #1
 800582e:	d01e      	beq.n	800586e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005830:	f7fe fd7c 	bl	800432c <HAL_GetTick>
 8005834:	0002      	movs	r2, r0
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d302      	bcc.n	8005846 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d113      	bne.n	800586e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584a:	2220      	movs	r2, #32
 800584c:	431a      	orrs	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2241      	movs	r2, #65	; 0x41
 8005856:	2120      	movs	r1, #32
 8005858:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2242      	movs	r2, #66	; 0x42
 800585e:	2100      	movs	r1, #0
 8005860:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2240      	movs	r2, #64	; 0x40
 8005866:	2100      	movs	r1, #0
 8005868:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e00f      	b.n	800588e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	4013      	ands	r3, r2
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	425a      	negs	r2, r3
 800587e:	4153      	adcs	r3, r2
 8005880:	b2db      	uxtb	r3, r3
 8005882:	001a      	movs	r2, r3
 8005884:	1dfb      	adds	r3, r7, #7
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	429a      	cmp	r2, r3
 800588a:	d0ce      	beq.n	800582a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	0018      	movs	r0, r3
 8005890:	46bd      	mov	sp, r7
 8005892:	b004      	add	sp, #16
 8005894:	bd80      	pop	{r7, pc}

08005896 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b084      	sub	sp, #16
 800589a:	af00      	add	r7, sp, #0
 800589c:	60f8      	str	r0, [r7, #12]
 800589e:	60b9      	str	r1, [r7, #8]
 80058a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058a2:	e02b      	b.n	80058fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	0018      	movs	r0, r3
 80058ac:	f000 f8da 	bl	8005a64 <I2C_IsAcknowledgeFailed>
 80058b0:	1e03      	subs	r3, r0, #0
 80058b2:	d001      	beq.n	80058b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e029      	b.n	800590c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	3301      	adds	r3, #1
 80058bc:	d01e      	beq.n	80058fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058be:	f7fe fd35 	bl	800432c <HAL_GetTick>
 80058c2:	0002      	movs	r2, r0
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d302      	bcc.n	80058d4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d113      	bne.n	80058fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d8:	2220      	movs	r2, #32
 80058da:	431a      	orrs	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2241      	movs	r2, #65	; 0x41
 80058e4:	2120      	movs	r1, #32
 80058e6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2242      	movs	r2, #66	; 0x42
 80058ec:	2100      	movs	r1, #0
 80058ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2240      	movs	r2, #64	; 0x40
 80058f4:	2100      	movs	r1, #0
 80058f6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e007      	b.n	800590c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	2202      	movs	r2, #2
 8005904:	4013      	ands	r3, r2
 8005906:	2b02      	cmp	r3, #2
 8005908:	d1cc      	bne.n	80058a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	0018      	movs	r0, r3
 800590e:	46bd      	mov	sp, r7
 8005910:	b004      	add	sp, #16
 8005912:	bd80      	pop	{r7, pc}

08005914 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005920:	e028      	b.n	8005974 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	0018      	movs	r0, r3
 800592a:	f000 f89b 	bl	8005a64 <I2C_IsAcknowledgeFailed>
 800592e:	1e03      	subs	r3, r0, #0
 8005930:	d001      	beq.n	8005936 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e026      	b.n	8005984 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005936:	f7fe fcf9 	bl	800432c <HAL_GetTick>
 800593a:	0002      	movs	r2, r0
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	429a      	cmp	r2, r3
 8005944:	d302      	bcc.n	800594c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d113      	bne.n	8005974 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005950:	2220      	movs	r2, #32
 8005952:	431a      	orrs	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2241      	movs	r2, #65	; 0x41
 800595c:	2120      	movs	r1, #32
 800595e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2242      	movs	r2, #66	; 0x42
 8005964:	2100      	movs	r1, #0
 8005966:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2240      	movs	r2, #64	; 0x40
 800596c:	2100      	movs	r1, #0
 800596e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e007      	b.n	8005984 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	2220      	movs	r2, #32
 800597c:	4013      	ands	r3, r2
 800597e:	2b20      	cmp	r3, #32
 8005980:	d1cf      	bne.n	8005922 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	0018      	movs	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	b004      	add	sp, #16
 800598a:	bd80      	pop	{r7, pc}

0800598c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005998:	e055      	b.n	8005a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	68b9      	ldr	r1, [r7, #8]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	0018      	movs	r0, r3
 80059a2:	f000 f85f 	bl	8005a64 <I2C_IsAcknowledgeFailed>
 80059a6:	1e03      	subs	r3, r0, #0
 80059a8:	d001      	beq.n	80059ae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e053      	b.n	8005a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	2220      	movs	r2, #32
 80059b6:	4013      	ands	r3, r2
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d129      	bne.n	8005a10 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	2204      	movs	r2, #4
 80059c4:	4013      	ands	r3, r2
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d105      	bne.n	80059d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	e03f      	b.n	8005a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2220      	movs	r2, #32
 80059dc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	491d      	ldr	r1, [pc, #116]	; (8005a60 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80059ea:	400a      	ands	r2, r1
 80059ec:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2241      	movs	r2, #65	; 0x41
 80059f8:	2120      	movs	r1, #32
 80059fa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2242      	movs	r2, #66	; 0x42
 8005a00:	2100      	movs	r1, #0
 8005a02:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2240      	movs	r2, #64	; 0x40
 8005a08:	2100      	movs	r1, #0
 8005a0a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e022      	b.n	8005a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a10:	f7fe fc8c 	bl	800432c <HAL_GetTick>
 8005a14:	0002      	movs	r2, r0
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d302      	bcc.n	8005a26 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10f      	bne.n	8005a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2241      	movs	r2, #65	; 0x41
 8005a36:	2120      	movs	r1, #32
 8005a38:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2240      	movs	r2, #64	; 0x40
 8005a3e:	2100      	movs	r1, #0
 8005a40:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e007      	b.n	8005a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	2204      	movs	r2, #4
 8005a4e:	4013      	ands	r3, r2
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d1a2      	bne.n	800599a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	0018      	movs	r0, r3
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	b004      	add	sp, #16
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	46c0      	nop			; (mov r8, r8)
 8005a60:	fe00e800 	.word	0xfe00e800

08005a64 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	2210      	movs	r2, #16
 8005a78:	4013      	ands	r3, r2
 8005a7a:	2b10      	cmp	r3, #16
 8005a7c:	d151      	bne.n	8005b22 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a7e:	e021      	b.n	8005ac4 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	3301      	adds	r3, #1
 8005a84:	d01e      	beq.n	8005ac4 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a86:	f7fe fc51 	bl	800432c <HAL_GetTick>
 8005a8a:	0002      	movs	r2, r0
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d302      	bcc.n	8005a9c <I2C_IsAcknowledgeFailed+0x38>
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d113      	bne.n	8005ac4 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2241      	movs	r2, #65	; 0x41
 8005aac:	2120      	movs	r1, #32
 8005aae:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2242      	movs	r2, #66	; 0x42
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2240      	movs	r2, #64	; 0x40
 8005abc:	2100      	movs	r1, #0
 8005abe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e02f      	b.n	8005b24 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	2220      	movs	r2, #32
 8005acc:	4013      	ands	r3, r2
 8005ace:	2b20      	cmp	r3, #32
 8005ad0:	d1d6      	bne.n	8005a80 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2210      	movs	r2, #16
 8005ad8:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	f7ff fe75 	bl	80057d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	490d      	ldr	r1, [pc, #52]	; (8005b2c <I2C_IsAcknowledgeFailed+0xc8>)
 8005af6:	400a      	ands	r2, r1
 8005af8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afe:	2204      	movs	r2, #4
 8005b00:	431a      	orrs	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2241      	movs	r2, #65	; 0x41
 8005b0a:	2120      	movs	r1, #32
 8005b0c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2242      	movs	r2, #66	; 0x42
 8005b12:	2100      	movs	r1, #0
 8005b14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2240      	movs	r2, #64	; 0x40
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e000      	b.n	8005b24 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	0018      	movs	r0, r3
 8005b26:	46bd      	mov	sp, r7
 8005b28:	b004      	add	sp, #16
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	fe00e800 	.word	0xfe00e800

08005b30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005b30:	b590      	push	{r4, r7, lr}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	0008      	movs	r0, r1
 8005b3a:	0011      	movs	r1, r2
 8005b3c:	607b      	str	r3, [r7, #4]
 8005b3e:	240a      	movs	r4, #10
 8005b40:	193b      	adds	r3, r7, r4
 8005b42:	1c02      	adds	r2, r0, #0
 8005b44:	801a      	strh	r2, [r3, #0]
 8005b46:	2009      	movs	r0, #9
 8005b48:	183b      	adds	r3, r7, r0
 8005b4a:	1c0a      	adds	r2, r1, #0
 8005b4c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	6a3a      	ldr	r2, [r7, #32]
 8005b56:	0d51      	lsrs	r1, r2, #21
 8005b58:	2280      	movs	r2, #128	; 0x80
 8005b5a:	00d2      	lsls	r2, r2, #3
 8005b5c:	400a      	ands	r2, r1
 8005b5e:	490e      	ldr	r1, [pc, #56]	; (8005b98 <I2C_TransferConfig+0x68>)
 8005b60:	430a      	orrs	r2, r1
 8005b62:	43d2      	mvns	r2, r2
 8005b64:	401a      	ands	r2, r3
 8005b66:	0011      	movs	r1, r2
 8005b68:	193b      	adds	r3, r7, r4
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	059b      	lsls	r3, r3, #22
 8005b6e:	0d9a      	lsrs	r2, r3, #22
 8005b70:	183b      	adds	r3, r7, r0
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	0418      	lsls	r0, r3, #16
 8005b76:	23ff      	movs	r3, #255	; 0xff
 8005b78:	041b      	lsls	r3, r3, #16
 8005b7a:	4003      	ands	r3, r0
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	431a      	orrs	r2, r3
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	431a      	orrs	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005b8e:	46c0      	nop			; (mov r8, r8)
 8005b90:	46bd      	mov	sp, r7
 8005b92:	b005      	add	sp, #20
 8005b94:	bd90      	pop	{r4, r7, pc}
 8005b96:	46c0      	nop			; (mov r8, r8)
 8005b98:	03ff63ff 	.word	0x03ff63ff

08005b9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2241      	movs	r2, #65	; 0x41
 8005baa:	5c9b      	ldrb	r3, [r3, r2]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	d138      	bne.n	8005c24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2240      	movs	r2, #64	; 0x40
 8005bb6:	5c9b      	ldrb	r3, [r3, r2]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e032      	b.n	8005c26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2240      	movs	r2, #64	; 0x40
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2241      	movs	r2, #65	; 0x41
 8005bcc:	2124      	movs	r1, #36	; 0x24
 8005bce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2101      	movs	r1, #1
 8005bdc:	438a      	bics	r2, r1
 8005bde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4911      	ldr	r1, [pc, #68]	; (8005c30 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005bec:	400a      	ands	r2, r1
 8005bee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6819      	ldr	r1, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2241      	movs	r2, #65	; 0x41
 8005c14:	2120      	movs	r1, #32
 8005c16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2240      	movs	r2, #64	; 0x40
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	e000      	b.n	8005c26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c24:	2302      	movs	r3, #2
  }
}
 8005c26:	0018      	movs	r0, r3
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	b002      	add	sp, #8
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	ffffefff 	.word	0xffffefff

08005c34 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2241      	movs	r2, #65	; 0x41
 8005c42:	5c9b      	ldrb	r3, [r3, r2]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b20      	cmp	r3, #32
 8005c48:	d139      	bne.n	8005cbe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2240      	movs	r2, #64	; 0x40
 8005c4e:	5c9b      	ldrb	r3, [r3, r2]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c54:	2302      	movs	r3, #2
 8005c56:	e033      	b.n	8005cc0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2240      	movs	r2, #64	; 0x40
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2241      	movs	r2, #65	; 0x41
 8005c64:	2124      	movs	r1, #36	; 0x24
 8005c66:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2101      	movs	r1, #1
 8005c74:	438a      	bics	r2, r1
 8005c76:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4a11      	ldr	r2, [pc, #68]	; (8005cc8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	021b      	lsls	r3, r3, #8
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2241      	movs	r2, #65	; 0x41
 8005cae:	2120      	movs	r1, #32
 8005cb0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2240      	movs	r2, #64	; 0x40
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	e000      	b.n	8005cc0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005cbe:	2302      	movs	r3, #2
  }
}
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	b004      	add	sp, #16
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	fffff0ff 	.word	0xfffff0ff

08005ccc <HAL_PWR_EnterSTANDBYMode>:
  *            not used and the core is supplied directly from an external source.
  *            Consequently, the Standby mode is not available on those devices.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	af00      	add	r7, sp, #0
  /* Select STANDBY mode */
  PWR->CR |= (uint32_t)PWR_CR_PDDS;
 8005cd0:	4b07      	ldr	r3, [pc, #28]	; (8005cf0 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	4b06      	ldr	r3, [pc, #24]	; (8005cf0 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8005cd6:	2102      	movs	r1, #2
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8005cdc:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	4b04      	ldr	r3, [pc, #16]	; (8005cf4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8005ce2:	2104      	movs	r1, #4
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8005ce8:	bf30      	wfi
}
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40007000 	.word	0x40007000
 8005cf4:	e000ed00 	.word	0xe000ed00

08005cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e303      	b.n	8006312 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	4013      	ands	r3, r2
 8005d12:	d100      	bne.n	8005d16 <HAL_RCC_OscConfig+0x1e>
 8005d14:	e08d      	b.n	8005e32 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005d16:	4bc4      	ldr	r3, [pc, #784]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	220c      	movs	r2, #12
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	d00e      	beq.n	8005d40 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d22:	4bc1      	ldr	r3, [pc, #772]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	220c      	movs	r2, #12
 8005d28:	4013      	ands	r3, r2
 8005d2a:	2b08      	cmp	r3, #8
 8005d2c:	d116      	bne.n	8005d5c <HAL_RCC_OscConfig+0x64>
 8005d2e:	4bbe      	ldr	r3, [pc, #760]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	2380      	movs	r3, #128	; 0x80
 8005d34:	025b      	lsls	r3, r3, #9
 8005d36:	401a      	ands	r2, r3
 8005d38:	2380      	movs	r3, #128	; 0x80
 8005d3a:	025b      	lsls	r3, r3, #9
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d10d      	bne.n	8005d5c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d40:	4bb9      	ldr	r3, [pc, #740]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	2380      	movs	r3, #128	; 0x80
 8005d46:	029b      	lsls	r3, r3, #10
 8005d48:	4013      	ands	r3, r2
 8005d4a:	d100      	bne.n	8005d4e <HAL_RCC_OscConfig+0x56>
 8005d4c:	e070      	b.n	8005e30 <HAL_RCC_OscConfig+0x138>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d000      	beq.n	8005d58 <HAL_RCC_OscConfig+0x60>
 8005d56:	e06b      	b.n	8005e30 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e2da      	b.n	8006312 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d107      	bne.n	8005d74 <HAL_RCC_OscConfig+0x7c>
 8005d64:	4bb0      	ldr	r3, [pc, #704]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	4baf      	ldr	r3, [pc, #700]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005d6a:	2180      	movs	r1, #128	; 0x80
 8005d6c:	0249      	lsls	r1, r1, #9
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	e02f      	b.n	8005dd4 <HAL_RCC_OscConfig+0xdc>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10c      	bne.n	8005d96 <HAL_RCC_OscConfig+0x9e>
 8005d7c:	4baa      	ldr	r3, [pc, #680]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	4ba9      	ldr	r3, [pc, #676]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005d82:	49aa      	ldr	r1, [pc, #680]	; (800602c <HAL_RCC_OscConfig+0x334>)
 8005d84:	400a      	ands	r2, r1
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	4ba7      	ldr	r3, [pc, #668]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	4ba6      	ldr	r3, [pc, #664]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005d8e:	49a8      	ldr	r1, [pc, #672]	; (8006030 <HAL_RCC_OscConfig+0x338>)
 8005d90:	400a      	ands	r2, r1
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	e01e      	b.n	8005dd4 <HAL_RCC_OscConfig+0xdc>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	2b05      	cmp	r3, #5
 8005d9c:	d10e      	bne.n	8005dbc <HAL_RCC_OscConfig+0xc4>
 8005d9e:	4ba2      	ldr	r3, [pc, #648]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	4ba1      	ldr	r3, [pc, #644]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005da4:	2180      	movs	r1, #128	; 0x80
 8005da6:	02c9      	lsls	r1, r1, #11
 8005da8:	430a      	orrs	r2, r1
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	4b9e      	ldr	r3, [pc, #632]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	4b9d      	ldr	r3, [pc, #628]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005db2:	2180      	movs	r1, #128	; 0x80
 8005db4:	0249      	lsls	r1, r1, #9
 8005db6:	430a      	orrs	r2, r1
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	e00b      	b.n	8005dd4 <HAL_RCC_OscConfig+0xdc>
 8005dbc:	4b9a      	ldr	r3, [pc, #616]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	4b99      	ldr	r3, [pc, #612]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005dc2:	499a      	ldr	r1, [pc, #616]	; (800602c <HAL_RCC_OscConfig+0x334>)
 8005dc4:	400a      	ands	r2, r1
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	4b97      	ldr	r3, [pc, #604]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	4b96      	ldr	r3, [pc, #600]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005dce:	4998      	ldr	r1, [pc, #608]	; (8006030 <HAL_RCC_OscConfig+0x338>)
 8005dd0:	400a      	ands	r2, r1
 8005dd2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d014      	beq.n	8005e06 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ddc:	f7fe faa6 	bl	800432c <HAL_GetTick>
 8005de0:	0003      	movs	r3, r0
 8005de2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005de4:	e008      	b.n	8005df8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005de6:	f7fe faa1 	bl	800432c <HAL_GetTick>
 8005dea:	0002      	movs	r2, r0
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b64      	cmp	r3, #100	; 0x64
 8005df2:	d901      	bls.n	8005df8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e28c      	b.n	8006312 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005df8:	4b8b      	ldr	r3, [pc, #556]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	2380      	movs	r3, #128	; 0x80
 8005dfe:	029b      	lsls	r3, r3, #10
 8005e00:	4013      	ands	r3, r2
 8005e02:	d0f0      	beq.n	8005de6 <HAL_RCC_OscConfig+0xee>
 8005e04:	e015      	b.n	8005e32 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e06:	f7fe fa91 	bl	800432c <HAL_GetTick>
 8005e0a:	0003      	movs	r3, r0
 8005e0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e10:	f7fe fa8c 	bl	800432c <HAL_GetTick>
 8005e14:	0002      	movs	r2, r0
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b64      	cmp	r3, #100	; 0x64
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e277      	b.n	8006312 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e22:	4b81      	ldr	r3, [pc, #516]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	2380      	movs	r3, #128	; 0x80
 8005e28:	029b      	lsls	r3, r3, #10
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	d1f0      	bne.n	8005e10 <HAL_RCC_OscConfig+0x118>
 8005e2e:	e000      	b.n	8005e32 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e30:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2202      	movs	r2, #2
 8005e38:	4013      	ands	r3, r2
 8005e3a:	d100      	bne.n	8005e3e <HAL_RCC_OscConfig+0x146>
 8005e3c:	e069      	b.n	8005f12 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005e3e:	4b7a      	ldr	r3, [pc, #488]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	220c      	movs	r2, #12
 8005e44:	4013      	ands	r3, r2
 8005e46:	d00b      	beq.n	8005e60 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005e48:	4b77      	ldr	r3, [pc, #476]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	220c      	movs	r2, #12
 8005e4e:	4013      	ands	r3, r2
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d11c      	bne.n	8005e8e <HAL_RCC_OscConfig+0x196>
 8005e54:	4b74      	ldr	r3, [pc, #464]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	2380      	movs	r3, #128	; 0x80
 8005e5a:	025b      	lsls	r3, r3, #9
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	d116      	bne.n	8005e8e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e60:	4b71      	ldr	r3, [pc, #452]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2202      	movs	r2, #2
 8005e66:	4013      	ands	r3, r2
 8005e68:	d005      	beq.n	8005e76 <HAL_RCC_OscConfig+0x17e>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d001      	beq.n	8005e76 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e24d      	b.n	8006312 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e76:	4b6c      	ldr	r3, [pc, #432]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	22f8      	movs	r2, #248	; 0xf8
 8005e7c:	4393      	bics	r3, r2
 8005e7e:	0019      	movs	r1, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	00da      	lsls	r2, r3, #3
 8005e86:	4b68      	ldr	r3, [pc, #416]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e8c:	e041      	b.n	8005f12 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d024      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e96:	4b64      	ldr	r3, [pc, #400]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	4b63      	ldr	r3, [pc, #396]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea2:	f7fe fa43 	bl	800432c <HAL_GetTick>
 8005ea6:	0003      	movs	r3, r0
 8005ea8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eaa:	e008      	b.n	8005ebe <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eac:	f7fe fa3e 	bl	800432c <HAL_GetTick>
 8005eb0:	0002      	movs	r2, r0
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e229      	b.n	8006312 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ebe:	4b5a      	ldr	r3, [pc, #360]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	d0f1      	beq.n	8005eac <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ec8:	4b57      	ldr	r3, [pc, #348]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	22f8      	movs	r2, #248	; 0xf8
 8005ece:	4393      	bics	r3, r2
 8005ed0:	0019      	movs	r1, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	00da      	lsls	r2, r3, #3
 8005ed8:	4b53      	ldr	r3, [pc, #332]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005eda:	430a      	orrs	r2, r1
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	e018      	b.n	8005f12 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ee0:	4b51      	ldr	r3, [pc, #324]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	4b50      	ldr	r3, [pc, #320]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	438a      	bics	r2, r1
 8005eea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eec:	f7fe fa1e 	bl	800432c <HAL_GetTick>
 8005ef0:	0003      	movs	r3, r0
 8005ef2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ef4:	e008      	b.n	8005f08 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ef6:	f7fe fa19 	bl	800432c <HAL_GetTick>
 8005efa:	0002      	movs	r2, r0
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e204      	b.n	8006312 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f08:	4b47      	ldr	r3, [pc, #284]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	4013      	ands	r3, r2
 8005f10:	d1f1      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2208      	movs	r2, #8
 8005f18:	4013      	ands	r3, r2
 8005f1a:	d036      	beq.n	8005f8a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	69db      	ldr	r3, [r3, #28]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d019      	beq.n	8005f58 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f24:	4b40      	ldr	r3, [pc, #256]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f28:	4b3f      	ldr	r3, [pc, #252]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f30:	f7fe f9fc 	bl	800432c <HAL_GetTick>
 8005f34:	0003      	movs	r3, r0
 8005f36:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f38:	e008      	b.n	8005f4c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f3a:	f7fe f9f7 	bl	800432c <HAL_GetTick>
 8005f3e:	0002      	movs	r2, r0
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e1e2      	b.n	8006312 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f4c:	4b36      	ldr	r3, [pc, #216]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	2202      	movs	r2, #2
 8005f52:	4013      	ands	r3, r2
 8005f54:	d0f1      	beq.n	8005f3a <HAL_RCC_OscConfig+0x242>
 8005f56:	e018      	b.n	8005f8a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f58:	4b33      	ldr	r3, [pc, #204]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f5c:	4b32      	ldr	r3, [pc, #200]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005f5e:	2101      	movs	r1, #1
 8005f60:	438a      	bics	r2, r1
 8005f62:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f64:	f7fe f9e2 	bl	800432c <HAL_GetTick>
 8005f68:	0003      	movs	r3, r0
 8005f6a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f6c:	e008      	b.n	8005f80 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f6e:	f7fe f9dd 	bl	800432c <HAL_GetTick>
 8005f72:	0002      	movs	r2, r0
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e1c8      	b.n	8006312 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f80:	4b29      	ldr	r3, [pc, #164]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	2202      	movs	r2, #2
 8005f86:	4013      	ands	r3, r2
 8005f88:	d1f1      	bne.n	8005f6e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2204      	movs	r2, #4
 8005f90:	4013      	ands	r3, r2
 8005f92:	d100      	bne.n	8005f96 <HAL_RCC_OscConfig+0x29e>
 8005f94:	e0b6      	b.n	8006104 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f96:	231f      	movs	r3, #31
 8005f98:	18fb      	adds	r3, r7, r3
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f9e:	4b22      	ldr	r3, [pc, #136]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005fa0:	69da      	ldr	r2, [r3, #28]
 8005fa2:	2380      	movs	r3, #128	; 0x80
 8005fa4:	055b      	lsls	r3, r3, #21
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	d111      	bne.n	8005fce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005faa:	4b1f      	ldr	r3, [pc, #124]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005fac:	69da      	ldr	r2, [r3, #28]
 8005fae:	4b1e      	ldr	r3, [pc, #120]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005fb0:	2180      	movs	r1, #128	; 0x80
 8005fb2:	0549      	lsls	r1, r1, #21
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	61da      	str	r2, [r3, #28]
 8005fb8:	4b1b      	ldr	r3, [pc, #108]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 8005fba:	69da      	ldr	r2, [r3, #28]
 8005fbc:	2380      	movs	r3, #128	; 0x80
 8005fbe:	055b      	lsls	r3, r3, #21
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005fc6:	231f      	movs	r3, #31
 8005fc8:	18fb      	adds	r3, r7, r3
 8005fca:	2201      	movs	r2, #1
 8005fcc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fce:	4b19      	ldr	r3, [pc, #100]	; (8006034 <HAL_RCC_OscConfig+0x33c>)
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	2380      	movs	r3, #128	; 0x80
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	d11a      	bne.n	8006010 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fda:	4b16      	ldr	r3, [pc, #88]	; (8006034 <HAL_RCC_OscConfig+0x33c>)
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4b15      	ldr	r3, [pc, #84]	; (8006034 <HAL_RCC_OscConfig+0x33c>)
 8005fe0:	2180      	movs	r1, #128	; 0x80
 8005fe2:	0049      	lsls	r1, r1, #1
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fe8:	f7fe f9a0 	bl	800432c <HAL_GetTick>
 8005fec:	0003      	movs	r3, r0
 8005fee:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff0:	e008      	b.n	8006004 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ff2:	f7fe f99b 	bl	800432c <HAL_GetTick>
 8005ff6:	0002      	movs	r2, r0
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b64      	cmp	r3, #100	; 0x64
 8005ffe:	d901      	bls.n	8006004 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e186      	b.n	8006312 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006004:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <HAL_RCC_OscConfig+0x33c>)
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	2380      	movs	r3, #128	; 0x80
 800600a:	005b      	lsls	r3, r3, #1
 800600c:	4013      	ands	r3, r2
 800600e:	d0f0      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d10f      	bne.n	8006038 <HAL_RCC_OscConfig+0x340>
 8006018:	4b03      	ldr	r3, [pc, #12]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 800601a:	6a1a      	ldr	r2, [r3, #32]
 800601c:	4b02      	ldr	r3, [pc, #8]	; (8006028 <HAL_RCC_OscConfig+0x330>)
 800601e:	2101      	movs	r1, #1
 8006020:	430a      	orrs	r2, r1
 8006022:	621a      	str	r2, [r3, #32]
 8006024:	e036      	b.n	8006094 <HAL_RCC_OscConfig+0x39c>
 8006026:	46c0      	nop			; (mov r8, r8)
 8006028:	40021000 	.word	0x40021000
 800602c:	fffeffff 	.word	0xfffeffff
 8006030:	fffbffff 	.word	0xfffbffff
 8006034:	40007000 	.word	0x40007000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10c      	bne.n	800605a <HAL_RCC_OscConfig+0x362>
 8006040:	4bb6      	ldr	r3, [pc, #728]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006042:	6a1a      	ldr	r2, [r3, #32]
 8006044:	4bb5      	ldr	r3, [pc, #724]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006046:	2101      	movs	r1, #1
 8006048:	438a      	bics	r2, r1
 800604a:	621a      	str	r2, [r3, #32]
 800604c:	4bb3      	ldr	r3, [pc, #716]	; (800631c <HAL_RCC_OscConfig+0x624>)
 800604e:	6a1a      	ldr	r2, [r3, #32]
 8006050:	4bb2      	ldr	r3, [pc, #712]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006052:	2104      	movs	r1, #4
 8006054:	438a      	bics	r2, r1
 8006056:	621a      	str	r2, [r3, #32]
 8006058:	e01c      	b.n	8006094 <HAL_RCC_OscConfig+0x39c>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	2b05      	cmp	r3, #5
 8006060:	d10c      	bne.n	800607c <HAL_RCC_OscConfig+0x384>
 8006062:	4bae      	ldr	r3, [pc, #696]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006064:	6a1a      	ldr	r2, [r3, #32]
 8006066:	4bad      	ldr	r3, [pc, #692]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006068:	2104      	movs	r1, #4
 800606a:	430a      	orrs	r2, r1
 800606c:	621a      	str	r2, [r3, #32]
 800606e:	4bab      	ldr	r3, [pc, #684]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006070:	6a1a      	ldr	r2, [r3, #32]
 8006072:	4baa      	ldr	r3, [pc, #680]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006074:	2101      	movs	r1, #1
 8006076:	430a      	orrs	r2, r1
 8006078:	621a      	str	r2, [r3, #32]
 800607a:	e00b      	b.n	8006094 <HAL_RCC_OscConfig+0x39c>
 800607c:	4ba7      	ldr	r3, [pc, #668]	; (800631c <HAL_RCC_OscConfig+0x624>)
 800607e:	6a1a      	ldr	r2, [r3, #32]
 8006080:	4ba6      	ldr	r3, [pc, #664]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006082:	2101      	movs	r1, #1
 8006084:	438a      	bics	r2, r1
 8006086:	621a      	str	r2, [r3, #32]
 8006088:	4ba4      	ldr	r3, [pc, #656]	; (800631c <HAL_RCC_OscConfig+0x624>)
 800608a:	6a1a      	ldr	r2, [r3, #32]
 800608c:	4ba3      	ldr	r3, [pc, #652]	; (800631c <HAL_RCC_OscConfig+0x624>)
 800608e:	2104      	movs	r1, #4
 8006090:	438a      	bics	r2, r1
 8006092:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d014      	beq.n	80060c6 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800609c:	f7fe f946 	bl	800432c <HAL_GetTick>
 80060a0:	0003      	movs	r3, r0
 80060a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060a4:	e009      	b.n	80060ba <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060a6:	f7fe f941 	bl	800432c <HAL_GetTick>
 80060aa:	0002      	movs	r2, r0
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	4a9b      	ldr	r2, [pc, #620]	; (8006320 <HAL_RCC_OscConfig+0x628>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e12b      	b.n	8006312 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ba:	4b98      	ldr	r3, [pc, #608]	; (800631c <HAL_RCC_OscConfig+0x624>)
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	2202      	movs	r2, #2
 80060c0:	4013      	ands	r3, r2
 80060c2:	d0f0      	beq.n	80060a6 <HAL_RCC_OscConfig+0x3ae>
 80060c4:	e013      	b.n	80060ee <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060c6:	f7fe f931 	bl	800432c <HAL_GetTick>
 80060ca:	0003      	movs	r3, r0
 80060cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ce:	e009      	b.n	80060e4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060d0:	f7fe f92c 	bl	800432c <HAL_GetTick>
 80060d4:	0002      	movs	r2, r0
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	4a91      	ldr	r2, [pc, #580]	; (8006320 <HAL_RCC_OscConfig+0x628>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d901      	bls.n	80060e4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e116      	b.n	8006312 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060e4:	4b8d      	ldr	r3, [pc, #564]	; (800631c <HAL_RCC_OscConfig+0x624>)
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	2202      	movs	r2, #2
 80060ea:	4013      	ands	r3, r2
 80060ec:	d1f0      	bne.n	80060d0 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80060ee:	231f      	movs	r3, #31
 80060f0:	18fb      	adds	r3, r7, r3
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d105      	bne.n	8006104 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060f8:	4b88      	ldr	r3, [pc, #544]	; (800631c <HAL_RCC_OscConfig+0x624>)
 80060fa:	69da      	ldr	r2, [r3, #28]
 80060fc:	4b87      	ldr	r3, [pc, #540]	; (800631c <HAL_RCC_OscConfig+0x624>)
 80060fe:	4989      	ldr	r1, [pc, #548]	; (8006324 <HAL_RCC_OscConfig+0x62c>)
 8006100:	400a      	ands	r2, r1
 8006102:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2210      	movs	r2, #16
 800610a:	4013      	ands	r3, r2
 800610c:	d063      	beq.n	80061d6 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d12a      	bne.n	800616c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006116:	4b81      	ldr	r3, [pc, #516]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800611a:	4b80      	ldr	r3, [pc, #512]	; (800631c <HAL_RCC_OscConfig+0x624>)
 800611c:	2104      	movs	r1, #4
 800611e:	430a      	orrs	r2, r1
 8006120:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006122:	4b7e      	ldr	r3, [pc, #504]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006126:	4b7d      	ldr	r3, [pc, #500]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006128:	2101      	movs	r1, #1
 800612a:	430a      	orrs	r2, r1
 800612c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800612e:	f7fe f8fd 	bl	800432c <HAL_GetTick>
 8006132:	0003      	movs	r3, r0
 8006134:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006136:	e008      	b.n	800614a <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006138:	f7fe f8f8 	bl	800432c <HAL_GetTick>
 800613c:	0002      	movs	r2, r0
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e0e3      	b.n	8006312 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800614a:	4b74      	ldr	r3, [pc, #464]	; (800631c <HAL_RCC_OscConfig+0x624>)
 800614c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614e:	2202      	movs	r2, #2
 8006150:	4013      	ands	r3, r2
 8006152:	d0f1      	beq.n	8006138 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006154:	4b71      	ldr	r3, [pc, #452]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006158:	22f8      	movs	r2, #248	; 0xf8
 800615a:	4393      	bics	r3, r2
 800615c:	0019      	movs	r1, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	00da      	lsls	r2, r3, #3
 8006164:	4b6d      	ldr	r3, [pc, #436]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006166:	430a      	orrs	r2, r1
 8006168:	635a      	str	r2, [r3, #52]	; 0x34
 800616a:	e034      	b.n	80061d6 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	3305      	adds	r3, #5
 8006172:	d111      	bne.n	8006198 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006174:	4b69      	ldr	r3, [pc, #420]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006178:	4b68      	ldr	r3, [pc, #416]	; (800631c <HAL_RCC_OscConfig+0x624>)
 800617a:	2104      	movs	r1, #4
 800617c:	438a      	bics	r2, r1
 800617e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006180:	4b66      	ldr	r3, [pc, #408]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006184:	22f8      	movs	r2, #248	; 0xf8
 8006186:	4393      	bics	r3, r2
 8006188:	0019      	movs	r1, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	00da      	lsls	r2, r3, #3
 8006190:	4b62      	ldr	r3, [pc, #392]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006192:	430a      	orrs	r2, r1
 8006194:	635a      	str	r2, [r3, #52]	; 0x34
 8006196:	e01e      	b.n	80061d6 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006198:	4b60      	ldr	r3, [pc, #384]	; (800631c <HAL_RCC_OscConfig+0x624>)
 800619a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800619c:	4b5f      	ldr	r3, [pc, #380]	; (800631c <HAL_RCC_OscConfig+0x624>)
 800619e:	2104      	movs	r1, #4
 80061a0:	430a      	orrs	r2, r1
 80061a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80061a4:	4b5d      	ldr	r3, [pc, #372]	; (800631c <HAL_RCC_OscConfig+0x624>)
 80061a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061a8:	4b5c      	ldr	r3, [pc, #368]	; (800631c <HAL_RCC_OscConfig+0x624>)
 80061aa:	2101      	movs	r1, #1
 80061ac:	438a      	bics	r2, r1
 80061ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061b0:	f7fe f8bc 	bl	800432c <HAL_GetTick>
 80061b4:	0003      	movs	r3, r0
 80061b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80061b8:	e008      	b.n	80061cc <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80061ba:	f7fe f8b7 	bl	800432c <HAL_GetTick>
 80061be:	0002      	movs	r2, r0
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d901      	bls.n	80061cc <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e0a2      	b.n	8006312 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80061cc:	4b53      	ldr	r3, [pc, #332]	; (800631c <HAL_RCC_OscConfig+0x624>)
 80061ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d0:	2202      	movs	r2, #2
 80061d2:	4013      	ands	r3, r2
 80061d4:	d1f1      	bne.n	80061ba <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d100      	bne.n	80061e0 <HAL_RCC_OscConfig+0x4e8>
 80061de:	e097      	b.n	8006310 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061e0:	4b4e      	ldr	r3, [pc, #312]	; (800631c <HAL_RCC_OscConfig+0x624>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	220c      	movs	r2, #12
 80061e6:	4013      	ands	r3, r2
 80061e8:	2b08      	cmp	r3, #8
 80061ea:	d100      	bne.n	80061ee <HAL_RCC_OscConfig+0x4f6>
 80061ec:	e06b      	b.n	80062c6 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d14c      	bne.n	8006290 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061f6:	4b49      	ldr	r3, [pc, #292]	; (800631c <HAL_RCC_OscConfig+0x624>)
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	4b48      	ldr	r3, [pc, #288]	; (800631c <HAL_RCC_OscConfig+0x624>)
 80061fc:	494a      	ldr	r1, [pc, #296]	; (8006328 <HAL_RCC_OscConfig+0x630>)
 80061fe:	400a      	ands	r2, r1
 8006200:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006202:	f7fe f893 	bl	800432c <HAL_GetTick>
 8006206:	0003      	movs	r3, r0
 8006208:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800620a:	e008      	b.n	800621e <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800620c:	f7fe f88e 	bl	800432c <HAL_GetTick>
 8006210:	0002      	movs	r2, r0
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d901      	bls.n	800621e <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e079      	b.n	8006312 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800621e:	4b3f      	ldr	r3, [pc, #252]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	2380      	movs	r3, #128	; 0x80
 8006224:	049b      	lsls	r3, r3, #18
 8006226:	4013      	ands	r3, r2
 8006228:	d1f0      	bne.n	800620c <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800622a:	4b3c      	ldr	r3, [pc, #240]	; (800631c <HAL_RCC_OscConfig+0x624>)
 800622c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622e:	220f      	movs	r2, #15
 8006230:	4393      	bics	r3, r2
 8006232:	0019      	movs	r1, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006238:	4b38      	ldr	r3, [pc, #224]	; (800631c <HAL_RCC_OscConfig+0x624>)
 800623a:	430a      	orrs	r2, r1
 800623c:	62da      	str	r2, [r3, #44]	; 0x2c
 800623e:	4b37      	ldr	r3, [pc, #220]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	4a3a      	ldr	r2, [pc, #232]	; (800632c <HAL_RCC_OscConfig+0x634>)
 8006244:	4013      	ands	r3, r2
 8006246:	0019      	movs	r1, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	431a      	orrs	r2, r3
 8006252:	4b32      	ldr	r3, [pc, #200]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006254:	430a      	orrs	r2, r1
 8006256:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006258:	4b30      	ldr	r3, [pc, #192]	; (800631c <HAL_RCC_OscConfig+0x624>)
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	4b2f      	ldr	r3, [pc, #188]	; (800631c <HAL_RCC_OscConfig+0x624>)
 800625e:	2180      	movs	r1, #128	; 0x80
 8006260:	0449      	lsls	r1, r1, #17
 8006262:	430a      	orrs	r2, r1
 8006264:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006266:	f7fe f861 	bl	800432c <HAL_GetTick>
 800626a:	0003      	movs	r3, r0
 800626c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006270:	f7fe f85c 	bl	800432c <HAL_GetTick>
 8006274:	0002      	movs	r2, r0
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e047      	b.n	8006312 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006282:	4b26      	ldr	r3, [pc, #152]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	2380      	movs	r3, #128	; 0x80
 8006288:	049b      	lsls	r3, r3, #18
 800628a:	4013      	ands	r3, r2
 800628c:	d0f0      	beq.n	8006270 <HAL_RCC_OscConfig+0x578>
 800628e:	e03f      	b.n	8006310 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006290:	4b22      	ldr	r3, [pc, #136]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	4b21      	ldr	r3, [pc, #132]	; (800631c <HAL_RCC_OscConfig+0x624>)
 8006296:	4924      	ldr	r1, [pc, #144]	; (8006328 <HAL_RCC_OscConfig+0x630>)
 8006298:	400a      	ands	r2, r1
 800629a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800629c:	f7fe f846 	bl	800432c <HAL_GetTick>
 80062a0:	0003      	movs	r3, r0
 80062a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062a4:	e008      	b.n	80062b8 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062a6:	f7fe f841 	bl	800432c <HAL_GetTick>
 80062aa:	0002      	movs	r2, r0
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d901      	bls.n	80062b8 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e02c      	b.n	8006312 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062b8:	4b18      	ldr	r3, [pc, #96]	; (800631c <HAL_RCC_OscConfig+0x624>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	2380      	movs	r3, #128	; 0x80
 80062be:	049b      	lsls	r3, r3, #18
 80062c0:	4013      	ands	r3, r2
 80062c2:	d1f0      	bne.n	80062a6 <HAL_RCC_OscConfig+0x5ae>
 80062c4:	e024      	b.n	8006310 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d101      	bne.n	80062d2 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e01f      	b.n	8006312 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80062d2:	4b12      	ldr	r3, [pc, #72]	; (800631c <HAL_RCC_OscConfig+0x624>)
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80062d8:	4b10      	ldr	r3, [pc, #64]	; (800631c <HAL_RCC_OscConfig+0x624>)
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	2380      	movs	r3, #128	; 0x80
 80062e2:	025b      	lsls	r3, r3, #9
 80062e4:	401a      	ands	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d10e      	bne.n	800630c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	220f      	movs	r2, #15
 80062f2:	401a      	ands	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d107      	bne.n	800630c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	23f0      	movs	r3, #240	; 0xf0
 8006300:	039b      	lsls	r3, r3, #14
 8006302:	401a      	ands	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006308:	429a      	cmp	r2, r3
 800630a:	d001      	beq.n	8006310 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e000      	b.n	8006312 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	0018      	movs	r0, r3
 8006314:	46bd      	mov	sp, r7
 8006316:	b008      	add	sp, #32
 8006318:	bd80      	pop	{r7, pc}
 800631a:	46c0      	nop			; (mov r8, r8)
 800631c:	40021000 	.word	0x40021000
 8006320:	00001388 	.word	0x00001388
 8006324:	efffffff 	.word	0xefffffff
 8006328:	feffffff 	.word	0xfeffffff
 800632c:	ffc2ffff 	.word	0xffc2ffff

08006330 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e0b3      	b.n	80064ac <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006344:	4b5b      	ldr	r3, [pc, #364]	; (80064b4 <HAL_RCC_ClockConfig+0x184>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2201      	movs	r2, #1
 800634a:	4013      	ands	r3, r2
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	429a      	cmp	r2, r3
 8006350:	d911      	bls.n	8006376 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006352:	4b58      	ldr	r3, [pc, #352]	; (80064b4 <HAL_RCC_ClockConfig+0x184>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2201      	movs	r2, #1
 8006358:	4393      	bics	r3, r2
 800635a:	0019      	movs	r1, r3
 800635c:	4b55      	ldr	r3, [pc, #340]	; (80064b4 <HAL_RCC_ClockConfig+0x184>)
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006364:	4b53      	ldr	r3, [pc, #332]	; (80064b4 <HAL_RCC_ClockConfig+0x184>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2201      	movs	r2, #1
 800636a:	4013      	ands	r3, r2
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	429a      	cmp	r2, r3
 8006370:	d001      	beq.n	8006376 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e09a      	b.n	80064ac <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2202      	movs	r2, #2
 800637c:	4013      	ands	r3, r2
 800637e:	d015      	beq.n	80063ac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2204      	movs	r2, #4
 8006386:	4013      	ands	r3, r2
 8006388:	d006      	beq.n	8006398 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800638a:	4b4b      	ldr	r3, [pc, #300]	; (80064b8 <HAL_RCC_ClockConfig+0x188>)
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	4b4a      	ldr	r3, [pc, #296]	; (80064b8 <HAL_RCC_ClockConfig+0x188>)
 8006390:	21e0      	movs	r1, #224	; 0xe0
 8006392:	00c9      	lsls	r1, r1, #3
 8006394:	430a      	orrs	r2, r1
 8006396:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006398:	4b47      	ldr	r3, [pc, #284]	; (80064b8 <HAL_RCC_ClockConfig+0x188>)
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	22f0      	movs	r2, #240	; 0xf0
 800639e:	4393      	bics	r3, r2
 80063a0:	0019      	movs	r1, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	4b44      	ldr	r3, [pc, #272]	; (80064b8 <HAL_RCC_ClockConfig+0x188>)
 80063a8:	430a      	orrs	r2, r1
 80063aa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2201      	movs	r2, #1
 80063b2:	4013      	ands	r3, r2
 80063b4:	d040      	beq.n	8006438 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d107      	bne.n	80063ce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063be:	4b3e      	ldr	r3, [pc, #248]	; (80064b8 <HAL_RCC_ClockConfig+0x188>)
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	2380      	movs	r3, #128	; 0x80
 80063c4:	029b      	lsls	r3, r3, #10
 80063c6:	4013      	ands	r3, r2
 80063c8:	d114      	bne.n	80063f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e06e      	b.n	80064ac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d107      	bne.n	80063e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063d6:	4b38      	ldr	r3, [pc, #224]	; (80064b8 <HAL_RCC_ClockConfig+0x188>)
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	2380      	movs	r3, #128	; 0x80
 80063dc:	049b      	lsls	r3, r3, #18
 80063de:	4013      	ands	r3, r2
 80063e0:	d108      	bne.n	80063f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e062      	b.n	80064ac <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e6:	4b34      	ldr	r3, [pc, #208]	; (80064b8 <HAL_RCC_ClockConfig+0x188>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2202      	movs	r2, #2
 80063ec:	4013      	ands	r3, r2
 80063ee:	d101      	bne.n	80063f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e05b      	b.n	80064ac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063f4:	4b30      	ldr	r3, [pc, #192]	; (80064b8 <HAL_RCC_ClockConfig+0x188>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	2203      	movs	r2, #3
 80063fa:	4393      	bics	r3, r2
 80063fc:	0019      	movs	r1, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	4b2d      	ldr	r3, [pc, #180]	; (80064b8 <HAL_RCC_ClockConfig+0x188>)
 8006404:	430a      	orrs	r2, r1
 8006406:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006408:	f7fd ff90 	bl	800432c <HAL_GetTick>
 800640c:	0003      	movs	r3, r0
 800640e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006410:	e009      	b.n	8006426 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006412:	f7fd ff8b 	bl	800432c <HAL_GetTick>
 8006416:	0002      	movs	r2, r0
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	4a27      	ldr	r2, [pc, #156]	; (80064bc <HAL_RCC_ClockConfig+0x18c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e042      	b.n	80064ac <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006426:	4b24      	ldr	r3, [pc, #144]	; (80064b8 <HAL_RCC_ClockConfig+0x188>)
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	220c      	movs	r2, #12
 800642c:	401a      	ands	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	429a      	cmp	r2, r3
 8006436:	d1ec      	bne.n	8006412 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006438:	4b1e      	ldr	r3, [pc, #120]	; (80064b4 <HAL_RCC_ClockConfig+0x184>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2201      	movs	r2, #1
 800643e:	4013      	ands	r3, r2
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	429a      	cmp	r2, r3
 8006444:	d211      	bcs.n	800646a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006446:	4b1b      	ldr	r3, [pc, #108]	; (80064b4 <HAL_RCC_ClockConfig+0x184>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2201      	movs	r2, #1
 800644c:	4393      	bics	r3, r2
 800644e:	0019      	movs	r1, r3
 8006450:	4b18      	ldr	r3, [pc, #96]	; (80064b4 <HAL_RCC_ClockConfig+0x184>)
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006458:	4b16      	ldr	r3, [pc, #88]	; (80064b4 <HAL_RCC_ClockConfig+0x184>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2201      	movs	r2, #1
 800645e:	4013      	ands	r3, r2
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	429a      	cmp	r2, r3
 8006464:	d001      	beq.n	800646a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e020      	b.n	80064ac <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2204      	movs	r2, #4
 8006470:	4013      	ands	r3, r2
 8006472:	d009      	beq.n	8006488 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006474:	4b10      	ldr	r3, [pc, #64]	; (80064b8 <HAL_RCC_ClockConfig+0x188>)
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	4a11      	ldr	r2, [pc, #68]	; (80064c0 <HAL_RCC_ClockConfig+0x190>)
 800647a:	4013      	ands	r3, r2
 800647c:	0019      	movs	r1, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	4b0d      	ldr	r3, [pc, #52]	; (80064b8 <HAL_RCC_ClockConfig+0x188>)
 8006484:	430a      	orrs	r2, r1
 8006486:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006488:	f000 f820 	bl	80064cc <HAL_RCC_GetSysClockFreq>
 800648c:	0001      	movs	r1, r0
 800648e:	4b0a      	ldr	r3, [pc, #40]	; (80064b8 <HAL_RCC_ClockConfig+0x188>)
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	091b      	lsrs	r3, r3, #4
 8006494:	220f      	movs	r2, #15
 8006496:	4013      	ands	r3, r2
 8006498:	4a0a      	ldr	r2, [pc, #40]	; (80064c4 <HAL_RCC_ClockConfig+0x194>)
 800649a:	5cd3      	ldrb	r3, [r2, r3]
 800649c:	000a      	movs	r2, r1
 800649e:	40da      	lsrs	r2, r3
 80064a0:	4b09      	ldr	r3, [pc, #36]	; (80064c8 <HAL_RCC_ClockConfig+0x198>)
 80064a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80064a4:	2000      	movs	r0, #0
 80064a6:	f7fd fe2b 	bl	8004100 <HAL_InitTick>
  
  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	0018      	movs	r0, r3
 80064ae:	46bd      	mov	sp, r7
 80064b0:	b004      	add	sp, #16
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	40022000 	.word	0x40022000
 80064b8:	40021000 	.word	0x40021000
 80064bc:	00001388 	.word	0x00001388
 80064c0:	fffff8ff 	.word	0xfffff8ff
 80064c4:	0800b8dc 	.word	0x0800b8dc
 80064c8:	20000004 	.word	0x20000004

080064cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064cc:	b590      	push	{r4, r7, lr}
 80064ce:	b08f      	sub	sp, #60	; 0x3c
 80064d0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80064d2:	2314      	movs	r3, #20
 80064d4:	18fb      	adds	r3, r7, r3
 80064d6:	4a2b      	ldr	r2, [pc, #172]	; (8006584 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80064da:	c313      	stmia	r3!, {r0, r1, r4}
 80064dc:	6812      	ldr	r2, [r2, #0]
 80064de:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80064e0:	1d3b      	adds	r3, r7, #4
 80064e2:	4a29      	ldr	r2, [pc, #164]	; (8006588 <HAL_RCC_GetSysClockFreq+0xbc>)
 80064e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80064e6:	c313      	stmia	r3!, {r0, r1, r4}
 80064e8:	6812      	ldr	r2, [r2, #0]
 80064ea:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064f0:	2300      	movs	r3, #0
 80064f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80064f4:	2300      	movs	r3, #0
 80064f6:	637b      	str	r3, [r7, #52]	; 0x34
 80064f8:	2300      	movs	r3, #0
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006500:	4b22      	ldr	r3, [pc, #136]	; (800658c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006508:	220c      	movs	r2, #12
 800650a:	4013      	ands	r3, r2
 800650c:	2b04      	cmp	r3, #4
 800650e:	d002      	beq.n	8006516 <HAL_RCC_GetSysClockFreq+0x4a>
 8006510:	2b08      	cmp	r3, #8
 8006512:	d003      	beq.n	800651c <HAL_RCC_GetSysClockFreq+0x50>
 8006514:	e02d      	b.n	8006572 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006516:	4b1e      	ldr	r3, [pc, #120]	; (8006590 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006518:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800651a:	e02d      	b.n	8006578 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	0c9b      	lsrs	r3, r3, #18
 8006520:	220f      	movs	r2, #15
 8006522:	4013      	ands	r3, r2
 8006524:	2214      	movs	r2, #20
 8006526:	18ba      	adds	r2, r7, r2
 8006528:	5cd3      	ldrb	r3, [r2, r3]
 800652a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800652c:	4b17      	ldr	r3, [pc, #92]	; (800658c <HAL_RCC_GetSysClockFreq+0xc0>)
 800652e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006530:	220f      	movs	r2, #15
 8006532:	4013      	ands	r3, r2
 8006534:	1d3a      	adds	r2, r7, #4
 8006536:	5cd3      	ldrb	r3, [r2, r3]
 8006538:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800653a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800653c:	2380      	movs	r3, #128	; 0x80
 800653e:	025b      	lsls	r3, r3, #9
 8006540:	4013      	ands	r3, r2
 8006542:	d009      	beq.n	8006558 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006544:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006546:	4812      	ldr	r0, [pc, #72]	; (8006590 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006548:	f7f9 fdf0 	bl	800012c <__udivsi3>
 800654c:	0003      	movs	r3, r0
 800654e:	001a      	movs	r2, r3
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	4353      	muls	r3, r2
 8006554:	637b      	str	r3, [r7, #52]	; 0x34
 8006556:	e009      	b.n	800656c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006558:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800655a:	000a      	movs	r2, r1
 800655c:	0152      	lsls	r2, r2, #5
 800655e:	1a52      	subs	r2, r2, r1
 8006560:	0193      	lsls	r3, r2, #6
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	185b      	adds	r3, r3, r1
 8006568:	021b      	lsls	r3, r3, #8
 800656a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800656c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006570:	e002      	b.n	8006578 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006572:	4b07      	ldr	r3, [pc, #28]	; (8006590 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006574:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006576:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800657a:	0018      	movs	r0, r3
 800657c:	46bd      	mov	sp, r7
 800657e:	b00f      	add	sp, #60	; 0x3c
 8006580:	bd90      	pop	{r4, r7, pc}
 8006582:	46c0      	nop			; (mov r8, r8)
 8006584:	0800b834 	.word	0x0800b834
 8006588:	0800b844 	.word	0x0800b844
 800658c:	40021000 	.word	0x40021000
 8006590:	007a1200 	.word	0x007a1200

08006594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006598:	4b02      	ldr	r3, [pc, #8]	; (80065a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800659a:	681b      	ldr	r3, [r3, #0]
}
 800659c:	0018      	movs	r0, r3
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	46c0      	nop			; (mov r8, r8)
 80065a4:	20000004 	.word	0x20000004

080065a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80065ac:	f7ff fff2 	bl	8006594 <HAL_RCC_GetHCLKFreq>
 80065b0:	0001      	movs	r1, r0
 80065b2:	4b06      	ldr	r3, [pc, #24]	; (80065cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	0a1b      	lsrs	r3, r3, #8
 80065b8:	2207      	movs	r2, #7
 80065ba:	4013      	ands	r3, r2
 80065bc:	4a04      	ldr	r2, [pc, #16]	; (80065d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80065be:	5cd3      	ldrb	r3, [r2, r3]
 80065c0:	40d9      	lsrs	r1, r3
 80065c2:	000b      	movs	r3, r1
}    
 80065c4:	0018      	movs	r0, r3
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	46c0      	nop			; (mov r8, r8)
 80065cc:	40021000 	.word	0x40021000
 80065d0:	0800b8ec 	.word	0x0800b8ec

080065d4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2207      	movs	r2, #7
 80065e2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065e4:	4b0e      	ldr	r3, [pc, #56]	; (8006620 <HAL_RCC_GetClockConfig+0x4c>)
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	2203      	movs	r2, #3
 80065ea:	401a      	ands	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80065f0:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <HAL_RCC_GetClockConfig+0x4c>)
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	22f0      	movs	r2, #240	; 0xf0
 80065f6:	401a      	ands	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80065fc:	4b08      	ldr	r3, [pc, #32]	; (8006620 <HAL_RCC_GetClockConfig+0x4c>)
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	23e0      	movs	r3, #224	; 0xe0
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	401a      	ands	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800660a:	4b06      	ldr	r3, [pc, #24]	; (8006624 <HAL_RCC_GetClockConfig+0x50>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2201      	movs	r2, #1
 8006610:	401a      	ands	r2, r3
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	601a      	str	r2, [r3, #0]
}
 8006616:	46c0      	nop			; (mov r8, r8)
 8006618:	46bd      	mov	sp, r7
 800661a:	b002      	add	sp, #8
 800661c:	bd80      	pop	{r7, pc}
 800661e:	46c0      	nop			; (mov r8, r8)
 8006620:	40021000 	.word	0x40021000
 8006624:	40022000 	.word	0x40022000

08006628 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	2380      	movs	r3, #128	; 0x80
 800663e:	025b      	lsls	r3, r3, #9
 8006640:	4013      	ands	r3, r2
 8006642:	d100      	bne.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006644:	e08f      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006646:	2317      	movs	r3, #23
 8006648:	18fb      	adds	r3, r7, r3
 800664a:	2200      	movs	r2, #0
 800664c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800664e:	4b57      	ldr	r3, [pc, #348]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006650:	69da      	ldr	r2, [r3, #28]
 8006652:	2380      	movs	r3, #128	; 0x80
 8006654:	055b      	lsls	r3, r3, #21
 8006656:	4013      	ands	r3, r2
 8006658:	d111      	bne.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800665a:	4b54      	ldr	r3, [pc, #336]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800665c:	69da      	ldr	r2, [r3, #28]
 800665e:	4b53      	ldr	r3, [pc, #332]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006660:	2180      	movs	r1, #128	; 0x80
 8006662:	0549      	lsls	r1, r1, #21
 8006664:	430a      	orrs	r2, r1
 8006666:	61da      	str	r2, [r3, #28]
 8006668:	4b50      	ldr	r3, [pc, #320]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800666a:	69da      	ldr	r2, [r3, #28]
 800666c:	2380      	movs	r3, #128	; 0x80
 800666e:	055b      	lsls	r3, r3, #21
 8006670:	4013      	ands	r3, r2
 8006672:	60bb      	str	r3, [r7, #8]
 8006674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006676:	2317      	movs	r3, #23
 8006678:	18fb      	adds	r3, r7, r3
 800667a:	2201      	movs	r2, #1
 800667c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800667e:	4b4c      	ldr	r3, [pc, #304]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	2380      	movs	r3, #128	; 0x80
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	4013      	ands	r3, r2
 8006688:	d11a      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800668a:	4b49      	ldr	r3, [pc, #292]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	4b48      	ldr	r3, [pc, #288]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006690:	2180      	movs	r1, #128	; 0x80
 8006692:	0049      	lsls	r1, r1, #1
 8006694:	430a      	orrs	r2, r1
 8006696:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006698:	f7fd fe48 	bl	800432c <HAL_GetTick>
 800669c:	0003      	movs	r3, r0
 800669e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a0:	e008      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066a2:	f7fd fe43 	bl	800432c <HAL_GetTick>
 80066a6:	0002      	movs	r2, r0
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b64      	cmp	r3, #100	; 0x64
 80066ae:	d901      	bls.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e077      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066b4:	4b3e      	ldr	r3, [pc, #248]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	2380      	movs	r3, #128	; 0x80
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	4013      	ands	r3, r2
 80066be:	d0f0      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80066c0:	4b3a      	ldr	r3, [pc, #232]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80066c2:	6a1a      	ldr	r2, [r3, #32]
 80066c4:	23c0      	movs	r3, #192	; 0xc0
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4013      	ands	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d034      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x114>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	23c0      	movs	r3, #192	; 0xc0
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4013      	ands	r3, r2
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d02c      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066e2:	4b32      	ldr	r3, [pc, #200]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	4a33      	ldr	r2, [pc, #204]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80066e8:	4013      	ands	r3, r2
 80066ea:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066ec:	4b2f      	ldr	r3, [pc, #188]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80066ee:	6a1a      	ldr	r2, [r3, #32]
 80066f0:	4b2e      	ldr	r3, [pc, #184]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80066f2:	2180      	movs	r1, #128	; 0x80
 80066f4:	0249      	lsls	r1, r1, #9
 80066f6:	430a      	orrs	r2, r1
 80066f8:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066fa:	4b2c      	ldr	r3, [pc, #176]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80066fc:	6a1a      	ldr	r2, [r3, #32]
 80066fe:	4b2b      	ldr	r3, [pc, #172]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006700:	492d      	ldr	r1, [pc, #180]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006702:	400a      	ands	r2, r1
 8006704:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006706:	4b29      	ldr	r3, [pc, #164]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2201      	movs	r2, #1
 8006710:	4013      	ands	r3, r2
 8006712:	d013      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006714:	f7fd fe0a 	bl	800432c <HAL_GetTick>
 8006718:	0003      	movs	r3, r0
 800671a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800671c:	e009      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800671e:	f7fd fe05 	bl	800432c <HAL_GetTick>
 8006722:	0002      	movs	r2, r0
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	4a24      	ldr	r2, [pc, #144]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d901      	bls.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e038      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006732:	4b1e      	ldr	r3, [pc, #120]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	2202      	movs	r2, #2
 8006738:	4013      	ands	r3, r2
 800673a:	d0f0      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800673c:	4b1b      	ldr	r3, [pc, #108]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	4a1c      	ldr	r2, [pc, #112]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006742:	4013      	ands	r3, r2
 8006744:	0019      	movs	r1, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	4b18      	ldr	r3, [pc, #96]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800674c:	430a      	orrs	r2, r1
 800674e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006750:	2317      	movs	r3, #23
 8006752:	18fb      	adds	r3, r7, r3
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d105      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800675a:	4b14      	ldr	r3, [pc, #80]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800675c:	69da      	ldr	r2, [r3, #28]
 800675e:	4b13      	ldr	r3, [pc, #76]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006760:	4917      	ldr	r1, [pc, #92]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8006762:	400a      	ands	r2, r1
 8006764:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2201      	movs	r2, #1
 800676c:	4013      	ands	r3, r2
 800676e:	d009      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006770:	4b0e      	ldr	r3, [pc, #56]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006774:	2203      	movs	r2, #3
 8006776:	4393      	bics	r3, r2
 8006778:	0019      	movs	r1, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	689a      	ldr	r2, [r3, #8]
 800677e:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006780:	430a      	orrs	r2, r1
 8006782:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2220      	movs	r2, #32
 800678a:	4013      	ands	r3, r2
 800678c:	d009      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800678e:	4b07      	ldr	r3, [pc, #28]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006792:	2210      	movs	r2, #16
 8006794:	4393      	bics	r3, r2
 8006796:	0019      	movs	r1, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	4b03      	ldr	r3, [pc, #12]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800679e:	430a      	orrs	r2, r1
 80067a0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	0018      	movs	r0, r3
 80067a6:	46bd      	mov	sp, r7
 80067a8:	b006      	add	sp, #24
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	40021000 	.word	0x40021000
 80067b0:	40007000 	.word	0x40007000
 80067b4:	fffffcff 	.word	0xfffffcff
 80067b8:	fffeffff 	.word	0xfffeffff
 80067bc:	00001388 	.word	0x00001388
 80067c0:	efffffff 	.word	0xefffffff

080067c4 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e081      	b.n	80068da <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	7f5b      	ldrb	r3, [r3, #29]
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d106      	bne.n	80067ee <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	0018      	movs	r0, r3
 80067ea:	f7fd fbd9 	bl	8003fa0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2202      	movs	r2, #2
 80067f2:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	22ca      	movs	r2, #202	; 0xca
 80067fa:	625a      	str	r2, [r3, #36]	; 0x24
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2253      	movs	r2, #83	; 0x53
 8006802:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	0018      	movs	r0, r3
 8006808:	f000 fb25 	bl	8006e56 <RTC_EnterInitMode>
 800680c:	1e03      	subs	r3, r0, #0
 800680e:	d008      	beq.n	8006822 <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	22ff      	movs	r2, #255	; 0xff
 8006816:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2204      	movs	r2, #4
 800681c:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e05b      	b.n	80068da <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	492d      	ldr	r1, [pc, #180]	; (80068e4 <HAL_RTC_Init+0x120>)
 800682e:	400a      	ands	r2, r1
 8006830:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6899      	ldr	r1, [r3, #8]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	431a      	orrs	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	431a      	orrs	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	68d2      	ldr	r2, [r2, #12]
 8006858:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6919      	ldr	r1, [r3, #16]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	041a      	lsls	r2, r3, #16
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68da      	ldr	r2, [r3, #12]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2180      	movs	r1, #128	; 0x80
 800687a:	438a      	bics	r2, r1
 800687c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	2220      	movs	r2, #32
 8006886:	4013      	ands	r3, r2
 8006888:	d10e      	bne.n	80068a8 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	0018      	movs	r0, r3
 800688e:	f000 fab9 	bl	8006e04 <HAL_RTC_WaitForSynchro>
 8006892:	1e03      	subs	r3, r0, #0
 8006894:	d008      	beq.n	80068a8 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	22ff      	movs	r2, #255	; 0xff
 800689c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2204      	movs	r2, #4
 80068a2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e018      	b.n	80068da <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	490d      	ldr	r1, [pc, #52]	; (80068e8 <HAL_RTC_Init+0x124>)
 80068b4:	400a      	ands	r2, r1
 80068b6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	699a      	ldr	r2, [r3, #24]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	22ff      	movs	r2, #255	; 0xff
 80068d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80068d8:	2300      	movs	r3, #0
  }
}
 80068da:	0018      	movs	r0, r3
 80068dc:	46bd      	mov	sp, r7
 80068de:	b002      	add	sp, #8
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	46c0      	nop			; (mov r8, r8)
 80068e4:	ff8fffbf 	.word	0xff8fffbf
 80068e8:	fffbffff 	.word	0xfffbffff

080068ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80068ec:	b590      	push	{r4, r7, lr}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	7f1b      	ldrb	r3, [r3, #28]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d101      	bne.n	8006908 <HAL_RTC_SetTime+0x1c>
 8006904:	2302      	movs	r3, #2
 8006906:	e0a5      	b.n	8006a54 <HAL_RTC_SetTime+0x168>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2201      	movs	r2, #1
 800690c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2202      	movs	r2, #2
 8006912:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d125      	bne.n	8006966 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	2240      	movs	r2, #64	; 0x40
 8006922:	4013      	ands	r3, r2
 8006924:	d102      	bne.n	800692c <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2200      	movs	r2, #0
 800692a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	0018      	movs	r0, r3
 8006932:	f000 fabc 	bl	8006eae <RTC_ByteToBcd2>
 8006936:	0003      	movs	r3, r0
 8006938:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	785b      	ldrb	r3, [r3, #1]
 800693e:	0018      	movs	r0, r3
 8006940:	f000 fab5 	bl	8006eae <RTC_ByteToBcd2>
 8006944:	0003      	movs	r3, r0
 8006946:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006948:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	789b      	ldrb	r3, [r3, #2]
 800694e:	0018      	movs	r0, r3
 8006950:	f000 faad 	bl	8006eae <RTC_ByteToBcd2>
 8006954:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006956:	0022      	movs	r2, r4
 8006958:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	78db      	ldrb	r3, [r3, #3]
 800695e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006960:	4313      	orrs	r3, r2
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	e017      	b.n	8006996 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	2240      	movs	r2, #64	; 0x40
 800696e:	4013      	ands	r3, r2
 8006970:	d102      	bne.n	8006978 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2200      	movs	r2, #0
 8006976:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	785b      	ldrb	r3, [r3, #1]
 8006982:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006984:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800698a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	78db      	ldrb	r3, [r3, #3]
 8006990:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	22ca      	movs	r2, #202	; 0xca
 800699c:	625a      	str	r2, [r3, #36]	; 0x24
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2253      	movs	r2, #83	; 0x53
 80069a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	0018      	movs	r0, r3
 80069aa:	f000 fa54 	bl	8006e56 <RTC_EnterInitMode>
 80069ae:	1e03      	subs	r3, r0, #0
 80069b0:	d00b      	beq.n	80069ca <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	22ff      	movs	r2, #255	; 0xff
 80069b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2204      	movs	r2, #4
 80069be:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e044      	b.n	8006a54 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	4922      	ldr	r1, [pc, #136]	; (8006a5c <HAL_RTC_SetTime+0x170>)
 80069d2:	400a      	ands	r2, r1
 80069d4:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	491f      	ldr	r1, [pc, #124]	; (8006a60 <HAL_RTC_SetTime+0x174>)
 80069e2:	400a      	ands	r2, r1
 80069e4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6899      	ldr	r1, [r3, #8]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	68da      	ldr	r2, [r3, #12]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	431a      	orrs	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2180      	movs	r1, #128	; 0x80
 8006a0a:	438a      	bics	r2, r1
 8006a0c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	2220      	movs	r2, #32
 8006a16:	4013      	ands	r3, r2
 8006a18:	d111      	bne.n	8006a3e <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	f000 f9f1 	bl	8006e04 <HAL_RTC_WaitForSynchro>
 8006a22:	1e03      	subs	r3, r0, #0
 8006a24:	d00b      	beq.n	8006a3e <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	22ff      	movs	r2, #255	; 0xff
 8006a2c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2204      	movs	r2, #4
 8006a32:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e00a      	b.n	8006a54 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	22ff      	movs	r2, #255	; 0xff
 8006a44:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006a52:	2300      	movs	r3, #0
  }
}
 8006a54:	0018      	movs	r0, r3
 8006a56:	46bd      	mov	sp, r7
 8006a58:	b007      	add	sp, #28
 8006a5a:	bd90      	pop	{r4, r7, pc}
 8006a5c:	007f7f7f 	.word	0x007f7f7f
 8006a60:	fffbffff 	.word	0xfffbffff

08006a64 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006a64:	b590      	push	{r4, r7, lr}
 8006a66:	b087      	sub	sp, #28
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	7f1b      	ldrb	r3, [r3, #28]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d101      	bne.n	8006a80 <HAL_RTC_SetDate+0x1c>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e091      	b.n	8006ba4 <HAL_RTC_SetDate+0x140>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2201      	movs	r2, #1
 8006a84:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2202      	movs	r2, #2
 8006a8a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10e      	bne.n	8006ab0 <HAL_RTC_SetDate+0x4c>
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	785b      	ldrb	r3, [r3, #1]
 8006a96:	001a      	movs	r2, r3
 8006a98:	2310      	movs	r3, #16
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	d008      	beq.n	8006ab0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	785b      	ldrb	r3, [r3, #1]
 8006aa2:	2210      	movs	r2, #16
 8006aa4:	4393      	bics	r3, r2
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	330a      	adds	r3, #10
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d11c      	bne.n	8006af0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	78db      	ldrb	r3, [r3, #3]
 8006aba:	0018      	movs	r0, r3
 8006abc:	f000 f9f7 	bl	8006eae <RTC_ByteToBcd2>
 8006ac0:	0003      	movs	r3, r0
 8006ac2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	785b      	ldrb	r3, [r3, #1]
 8006ac8:	0018      	movs	r0, r3
 8006aca:	f000 f9f0 	bl	8006eae <RTC_ByteToBcd2>
 8006ace:	0003      	movs	r3, r0
 8006ad0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006ad2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	789b      	ldrb	r3, [r3, #2]
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f000 f9e8 	bl	8006eae <RTC_ByteToBcd2>
 8006ade:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006ae0:	0022      	movs	r2, r4
 8006ae2:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006aea:	4313      	orrs	r3, r2
 8006aec:	617b      	str	r3, [r7, #20]
 8006aee:	e00e      	b.n	8006b0e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	78db      	ldrb	r3, [r3, #3]
 8006af4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	785b      	ldrb	r3, [r3, #1]
 8006afa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006afc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006b02:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	22ca      	movs	r2, #202	; 0xca
 8006b14:	625a      	str	r2, [r3, #36]	; 0x24
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2253      	movs	r2, #83	; 0x53
 8006b1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	0018      	movs	r0, r3
 8006b22:	f000 f998 	bl	8006e56 <RTC_EnterInitMode>
 8006b26:	1e03      	subs	r3, r0, #0
 8006b28:	d00b      	beq.n	8006b42 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	22ff      	movs	r2, #255	; 0xff
 8006b30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2204      	movs	r2, #4
 8006b36:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e030      	b.n	8006ba4 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	4918      	ldr	r1, [pc, #96]	; (8006bac <HAL_RTC_SetDate+0x148>)
 8006b4a:	400a      	ands	r2, r1
 8006b4c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68da      	ldr	r2, [r3, #12]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2180      	movs	r1, #128	; 0x80
 8006b5a:	438a      	bics	r2, r1
 8006b5c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	2220      	movs	r2, #32
 8006b66:	4013      	ands	r3, r2
 8006b68:	d111      	bne.n	8006b8e <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	f000 f949 	bl	8006e04 <HAL_RTC_WaitForSynchro>
 8006b72:	1e03      	subs	r3, r0, #0
 8006b74:	d00b      	beq.n	8006b8e <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	22ff      	movs	r2, #255	; 0xff
 8006b7c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2204      	movs	r2, #4
 8006b82:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e00a      	b.n	8006ba4 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	22ff      	movs	r2, #255	; 0xff
 8006b94:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
  }
}
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	b007      	add	sp, #28
 8006baa:	bd90      	pop	{r4, r7, pc}
 8006bac:	00ffff3f 	.word	0x00ffff3f

08006bb0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006bb0:	b590      	push	{r4, r7, lr}
 8006bb2:	b089      	sub	sp, #36	; 0x24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	61fb      	str	r3, [r7, #28]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	7f1b      	ldrb	r3, [r3, #28]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d101      	bne.n	8006bd4 <HAL_RTC_SetAlarm_IT+0x24>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e0d5      	b.n	8006d80 <HAL_RTC_SetAlarm_IT+0x1d0>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2202      	movs	r2, #2
 8006bde:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d136      	bne.n	8006c54 <HAL_RTC_SetAlarm_IT+0xa4>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	2240      	movs	r2, #64	; 0x40
 8006bee:	4013      	ands	r3, r2
 8006bf0:	d102      	bne.n	8006bf8 <HAL_RTC_SetAlarm_IT+0x48>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	f000 f956 	bl	8006eae <RTC_ByteToBcd2>
 8006c02:	0003      	movs	r3, r0
 8006c04:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	785b      	ldrb	r3, [r3, #1]
 8006c0a:	0018      	movs	r0, r3
 8006c0c:	f000 f94f 	bl	8006eae <RTC_ByteToBcd2>
 8006c10:	0003      	movs	r3, r0
 8006c12:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006c14:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	789b      	ldrb	r3, [r3, #2]
 8006c1a:	0018      	movs	r0, r3
 8006c1c:	f000 f947 	bl	8006eae <RTC_ByteToBcd2>
 8006c20:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006c22:	0022      	movs	r2, r4
 8006c24:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	78db      	ldrb	r3, [r3, #3]
 8006c2a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2220      	movs	r2, #32
 8006c34:	5c9b      	ldrb	r3, [r3, r2]
 8006c36:	0018      	movs	r0, r3
 8006c38:	f000 f939 	bl	8006eae <RTC_ByteToBcd2>
 8006c3c:	0003      	movs	r3, r0
 8006c3e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006c40:	0022      	movs	r2, r4
 8006c42:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006c48:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	61fb      	str	r3, [r7, #28]
 8006c52:	e022      	b.n	8006c9a <HAL_RTC_SetAlarm_IT+0xea>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	2240      	movs	r2, #64	; 0x40
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	d102      	bne.n	8006c66 <HAL_RTC_SetAlarm_IT+0xb6>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2200      	movs	r2, #0
 8006c64:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006c72:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006c78:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	78db      	ldrb	r3, [r3, #3]
 8006c7e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006c80:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2120      	movs	r1, #32
 8006c86:	5c5b      	ldrb	r3, [r3, r1]
 8006c88:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006c8a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006c90:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006c96:	4313      	orrs	r3, r2
 8006c98:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	22ca      	movs	r2, #202	; 0xca
 8006cac:	625a      	str	r2, [r3, #36]	; 0x24
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2253      	movs	r2, #83	; 0x53
 8006cb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Alarm A interrupt */
  __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4931      	ldr	r1, [pc, #196]	; (8006d88 <HAL_RTC_SetAlarm_IT+0x1d8>)
 8006cc2:	400a      	ands	r2, r1
 8006cc4:	609a      	str	r2, [r3, #8]

  /* Clear flag alarm A */
  __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	22ff      	movs	r2, #255	; 0xff
 8006cce:	401a      	ands	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	492d      	ldr	r1, [pc, #180]	; (8006d8c <HAL_RTC_SetAlarm_IT+0x1dc>)
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006cda:	f7fd fb27 	bl	800432c <HAL_GetTick>
 8006cde:	0003      	movs	r3, r0
 8006ce0:	61bb      	str	r3, [r7, #24]

  /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8006ce2:	e014      	b.n	8006d0e <HAL_RTC_SetAlarm_IT+0x15e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ce4:	f7fd fb22 	bl	800432c <HAL_GetTick>
 8006ce8:	0002      	movs	r2, r0
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	1ad2      	subs	r2, r2, r3
 8006cee:	23fa      	movs	r3, #250	; 0xfa
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d90b      	bls.n	8006d0e <HAL_RTC_SetAlarm_IT+0x15e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	22ff      	movs	r2, #255	; 0xff
 8006cfc:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2203      	movs	r2, #3
 8006d02:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e038      	b.n	8006d80 <HAL_RTC_SetAlarm_IT+0x1d0>
  while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	2201      	movs	r2, #1
 8006d16:	4013      	ands	r3, r2
 8006d18:	d0e4      	beq.n	8006ce4 <HAL_RTC_SetAlarm_IT+0x134>
    }
  }

  hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69fa      	ldr	r2, [r7, #28]
 8006d20:	61da      	str	r2, [r3, #28]
  /* Configure the Alarm A Sub Second register */
  hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	645a      	str	r2, [r3, #68]	; 0x44
  /* Configure the Alarm state: Enable Alarm */
  __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2180      	movs	r1, #128	; 0x80
 8006d36:	0049      	lsls	r1, r1, #1
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	609a      	str	r2, [r3, #8]
  /* Configure the Alarm interrupt */
  __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2180      	movs	r1, #128	; 0x80
 8006d48:	0149      	lsls	r1, r1, #5
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	609a      	str	r2, [r3, #8]

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006d4e:	4b10      	ldr	r3, [pc, #64]	; (8006d90 <HAL_RTC_SetAlarm_IT+0x1e0>)
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	4b0f      	ldr	r3, [pc, #60]	; (8006d90 <HAL_RTC_SetAlarm_IT+0x1e0>)
 8006d54:	2180      	movs	r1, #128	; 0x80
 8006d56:	0289      	lsls	r1, r1, #10
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006d5c:	4b0c      	ldr	r3, [pc, #48]	; (8006d90 <HAL_RTC_SetAlarm_IT+0x1e0>)
 8006d5e:	689a      	ldr	r2, [r3, #8]
 8006d60:	4b0b      	ldr	r3, [pc, #44]	; (8006d90 <HAL_RTC_SetAlarm_IT+0x1e0>)
 8006d62:	2180      	movs	r1, #128	; 0x80
 8006d64:	0289      	lsls	r1, r1, #10
 8006d66:	430a      	orrs	r2, r1
 8006d68:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	22ff      	movs	r2, #255	; 0xff
 8006d70:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2201      	movs	r2, #1
 8006d76:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	0018      	movs	r0, r3
 8006d82:	46bd      	mov	sp, r7
 8006d84:	b009      	add	sp, #36	; 0x24
 8006d86:	bd90      	pop	{r4, r7, pc}
 8006d88:	fffffeff 	.word	0xfffffeff
 8006d8c:	fffffe7f 	.word	0xfffffe7f
 8006d90:	40010400 	.word	0x40010400

08006d94 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689a      	ldr	r2, [r3, #8]
 8006da2:	2380      	movs	r3, #128	; 0x80
 8006da4:	015b      	lsls	r3, r3, #5
 8006da6:	4013      	ands	r3, r2
 8006da8:	d014      	beq.n	8006dd4 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68da      	ldr	r2, [r3, #12]
 8006db0:	2380      	movs	r3, #128	; 0x80
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	4013      	ands	r3, r2
 8006db6:	d00d      	beq.n	8006dd4 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	0018      	movs	r0, r3
 8006dbc:	f000 f81a 	bl	8006df4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	22ff      	movs	r2, #255	; 0xff
 8006dc8:	401a      	ands	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4907      	ldr	r1, [pc, #28]	; (8006dec <HAL_RTC_AlarmIRQHandler+0x58>)
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006dd4:	4b06      	ldr	r3, [pc, #24]	; (8006df0 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8006dd6:	2280      	movs	r2, #128	; 0x80
 8006dd8:	0292      	lsls	r2, r2, #10
 8006dda:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	775a      	strb	r2, [r3, #29]
}
 8006de2:	46c0      	nop			; (mov r8, r8)
 8006de4:	46bd      	mov	sp, r7
 8006de6:	b002      	add	sp, #8
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	46c0      	nop			; (mov r8, r8)
 8006dec:	fffffe7f 	.word	0xfffffe7f
 8006df0:	40010400 	.word	0x40010400

08006df4 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006dfc:	46c0      	nop			; (mov r8, r8)
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	b002      	add	sp, #8
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	21a0      	movs	r1, #160	; 0xa0
 8006e1c:	438a      	bics	r2, r1
 8006e1e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006e20:	f7fd fa84 	bl	800432c <HAL_GetTick>
 8006e24:	0003      	movs	r3, r0
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006e28:	e00a      	b.n	8006e40 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e2a:	f7fd fa7f 	bl	800432c <HAL_GetTick>
 8006e2e:	0002      	movs	r2, r0
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	1ad2      	subs	r2, r2, r3
 8006e34:	23fa      	movs	r3, #250	; 0xfa
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d901      	bls.n	8006e40 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e006      	b.n	8006e4e <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	2220      	movs	r2, #32
 8006e48:	4013      	ands	r3, r2
 8006e4a:	d0ee      	beq.n	8006e2a <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	0018      	movs	r0, r3
 8006e50:	46bd      	mov	sp, r7
 8006e52:	b004      	add	sp, #16
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b084      	sub	sp, #16
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	2240      	movs	r2, #64	; 0x40
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	d11a      	bne.n	8006ea4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2201      	movs	r2, #1
 8006e74:	4252      	negs	r2, r2
 8006e76:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006e78:	f7fd fa58 	bl	800432c <HAL_GetTick>
 8006e7c:	0003      	movs	r3, r0
 8006e7e:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006e80:	e00a      	b.n	8006e98 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e82:	f7fd fa53 	bl	800432c <HAL_GetTick>
 8006e86:	0002      	movs	r2, r0
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	1ad2      	subs	r2, r2, r3
 8006e8c:	23fa      	movs	r3, #250	; 0xfa
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d901      	bls.n	8006e98 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e006      	b.n	8006ea6 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	2240      	movs	r2, #64	; 0x40
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	d0ee      	beq.n	8006e82 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	b004      	add	sp, #16
 8006eac:	bd80      	pop	{r7, pc}

08006eae <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	0002      	movs	r2, r0
 8006eb6:	1dfb      	adds	r3, r7, #7
 8006eb8:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8006ebe:	e007      	b.n	8006ed0 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006ec6:	1dfb      	adds	r3, r7, #7
 8006ec8:	1dfa      	adds	r2, r7, #7
 8006eca:	7812      	ldrb	r2, [r2, #0]
 8006ecc:	3a0a      	subs	r2, #10
 8006ece:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 8006ed0:	1dfb      	adds	r3, r7, #7
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	2b09      	cmp	r3, #9
 8006ed6:	d8f3      	bhi.n	8006ec0 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	011b      	lsls	r3, r3, #4
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	1dfb      	adds	r3, r7, #7
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	b2db      	uxtb	r3, r3
}
 8006ee8:	0018      	movs	r0, r3
 8006eea:	46bd      	mov	sp, r7
 8006eec:	b004      	add	sp, #16
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e01e      	b.n	8006f40 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	223d      	movs	r2, #61	; 0x3d
 8006f06:	5c9b      	ldrb	r3, [r3, r2]
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d107      	bne.n	8006f1e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	223c      	movs	r2, #60	; 0x3c
 8006f12:	2100      	movs	r1, #0
 8006f14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	0018      	movs	r0, r3
 8006f1a:	f000 f815 	bl	8006f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	223d      	movs	r2, #61	; 0x3d
 8006f22:	2102      	movs	r1, #2
 8006f24:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	0019      	movs	r1, r3
 8006f30:	0010      	movs	r0, r2
 8006f32:	f000 f969 	bl	8007208 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	223d      	movs	r2, #61	; 0x3d
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	0018      	movs	r0, r3
 8006f42:	46bd      	mov	sp, r7
 8006f44:	b002      	add	sp, #8
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f50:	46c0      	nop			; (mov r8, r8)
 8006f52:	46bd      	mov	sp, r7
 8006f54:	b002      	add	sp, #8
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2101      	movs	r1, #1
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	2207      	movs	r2, #7
 8006f78:	4013      	ands	r3, r2
 8006f7a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2b06      	cmp	r3, #6
 8006f80:	d007      	beq.n	8006f92 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	0018      	movs	r0, r3
 8006f96:	46bd      	mov	sp, r7
 8006f98:	b004      	add	sp, #16
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2202      	movs	r2, #2
 8006fac:	4013      	ands	r3, r2
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d124      	bne.n	8006ffc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	2202      	movs	r2, #2
 8006fba:	4013      	ands	r3, r2
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d11d      	bne.n	8006ffc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2203      	movs	r2, #3
 8006fc6:	4252      	negs	r2, r2
 8006fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	2203      	movs	r2, #3
 8006fd8:	4013      	ands	r3, r2
 8006fda:	d004      	beq.n	8006fe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	0018      	movs	r0, r3
 8006fe0:	f000 f8fa 	bl	80071d8 <HAL_TIM_IC_CaptureCallback>
 8006fe4:	e007      	b.n	8006ff6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	0018      	movs	r0, r3
 8006fea:	f000 f8ed 	bl	80071c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	0018      	movs	r0, r3
 8006ff2:	f000 f8f9 	bl	80071e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2204      	movs	r2, #4
 8007004:	4013      	ands	r3, r2
 8007006:	2b04      	cmp	r3, #4
 8007008:	d125      	bne.n	8007056 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	2204      	movs	r2, #4
 8007012:	4013      	ands	r3, r2
 8007014:	2b04      	cmp	r3, #4
 8007016:	d11e      	bne.n	8007056 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2205      	movs	r2, #5
 800701e:	4252      	negs	r2, r2
 8007020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2202      	movs	r2, #2
 8007026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	699a      	ldr	r2, [r3, #24]
 800702e:	23c0      	movs	r3, #192	; 0xc0
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4013      	ands	r3, r2
 8007034:	d004      	beq.n	8007040 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	0018      	movs	r0, r3
 800703a:	f000 f8cd 	bl	80071d8 <HAL_TIM_IC_CaptureCallback>
 800703e:	e007      	b.n	8007050 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	0018      	movs	r0, r3
 8007044:	f000 f8c0 	bl	80071c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	0018      	movs	r0, r3
 800704c:	f000 f8cc 	bl	80071e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	2208      	movs	r2, #8
 800705e:	4013      	ands	r3, r2
 8007060:	2b08      	cmp	r3, #8
 8007062:	d124      	bne.n	80070ae <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	2208      	movs	r2, #8
 800706c:	4013      	ands	r3, r2
 800706e:	2b08      	cmp	r3, #8
 8007070:	d11d      	bne.n	80070ae <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2209      	movs	r2, #9
 8007078:	4252      	negs	r2, r2
 800707a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2204      	movs	r2, #4
 8007080:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	2203      	movs	r2, #3
 800708a:	4013      	ands	r3, r2
 800708c:	d004      	beq.n	8007098 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	0018      	movs	r0, r3
 8007092:	f000 f8a1 	bl	80071d8 <HAL_TIM_IC_CaptureCallback>
 8007096:	e007      	b.n	80070a8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	0018      	movs	r0, r3
 800709c:	f000 f894 	bl	80071c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	0018      	movs	r0, r3
 80070a4:	f000 f8a0 	bl	80071e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	2210      	movs	r2, #16
 80070b6:	4013      	ands	r3, r2
 80070b8:	2b10      	cmp	r3, #16
 80070ba:	d125      	bne.n	8007108 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	2210      	movs	r2, #16
 80070c4:	4013      	ands	r3, r2
 80070c6:	2b10      	cmp	r3, #16
 80070c8:	d11e      	bne.n	8007108 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2211      	movs	r2, #17
 80070d0:	4252      	negs	r2, r2
 80070d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2208      	movs	r2, #8
 80070d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	69da      	ldr	r2, [r3, #28]
 80070e0:	23c0      	movs	r3, #192	; 0xc0
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4013      	ands	r3, r2
 80070e6:	d004      	beq.n	80070f2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	0018      	movs	r0, r3
 80070ec:	f000 f874 	bl	80071d8 <HAL_TIM_IC_CaptureCallback>
 80070f0:	e007      	b.n	8007102 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	0018      	movs	r0, r3
 80070f6:	f000 f867 	bl	80071c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	0018      	movs	r0, r3
 80070fe:	f000 f873 	bl	80071e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	2201      	movs	r2, #1
 8007110:	4013      	ands	r3, r2
 8007112:	2b01      	cmp	r3, #1
 8007114:	d10f      	bne.n	8007136 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	2201      	movs	r2, #1
 800711e:	4013      	ands	r3, r2
 8007120:	2b01      	cmp	r3, #1
 8007122:	d108      	bne.n	8007136 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2202      	movs	r2, #2
 800712a:	4252      	negs	r2, r2
 800712c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	0018      	movs	r0, r3
 8007132:	f7fc fe43 	bl	8003dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	2280      	movs	r2, #128	; 0x80
 800713e:	4013      	ands	r3, r2
 8007140:	2b80      	cmp	r3, #128	; 0x80
 8007142:	d10f      	bne.n	8007164 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	2280      	movs	r2, #128	; 0x80
 800714c:	4013      	ands	r3, r2
 800714e:	2b80      	cmp	r3, #128	; 0x80
 8007150:	d108      	bne.n	8007164 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2281      	movs	r2, #129	; 0x81
 8007158:	4252      	negs	r2, r2
 800715a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	0018      	movs	r0, r3
 8007160:	f000 f8d0 	bl	8007304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	2240      	movs	r2, #64	; 0x40
 800716c:	4013      	ands	r3, r2
 800716e:	2b40      	cmp	r3, #64	; 0x40
 8007170:	d10f      	bne.n	8007192 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	2240      	movs	r2, #64	; 0x40
 800717a:	4013      	ands	r3, r2
 800717c:	2b40      	cmp	r3, #64	; 0x40
 800717e:	d108      	bne.n	8007192 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2241      	movs	r2, #65	; 0x41
 8007186:	4252      	negs	r2, r2
 8007188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	0018      	movs	r0, r3
 800718e:	f000 f833 	bl	80071f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	2220      	movs	r2, #32
 800719a:	4013      	ands	r3, r2
 800719c:	2b20      	cmp	r3, #32
 800719e:	d10f      	bne.n	80071c0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	2220      	movs	r2, #32
 80071a8:	4013      	ands	r3, r2
 80071aa:	2b20      	cmp	r3, #32
 80071ac:	d108      	bne.n	80071c0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2221      	movs	r2, #33	; 0x21
 80071b4:	4252      	negs	r2, r2
 80071b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	0018      	movs	r0, r3
 80071bc:	f000 f89a 	bl	80072f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071c0:	46c0      	nop			; (mov r8, r8)
 80071c2:	46bd      	mov	sp, r7
 80071c4:	b002      	add	sp, #8
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071d0:	46c0      	nop			; (mov r8, r8)
 80071d2:	46bd      	mov	sp, r7
 80071d4:	b002      	add	sp, #8
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071e0:	46c0      	nop			; (mov r8, r8)
 80071e2:	46bd      	mov	sp, r7
 80071e4:	b002      	add	sp, #8
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071f0:	46c0      	nop			; (mov r8, r8)
 80071f2:	46bd      	mov	sp, r7
 80071f4:	b002      	add	sp, #8
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007200:	46c0      	nop			; (mov r8, r8)
 8007202:	46bd      	mov	sp, r7
 8007204:	b002      	add	sp, #8
 8007206:	bd80      	pop	{r7, pc}

08007208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a2f      	ldr	r2, [pc, #188]	; (80072d8 <TIM_Base_SetConfig+0xd0>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d003      	beq.n	8007228 <TIM_Base_SetConfig+0x20>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a2e      	ldr	r2, [pc, #184]	; (80072dc <TIM_Base_SetConfig+0xd4>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d108      	bne.n	800723a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2270      	movs	r2, #112	; 0x70
 800722c:	4393      	bics	r3, r2
 800722e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a26      	ldr	r2, [pc, #152]	; (80072d8 <TIM_Base_SetConfig+0xd0>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d013      	beq.n	800726a <TIM_Base_SetConfig+0x62>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a25      	ldr	r2, [pc, #148]	; (80072dc <TIM_Base_SetConfig+0xd4>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d00f      	beq.n	800726a <TIM_Base_SetConfig+0x62>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a24      	ldr	r2, [pc, #144]	; (80072e0 <TIM_Base_SetConfig+0xd8>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d00b      	beq.n	800726a <TIM_Base_SetConfig+0x62>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a23      	ldr	r2, [pc, #140]	; (80072e4 <TIM_Base_SetConfig+0xdc>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d007      	beq.n	800726a <TIM_Base_SetConfig+0x62>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a22      	ldr	r2, [pc, #136]	; (80072e8 <TIM_Base_SetConfig+0xe0>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d003      	beq.n	800726a <TIM_Base_SetConfig+0x62>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a21      	ldr	r2, [pc, #132]	; (80072ec <TIM_Base_SetConfig+0xe4>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d108      	bne.n	800727c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4a20      	ldr	r2, [pc, #128]	; (80072f0 <TIM_Base_SetConfig+0xe8>)
 800726e:	4013      	ands	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	4313      	orrs	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2280      	movs	r2, #128	; 0x80
 8007280:	4393      	bics	r3, r2
 8007282:	001a      	movs	r2, r3
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	4313      	orrs	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	689a      	ldr	r2, [r3, #8]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a0c      	ldr	r2, [pc, #48]	; (80072d8 <TIM_Base_SetConfig+0xd0>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d00b      	beq.n	80072c2 <TIM_Base_SetConfig+0xba>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a0d      	ldr	r2, [pc, #52]	; (80072e4 <TIM_Base_SetConfig+0xdc>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d007      	beq.n	80072c2 <TIM_Base_SetConfig+0xba>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a0c      	ldr	r2, [pc, #48]	; (80072e8 <TIM_Base_SetConfig+0xe0>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d003      	beq.n	80072c2 <TIM_Base_SetConfig+0xba>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a0b      	ldr	r2, [pc, #44]	; (80072ec <TIM_Base_SetConfig+0xe4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d103      	bne.n	80072ca <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	691a      	ldr	r2, [r3, #16]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	615a      	str	r2, [r3, #20]
}
 80072d0:	46c0      	nop			; (mov r8, r8)
 80072d2:	46bd      	mov	sp, r7
 80072d4:	b004      	add	sp, #16
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	40012c00 	.word	0x40012c00
 80072dc:	40000400 	.word	0x40000400
 80072e0:	40002000 	.word	0x40002000
 80072e4:	40014000 	.word	0x40014000
 80072e8:	40014400 	.word	0x40014400
 80072ec:	40014800 	.word	0x40014800
 80072f0:	fffffcff 	.word	0xfffffcff

080072f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072fc:	46c0      	nop			; (mov r8, r8)
 80072fe:	46bd      	mov	sp, r7
 8007300:	b002      	add	sp, #8
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800730c:	46c0      	nop			; (mov r8, r8)
 800730e:	46bd      	mov	sp, r7
 8007310:	b002      	add	sp, #8
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e044      	b.n	80073b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800732a:	2b00      	cmp	r3, #0
 800732c:	d107      	bne.n	800733e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2270      	movs	r2, #112	; 0x70
 8007332:	2100      	movs	r1, #0
 8007334:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	0018      	movs	r0, r3
 800733a:	f7fc fe51 	bl	8003fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2224      	movs	r2, #36	; 0x24
 8007342:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2101      	movs	r1, #1
 8007350:	438a      	bics	r2, r1
 8007352:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	0018      	movs	r0, r3
 8007358:	f000 fb16 	bl	8007988 <UART_SetConfig>
 800735c:	0003      	movs	r3, r0
 800735e:	2b01      	cmp	r3, #1
 8007360:	d101      	bne.n	8007366 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e024      	b.n	80073b0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736a:	2b00      	cmp	r3, #0
 800736c:	d003      	beq.n	8007376 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	0018      	movs	r0, r3
 8007372:	f000 fc8f 	bl	8007c94 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	490d      	ldr	r1, [pc, #52]	; (80073b8 <HAL_UART_Init+0xa4>)
 8007382:	400a      	ands	r2, r1
 8007384:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2108      	movs	r1, #8
 8007392:	438a      	bics	r2, r1
 8007394:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2101      	movs	r1, #1
 80073a2:	430a      	orrs	r2, r1
 80073a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	0018      	movs	r0, r3
 80073aa:	f000 fd27 	bl	8007dfc <UART_CheckIdleState>
 80073ae:	0003      	movs	r3, r0
}
 80073b0:	0018      	movs	r0, r3
 80073b2:	46bd      	mov	sp, r7
 80073b4:	b002      	add	sp, #8
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	fffff7ff 	.word	0xfffff7ff

080073bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08a      	sub	sp, #40	; 0x28
 80073c0:	af02      	add	r7, sp, #8
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	603b      	str	r3, [r7, #0]
 80073c8:	1dbb      	adds	r3, r7, #6
 80073ca:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073d0:	2b20      	cmp	r3, #32
 80073d2:	d000      	beq.n	80073d6 <HAL_UART_Transmit+0x1a>
 80073d4:	e095      	b.n	8007502 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d003      	beq.n	80073e4 <HAL_UART_Transmit+0x28>
 80073dc:	1dbb      	adds	r3, r7, #6
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e08d      	b.n	8007504 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	2380      	movs	r3, #128	; 0x80
 80073ee:	015b      	lsls	r3, r3, #5
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d109      	bne.n	8007408 <HAL_UART_Transmit+0x4c>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d105      	bne.n	8007408 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	2201      	movs	r2, #1
 8007400:	4013      	ands	r3, r2
 8007402:	d001      	beq.n	8007408 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e07d      	b.n	8007504 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2270      	movs	r2, #112	; 0x70
 800740c:	5c9b      	ldrb	r3, [r3, r2]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d101      	bne.n	8007416 <HAL_UART_Transmit+0x5a>
 8007412:	2302      	movs	r3, #2
 8007414:	e076      	b.n	8007504 <HAL_UART_Transmit+0x148>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2270      	movs	r2, #112	; 0x70
 800741a:	2101      	movs	r1, #1
 800741c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2221      	movs	r2, #33	; 0x21
 8007428:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800742a:	f7fc ff7f 	bl	800432c <HAL_GetTick>
 800742e:	0003      	movs	r3, r0
 8007430:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	1dba      	adds	r2, r7, #6
 8007436:	2150      	movs	r1, #80	; 0x50
 8007438:	8812      	ldrh	r2, [r2, #0]
 800743a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	1dba      	adds	r2, r7, #6
 8007440:	2152      	movs	r1, #82	; 0x52
 8007442:	8812      	ldrh	r2, [r2, #0]
 8007444:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	689a      	ldr	r2, [r3, #8]
 800744a:	2380      	movs	r3, #128	; 0x80
 800744c:	015b      	lsls	r3, r3, #5
 800744e:	429a      	cmp	r2, r3
 8007450:	d108      	bne.n	8007464 <HAL_UART_Transmit+0xa8>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d104      	bne.n	8007464 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 800745a:	2300      	movs	r3, #0
 800745c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	61bb      	str	r3, [r7, #24]
 8007462:	e003      	b.n	800746c <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007468:	2300      	movs	r3, #0
 800746a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800746c:	e02d      	b.n	80074ca <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	0013      	movs	r3, r2
 8007478:	2200      	movs	r2, #0
 800747a:	2180      	movs	r1, #128	; 0x80
 800747c:	f000 fd04 	bl	8007e88 <UART_WaitOnFlagUntilTimeout>
 8007480:	1e03      	subs	r3, r0, #0
 8007482:	d001      	beq.n	8007488 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e03d      	b.n	8007504 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10b      	bne.n	80074a6 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	881a      	ldrh	r2, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	05d2      	lsls	r2, r2, #23
 8007498:	0dd2      	lsrs	r2, r2, #23
 800749a:	b292      	uxth	r2, r2
 800749c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	3302      	adds	r3, #2
 80074a2:	61bb      	str	r3, [r7, #24]
 80074a4:	e008      	b.n	80074b8 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	781a      	ldrb	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	b292      	uxth	r2, r2
 80074b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	3301      	adds	r3, #1
 80074b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2252      	movs	r2, #82	; 0x52
 80074bc:	5a9b      	ldrh	r3, [r3, r2]
 80074be:	b29b      	uxth	r3, r3
 80074c0:	3b01      	subs	r3, #1
 80074c2:	b299      	uxth	r1, r3
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2252      	movs	r2, #82	; 0x52
 80074c8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2252      	movs	r2, #82	; 0x52
 80074ce:	5a9b      	ldrh	r3, [r3, r2]
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1cb      	bne.n	800746e <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	0013      	movs	r3, r2
 80074e0:	2200      	movs	r2, #0
 80074e2:	2140      	movs	r1, #64	; 0x40
 80074e4:	f000 fcd0 	bl	8007e88 <UART_WaitOnFlagUntilTimeout>
 80074e8:	1e03      	subs	r3, r0, #0
 80074ea:	d001      	beq.n	80074f0 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e009      	b.n	8007504 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2220      	movs	r2, #32
 80074f4:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2270      	movs	r2, #112	; 0x70
 80074fa:	2100      	movs	r1, #0
 80074fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	e000      	b.n	8007504 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8007502:	2302      	movs	r3, #2
  }
}
 8007504:	0018      	movs	r0, r3
 8007506:	46bd      	mov	sp, r7
 8007508:	b008      	add	sp, #32
 800750a:	bd80      	pop	{r7, pc}

0800750c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	1dbb      	adds	r3, r7, #6
 8007518:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800751e:	2b20      	cmp	r3, #32
 8007520:	d000      	beq.n	8007524 <HAL_UART_Receive_IT+0x18>
 8007522:	e08b      	b.n	800763c <HAL_UART_Receive_IT+0x130>
  {
    if ((pData == NULL) || (Size == 0U))
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <HAL_UART_Receive_IT+0x26>
 800752a:	1dbb      	adds	r3, r7, #6
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e083      	b.n	800763e <HAL_UART_Receive_IT+0x132>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	689a      	ldr	r2, [r3, #8]
 800753a:	2380      	movs	r3, #128	; 0x80
 800753c:	015b      	lsls	r3, r3, #5
 800753e:	429a      	cmp	r2, r3
 8007540:	d109      	bne.n	8007556 <HAL_UART_Receive_IT+0x4a>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d105      	bne.n	8007556 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2201      	movs	r2, #1
 800754e:	4013      	ands	r3, r2
 8007550:	d001      	beq.n	8007556 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e073      	b.n	800763e <HAL_UART_Receive_IT+0x132>
      }
    }

    __HAL_LOCK(huart);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2270      	movs	r2, #112	; 0x70
 800755a:	5c9b      	ldrb	r3, [r3, r2]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d101      	bne.n	8007564 <HAL_UART_Receive_IT+0x58>
 8007560:	2302      	movs	r3, #2
 8007562:	e06c      	b.n	800763e <HAL_UART_Receive_IT+0x132>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2270      	movs	r2, #112	; 0x70
 8007568:	2101      	movs	r1, #1
 800756a:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	1dba      	adds	r2, r7, #6
 8007576:	2158      	movs	r1, #88	; 0x58
 8007578:	8812      	ldrh	r2, [r2, #0]
 800757a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	1dba      	adds	r2, r7, #6
 8007580:	215a      	movs	r1, #90	; 0x5a
 8007582:	8812      	ldrh	r2, [r2, #0]
 8007584:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	2380      	movs	r3, #128	; 0x80
 8007592:	015b      	lsls	r3, r3, #5
 8007594:	429a      	cmp	r2, r3
 8007596:	d10d      	bne.n	80075b4 <HAL_UART_Receive_IT+0xa8>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d104      	bne.n	80075aa <HAL_UART_Receive_IT+0x9e>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	225c      	movs	r2, #92	; 0x5c
 80075a4:	4928      	ldr	r1, [pc, #160]	; (8007648 <HAL_UART_Receive_IT+0x13c>)
 80075a6:	5299      	strh	r1, [r3, r2]
 80075a8:	e01a      	b.n	80075e0 <HAL_UART_Receive_IT+0xd4>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	225c      	movs	r2, #92	; 0x5c
 80075ae:	21ff      	movs	r1, #255	; 0xff
 80075b0:	5299      	strh	r1, [r3, r2]
 80075b2:	e015      	b.n	80075e0 <HAL_UART_Receive_IT+0xd4>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10d      	bne.n	80075d8 <HAL_UART_Receive_IT+0xcc>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d104      	bne.n	80075ce <HAL_UART_Receive_IT+0xc2>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	225c      	movs	r2, #92	; 0x5c
 80075c8:	21ff      	movs	r1, #255	; 0xff
 80075ca:	5299      	strh	r1, [r3, r2]
 80075cc:	e008      	b.n	80075e0 <HAL_UART_Receive_IT+0xd4>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	225c      	movs	r2, #92	; 0x5c
 80075d2:	217f      	movs	r1, #127	; 0x7f
 80075d4:	5299      	strh	r1, [r3, r2]
 80075d6:	e003      	b.n	80075e0 <HAL_UART_Receive_IT+0xd4>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	225c      	movs	r2, #92	; 0x5c
 80075dc:	2100      	movs	r1, #0
 80075de:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2222      	movs	r2, #34	; 0x22
 80075ea:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689a      	ldr	r2, [r3, #8]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2101      	movs	r1, #1
 80075f8:	430a      	orrs	r2, r1
 80075fa:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	689a      	ldr	r2, [r3, #8]
 8007600:	2380      	movs	r3, #128	; 0x80
 8007602:	015b      	lsls	r3, r3, #5
 8007604:	429a      	cmp	r2, r3
 8007606:	d107      	bne.n	8007618 <HAL_UART_Receive_IT+0x10c>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d103      	bne.n	8007618 <HAL_UART_Receive_IT+0x10c>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4a0e      	ldr	r2, [pc, #56]	; (800764c <HAL_UART_Receive_IT+0x140>)
 8007614:	661a      	str	r2, [r3, #96]	; 0x60
 8007616:	e002      	b.n	800761e <HAL_UART_Receive_IT+0x112>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4a0d      	ldr	r2, [pc, #52]	; (8007650 <HAL_UART_Receive_IT+0x144>)
 800761c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2270      	movs	r2, #112	; 0x70
 8007622:	2100      	movs	r1, #0
 8007624:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2190      	movs	r1, #144	; 0x90
 8007632:	0049      	lsls	r1, r1, #1
 8007634:	430a      	orrs	r2, r1
 8007636:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	e000      	b.n	800763e <HAL_UART_Receive_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800763c:	2302      	movs	r3, #2
  }
}
 800763e:	0018      	movs	r0, r3
 8007640:	46bd      	mov	sp, r7
 8007642:	b004      	add	sp, #16
 8007644:	bd80      	pop	{r7, pc}
 8007646:	46c0      	nop			; (mov r8, r8)
 8007648:	000001ff 	.word	0x000001ff
 800764c:	080080e5 	.word	0x080080e5
 8007650:	08008029 	.word	0x08008029

08007654 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4927      	ldr	r1, [pc, #156]	; (8007704 <HAL_UART_AbortReceive+0xb0>)
 8007668:	400a      	ands	r2, r1
 800766a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2101      	movs	r1, #1
 8007678:	438a      	bics	r2, r1
 800767a:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	2240      	movs	r2, #64	; 0x40
 8007684:	4013      	ands	r3, r2
 8007686:	2b40      	cmp	r3, #64	; 0x40
 8007688:	d123      	bne.n	80076d2 <HAL_UART_AbortReceive+0x7e>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	689a      	ldr	r2, [r3, #8]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2140      	movs	r1, #64	; 0x40
 8007696:	438a      	bics	r2, r1
 8007698:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d017      	beq.n	80076d2 <HAL_UART_AbortReceive+0x7e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a6:	2200      	movs	r2, #0
 80076a8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ae:	0018      	movs	r0, r3
 80076b0:	f7fd fab9 	bl	8004c26 <HAL_DMA_Abort>
 80076b4:	1e03      	subs	r3, r0, #0
 80076b6:	d00c      	beq.n	80076d2 <HAL_UART_AbortReceive+0x7e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076bc:	0018      	movs	r0, r3
 80076be:	f7fd fb30 	bl	8004d22 <HAL_DMA_GetError>
 80076c2:	0003      	movs	r3, r0
 80076c4:	2b20      	cmp	r3, #32
 80076c6:	d104      	bne.n	80076d2 <HAL_UART_AbortReceive+0x7e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2210      	movs	r2, #16
 80076cc:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e013      	b.n	80076fa <HAL_UART_AbortReceive+0xa6>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	225a      	movs	r2, #90	; 0x5a
 80076d6:	2100      	movs	r1, #0
 80076d8:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	220f      	movs	r2, #15
 80076e0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	699a      	ldr	r2, [r3, #24]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2108      	movs	r1, #8
 80076ee:	430a      	orrs	r2, r1
 80076f0:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2220      	movs	r2, #32
 80076f6:	679a      	str	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	0018      	movs	r0, r3
 80076fc:	46bd      	mov	sp, r7
 80076fe:	b002      	add	sp, #8
 8007700:	bd80      	pop	{r7, pc}
 8007702:	46c0      	nop			; (mov r8, r8)
 8007704:	fffffedf 	.word	0xfffffedf

08007708 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	4a89      	ldr	r2, [pc, #548]	; (8007950 <HAL_UART_IRQHandler+0x248>)
 800772c:	4013      	ands	r3, r2
 800772e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d112      	bne.n	800775c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	2220      	movs	r2, #32
 800773a:	4013      	ands	r3, r2
 800773c:	d00e      	beq.n	800775c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	2220      	movs	r2, #32
 8007742:	4013      	ands	r3, r2
 8007744:	d00a      	beq.n	800775c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800774a:	2b00      	cmp	r3, #0
 800774c:	d100      	bne.n	8007750 <HAL_UART_IRQHandler+0x48>
 800774e:	e0f7      	b.n	8007940 <HAL_UART_IRQHandler+0x238>
      {
        huart->RxISR(huart);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	0010      	movs	r0, r2
 8007758:	4798      	blx	r3
      }
      return;
 800775a:	e0f1      	b.n	8007940 <HAL_UART_IRQHandler+0x238>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d100      	bne.n	8007764 <HAL_UART_IRQHandler+0x5c>
 8007762:	e0cd      	b.n	8007900 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2201      	movs	r2, #1
 8007768:	4013      	ands	r3, r2
 800776a:	d105      	bne.n	8007778 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	2390      	movs	r3, #144	; 0x90
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	4013      	ands	r3, r2
 8007774:	d100      	bne.n	8007778 <HAL_UART_IRQHandler+0x70>
 8007776:	e0c3      	b.n	8007900 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	2201      	movs	r2, #1
 800777c:	4013      	ands	r3, r2
 800777e:	d00e      	beq.n	800779e <HAL_UART_IRQHandler+0x96>
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	2380      	movs	r3, #128	; 0x80
 8007784:	005b      	lsls	r3, r3, #1
 8007786:	4013      	ands	r3, r2
 8007788:	d009      	beq.n	800779e <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2201      	movs	r2, #1
 8007790:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007796:	2201      	movs	r2, #1
 8007798:	431a      	orrs	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	2202      	movs	r2, #2
 80077a2:	4013      	ands	r3, r2
 80077a4:	d00d      	beq.n	80077c2 <HAL_UART_IRQHandler+0xba>
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2201      	movs	r2, #1
 80077aa:	4013      	ands	r3, r2
 80077ac:	d009      	beq.n	80077c2 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2202      	movs	r2, #2
 80077b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ba:	2204      	movs	r2, #4
 80077bc:	431a      	orrs	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	2204      	movs	r2, #4
 80077c6:	4013      	ands	r3, r2
 80077c8:	d00d      	beq.n	80077e6 <HAL_UART_IRQHandler+0xde>
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2201      	movs	r2, #1
 80077ce:	4013      	ands	r3, r2
 80077d0:	d009      	beq.n	80077e6 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2204      	movs	r2, #4
 80077d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077de:	2202      	movs	r2, #2
 80077e0:	431a      	orrs	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	2208      	movs	r2, #8
 80077ea:	4013      	ands	r3, r2
 80077ec:	d011      	beq.n	8007812 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	2220      	movs	r2, #32
 80077f2:	4013      	ands	r3, r2
 80077f4:	d103      	bne.n	80077fe <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	2201      	movs	r2, #1
 80077fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80077fc:	d009      	beq.n	8007812 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2208      	movs	r2, #8
 8007804:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800780a:	2208      	movs	r2, #8
 800780c:	431a      	orrs	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007812:	69fa      	ldr	r2, [r7, #28]
 8007814:	2380      	movs	r3, #128	; 0x80
 8007816:	011b      	lsls	r3, r3, #4
 8007818:	4013      	ands	r3, r2
 800781a:	d00f      	beq.n	800783c <HAL_UART_IRQHandler+0x134>
 800781c:	69ba      	ldr	r2, [r7, #24]
 800781e:	2380      	movs	r3, #128	; 0x80
 8007820:	04db      	lsls	r3, r3, #19
 8007822:	4013      	ands	r3, r2
 8007824:	d00a      	beq.n	800783c <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2280      	movs	r2, #128	; 0x80
 800782c:	0112      	lsls	r2, r2, #4
 800782e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007834:	2220      	movs	r2, #32
 8007836:	431a      	orrs	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d100      	bne.n	8007846 <HAL_UART_IRQHandler+0x13e>
 8007844:	e07e      	b.n	8007944 <HAL_UART_IRQHandler+0x23c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	2220      	movs	r2, #32
 800784a:	4013      	ands	r3, r2
 800784c:	d00c      	beq.n	8007868 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	2220      	movs	r2, #32
 8007852:	4013      	ands	r3, r2
 8007854:	d008      	beq.n	8007868 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800785a:	2b00      	cmp	r3, #0
 800785c:	d004      	beq.n	8007868 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	0010      	movs	r0, r2
 8007866:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800786c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	2240      	movs	r2, #64	; 0x40
 8007876:	4013      	ands	r3, r2
 8007878:	2b40      	cmp	r3, #64	; 0x40
 800787a:	d003      	beq.n	8007884 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2228      	movs	r2, #40	; 0x28
 8007880:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007882:	d033      	beq.n	80078ec <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	0018      	movs	r0, r3
 8007888:	f000 fb7c 	bl	8007f84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	2240      	movs	r2, #64	; 0x40
 8007894:	4013      	ands	r3, r2
 8007896:	2b40      	cmp	r3, #64	; 0x40
 8007898:	d123      	bne.n	80078e2 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689a      	ldr	r2, [r3, #8]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2140      	movs	r1, #64	; 0x40
 80078a6:	438a      	bics	r2, r1
 80078a8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d012      	beq.n	80078d8 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078b6:	4a27      	ldr	r2, [pc, #156]	; (8007954 <HAL_UART_IRQHandler+0x24c>)
 80078b8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078be:	0018      	movs	r0, r3
 80078c0:	f7fd f9e9 	bl	8004c96 <HAL_DMA_Abort_IT>
 80078c4:	1e03      	subs	r3, r0, #0
 80078c6:	d019      	beq.n	80078fc <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078d2:	0018      	movs	r0, r3
 80078d4:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d6:	e011      	b.n	80078fc <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	0018      	movs	r0, r3
 80078dc:	f000 f84c 	bl	8007978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e0:	e00c      	b.n	80078fc <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	0018      	movs	r0, r3
 80078e6:	f000 f847 	bl	8007978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ea:	e007      	b.n	80078fc <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	0018      	movs	r0, r3
 80078f0:	f000 f842 	bl	8007978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80078fa:	e023      	b.n	8007944 <HAL_UART_IRQHandler+0x23c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078fc:	46c0      	nop			; (mov r8, r8)
    return;
 80078fe:	e021      	b.n	8007944 <HAL_UART_IRQHandler+0x23c>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	2280      	movs	r2, #128	; 0x80
 8007904:	4013      	ands	r3, r2
 8007906:	d00d      	beq.n	8007924 <HAL_UART_IRQHandler+0x21c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	2280      	movs	r2, #128	; 0x80
 800790c:	4013      	ands	r3, r2
 800790e:	d009      	beq.n	8007924 <HAL_UART_IRQHandler+0x21c>
  {
    if (huart->TxISR != NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007914:	2b00      	cmp	r3, #0
 8007916:	d017      	beq.n	8007948 <HAL_UART_IRQHandler+0x240>
    {
      huart->TxISR(huart);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	0010      	movs	r0, r2
 8007920:	4798      	blx	r3
    }
    return;
 8007922:	e011      	b.n	8007948 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	2240      	movs	r2, #64	; 0x40
 8007928:	4013      	ands	r3, r2
 800792a:	d00e      	beq.n	800794a <HAL_UART_IRQHandler+0x242>
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	2240      	movs	r2, #64	; 0x40
 8007930:	4013      	ands	r3, r2
 8007932:	d00a      	beq.n	800794a <HAL_UART_IRQHandler+0x242>
  {
    UART_EndTransmit_IT(huart);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	0018      	movs	r0, r3
 8007938:	f000 fb5b 	bl	8007ff2 <UART_EndTransmit_IT>
    return;
 800793c:	46c0      	nop			; (mov r8, r8)
 800793e:	e004      	b.n	800794a <HAL_UART_IRQHandler+0x242>
      return;
 8007940:	46c0      	nop			; (mov r8, r8)
 8007942:	e002      	b.n	800794a <HAL_UART_IRQHandler+0x242>
    return;
 8007944:	46c0      	nop			; (mov r8, r8)
 8007946:	e000      	b.n	800794a <HAL_UART_IRQHandler+0x242>
    return;
 8007948:	46c0      	nop			; (mov r8, r8)
  }

}
 800794a:	46bd      	mov	sp, r7
 800794c:	b008      	add	sp, #32
 800794e:	bd80      	pop	{r7, pc}
 8007950:	0000080f 	.word	0x0000080f
 8007954:	08007fc5 	.word	0x08007fc5

08007958 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007960:	46c0      	nop			; (mov r8, r8)
 8007962:	46bd      	mov	sp, r7
 8007964:	b002      	add	sp, #8
 8007966:	bd80      	pop	{r7, pc}

08007968 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007970:	46c0      	nop			; (mov r8, r8)
 8007972:	46bd      	mov	sp, r7
 8007974:	b002      	add	sp, #8
 8007976:	bd80      	pop	{r7, pc}

08007978 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007980:	46c0      	nop			; (mov r8, r8)
 8007982:	46bd      	mov	sp, r7
 8007984:	b002      	add	sp, #8
 8007986:	bd80      	pop	{r7, pc}

08007988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b088      	sub	sp, #32
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007990:	2300      	movs	r3, #0
 8007992:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007994:	2317      	movs	r3, #23
 8007996:	18fb      	adds	r3, r7, r3
 8007998:	2200      	movs	r2, #0
 800799a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689a      	ldr	r2, [r3, #8]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	431a      	orrs	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	431a      	orrs	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	69db      	ldr	r3, [r3, #28]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4aad      	ldr	r2, [pc, #692]	; (8007c70 <UART_SetConfig+0x2e8>)
 80079bc:	4013      	ands	r3, r2
 80079be:	0019      	movs	r1, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	4aa8      	ldr	r2, [pc, #672]	; (8007c74 <UART_SetConfig+0x2ec>)
 80079d2:	4013      	ands	r3, r2
 80079d4:	0019      	movs	r1, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68da      	ldr	r2, [r3, #12]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a1b      	ldr	r3, [r3, #32]
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	4a9f      	ldr	r2, [pc, #636]	; (8007c78 <UART_SetConfig+0x2f0>)
 80079fa:	4013      	ands	r3, r2
 80079fc:	0019      	movs	r1, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a9b      	ldr	r2, [pc, #620]	; (8007c7c <UART_SetConfig+0x2f4>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d125      	bne.n	8007a5e <UART_SetConfig+0xd6>
 8007a12:	4b9b      	ldr	r3, [pc, #620]	; (8007c80 <UART_SetConfig+0x2f8>)
 8007a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a16:	2203      	movs	r2, #3
 8007a18:	4013      	ands	r3, r2
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d00f      	beq.n	8007a3e <UART_SetConfig+0xb6>
 8007a1e:	d304      	bcc.n	8007a2a <UART_SetConfig+0xa2>
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d011      	beq.n	8007a48 <UART_SetConfig+0xc0>
 8007a24:	2b03      	cmp	r3, #3
 8007a26:	d005      	beq.n	8007a34 <UART_SetConfig+0xac>
 8007a28:	e013      	b.n	8007a52 <UART_SetConfig+0xca>
 8007a2a:	231f      	movs	r3, #31
 8007a2c:	18fb      	adds	r3, r7, r3
 8007a2e:	2200      	movs	r2, #0
 8007a30:	701a      	strb	r2, [r3, #0]
 8007a32:	e022      	b.n	8007a7a <UART_SetConfig+0xf2>
 8007a34:	231f      	movs	r3, #31
 8007a36:	18fb      	adds	r3, r7, r3
 8007a38:	2202      	movs	r2, #2
 8007a3a:	701a      	strb	r2, [r3, #0]
 8007a3c:	e01d      	b.n	8007a7a <UART_SetConfig+0xf2>
 8007a3e:	231f      	movs	r3, #31
 8007a40:	18fb      	adds	r3, r7, r3
 8007a42:	2204      	movs	r2, #4
 8007a44:	701a      	strb	r2, [r3, #0]
 8007a46:	e018      	b.n	8007a7a <UART_SetConfig+0xf2>
 8007a48:	231f      	movs	r3, #31
 8007a4a:	18fb      	adds	r3, r7, r3
 8007a4c:	2208      	movs	r2, #8
 8007a4e:	701a      	strb	r2, [r3, #0]
 8007a50:	e013      	b.n	8007a7a <UART_SetConfig+0xf2>
 8007a52:	231f      	movs	r3, #31
 8007a54:	18fb      	adds	r3, r7, r3
 8007a56:	2210      	movs	r2, #16
 8007a58:	701a      	strb	r2, [r3, #0]
 8007a5a:	46c0      	nop			; (mov r8, r8)
 8007a5c:	e00d      	b.n	8007a7a <UART_SetConfig+0xf2>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a88      	ldr	r2, [pc, #544]	; (8007c84 <UART_SetConfig+0x2fc>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d104      	bne.n	8007a72 <UART_SetConfig+0xea>
 8007a68:	231f      	movs	r3, #31
 8007a6a:	18fb      	adds	r3, r7, r3
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	701a      	strb	r2, [r3, #0]
 8007a70:	e003      	b.n	8007a7a <UART_SetConfig+0xf2>
 8007a72:	231f      	movs	r3, #31
 8007a74:	18fb      	adds	r3, r7, r3
 8007a76:	2210      	movs	r2, #16
 8007a78:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	69da      	ldr	r2, [r3, #28]
 8007a7e:	2380      	movs	r3, #128	; 0x80
 8007a80:	021b      	lsls	r3, r3, #8
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d000      	beq.n	8007a88 <UART_SetConfig+0x100>
 8007a86:	e07d      	b.n	8007b84 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8007a88:	231f      	movs	r3, #31
 8007a8a:	18fb      	adds	r3, r7, r3
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d01c      	beq.n	8007acc <UART_SetConfig+0x144>
 8007a92:	dc02      	bgt.n	8007a9a <UART_SetConfig+0x112>
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d005      	beq.n	8007aa4 <UART_SetConfig+0x11c>
 8007a98:	e04b      	b.n	8007b32 <UART_SetConfig+0x1aa>
 8007a9a:	2b04      	cmp	r3, #4
 8007a9c:	d025      	beq.n	8007aea <UART_SetConfig+0x162>
 8007a9e:	2b08      	cmp	r3, #8
 8007aa0:	d037      	beq.n	8007b12 <UART_SetConfig+0x18a>
 8007aa2:	e046      	b.n	8007b32 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007aa4:	f7fe fd80 	bl	80065a8 <HAL_RCC_GetPCLK1Freq>
 8007aa8:	0003      	movs	r3, r0
 8007aaa:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	005a      	lsls	r2, r3, #1
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	085b      	lsrs	r3, r3, #1
 8007ab6:	18d2      	adds	r2, r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	0019      	movs	r1, r3
 8007abe:	0010      	movs	r0, r2
 8007ac0:	f7f8 fb34 	bl	800012c <__udivsi3>
 8007ac4:	0003      	movs	r3, r0
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	61bb      	str	r3, [r7, #24]
        break;
 8007aca:	e037      	b.n	8007b3c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	085b      	lsrs	r3, r3, #1
 8007ad2:	4a6d      	ldr	r2, [pc, #436]	; (8007c88 <UART_SetConfig+0x300>)
 8007ad4:	189a      	adds	r2, r3, r2
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	0019      	movs	r1, r3
 8007adc:	0010      	movs	r0, r2
 8007ade:	f7f8 fb25 	bl	800012c <__udivsi3>
 8007ae2:	0003      	movs	r3, r0
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	61bb      	str	r3, [r7, #24]
        break;
 8007ae8:	e028      	b.n	8007b3c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aea:	f7fe fcef 	bl	80064cc <HAL_RCC_GetSysClockFreq>
 8007aee:	0003      	movs	r3, r0
 8007af0:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	005a      	lsls	r2, r3, #1
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	085b      	lsrs	r3, r3, #1
 8007afc:	18d2      	adds	r2, r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	0019      	movs	r1, r3
 8007b04:	0010      	movs	r0, r2
 8007b06:	f7f8 fb11 	bl	800012c <__udivsi3>
 8007b0a:	0003      	movs	r3, r0
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	61bb      	str	r3, [r7, #24]
        break;
 8007b10:	e014      	b.n	8007b3c <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	085b      	lsrs	r3, r3, #1
 8007b18:	2280      	movs	r2, #128	; 0x80
 8007b1a:	0252      	lsls	r2, r2, #9
 8007b1c:	189a      	adds	r2, r3, r2
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	0019      	movs	r1, r3
 8007b24:	0010      	movs	r0, r2
 8007b26:	f7f8 fb01 	bl	800012c <__udivsi3>
 8007b2a:	0003      	movs	r3, r0
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	61bb      	str	r3, [r7, #24]
        break;
 8007b30:	e004      	b.n	8007b3c <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8007b32:	2317      	movs	r3, #23
 8007b34:	18fb      	adds	r3, r7, r3
 8007b36:	2201      	movs	r2, #1
 8007b38:	701a      	strb	r2, [r3, #0]
        break;
 8007b3a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	2b0f      	cmp	r3, #15
 8007b40:	d91b      	bls.n	8007b7a <UART_SetConfig+0x1f2>
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	4a51      	ldr	r2, [pc, #324]	; (8007c8c <UART_SetConfig+0x304>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d817      	bhi.n	8007b7a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	200a      	movs	r0, #10
 8007b50:	183b      	adds	r3, r7, r0
 8007b52:	210f      	movs	r1, #15
 8007b54:	438a      	bics	r2, r1
 8007b56:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	085b      	lsrs	r3, r3, #1
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	2207      	movs	r2, #7
 8007b60:	4013      	ands	r3, r2
 8007b62:	b299      	uxth	r1, r3
 8007b64:	183b      	adds	r3, r7, r0
 8007b66:	183a      	adds	r2, r7, r0
 8007b68:	8812      	ldrh	r2, [r2, #0]
 8007b6a:	430a      	orrs	r2, r1
 8007b6c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	183a      	adds	r2, r7, r0
 8007b74:	8812      	ldrh	r2, [r2, #0]
 8007b76:	60da      	str	r2, [r3, #12]
 8007b78:	e06c      	b.n	8007c54 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8007b7a:	2317      	movs	r3, #23
 8007b7c:	18fb      	adds	r3, r7, r3
 8007b7e:	2201      	movs	r2, #1
 8007b80:	701a      	strb	r2, [r3, #0]
 8007b82:	e067      	b.n	8007c54 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8007b84:	231f      	movs	r3, #31
 8007b86:	18fb      	adds	r3, r7, r3
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d01b      	beq.n	8007bc6 <UART_SetConfig+0x23e>
 8007b8e:	dc02      	bgt.n	8007b96 <UART_SetConfig+0x20e>
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d005      	beq.n	8007ba0 <UART_SetConfig+0x218>
 8007b94:	e049      	b.n	8007c2a <UART_SetConfig+0x2a2>
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	d024      	beq.n	8007be4 <UART_SetConfig+0x25c>
 8007b9a:	2b08      	cmp	r3, #8
 8007b9c:	d035      	beq.n	8007c0a <UART_SetConfig+0x282>
 8007b9e:	e044      	b.n	8007c2a <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ba0:	f7fe fd02 	bl	80065a8 <HAL_RCC_GetPCLK1Freq>
 8007ba4:	0003      	movs	r3, r0
 8007ba6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	085a      	lsrs	r2, r3, #1
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	18d2      	adds	r2, r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	0019      	movs	r1, r3
 8007bb8:	0010      	movs	r0, r2
 8007bba:	f7f8 fab7 	bl	800012c <__udivsi3>
 8007bbe:	0003      	movs	r3, r0
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	61bb      	str	r3, [r7, #24]
        break;
 8007bc4:	e036      	b.n	8007c34 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	085b      	lsrs	r3, r3, #1
 8007bcc:	4a30      	ldr	r2, [pc, #192]	; (8007c90 <UART_SetConfig+0x308>)
 8007bce:	189a      	adds	r2, r3, r2
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	0019      	movs	r1, r3
 8007bd6:	0010      	movs	r0, r2
 8007bd8:	f7f8 faa8 	bl	800012c <__udivsi3>
 8007bdc:	0003      	movs	r3, r0
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	61bb      	str	r3, [r7, #24]
        break;
 8007be2:	e027      	b.n	8007c34 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007be4:	f7fe fc72 	bl	80064cc <HAL_RCC_GetSysClockFreq>
 8007be8:	0003      	movs	r3, r0
 8007bea:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	085a      	lsrs	r2, r3, #1
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	18d2      	adds	r2, r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	0019      	movs	r1, r3
 8007bfc:	0010      	movs	r0, r2
 8007bfe:	f7f8 fa95 	bl	800012c <__udivsi3>
 8007c02:	0003      	movs	r3, r0
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	61bb      	str	r3, [r7, #24]
        break;
 8007c08:	e014      	b.n	8007c34 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	085b      	lsrs	r3, r3, #1
 8007c10:	2280      	movs	r2, #128	; 0x80
 8007c12:	0212      	lsls	r2, r2, #8
 8007c14:	189a      	adds	r2, r3, r2
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	0019      	movs	r1, r3
 8007c1c:	0010      	movs	r0, r2
 8007c1e:	f7f8 fa85 	bl	800012c <__udivsi3>
 8007c22:	0003      	movs	r3, r0
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	61bb      	str	r3, [r7, #24]
        break;
 8007c28:	e004      	b.n	8007c34 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8007c2a:	2317      	movs	r3, #23
 8007c2c:	18fb      	adds	r3, r7, r3
 8007c2e:	2201      	movs	r2, #1
 8007c30:	701a      	strb	r2, [r3, #0]
        break;
 8007c32:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	2b0f      	cmp	r3, #15
 8007c38:	d908      	bls.n	8007c4c <UART_SetConfig+0x2c4>
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	4a13      	ldr	r2, [pc, #76]	; (8007c8c <UART_SetConfig+0x304>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d804      	bhi.n	8007c4c <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	60da      	str	r2, [r3, #12]
 8007c4a:	e003      	b.n	8007c54 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8007c4c:	2317      	movs	r3, #23
 8007c4e:	18fb      	adds	r3, r7, r3
 8007c50:	2201      	movs	r2, #1
 8007c52:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007c60:	2317      	movs	r3, #23
 8007c62:	18fb      	adds	r3, r7, r3
 8007c64:	781b      	ldrb	r3, [r3, #0]
}
 8007c66:	0018      	movs	r0, r3
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	b008      	add	sp, #32
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	46c0      	nop			; (mov r8, r8)
 8007c70:	ffff69f3 	.word	0xffff69f3
 8007c74:	ffffcfff 	.word	0xffffcfff
 8007c78:	fffff4ff 	.word	0xfffff4ff
 8007c7c:	40013800 	.word	0x40013800
 8007c80:	40021000 	.word	0x40021000
 8007c84:	40004400 	.word	0x40004400
 8007c88:	00f42400 	.word	0x00f42400
 8007c8c:	0000ffff 	.word	0x0000ffff
 8007c90:	007a1200 	.word	0x007a1200

08007c94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	d00b      	beq.n	8007cbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	4a4a      	ldr	r2, [pc, #296]	; (8007dd8 <UART_AdvFeatureConfig+0x144>)
 8007cae:	4013      	ands	r3, r2
 8007cb0:	0019      	movs	r1, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	d00b      	beq.n	8007ce0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	4a43      	ldr	r2, [pc, #268]	; (8007ddc <UART_AdvFeatureConfig+0x148>)
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	0019      	movs	r1, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	430a      	orrs	r2, r1
 8007cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce4:	2204      	movs	r2, #4
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	d00b      	beq.n	8007d02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	4a3b      	ldr	r2, [pc, #236]	; (8007de0 <UART_AdvFeatureConfig+0x14c>)
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	0019      	movs	r1, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d06:	2208      	movs	r2, #8
 8007d08:	4013      	ands	r3, r2
 8007d0a:	d00b      	beq.n	8007d24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	4a34      	ldr	r2, [pc, #208]	; (8007de4 <UART_AdvFeatureConfig+0x150>)
 8007d14:	4013      	ands	r3, r2
 8007d16:	0019      	movs	r1, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	430a      	orrs	r2, r1
 8007d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d28:	2210      	movs	r2, #16
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	d00b      	beq.n	8007d46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	4a2c      	ldr	r2, [pc, #176]	; (8007de8 <UART_AdvFeatureConfig+0x154>)
 8007d36:	4013      	ands	r3, r2
 8007d38:	0019      	movs	r1, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	d00b      	beq.n	8007d68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	4a25      	ldr	r2, [pc, #148]	; (8007dec <UART_AdvFeatureConfig+0x158>)
 8007d58:	4013      	ands	r3, r2
 8007d5a:	0019      	movs	r1, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6c:	2240      	movs	r2, #64	; 0x40
 8007d6e:	4013      	ands	r3, r2
 8007d70:	d01d      	beq.n	8007dae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	4a1d      	ldr	r2, [pc, #116]	; (8007df0 <UART_AdvFeatureConfig+0x15c>)
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	0019      	movs	r1, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d8e:	2380      	movs	r3, #128	; 0x80
 8007d90:	035b      	lsls	r3, r3, #13
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d10b      	bne.n	8007dae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	4a15      	ldr	r2, [pc, #84]	; (8007df4 <UART_AdvFeatureConfig+0x160>)
 8007d9e:	4013      	ands	r3, r2
 8007da0:	0019      	movs	r1, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	430a      	orrs	r2, r1
 8007dac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	2280      	movs	r2, #128	; 0x80
 8007db4:	4013      	ands	r3, r2
 8007db6:	d00b      	beq.n	8007dd0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	4a0e      	ldr	r2, [pc, #56]	; (8007df8 <UART_AdvFeatureConfig+0x164>)
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	0019      	movs	r1, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	605a      	str	r2, [r3, #4]
  }
}
 8007dd0:	46c0      	nop			; (mov r8, r8)
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	b002      	add	sp, #8
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	fffdffff 	.word	0xfffdffff
 8007ddc:	fffeffff 	.word	0xfffeffff
 8007de0:	fffbffff 	.word	0xfffbffff
 8007de4:	ffff7fff 	.word	0xffff7fff
 8007de8:	ffffefff 	.word	0xffffefff
 8007dec:	ffffdfff 	.word	0xffffdfff
 8007df0:	ffefffff 	.word	0xffefffff
 8007df4:	ff9fffff 	.word	0xff9fffff
 8007df8:	fff7ffff 	.word	0xfff7ffff

08007dfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af02      	add	r7, sp, #8
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007e0a:	f7fc fa8f 	bl	800432c <HAL_GetTick>
 8007e0e:	0003      	movs	r3, r0
 8007e10:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2208      	movs	r2, #8
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	2b08      	cmp	r3, #8
 8007e1e:	d10d      	bne.n	8007e3c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	2380      	movs	r3, #128	; 0x80
 8007e24:	0399      	lsls	r1, r3, #14
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	4b16      	ldr	r3, [pc, #88]	; (8007e84 <UART_CheckIdleState+0x88>)
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	0013      	movs	r3, r2
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f000 f82a 	bl	8007e88 <UART_WaitOnFlagUntilTimeout>
 8007e34:	1e03      	subs	r3, r0, #0
 8007e36:	d001      	beq.n	8007e3c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e01f      	b.n	8007e7c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2204      	movs	r2, #4
 8007e44:	4013      	ands	r3, r2
 8007e46:	2b04      	cmp	r3, #4
 8007e48:	d10d      	bne.n	8007e66 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	2380      	movs	r3, #128	; 0x80
 8007e4e:	03d9      	lsls	r1, r3, #15
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <UART_CheckIdleState+0x88>)
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	0013      	movs	r3, r2
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f000 f815 	bl	8007e88 <UART_WaitOnFlagUntilTimeout>
 8007e5e:	1e03      	subs	r3, r0, #0
 8007e60:	d001      	beq.n	8007e66 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e00a      	b.n	8007e7c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2270      	movs	r2, #112	; 0x70
 8007e76:	2100      	movs	r1, #0
 8007e78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	b004      	add	sp, #16
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	01ffffff 	.word	0x01ffffff

08007e88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	603b      	str	r3, [r7, #0]
 8007e94:	1dfb      	adds	r3, r7, #7
 8007e96:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e98:	e05d      	b.n	8007f56 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	d05a      	beq.n	8007f56 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ea0:	f7fc fa44 	bl	800432c <HAL_GetTick>
 8007ea4:	0002      	movs	r2, r0
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d302      	bcc.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d11b      	bne.n	8007eee <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	492f      	ldr	r1, [pc, #188]	; (8007f80 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8007ec2:	400a      	ands	r2, r1
 8007ec4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689a      	ldr	r2, [r3, #8]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2101      	movs	r1, #1
 8007ed2:	438a      	bics	r2, r1
 8007ed4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2220      	movs	r2, #32
 8007eda:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2270      	movs	r2, #112	; 0x70
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e043      	b.n	8007f76 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2204      	movs	r2, #4
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	d02d      	beq.n	8007f56 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	69da      	ldr	r2, [r3, #28]
 8007f00:	2380      	movs	r3, #128	; 0x80
 8007f02:	011b      	lsls	r3, r3, #4
 8007f04:	401a      	ands	r2, r3
 8007f06:	2380      	movs	r3, #128	; 0x80
 8007f08:	011b      	lsls	r3, r3, #4
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d123      	bne.n	8007f56 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2280      	movs	r2, #128	; 0x80
 8007f14:	0112      	lsls	r2, r2, #4
 8007f16:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4917      	ldr	r1, [pc, #92]	; (8007f80 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8007f24:	400a      	ands	r2, r1
 8007f26:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	689a      	ldr	r2, [r3, #8]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2101      	movs	r1, #1
 8007f34:	438a      	bics	r2, r1
 8007f36:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2220      	movs	r2, #32
 8007f42:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2220      	movs	r2, #32
 8007f48:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2270      	movs	r2, #112	; 0x70
 8007f4e:	2100      	movs	r1, #0
 8007f50:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e00f      	b.n	8007f76 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	69db      	ldr	r3, [r3, #28]
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	4013      	ands	r3, r2
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	425a      	negs	r2, r3
 8007f66:	4153      	adcs	r3, r2
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	001a      	movs	r2, r3
 8007f6c:	1dfb      	adds	r3, r7, #7
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d092      	beq.n	8007e9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	0018      	movs	r0, r3
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	b004      	add	sp, #16
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	46c0      	nop			; (mov r8, r8)
 8007f80:	fffffe5f 	.word	0xfffffe5f

08007f84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	490a      	ldr	r1, [pc, #40]	; (8007fc0 <UART_EndRxTransfer+0x3c>)
 8007f98:	400a      	ands	r2, r1
 8007f9a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689a      	ldr	r2, [r3, #8]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	438a      	bics	r2, r1
 8007faa:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007fb8:	46c0      	nop			; (mov r8, r8)
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	b002      	add	sp, #8
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	fffffedf 	.word	0xfffffedf

08007fc4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	225a      	movs	r2, #90	; 0x5a
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2252      	movs	r2, #82	; 0x52
 8007fde:	2100      	movs	r1, #0
 8007fe0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	0018      	movs	r0, r3
 8007fe6:	f7ff fcc7 	bl	8007978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fea:	46c0      	nop			; (mov r8, r8)
 8007fec:	46bd      	mov	sp, r7
 8007fee:	b004      	add	sp, #16
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b082      	sub	sp, #8
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2140      	movs	r1, #64	; 0x40
 8008006:	438a      	bics	r2, r1
 8008008:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2220      	movs	r2, #32
 800800e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	0018      	movs	r0, r3
 800801a:	f7ff fc9d 	bl	8007958 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800801e:	46c0      	nop			; (mov r8, r8)
 8008020:	46bd      	mov	sp, r7
 8008022:	b002      	add	sp, #8
 8008024:	bd80      	pop	{r7, pc}
	...

08008028 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008030:	230e      	movs	r3, #14
 8008032:	18fb      	adds	r3, r7, r3
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	215c      	movs	r1, #92	; 0x5c
 8008038:	5a52      	ldrh	r2, [r2, r1]
 800803a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008040:	2b22      	cmp	r3, #34	; 0x22
 8008042:	d140      	bne.n	80080c6 <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	210c      	movs	r1, #12
 800804a:	187b      	adds	r3, r7, r1
 800804c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800804e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008050:	187b      	adds	r3, r7, r1
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	b2da      	uxtb	r2, r3
 8008056:	230e      	movs	r3, #14
 8008058:	18fb      	adds	r3, r7, r3
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	b2d9      	uxtb	r1, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008062:	400a      	ands	r2, r1
 8008064:	b2d2      	uxtb	r2, r2
 8008066:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800806c:	1c5a      	adds	r2, r3, #1
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	225a      	movs	r2, #90	; 0x5a
 8008076:	5a9b      	ldrh	r3, [r3, r2]
 8008078:	b29b      	uxth	r3, r3
 800807a:	3b01      	subs	r3, #1
 800807c:	b299      	uxth	r1, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	225a      	movs	r2, #90	; 0x5a
 8008082:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	225a      	movs	r2, #90	; 0x5a
 8008088:	5a9b      	ldrh	r3, [r3, r2]
 800808a:	b29b      	uxth	r3, r3
 800808c:	2b00      	cmp	r3, #0
 800808e:	d122      	bne.n	80080d6 <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4911      	ldr	r1, [pc, #68]	; (80080e0 <UART_RxISR_8BIT+0xb8>)
 800809c:	400a      	ands	r2, r1
 800809e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	689a      	ldr	r2, [r3, #8]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2101      	movs	r1, #1
 80080ac:	438a      	bics	r2, r1
 80080ae:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2220      	movs	r2, #32
 80080b4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	0018      	movs	r0, r3
 80080c0:	f7ff fc52 	bl	8007968 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080c4:	e007      	b.n	80080d6 <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	699a      	ldr	r2, [r3, #24]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2108      	movs	r1, #8
 80080d2:	430a      	orrs	r2, r1
 80080d4:	619a      	str	r2, [r3, #24]
}
 80080d6:	46c0      	nop			; (mov r8, r8)
 80080d8:	46bd      	mov	sp, r7
 80080da:	b004      	add	sp, #16
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	46c0      	nop			; (mov r8, r8)
 80080e0:	fffffedf 	.word	0xfffffedf

080080e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80080ec:	230e      	movs	r3, #14
 80080ee:	18fb      	adds	r3, r7, r3
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	215c      	movs	r1, #92	; 0x5c
 80080f4:	5a52      	ldrh	r2, [r2, r1]
 80080f6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080fc:	2b22      	cmp	r3, #34	; 0x22
 80080fe:	d140      	bne.n	8008182 <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	210c      	movs	r1, #12
 8008106:	187b      	adds	r3, r7, r1
 8008108:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800810a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008110:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008112:	187b      	adds	r3, r7, r1
 8008114:	220e      	movs	r2, #14
 8008116:	18ba      	adds	r2, r7, r2
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	8812      	ldrh	r2, [r2, #0]
 800811c:	4013      	ands	r3, r2
 800811e:	b29a      	uxth	r2, r3
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008128:	1c9a      	adds	r2, r3, #2
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	225a      	movs	r2, #90	; 0x5a
 8008132:	5a9b      	ldrh	r3, [r3, r2]
 8008134:	b29b      	uxth	r3, r3
 8008136:	3b01      	subs	r3, #1
 8008138:	b299      	uxth	r1, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	225a      	movs	r2, #90	; 0x5a
 800813e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	225a      	movs	r2, #90	; 0x5a
 8008144:	5a9b      	ldrh	r3, [r3, r2]
 8008146:	b29b      	uxth	r3, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	d122      	bne.n	8008192 <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4911      	ldr	r1, [pc, #68]	; (800819c <UART_RxISR_16BIT+0xb8>)
 8008158:	400a      	ands	r2, r1
 800815a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	689a      	ldr	r2, [r3, #8]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2101      	movs	r1, #1
 8008168:	438a      	bics	r2, r1
 800816a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2220      	movs	r2, #32
 8008170:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	0018      	movs	r0, r3
 800817c:	f7ff fbf4 	bl	8007968 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008180:	e007      	b.n	8008192 <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	699a      	ldr	r2, [r3, #24]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2108      	movs	r1, #8
 800818e:	430a      	orrs	r2, r1
 8008190:	619a      	str	r2, [r3, #24]
}
 8008192:	46c0      	nop			; (mov r8, r8)
 8008194:	46bd      	mov	sp, r7
 8008196:	b004      	add	sp, #16
 8008198:	bd80      	pop	{r7, pc}
 800819a:	46c0      	nop			; (mov r8, r8)
 800819c:	fffffedf 	.word	0xfffffedf

080081a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	0002      	movs	r2, r0
 80081a8:	1dbb      	adds	r3, r7, #6
 80081aa:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80081ac:	2300      	movs	r3, #0
 80081ae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80081b0:	1dbb      	adds	r3, r7, #6
 80081b2:	2200      	movs	r2, #0
 80081b4:	5e9b      	ldrsh	r3, [r3, r2]
 80081b6:	2b84      	cmp	r3, #132	; 0x84
 80081b8:	d006      	beq.n	80081c8 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80081ba:	1dbb      	adds	r3, r7, #6
 80081bc:	2200      	movs	r2, #0
 80081be:	5e9a      	ldrsh	r2, [r3, r2]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	18d3      	adds	r3, r2, r3
 80081c4:	3303      	adds	r3, #3
 80081c6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80081c8:	68fb      	ldr	r3, [r7, #12]
}
 80081ca:	0018      	movs	r0, r3
 80081cc:	46bd      	mov	sp, r7
 80081ce:	b004      	add	sp, #16
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80081d6:	f000 fa95 	bl	8008704 <vTaskStartScheduler>
  
  return osOK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	0018      	movs	r0, r3
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80081e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081e4:	b089      	sub	sp, #36	; 0x24
 80081e6:	af04      	add	r7, sp, #16
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d020      	beq.n	8008236 <osThreadCreate+0x54>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d01c      	beq.n	8008236 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685c      	ldr	r4, [r3, #4]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681d      	ldr	r5, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	691e      	ldr	r6, [r3, #16]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2208      	movs	r2, #8
 800820c:	5e9b      	ldrsh	r3, [r3, r2]
 800820e:	0018      	movs	r0, r3
 8008210:	f7ff ffc6 	bl	80081a0 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	695a      	ldr	r2, [r3, #20]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	9302      	str	r3, [sp, #8]
 8008220:	9201      	str	r2, [sp, #4]
 8008222:	9000      	str	r0, [sp, #0]
 8008224:	000b      	movs	r3, r1
 8008226:	0032      	movs	r2, r6
 8008228:	0029      	movs	r1, r5
 800822a:	0020      	movs	r0, r4
 800822c:	f000 f899 	bl	8008362 <xTaskCreateStatic>
 8008230:	0003      	movs	r3, r0
 8008232:	60fb      	str	r3, [r7, #12]
 8008234:	e01d      	b.n	8008272 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685c      	ldr	r4, [r3, #4]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008242:	b29e      	uxth	r6, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2208      	movs	r2, #8
 8008248:	5e9b      	ldrsh	r3, [r3, r2]
 800824a:	0018      	movs	r0, r3
 800824c:	f7ff ffa8 	bl	80081a0 <makeFreeRtosPriority>
 8008250:	0001      	movs	r1, r0
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	230c      	movs	r3, #12
 8008256:	18fb      	adds	r3, r7, r3
 8008258:	9301      	str	r3, [sp, #4]
 800825a:	9100      	str	r1, [sp, #0]
 800825c:	0013      	movs	r3, r2
 800825e:	0032      	movs	r2, r6
 8008260:	0029      	movs	r1, r5
 8008262:	0020      	movs	r0, r4
 8008264:	f000 f8c0 	bl	80083e8 <xTaskCreate>
 8008268:	0003      	movs	r3, r0
 800826a:	2b01      	cmp	r3, #1
 800826c:	d001      	beq.n	8008272 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 800826e:	2300      	movs	r3, #0
 8008270:	e000      	b.n	8008274 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008272:	68fb      	ldr	r3, [r7, #12]
}
 8008274:	0018      	movs	r0, r3
 8008276:	46bd      	mov	sp, r7
 8008278:	b005      	add	sp, #20
 800827a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800827c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	3308      	adds	r3, #8
 8008288:	001a      	movs	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	4252      	negs	r2, r2
 8008294:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	3308      	adds	r3, #8
 800829a:	001a      	movs	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3308      	adds	r3, #8
 80082a4:	001a      	movs	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80082b0:	46c0      	nop			; (mov r8, r8)
 80082b2:	46bd      	mov	sp, r7
 80082b4:	b002      	add	sp, #8
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80082c6:	46c0      	nop			; (mov r8, r8)
 80082c8:	46bd      	mov	sp, r7
 80082ca:	b002      	add	sp, #8
 80082cc:	bd80      	pop	{r7, pc}

080082ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b084      	sub	sp, #16
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	689a      	ldr	r2, [r3, #8]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	683a      	ldr	r2, [r7, #0]
 80082f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	1c5a      	adds	r2, r3, #1
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	601a      	str	r2, [r3, #0]
}
 800830a:	46c0      	nop			; (mov r8, r8)
 800830c:	46bd      	mov	sp, r7
 800830e:	b004      	add	sp, #16
 8008310:	bd80      	pop	{r7, pc}

08008312 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b084      	sub	sp, #16
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	6892      	ldr	r2, [r2, #8]
 8008328:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	6852      	ldr	r2, [r2, #4]
 8008332:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	429a      	cmp	r2, r3
 800833c:	d103      	bne.n	8008346 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	689a      	ldr	r2, [r3, #8]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	1e5a      	subs	r2, r3, #1
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
}
 800835a:	0018      	movs	r0, r3
 800835c:	46bd      	mov	sp, r7
 800835e:	b004      	add	sp, #16
 8008360:	bd80      	pop	{r7, pc}

08008362 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008362:	b590      	push	{r4, r7, lr}
 8008364:	b08d      	sub	sp, #52	; 0x34
 8008366:	af04      	add	r7, sp, #16
 8008368:	60f8      	str	r0, [r7, #12]
 800836a:	60b9      	str	r1, [r7, #8]
 800836c:	607a      	str	r2, [r7, #4]
 800836e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008372:	2b00      	cmp	r3, #0
 8008374:	d101      	bne.n	800837a <xTaskCreateStatic+0x18>
 8008376:	b672      	cpsid	i
 8008378:	e7fe      	b.n	8008378 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <xTaskCreateStatic+0x22>
 8008380:	b672      	cpsid	i
 8008382:	e7fe      	b.n	8008382 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008384:	2354      	movs	r3, #84	; 0x54
 8008386:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	2b54      	cmp	r3, #84	; 0x54
 800838c:	d001      	beq.n	8008392 <xTaskCreateStatic+0x30>
 800838e:	b672      	cpsid	i
 8008390:	e7fe      	b.n	8008390 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008394:	2b00      	cmp	r3, #0
 8008396:	d020      	beq.n	80083da <xTaskCreateStatic+0x78>
 8008398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800839a:	2b00      	cmp	r3, #0
 800839c:	d01d      	beq.n	80083da <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800839e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a0:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083a6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	2251      	movs	r2, #81	; 0x51
 80083ac:	2102      	movs	r1, #2
 80083ae:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80083b0:	683c      	ldr	r4, [r7, #0]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	68b9      	ldr	r1, [r7, #8]
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	2300      	movs	r3, #0
 80083ba:	9303      	str	r3, [sp, #12]
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	9302      	str	r3, [sp, #8]
 80083c0:	2318      	movs	r3, #24
 80083c2:	18fb      	adds	r3, r7, r3
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	0023      	movs	r3, r4
 80083cc:	f000 f858 	bl	8008480 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	0018      	movs	r0, r3
 80083d4:	f000 f8ce 	bl	8008574 <prvAddNewTaskToReadyList>
 80083d8:	e001      	b.n	80083de <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80083da:	2300      	movs	r3, #0
 80083dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80083de:	69bb      	ldr	r3, [r7, #24]
	}
 80083e0:	0018      	movs	r0, r3
 80083e2:	46bd      	mov	sp, r7
 80083e4:	b009      	add	sp, #36	; 0x24
 80083e6:	bd90      	pop	{r4, r7, pc}

080083e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80083e8:	b590      	push	{r4, r7, lr}
 80083ea:	b08d      	sub	sp, #52	; 0x34
 80083ec:	af04      	add	r7, sp, #16
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	603b      	str	r3, [r7, #0]
 80083f4:	1dbb      	adds	r3, r7, #6
 80083f6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083f8:	1dbb      	adds	r3, r7, #6
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	0018      	movs	r0, r3
 8008400:	f000 fd6e 	bl	8008ee0 <pvPortMalloc>
 8008404:	0003      	movs	r3, r0
 8008406:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d010      	beq.n	8008430 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800840e:	2054      	movs	r0, #84	; 0x54
 8008410:	f000 fd66 	bl	8008ee0 <pvPortMalloc>
 8008414:	0003      	movs	r3, r0
 8008416:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d003      	beq.n	8008426 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	631a      	str	r2, [r3, #48]	; 0x30
 8008424:	e006      	b.n	8008434 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	0018      	movs	r0, r3
 800842a:	f000 fdff 	bl	800902c <vPortFree>
 800842e:	e001      	b.n	8008434 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008430:	2300      	movs	r3, #0
 8008432:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d01a      	beq.n	8008470 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	2251      	movs	r2, #81	; 0x51
 800843e:	2100      	movs	r1, #0
 8008440:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008442:	1dbb      	adds	r3, r7, #6
 8008444:	881a      	ldrh	r2, [r3, #0]
 8008446:	683c      	ldr	r4, [r7, #0]
 8008448:	68b9      	ldr	r1, [r7, #8]
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	2300      	movs	r3, #0
 800844e:	9303      	str	r3, [sp, #12]
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	9302      	str	r3, [sp, #8]
 8008454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008456:	9301      	str	r3, [sp, #4]
 8008458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	0023      	movs	r3, r4
 800845e:	f000 f80f 	bl	8008480 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	0018      	movs	r0, r3
 8008466:	f000 f885 	bl	8008574 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800846a:	2301      	movs	r3, #1
 800846c:	61bb      	str	r3, [r7, #24]
 800846e:	e002      	b.n	8008476 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008470:	2301      	movs	r3, #1
 8008472:	425b      	negs	r3, r3
 8008474:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008476:	69bb      	ldr	r3, [r7, #24]
	}
 8008478:	0018      	movs	r0, r3
 800847a:	46bd      	mov	sp, r7
 800847c:	b009      	add	sp, #36	; 0x24
 800847e:	bd90      	pop	{r4, r7, pc}

08008480 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
 800848c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800848e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4936      	ldr	r1, [pc, #216]	; (8008570 <prvInitialiseNewTask+0xf0>)
 8008496:	468c      	mov	ip, r1
 8008498:	4463      	add	r3, ip
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	18d3      	adds	r3, r2, r3
 800849e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	2207      	movs	r2, #7
 80084a4:	4393      	bics	r3, r2
 80084a6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	2207      	movs	r2, #7
 80084ac:	4013      	ands	r3, r2
 80084ae:	d001      	beq.n	80084b4 <prvInitialiseNewTask+0x34>
 80084b0:	b672      	cpsid	i
 80084b2:	e7fe      	b.n	80084b2 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084b4:	2300      	movs	r3, #0
 80084b6:	617b      	str	r3, [r7, #20]
 80084b8:	e013      	b.n	80084e2 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	18d3      	adds	r3, r2, r3
 80084c0:	7818      	ldrb	r0, [r3, #0]
 80084c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084c4:	2134      	movs	r1, #52	; 0x34
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	18d3      	adds	r3, r2, r3
 80084ca:	185b      	adds	r3, r3, r1
 80084cc:	1c02      	adds	r2, r0, #0
 80084ce:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80084d0:	68ba      	ldr	r2, [r7, #8]
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	18d3      	adds	r3, r2, r3
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d006      	beq.n	80084ea <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	3301      	adds	r3, #1
 80084e0:	617b      	str	r3, [r7, #20]
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	2b0f      	cmp	r3, #15
 80084e6:	d9e8      	bls.n	80084ba <prvInitialiseNewTask+0x3a>
 80084e8:	e000      	b.n	80084ec <prvInitialiseNewTask+0x6c>
		{
			break;
 80084ea:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ee:	2243      	movs	r2, #67	; 0x43
 80084f0:	2100      	movs	r1, #0
 80084f2:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	2b06      	cmp	r3, #6
 80084f8:	d901      	bls.n	80084fe <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80084fa:	2306      	movs	r3, #6
 80084fc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80084fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008500:	6a3a      	ldr	r2, [r7, #32]
 8008502:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008506:	6a3a      	ldr	r2, [r7, #32]
 8008508:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800850a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850c:	2200      	movs	r2, #0
 800850e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008512:	3304      	adds	r3, #4
 8008514:	0018      	movs	r0, r3
 8008516:	f7ff fecf 	bl	80082b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800851a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851c:	3318      	adds	r3, #24
 800851e:	0018      	movs	r0, r3
 8008520:	f7ff feca 	bl	80082b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008528:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800852a:	6a3b      	ldr	r3, [r7, #32]
 800852c:	2207      	movs	r2, #7
 800852e:	1ad2      	subs	r2, r2, r3
 8008530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008532:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008538:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800853a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853c:	2200      	movs	r2, #0
 800853e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	2250      	movs	r2, #80	; 0x50
 8008544:	2100      	movs	r1, #0
 8008546:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	68f9      	ldr	r1, [r7, #12]
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	0018      	movs	r0, r3
 8008550:	f000 fb92 	bl	8008c78 <pxPortInitialiseStack>
 8008554:	0002      	movs	r2, r0
 8008556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008558:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	2b00      	cmp	r3, #0
 800855e:	d002      	beq.n	8008566 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008566:	46c0      	nop			; (mov r8, r8)
 8008568:	46bd      	mov	sp, r7
 800856a:	b006      	add	sp, #24
 800856c:	bd80      	pop	{r7, pc}
 800856e:	46c0      	nop			; (mov r8, r8)
 8008570:	3fffffff 	.word	0x3fffffff

08008574 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800857c:	f000 fc18 	bl	8008db0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008580:	4b28      	ldr	r3, [pc, #160]	; (8008624 <prvAddNewTaskToReadyList+0xb0>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	1c5a      	adds	r2, r3, #1
 8008586:	4b27      	ldr	r3, [pc, #156]	; (8008624 <prvAddNewTaskToReadyList+0xb0>)
 8008588:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800858a:	4b27      	ldr	r3, [pc, #156]	; (8008628 <prvAddNewTaskToReadyList+0xb4>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d109      	bne.n	80085a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008592:	4b25      	ldr	r3, [pc, #148]	; (8008628 <prvAddNewTaskToReadyList+0xb4>)
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008598:	4b22      	ldr	r3, [pc, #136]	; (8008624 <prvAddNewTaskToReadyList+0xb0>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d110      	bne.n	80085c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80085a0:	f000 faac 	bl	8008afc <prvInitialiseTaskLists>
 80085a4:	e00d      	b.n	80085c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80085a6:	4b21      	ldr	r3, [pc, #132]	; (800862c <prvAddNewTaskToReadyList+0xb8>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d109      	bne.n	80085c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085ae:	4b1e      	ldr	r3, [pc, #120]	; (8008628 <prvAddNewTaskToReadyList+0xb4>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d802      	bhi.n	80085c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80085bc:	4b1a      	ldr	r3, [pc, #104]	; (8008628 <prvAddNewTaskToReadyList+0xb4>)
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80085c2:	4b1b      	ldr	r3, [pc, #108]	; (8008630 <prvAddNewTaskToReadyList+0xbc>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	4b19      	ldr	r3, [pc, #100]	; (8008630 <prvAddNewTaskToReadyList+0xbc>)
 80085ca:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d0:	4b18      	ldr	r3, [pc, #96]	; (8008634 <prvAddNewTaskToReadyList+0xc0>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d903      	bls.n	80085e0 <prvAddNewTaskToReadyList+0x6c>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085dc:	4b15      	ldr	r3, [pc, #84]	; (8008634 <prvAddNewTaskToReadyList+0xc0>)
 80085de:	601a      	str	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e4:	0013      	movs	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	189b      	adds	r3, r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4a12      	ldr	r2, [pc, #72]	; (8008638 <prvAddNewTaskToReadyList+0xc4>)
 80085ee:	189a      	adds	r2, r3, r2
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3304      	adds	r3, #4
 80085f4:	0019      	movs	r1, r3
 80085f6:	0010      	movs	r0, r2
 80085f8:	f7ff fe69 	bl	80082ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80085fc:	f000 fbea 	bl	8008dd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008600:	4b0a      	ldr	r3, [pc, #40]	; (800862c <prvAddNewTaskToReadyList+0xb8>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d008      	beq.n	800861a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008608:	4b07      	ldr	r3, [pc, #28]	; (8008628 <prvAddNewTaskToReadyList+0xb4>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008612:	429a      	cmp	r2, r3
 8008614:	d201      	bcs.n	800861a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008616:	f000 fbbb 	bl	8008d90 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800861a:	46c0      	nop			; (mov r8, r8)
 800861c:	46bd      	mov	sp, r7
 800861e:	b002      	add	sp, #8
 8008620:	bd80      	pop	{r7, pc}
 8008622:	46c0      	nop			; (mov r8, r8)
 8008624:	2000069c 	.word	0x2000069c
 8008628:	2000059c 	.word	0x2000059c
 800862c:	200006a8 	.word	0x200006a8
 8008630:	200006b8 	.word	0x200006b8
 8008634:	200006a4 	.word	0x200006a4
 8008638:	200005a0 	.word	0x200005a0

0800863c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008644:	f000 fbb4 	bl	8008db0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d102      	bne.n	8008654 <vTaskDelete+0x18>
 800864e:	4b26      	ldr	r3, [pc, #152]	; (80086e8 <vTaskDelete+0xac>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	e000      	b.n	8008656 <vTaskDelete+0x1a>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	3304      	adds	r3, #4
 800865c:	0018      	movs	r0, r3
 800865e:	f7ff fe58 	bl	8008312 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008666:	2b00      	cmp	r3, #0
 8008668:	d004      	beq.n	8008674 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	3318      	adds	r3, #24
 800866e:	0018      	movs	r0, r3
 8008670:	f7ff fe4f 	bl	8008312 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008674:	4b1d      	ldr	r3, [pc, #116]	; (80086ec <vTaskDelete+0xb0>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	1c5a      	adds	r2, r3, #1
 800867a:	4b1c      	ldr	r3, [pc, #112]	; (80086ec <vTaskDelete+0xb0>)
 800867c:	601a      	str	r2, [r3, #0]

			if( pxTCB == pxCurrentTCB )
 800867e:	4b1a      	ldr	r3, [pc, #104]	; (80086e8 <vTaskDelete+0xac>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	429a      	cmp	r2, r3
 8008686:	d10c      	bne.n	80086a2 <vTaskDelete+0x66>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	1d1a      	adds	r2, r3, #4
 800868c:	4b18      	ldr	r3, [pc, #96]	; (80086f0 <vTaskDelete+0xb4>)
 800868e:	0011      	movs	r1, r2
 8008690:	0018      	movs	r0, r3
 8008692:	f7ff fe1c 	bl	80082ce <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008696:	4b17      	ldr	r3, [pc, #92]	; (80086f4 <vTaskDelete+0xb8>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	1c5a      	adds	r2, r3, #1
 800869c:	4b15      	ldr	r3, [pc, #84]	; (80086f4 <vTaskDelete+0xb8>)
 800869e:	601a      	str	r2, [r3, #0]
 80086a0:	e00a      	b.n	80086b8 <vTaskDelete+0x7c>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80086a2:	4b15      	ldr	r3, [pc, #84]	; (80086f8 <vTaskDelete+0xbc>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	1e5a      	subs	r2, r3, #1
 80086a8:	4b13      	ldr	r3, [pc, #76]	; (80086f8 <vTaskDelete+0xbc>)
 80086aa:	601a      	str	r2, [r3, #0]
				prvDeleteTCB( pxTCB );
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	0018      	movs	r0, r3
 80086b0:	f000 fa96 	bl	8008be0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80086b4:	f000 fabc 	bl	8008c30 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80086b8:	f000 fb8c 	bl	8008dd4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80086bc:	4b0f      	ldr	r3, [pc, #60]	; (80086fc <vTaskDelete+0xc0>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00c      	beq.n	80086de <vTaskDelete+0xa2>
		{
			if( pxTCB == pxCurrentTCB )
 80086c4:	4b08      	ldr	r3, [pc, #32]	; (80086e8 <vTaskDelete+0xac>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d107      	bne.n	80086de <vTaskDelete+0xa2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80086ce:	4b0c      	ldr	r3, [pc, #48]	; (8008700 <vTaskDelete+0xc4>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <vTaskDelete+0x9e>
 80086d6:	b672      	cpsid	i
 80086d8:	e7fe      	b.n	80086d8 <vTaskDelete+0x9c>
				portYIELD_WITHIN_API();
 80086da:	f000 fb59 	bl	8008d90 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80086de:	46c0      	nop			; (mov r8, r8)
 80086e0:	46bd      	mov	sp, r7
 80086e2:	b004      	add	sp, #16
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	46c0      	nop			; (mov r8, r8)
 80086e8:	2000059c 	.word	0x2000059c
 80086ec:	200006b8 	.word	0x200006b8
 80086f0:	20000670 	.word	0x20000670
 80086f4:	20000684 	.word	0x20000684
 80086f8:	2000069c 	.word	0x2000069c
 80086fc:	200006a8 	.word	0x200006a8
 8008700:	200006c4 	.word	0x200006c4

08008704 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008704:	b590      	push	{r4, r7, lr}
 8008706:	b089      	sub	sp, #36	; 0x24
 8008708:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800870a:	2300      	movs	r3, #0
 800870c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800870e:	2300      	movs	r3, #0
 8008710:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008712:	003a      	movs	r2, r7
 8008714:	1d39      	adds	r1, r7, #4
 8008716:	2308      	movs	r3, #8
 8008718:	18fb      	adds	r3, r7, r3
 800871a:	0018      	movs	r0, r3
 800871c:	f7fa ff0c 	bl	8003538 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008720:	683c      	ldr	r4, [r7, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	4918      	ldr	r1, [pc, #96]	; (8008788 <vTaskStartScheduler+0x84>)
 8008728:	4818      	ldr	r0, [pc, #96]	; (800878c <vTaskStartScheduler+0x88>)
 800872a:	9202      	str	r2, [sp, #8]
 800872c:	9301      	str	r3, [sp, #4]
 800872e:	2300      	movs	r3, #0
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	2300      	movs	r3, #0
 8008734:	0022      	movs	r2, r4
 8008736:	f7ff fe14 	bl	8008362 <xTaskCreateStatic>
 800873a:	0002      	movs	r2, r0
 800873c:	4b14      	ldr	r3, [pc, #80]	; (8008790 <vTaskStartScheduler+0x8c>)
 800873e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008740:	4b13      	ldr	r3, [pc, #76]	; (8008790 <vTaskStartScheduler+0x8c>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008748:	2301      	movs	r3, #1
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	e001      	b.n	8008752 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800874e:	2300      	movs	r3, #0
 8008750:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d10d      	bne.n	8008774 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8008758:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800875a:	4b0e      	ldr	r3, [pc, #56]	; (8008794 <vTaskStartScheduler+0x90>)
 800875c:	2201      	movs	r2, #1
 800875e:	4252      	negs	r2, r2
 8008760:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008762:	4b0d      	ldr	r3, [pc, #52]	; (8008798 <vTaskStartScheduler+0x94>)
 8008764:	2201      	movs	r2, #1
 8008766:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008768:	4b0c      	ldr	r3, [pc, #48]	; (800879c <vTaskStartScheduler+0x98>)
 800876a:	2200      	movs	r2, #0
 800876c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800876e:	f000 faeb 	bl	8008d48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008772:	e004      	b.n	800877e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	3301      	adds	r3, #1
 8008778:	d101      	bne.n	800877e <vTaskStartScheduler+0x7a>
 800877a:	b672      	cpsid	i
 800877c:	e7fe      	b.n	800877c <vTaskStartScheduler+0x78>
}
 800877e:	46c0      	nop			; (mov r8, r8)
 8008780:	46bd      	mov	sp, r7
 8008782:	b005      	add	sp, #20
 8008784:	bd90      	pop	{r4, r7, pc}
 8008786:	46c0      	nop			; (mov r8, r8)
 8008788:	0800b854 	.word	0x0800b854
 800878c:	08008add 	.word	0x08008add
 8008790:	200006c0 	.word	0x200006c0
 8008794:	200006bc 	.word	0x200006bc
 8008798:	200006a8 	.word	0x200006a8
 800879c:	200006a0 	.word	0x200006a0

080087a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80087a4:	4b03      	ldr	r3, [pc, #12]	; (80087b4 <vTaskSuspendAll+0x14>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	1c5a      	adds	r2, r3, #1
 80087aa:	4b02      	ldr	r3, [pc, #8]	; (80087b4 <vTaskSuspendAll+0x14>)
 80087ac:	601a      	str	r2, [r3, #0]
}
 80087ae:	46c0      	nop			; (mov r8, r8)
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	200006c4 	.word	0x200006c4

080087b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80087be:	2300      	movs	r3, #0
 80087c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80087c2:	2300      	movs	r3, #0
 80087c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80087c6:	4b3a      	ldr	r3, [pc, #232]	; (80088b0 <xTaskResumeAll+0xf8>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <xTaskResumeAll+0x1a>
 80087ce:	b672      	cpsid	i
 80087d0:	e7fe      	b.n	80087d0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80087d2:	f000 faed 	bl	8008db0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80087d6:	4b36      	ldr	r3, [pc, #216]	; (80088b0 <xTaskResumeAll+0xf8>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	1e5a      	subs	r2, r3, #1
 80087dc:	4b34      	ldr	r3, [pc, #208]	; (80088b0 <xTaskResumeAll+0xf8>)
 80087de:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087e0:	4b33      	ldr	r3, [pc, #204]	; (80088b0 <xTaskResumeAll+0xf8>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d15b      	bne.n	80088a0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087e8:	4b32      	ldr	r3, [pc, #200]	; (80088b4 <xTaskResumeAll+0xfc>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d057      	beq.n	80088a0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087f0:	e02f      	b.n	8008852 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80087f2:	4b31      	ldr	r3, [pc, #196]	; (80088b8 <xTaskResumeAll+0x100>)
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	3318      	adds	r3, #24
 80087fe:	0018      	movs	r0, r3
 8008800:	f7ff fd87 	bl	8008312 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	3304      	adds	r3, #4
 8008808:	0018      	movs	r0, r3
 800880a:	f7ff fd82 	bl	8008312 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008812:	4b2a      	ldr	r3, [pc, #168]	; (80088bc <xTaskResumeAll+0x104>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	429a      	cmp	r2, r3
 8008818:	d903      	bls.n	8008822 <xTaskResumeAll+0x6a>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800881e:	4b27      	ldr	r3, [pc, #156]	; (80088bc <xTaskResumeAll+0x104>)
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008826:	0013      	movs	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	189b      	adds	r3, r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4a24      	ldr	r2, [pc, #144]	; (80088c0 <xTaskResumeAll+0x108>)
 8008830:	189a      	adds	r2, r3, r2
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3304      	adds	r3, #4
 8008836:	0019      	movs	r1, r3
 8008838:	0010      	movs	r0, r2
 800883a:	f7ff fd48 	bl	80082ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008842:	4b20      	ldr	r3, [pc, #128]	; (80088c4 <xTaskResumeAll+0x10c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008848:	429a      	cmp	r2, r3
 800884a:	d302      	bcc.n	8008852 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800884c:	4b1e      	ldr	r3, [pc, #120]	; (80088c8 <xTaskResumeAll+0x110>)
 800884e:	2201      	movs	r2, #1
 8008850:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008852:	4b19      	ldr	r3, [pc, #100]	; (80088b8 <xTaskResumeAll+0x100>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1cb      	bne.n	80087f2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d001      	beq.n	8008864 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008860:	f000 f9e6 	bl	8008c30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008864:	4b19      	ldr	r3, [pc, #100]	; (80088cc <xTaskResumeAll+0x114>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00f      	beq.n	8008890 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008870:	f000 f82e 	bl	80088d0 <xTaskIncrementTick>
 8008874:	1e03      	subs	r3, r0, #0
 8008876:	d002      	beq.n	800887e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8008878:	4b13      	ldr	r3, [pc, #76]	; (80088c8 <xTaskResumeAll+0x110>)
 800887a:	2201      	movs	r2, #1
 800887c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	3b01      	subs	r3, #1
 8008882:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1f2      	bne.n	8008870 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800888a:	4b10      	ldr	r3, [pc, #64]	; (80088cc <xTaskResumeAll+0x114>)
 800888c:	2200      	movs	r2, #0
 800888e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008890:	4b0d      	ldr	r3, [pc, #52]	; (80088c8 <xTaskResumeAll+0x110>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d003      	beq.n	80088a0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008898:	2301      	movs	r3, #1
 800889a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800889c:	f000 fa78 	bl	8008d90 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088a0:	f000 fa98 	bl	8008dd4 <vPortExitCritical>

	return xAlreadyYielded;
 80088a4:	68bb      	ldr	r3, [r7, #8]
}
 80088a6:	0018      	movs	r0, r3
 80088a8:	46bd      	mov	sp, r7
 80088aa:	b004      	add	sp, #16
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	46c0      	nop			; (mov r8, r8)
 80088b0:	200006c4 	.word	0x200006c4
 80088b4:	2000069c 	.word	0x2000069c
 80088b8:	2000065c 	.word	0x2000065c
 80088bc:	200006a4 	.word	0x200006a4
 80088c0:	200005a0 	.word	0x200005a0
 80088c4:	2000059c 	.word	0x2000059c
 80088c8:	200006b0 	.word	0x200006b0
 80088cc:	200006ac 	.word	0x200006ac

080088d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80088d6:	2300      	movs	r3, #0
 80088d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088da:	4b4c      	ldr	r3, [pc, #304]	; (8008a0c <xTaskIncrementTick+0x13c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d000      	beq.n	80088e4 <xTaskIncrementTick+0x14>
 80088e2:	e083      	b.n	80089ec <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80088e4:	4b4a      	ldr	r3, [pc, #296]	; (8008a10 <xTaskIncrementTick+0x140>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	3301      	adds	r3, #1
 80088ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80088ec:	4b48      	ldr	r3, [pc, #288]	; (8008a10 <xTaskIncrementTick+0x140>)
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d117      	bne.n	8008928 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80088f8:	4b46      	ldr	r3, [pc, #280]	; (8008a14 <xTaskIncrementTick+0x144>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d001      	beq.n	8008906 <xTaskIncrementTick+0x36>
 8008902:	b672      	cpsid	i
 8008904:	e7fe      	b.n	8008904 <xTaskIncrementTick+0x34>
 8008906:	4b43      	ldr	r3, [pc, #268]	; (8008a14 <xTaskIncrementTick+0x144>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	60fb      	str	r3, [r7, #12]
 800890c:	4b42      	ldr	r3, [pc, #264]	; (8008a18 <xTaskIncrementTick+0x148>)
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	4b40      	ldr	r3, [pc, #256]	; (8008a14 <xTaskIncrementTick+0x144>)
 8008912:	601a      	str	r2, [r3, #0]
 8008914:	4b40      	ldr	r3, [pc, #256]	; (8008a18 <xTaskIncrementTick+0x148>)
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	601a      	str	r2, [r3, #0]
 800891a:	4b40      	ldr	r3, [pc, #256]	; (8008a1c <xTaskIncrementTick+0x14c>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	1c5a      	adds	r2, r3, #1
 8008920:	4b3e      	ldr	r3, [pc, #248]	; (8008a1c <xTaskIncrementTick+0x14c>)
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	f000 f984 	bl	8008c30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008928:	4b3d      	ldr	r3, [pc, #244]	; (8008a20 <xTaskIncrementTick+0x150>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	429a      	cmp	r2, r3
 8008930:	d34e      	bcc.n	80089d0 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008932:	4b38      	ldr	r3, [pc, #224]	; (8008a14 <xTaskIncrementTick+0x144>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d101      	bne.n	8008940 <xTaskIncrementTick+0x70>
 800893c:	2301      	movs	r3, #1
 800893e:	e000      	b.n	8008942 <xTaskIncrementTick+0x72>
 8008940:	2300      	movs	r3, #0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d004      	beq.n	8008950 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008946:	4b36      	ldr	r3, [pc, #216]	; (8008a20 <xTaskIncrementTick+0x150>)
 8008948:	2201      	movs	r2, #1
 800894a:	4252      	negs	r2, r2
 800894c:	601a      	str	r2, [r3, #0]
					break;
 800894e:	e03f      	b.n	80089d0 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008950:	4b30      	ldr	r3, [pc, #192]	; (8008a14 <xTaskIncrementTick+0x144>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	429a      	cmp	r2, r3
 8008966:	d203      	bcs.n	8008970 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008968:	4b2d      	ldr	r3, [pc, #180]	; (8008a20 <xTaskIncrementTick+0x150>)
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	601a      	str	r2, [r3, #0]
						break;
 800896e:	e02f      	b.n	80089d0 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	3304      	adds	r3, #4
 8008974:	0018      	movs	r0, r3
 8008976:	f7ff fccc 	bl	8008312 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897e:	2b00      	cmp	r3, #0
 8008980:	d004      	beq.n	800898c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	3318      	adds	r3, #24
 8008986:	0018      	movs	r0, r3
 8008988:	f7ff fcc3 	bl	8008312 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008990:	4b24      	ldr	r3, [pc, #144]	; (8008a24 <xTaskIncrementTick+0x154>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	429a      	cmp	r2, r3
 8008996:	d903      	bls.n	80089a0 <xTaskIncrementTick+0xd0>
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800899c:	4b21      	ldr	r3, [pc, #132]	; (8008a24 <xTaskIncrementTick+0x154>)
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a4:	0013      	movs	r3, r2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	189b      	adds	r3, r3, r2
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4a1e      	ldr	r2, [pc, #120]	; (8008a28 <xTaskIncrementTick+0x158>)
 80089ae:	189a      	adds	r2, r3, r2
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	3304      	adds	r3, #4
 80089b4:	0019      	movs	r1, r3
 80089b6:	0010      	movs	r0, r2
 80089b8:	f7ff fc89 	bl	80082ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c0:	4b1a      	ldr	r3, [pc, #104]	; (8008a2c <xTaskIncrementTick+0x15c>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d3b3      	bcc.n	8008932 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80089ca:	2301      	movs	r3, #1
 80089cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089ce:	e7b0      	b.n	8008932 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80089d0:	4b16      	ldr	r3, [pc, #88]	; (8008a2c <xTaskIncrementTick+0x15c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d6:	4914      	ldr	r1, [pc, #80]	; (8008a28 <xTaskIncrementTick+0x158>)
 80089d8:	0013      	movs	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	189b      	adds	r3, r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	585b      	ldr	r3, [r3, r1]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d907      	bls.n	80089f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80089e6:	2301      	movs	r3, #1
 80089e8:	617b      	str	r3, [r7, #20]
 80089ea:	e004      	b.n	80089f6 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80089ec:	4b10      	ldr	r3, [pc, #64]	; (8008a30 <xTaskIncrementTick+0x160>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	1c5a      	adds	r2, r3, #1
 80089f2:	4b0f      	ldr	r3, [pc, #60]	; (8008a30 <xTaskIncrementTick+0x160>)
 80089f4:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80089f6:	4b0f      	ldr	r3, [pc, #60]	; (8008a34 <xTaskIncrementTick+0x164>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d001      	beq.n	8008a02 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80089fe:	2301      	movs	r3, #1
 8008a00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008a02:	697b      	ldr	r3, [r7, #20]
}
 8008a04:	0018      	movs	r0, r3
 8008a06:	46bd      	mov	sp, r7
 8008a08:	b006      	add	sp, #24
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	200006c4 	.word	0x200006c4
 8008a10:	200006a0 	.word	0x200006a0
 8008a14:	20000654 	.word	0x20000654
 8008a18:	20000658 	.word	0x20000658
 8008a1c:	200006b4 	.word	0x200006b4
 8008a20:	200006bc 	.word	0x200006bc
 8008a24:	200006a4 	.word	0x200006a4
 8008a28:	200005a0 	.word	0x200005a0
 8008a2c:	2000059c 	.word	0x2000059c
 8008a30:	200006ac 	.word	0x200006ac
 8008a34:	200006b0 	.word	0x200006b0

08008a38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a3e:	4b22      	ldr	r3, [pc, #136]	; (8008ac8 <vTaskSwitchContext+0x90>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d003      	beq.n	8008a4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a46:	4b21      	ldr	r3, [pc, #132]	; (8008acc <vTaskSwitchContext+0x94>)
 8008a48:	2201      	movs	r2, #1
 8008a4a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a4c:	e037      	b.n	8008abe <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8008a4e:	4b1f      	ldr	r3, [pc, #124]	; (8008acc <vTaskSwitchContext+0x94>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008a54:	4b1e      	ldr	r3, [pc, #120]	; (8008ad0 <vTaskSwitchContext+0x98>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	607b      	str	r3, [r7, #4]
 8008a5a:	e007      	b.n	8008a6c <vTaskSwitchContext+0x34>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <vTaskSwitchContext+0x2e>
 8008a62:	b672      	cpsid	i
 8008a64:	e7fe      	b.n	8008a64 <vTaskSwitchContext+0x2c>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	607b      	str	r3, [r7, #4]
 8008a6c:	4919      	ldr	r1, [pc, #100]	; (8008ad4 <vTaskSwitchContext+0x9c>)
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	0013      	movs	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	189b      	adds	r3, r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	585b      	ldr	r3, [r3, r1]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d0ee      	beq.n	8008a5c <vTaskSwitchContext+0x24>
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	0013      	movs	r3, r2
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	189b      	adds	r3, r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4a12      	ldr	r2, [pc, #72]	; (8008ad4 <vTaskSwitchContext+0x9c>)
 8008a8a:	189b      	adds	r3, r3, r2
 8008a8c:	603b      	str	r3, [r7, #0]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	685a      	ldr	r2, [r3, #4]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	605a      	str	r2, [r3, #4]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	3308      	adds	r3, #8
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d104      	bne.n	8008aae <vTaskSwitchContext+0x76>
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	685a      	ldr	r2, [r3, #4]
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	605a      	str	r2, [r3, #4]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	68da      	ldr	r2, [r3, #12]
 8008ab4:	4b08      	ldr	r3, [pc, #32]	; (8008ad8 <vTaskSwitchContext+0xa0>)
 8008ab6:	601a      	str	r2, [r3, #0]
 8008ab8:	4b05      	ldr	r3, [pc, #20]	; (8008ad0 <vTaskSwitchContext+0x98>)
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	601a      	str	r2, [r3, #0]
}
 8008abe:	46c0      	nop			; (mov r8, r8)
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	b002      	add	sp, #8
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	46c0      	nop			; (mov r8, r8)
 8008ac8:	200006c4 	.word	0x200006c4
 8008acc:	200006b0 	.word	0x200006b0
 8008ad0:	200006a4 	.word	0x200006a4
 8008ad4:	200005a0 	.word	0x200005a0
 8008ad8:	2000059c 	.word	0x2000059c

08008adc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ae4:	f000 f84e 	bl	8008b84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ae8:	4b03      	ldr	r3, [pc, #12]	; (8008af8 <prvIdleTask+0x1c>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d9f9      	bls.n	8008ae4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008af0:	f000 f94e 	bl	8008d90 <vPortYield>
		prvCheckTasksWaitingTermination();
 8008af4:	e7f6      	b.n	8008ae4 <prvIdleTask+0x8>
 8008af6:	46c0      	nop			; (mov r8, r8)
 8008af8:	200005a0 	.word	0x200005a0

08008afc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b02:	2300      	movs	r3, #0
 8008b04:	607b      	str	r3, [r7, #4]
 8008b06:	e00c      	b.n	8008b22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	0013      	movs	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	189b      	adds	r3, r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4a14      	ldr	r2, [pc, #80]	; (8008b64 <prvInitialiseTaskLists+0x68>)
 8008b14:	189b      	adds	r3, r3, r2
 8008b16:	0018      	movs	r0, r3
 8008b18:	f7ff fbb0 	bl	800827c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	607b      	str	r3, [r7, #4]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b06      	cmp	r3, #6
 8008b26:	d9ef      	bls.n	8008b08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b28:	4b0f      	ldr	r3, [pc, #60]	; (8008b68 <prvInitialiseTaskLists+0x6c>)
 8008b2a:	0018      	movs	r0, r3
 8008b2c:	f7ff fba6 	bl	800827c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b30:	4b0e      	ldr	r3, [pc, #56]	; (8008b6c <prvInitialiseTaskLists+0x70>)
 8008b32:	0018      	movs	r0, r3
 8008b34:	f7ff fba2 	bl	800827c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b38:	4b0d      	ldr	r3, [pc, #52]	; (8008b70 <prvInitialiseTaskLists+0x74>)
 8008b3a:	0018      	movs	r0, r3
 8008b3c:	f7ff fb9e 	bl	800827c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b40:	4b0c      	ldr	r3, [pc, #48]	; (8008b74 <prvInitialiseTaskLists+0x78>)
 8008b42:	0018      	movs	r0, r3
 8008b44:	f7ff fb9a 	bl	800827c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b48:	4b0b      	ldr	r3, [pc, #44]	; (8008b78 <prvInitialiseTaskLists+0x7c>)
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	f7ff fb96 	bl	800827c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b50:	4b0a      	ldr	r3, [pc, #40]	; (8008b7c <prvInitialiseTaskLists+0x80>)
 8008b52:	4a05      	ldr	r2, [pc, #20]	; (8008b68 <prvInitialiseTaskLists+0x6c>)
 8008b54:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b56:	4b0a      	ldr	r3, [pc, #40]	; (8008b80 <prvInitialiseTaskLists+0x84>)
 8008b58:	4a04      	ldr	r2, [pc, #16]	; (8008b6c <prvInitialiseTaskLists+0x70>)
 8008b5a:	601a      	str	r2, [r3, #0]
}
 8008b5c:	46c0      	nop			; (mov r8, r8)
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	b002      	add	sp, #8
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	200005a0 	.word	0x200005a0
 8008b68:	2000062c 	.word	0x2000062c
 8008b6c:	20000640 	.word	0x20000640
 8008b70:	2000065c 	.word	0x2000065c
 8008b74:	20000670 	.word	0x20000670
 8008b78:	20000688 	.word	0x20000688
 8008b7c:	20000654 	.word	0x20000654
 8008b80:	20000658 	.word	0x20000658

08008b84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b8a:	e01a      	b.n	8008bc2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8008b8c:	f000 f910 	bl	8008db0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008b90:	4b10      	ldr	r3, [pc, #64]	; (8008bd4 <prvCheckTasksWaitingTermination+0x50>)
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	0018      	movs	r0, r3
 8008b9e:	f7ff fbb8 	bl	8008312 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ba2:	4b0d      	ldr	r3, [pc, #52]	; (8008bd8 <prvCheckTasksWaitingTermination+0x54>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	1e5a      	subs	r2, r3, #1
 8008ba8:	4b0b      	ldr	r3, [pc, #44]	; (8008bd8 <prvCheckTasksWaitingTermination+0x54>)
 8008baa:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008bac:	4b0b      	ldr	r3, [pc, #44]	; (8008bdc <prvCheckTasksWaitingTermination+0x58>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	1e5a      	subs	r2, r3, #1
 8008bb2:	4b0a      	ldr	r3, [pc, #40]	; (8008bdc <prvCheckTasksWaitingTermination+0x58>)
 8008bb4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8008bb6:	f000 f90d 	bl	8008dd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	0018      	movs	r0, r3
 8008bbe:	f000 f80f 	bl	8008be0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008bc2:	4b06      	ldr	r3, [pc, #24]	; (8008bdc <prvCheckTasksWaitingTermination+0x58>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1e0      	bne.n	8008b8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008bca:	46c0      	nop			; (mov r8, r8)
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	b002      	add	sp, #8
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	46c0      	nop			; (mov r8, r8)
 8008bd4:	20000670 	.word	0x20000670
 8008bd8:	2000069c 	.word	0x2000069c
 8008bdc:	20000684 	.word	0x20000684

08008be0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2251      	movs	r2, #81	; 0x51
 8008bec:	5c9b      	ldrb	r3, [r3, r2]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d109      	bne.n	8008c06 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf6:	0018      	movs	r0, r3
 8008bf8:	f000 fa18 	bl	800902c <vPortFree>
				vPortFree( pxTCB );
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	0018      	movs	r0, r3
 8008c00:	f000 fa14 	bl	800902c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c04:	e010      	b.n	8008c28 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2251      	movs	r2, #81	; 0x51
 8008c0a:	5c9b      	ldrb	r3, [r3, r2]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d104      	bne.n	8008c1a <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	0018      	movs	r0, r3
 8008c14:	f000 fa0a 	bl	800902c <vPortFree>
	}
 8008c18:	e006      	b.n	8008c28 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2251      	movs	r2, #81	; 0x51
 8008c1e:	5c9b      	ldrb	r3, [r3, r2]
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d001      	beq.n	8008c28 <prvDeleteTCB+0x48>
 8008c24:	b672      	cpsid	i
 8008c26:	e7fe      	b.n	8008c26 <prvDeleteTCB+0x46>
	}
 8008c28:	46c0      	nop			; (mov r8, r8)
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	b002      	add	sp, #8
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c36:	4b0e      	ldr	r3, [pc, #56]	; (8008c70 <prvResetNextTaskUnblockTime+0x40>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d101      	bne.n	8008c44 <prvResetNextTaskUnblockTime+0x14>
 8008c40:	2301      	movs	r3, #1
 8008c42:	e000      	b.n	8008c46 <prvResetNextTaskUnblockTime+0x16>
 8008c44:	2300      	movs	r3, #0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d004      	beq.n	8008c54 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c4a:	4b0a      	ldr	r3, [pc, #40]	; (8008c74 <prvResetNextTaskUnblockTime+0x44>)
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	4252      	negs	r2, r2
 8008c50:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c52:	e008      	b.n	8008c66 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008c54:	4b06      	ldr	r3, [pc, #24]	; (8008c70 <prvResetNextTaskUnblockTime+0x40>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	685a      	ldr	r2, [r3, #4]
 8008c62:	4b04      	ldr	r3, [pc, #16]	; (8008c74 <prvResetNextTaskUnblockTime+0x44>)
 8008c64:	601a      	str	r2, [r3, #0]
}
 8008c66:	46c0      	nop			; (mov r8, r8)
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	b002      	add	sp, #8
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	46c0      	nop			; (mov r8, r8)
 8008c70:	20000654 	.word	0x20000654
 8008c74:	200006bc 	.word	0x200006bc

08008c78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	3b04      	subs	r3, #4
 8008c88:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2280      	movs	r2, #128	; 0x80
 8008c8e:	0452      	lsls	r2, r2, #17
 8008c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	3b04      	subs	r3, #4
 8008c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	3b04      	subs	r3, #4
 8008ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ca4:	4a08      	ldr	r2, [pc, #32]	; (8008cc8 <pxPortInitialiseStack+0x50>)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	3b14      	subs	r3, #20
 8008cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	3b20      	subs	r3, #32
 8008cba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
}
 8008cbe:	0018      	movs	r0, r3
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	b004      	add	sp, #16
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	46c0      	nop			; (mov r8, r8)
 8008cc8:	08008ccd 	.word	0x08008ccd

08008ccc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008cd6:	4b07      	ldr	r3, [pc, #28]	; (8008cf4 <prvTaskExitError+0x28>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	d001      	beq.n	8008ce2 <prvTaskExitError+0x16>
 8008cde:	b672      	cpsid	i
 8008ce0:	e7fe      	b.n	8008ce0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8008ce2:	b672      	cpsid	i
	while( ulDummy == 0 )
 8008ce4:	46c0      	nop			; (mov r8, r8)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d0fc      	beq.n	8008ce6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008cec:	46c0      	nop			; (mov r8, r8)
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	b002      	add	sp, #8
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	2000000c 	.word	0x2000000c

08008cf8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8008cfc:	46c0      	nop			; (mov r8, r8)
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
	...

08008d10 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8008d10:	4a0b      	ldr	r2, [pc, #44]	; (8008d40 <pxCurrentTCBConst2>)
 8008d12:	6813      	ldr	r3, [r2, #0]
 8008d14:	6818      	ldr	r0, [r3, #0]
 8008d16:	3020      	adds	r0, #32
 8008d18:	f380 8809 	msr	PSP, r0
 8008d1c:	2002      	movs	r0, #2
 8008d1e:	f380 8814 	msr	CONTROL, r0
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8008d28:	46ae      	mov	lr, r5
 8008d2a:	bc08      	pop	{r3}
 8008d2c:	bc04      	pop	{r2}
 8008d2e:	b662      	cpsie	i
 8008d30:	4718      	bx	r3
 8008d32:	46c0      	nop			; (mov r8, r8)
 8008d34:	46c0      	nop			; (mov r8, r8)
 8008d36:	46c0      	nop			; (mov r8, r8)
 8008d38:	46c0      	nop			; (mov r8, r8)
 8008d3a:	46c0      	nop			; (mov r8, r8)
 8008d3c:	46c0      	nop			; (mov r8, r8)
 8008d3e:	46c0      	nop			; (mov r8, r8)

08008d40 <pxCurrentTCBConst2>:
 8008d40:	2000059c 	.word	0x2000059c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8008d44:	46c0      	nop			; (mov r8, r8)
 8008d46:	46c0      	nop			; (mov r8, r8)

08008d48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8008d4c:	4b0e      	ldr	r3, [pc, #56]	; (8008d88 <xPortStartScheduler+0x40>)
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	4b0d      	ldr	r3, [pc, #52]	; (8008d88 <xPortStartScheduler+0x40>)
 8008d52:	21ff      	movs	r1, #255	; 0xff
 8008d54:	0409      	lsls	r1, r1, #16
 8008d56:	430a      	orrs	r2, r1
 8008d58:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8008d5a:	4b0b      	ldr	r3, [pc, #44]	; (8008d88 <xPortStartScheduler+0x40>)
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	4b0a      	ldr	r3, [pc, #40]	; (8008d88 <xPortStartScheduler+0x40>)
 8008d60:	21ff      	movs	r1, #255	; 0xff
 8008d62:	0609      	lsls	r1, r1, #24
 8008d64:	430a      	orrs	r2, r1
 8008d66:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8008d68:	f000 f898 	bl	8008e9c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d6c:	4b07      	ldr	r3, [pc, #28]	; (8008d8c <xPortStartScheduler+0x44>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8008d72:	f7ff ffcd 	bl	8008d10 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d76:	f7ff fe5f 	bl	8008a38 <vTaskSwitchContext>
	prvTaskExitError();
 8008d7a:	f7ff ffa7 	bl	8008ccc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	0018      	movs	r0, r3
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	46c0      	nop			; (mov r8, r8)
 8008d88:	e000ed20 	.word	0xe000ed20
 8008d8c:	2000000c 	.word	0x2000000c

08008d90 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8008d94:	4b05      	ldr	r3, [pc, #20]	; (8008dac <vPortYield+0x1c>)
 8008d96:	2280      	movs	r2, #128	; 0x80
 8008d98:	0552      	lsls	r2, r2, #21
 8008d9a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8008d9c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008da0:	f3bf 8f6f 	isb	sy
}
 8008da4:	46c0      	nop			; (mov r8, r8)
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	46c0      	nop			; (mov r8, r8)
 8008dac:	e000ed04 	.word	0xe000ed04

08008db0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8008db4:	b672      	cpsid	i
    uxCriticalNesting++;
 8008db6:	4b06      	ldr	r3, [pc, #24]	; (8008dd0 <vPortEnterCritical+0x20>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	1c5a      	adds	r2, r3, #1
 8008dbc:	4b04      	ldr	r3, [pc, #16]	; (8008dd0 <vPortEnterCritical+0x20>)
 8008dbe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8008dc0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008dc4:	f3bf 8f6f 	isb	sy
}
 8008dc8:	46c0      	nop			; (mov r8, r8)
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	46c0      	nop			; (mov r8, r8)
 8008dd0:	2000000c 	.word	0x2000000c

08008dd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008dd8:	4b09      	ldr	r3, [pc, #36]	; (8008e00 <vPortExitCritical+0x2c>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d101      	bne.n	8008de4 <vPortExitCritical+0x10>
 8008de0:	b672      	cpsid	i
 8008de2:	e7fe      	b.n	8008de2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8008de4:	4b06      	ldr	r3, [pc, #24]	; (8008e00 <vPortExitCritical+0x2c>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	1e5a      	subs	r2, r3, #1
 8008dea:	4b05      	ldr	r3, [pc, #20]	; (8008e00 <vPortExitCritical+0x2c>)
 8008dec:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8008dee:	4b04      	ldr	r3, [pc, #16]	; (8008e00 <vPortExitCritical+0x2c>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d100      	bne.n	8008df8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8008df6:	b662      	cpsie	i
    }
}
 8008df8:	46c0      	nop			; (mov r8, r8)
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	46c0      	nop			; (mov r8, r8)
 8008e00:	2000000c 	.word	0x2000000c

08008e04 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8008e04:	f3ef 8010 	mrs	r0, PRIMASK
 8008e08:	b672      	cpsid	i
 8008e0a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8008e0c:	46c0      	nop			; (mov r8, r8)
 8008e0e:	0018      	movs	r0, r3

08008e10 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8008e10:	f380 8810 	msr	PRIMASK, r0
 8008e14:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8008e16:	46c0      	nop			; (mov r8, r8)
	...

08008e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e20:	f3ef 8009 	mrs	r0, PSP
 8008e24:	4b0e      	ldr	r3, [pc, #56]	; (8008e60 <pxCurrentTCBConst>)
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	3820      	subs	r0, #32
 8008e2a:	6010      	str	r0, [r2, #0]
 8008e2c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008e2e:	4644      	mov	r4, r8
 8008e30:	464d      	mov	r5, r9
 8008e32:	4656      	mov	r6, sl
 8008e34:	465f      	mov	r7, fp
 8008e36:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008e38:	b508      	push	{r3, lr}
 8008e3a:	b672      	cpsid	i
 8008e3c:	f7ff fdfc 	bl	8008a38 <vTaskSwitchContext>
 8008e40:	b662      	cpsie	i
 8008e42:	bc0c      	pop	{r2, r3}
 8008e44:	6811      	ldr	r1, [r2, #0]
 8008e46:	6808      	ldr	r0, [r1, #0]
 8008e48:	3010      	adds	r0, #16
 8008e4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8008e4c:	46a0      	mov	r8, r4
 8008e4e:	46a9      	mov	r9, r5
 8008e50:	46b2      	mov	sl, r6
 8008e52:	46bb      	mov	fp, r7
 8008e54:	f380 8809 	msr	PSP, r0
 8008e58:	3820      	subs	r0, #32
 8008e5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8008e5c:	4718      	bx	r3
 8008e5e:	46c0      	nop			; (mov r8, r8)

08008e60 <pxCurrentTCBConst>:
 8008e60:	2000059c 	.word	0x2000059c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8008e64:	46c0      	nop			; (mov r8, r8)
 8008e66:	46c0      	nop			; (mov r8, r8)

08008e68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e6e:	f7ff ffc9 	bl	8008e04 <ulSetInterruptMaskFromISR>
 8008e72:	0003      	movs	r3, r0
 8008e74:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e76:	f7ff fd2b 	bl	80088d0 <xTaskIncrementTick>
 8008e7a:	1e03      	subs	r3, r0, #0
 8008e7c:	d003      	beq.n	8008e86 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8008e7e:	4b06      	ldr	r3, [pc, #24]	; (8008e98 <SysTick_Handler+0x30>)
 8008e80:	2280      	movs	r2, #128	; 0x80
 8008e82:	0552      	lsls	r2, r2, #21
 8008e84:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	0018      	movs	r0, r3
 8008e8a:	f7ff ffc1 	bl	8008e10 <vClearInterruptMaskFromISR>
}
 8008e8e:	46c0      	nop			; (mov r8, r8)
 8008e90:	46bd      	mov	sp, r7
 8008e92:	b002      	add	sp, #8
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	46c0      	nop			; (mov r8, r8)
 8008e98:	e000ed04 	.word	0xe000ed04

08008e9c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8008ea0:	4b0b      	ldr	r3, [pc, #44]	; (8008ed0 <prvSetupTimerInterrupt+0x34>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8008ea6:	4b0b      	ldr	r3, [pc, #44]	; (8008ed4 <prvSetupTimerInterrupt+0x38>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008eac:	4b0a      	ldr	r3, [pc, #40]	; (8008ed8 <prvSetupTimerInterrupt+0x3c>)
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	23fa      	movs	r3, #250	; 0xfa
 8008eb2:	0099      	lsls	r1, r3, #2
 8008eb4:	0010      	movs	r0, r2
 8008eb6:	f7f7 f939 	bl	800012c <__udivsi3>
 8008eba:	0003      	movs	r3, r0
 8008ebc:	001a      	movs	r2, r3
 8008ebe:	4b07      	ldr	r3, [pc, #28]	; (8008edc <prvSetupTimerInterrupt+0x40>)
 8008ec0:	3a01      	subs	r2, #1
 8008ec2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8008ec4:	4b02      	ldr	r3, [pc, #8]	; (8008ed0 <prvSetupTimerInterrupt+0x34>)
 8008ec6:	2207      	movs	r2, #7
 8008ec8:	601a      	str	r2, [r3, #0]
}
 8008eca:	46c0      	nop			; (mov r8, r8)
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	e000e010 	.word	0xe000e010
 8008ed4:	e000e018 	.word	0xe000e018
 8008ed8:	20000004 	.word	0x20000004
 8008edc:	e000e014 	.word	0xe000e014

08008ee0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8008eec:	f7ff fc58 	bl	80087a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ef0:	4b49      	ldr	r3, [pc, #292]	; (8009018 <pvPortMalloc+0x138>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d101      	bne.n	8008efc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ef8:	f000 f8e0 	bl	80090bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008efc:	4b47      	ldr	r3, [pc, #284]	; (800901c <pvPortMalloc+0x13c>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	4013      	ands	r3, r2
 8008f04:	d000      	beq.n	8008f08 <pvPortMalloc+0x28>
 8008f06:	e079      	b.n	8008ffc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d012      	beq.n	8008f34 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8008f0e:	2208      	movs	r2, #8
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	189b      	adds	r3, r3, r2
 8008f14:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2207      	movs	r2, #7
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	d00a      	beq.n	8008f34 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2207      	movs	r2, #7
 8008f22:	4393      	bics	r3, r2
 8008f24:	3308      	adds	r3, #8
 8008f26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2207      	movs	r2, #7
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	d001      	beq.n	8008f34 <pvPortMalloc+0x54>
 8008f30:	b672      	cpsid	i
 8008f32:	e7fe      	b.n	8008f32 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d060      	beq.n	8008ffc <pvPortMalloc+0x11c>
 8008f3a:	4b39      	ldr	r3, [pc, #228]	; (8009020 <pvPortMalloc+0x140>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d85b      	bhi.n	8008ffc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f44:	4b37      	ldr	r3, [pc, #220]	; (8009024 <pvPortMalloc+0x144>)
 8008f46:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8008f48:	4b36      	ldr	r3, [pc, #216]	; (8009024 <pvPortMalloc+0x144>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f4e:	e004      	b.n	8008f5a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d903      	bls.n	8008f6c <pvPortMalloc+0x8c>
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1f1      	bne.n	8008f50 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f6c:	4b2a      	ldr	r3, [pc, #168]	; (8009018 <pvPortMalloc+0x138>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	697a      	ldr	r2, [r7, #20]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d042      	beq.n	8008ffc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2208      	movs	r2, #8
 8008f7c:	189b      	adds	r3, r3, r2
 8008f7e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	1ad2      	subs	r2, r2, r3
 8008f90:	2308      	movs	r3, #8
 8008f92:	005b      	lsls	r3, r3, #1
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d916      	bls.n	8008fc6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	18d3      	adds	r3, r2, r3
 8008f9e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	2207      	movs	r2, #7
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	d001      	beq.n	8008fac <pvPortMalloc+0xcc>
 8008fa8:	b672      	cpsid	i
 8008faa:	e7fe      	b.n	8008faa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	1ad2      	subs	r2, r2, r3
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	0018      	movs	r0, r3
 8008fc2:	f000 f8db 	bl	800917c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008fc6:	4b16      	ldr	r3, [pc, #88]	; (8009020 <pvPortMalloc+0x140>)
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	1ad2      	subs	r2, r2, r3
 8008fd0:	4b13      	ldr	r3, [pc, #76]	; (8009020 <pvPortMalloc+0x140>)
 8008fd2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008fd4:	4b12      	ldr	r3, [pc, #72]	; (8009020 <pvPortMalloc+0x140>)
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	4b13      	ldr	r3, [pc, #76]	; (8009028 <pvPortMalloc+0x148>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d203      	bcs.n	8008fe8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008fe0:	4b0f      	ldr	r3, [pc, #60]	; (8009020 <pvPortMalloc+0x140>)
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	4b10      	ldr	r3, [pc, #64]	; (8009028 <pvPortMalloc+0x148>)
 8008fe6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	4b0b      	ldr	r3, [pc, #44]	; (800901c <pvPortMalloc+0x13c>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	431a      	orrs	r2, r3
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ffc:	f7ff fbdc 	bl	80087b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2207      	movs	r2, #7
 8009004:	4013      	ands	r3, r2
 8009006:	d001      	beq.n	800900c <pvPortMalloc+0x12c>
 8009008:	b672      	cpsid	i
 800900a:	e7fe      	b.n	800900a <pvPortMalloc+0x12a>
	return pvReturn;
 800900c:	68fb      	ldr	r3, [r7, #12]
}
 800900e:	0018      	movs	r0, r3
 8009010:	46bd      	mov	sp, r7
 8009012:	b006      	add	sp, #24
 8009014:	bd80      	pop	{r7, pc}
 8009016:	46c0      	nop			; (mov r8, r8)
 8009018:	200012d0 	.word	0x200012d0
 800901c:	200012dc 	.word	0x200012dc
 8009020:	200012d4 	.word	0x200012d4
 8009024:	200012c8 	.word	0x200012c8
 8009028:	200012d8 	.word	0x200012d8

0800902c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d035      	beq.n	80090aa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800903e:	2308      	movs	r3, #8
 8009040:	425b      	negs	r3, r3
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	18d3      	adds	r3, r2, r3
 8009046:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	4b18      	ldr	r3, [pc, #96]	; (80090b4 <vPortFree+0x88>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4013      	ands	r3, r2
 8009056:	d101      	bne.n	800905c <vPortFree+0x30>
 8009058:	b672      	cpsid	i
 800905a:	e7fe      	b.n	800905a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <vPortFree+0x3c>
 8009064:	b672      	cpsid	i
 8009066:	e7fe      	b.n	8009066 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	4b11      	ldr	r3, [pc, #68]	; (80090b4 <vPortFree+0x88>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4013      	ands	r3, r2
 8009072:	d01a      	beq.n	80090aa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d116      	bne.n	80090aa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	685a      	ldr	r2, [r3, #4]
 8009080:	4b0c      	ldr	r3, [pc, #48]	; (80090b4 <vPortFree+0x88>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	43db      	mvns	r3, r3
 8009086:	401a      	ands	r2, r3
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800908c:	f7ff fb88 	bl	80087a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	685a      	ldr	r2, [r3, #4]
 8009094:	4b08      	ldr	r3, [pc, #32]	; (80090b8 <vPortFree+0x8c>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	18d2      	adds	r2, r2, r3
 800909a:	4b07      	ldr	r3, [pc, #28]	; (80090b8 <vPortFree+0x8c>)
 800909c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	0018      	movs	r0, r3
 80090a2:	f000 f86b 	bl	800917c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80090a6:	f7ff fb87 	bl	80087b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80090aa:	46c0      	nop			; (mov r8, r8)
 80090ac:	46bd      	mov	sp, r7
 80090ae:	b004      	add	sp, #16
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	46c0      	nop			; (mov r8, r8)
 80090b4:	200012dc 	.word	0x200012dc
 80090b8:	200012d4 	.word	0x200012d4

080090bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80090c2:	23c0      	movs	r3, #192	; 0xc0
 80090c4:	011b      	lsls	r3, r3, #4
 80090c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80090c8:	4b26      	ldr	r3, [pc, #152]	; (8009164 <prvHeapInit+0xa8>)
 80090ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2207      	movs	r2, #7
 80090d0:	4013      	ands	r3, r2
 80090d2:	d00c      	beq.n	80090ee <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	3307      	adds	r3, #7
 80090d8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2207      	movs	r2, #7
 80090de:	4393      	bics	r3, r2
 80090e0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	1ad2      	subs	r2, r2, r3
 80090e8:	4b1e      	ldr	r3, [pc, #120]	; (8009164 <prvHeapInit+0xa8>)
 80090ea:	18d3      	adds	r3, r2, r3
 80090ec:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090f2:	4b1d      	ldr	r3, [pc, #116]	; (8009168 <prvHeapInit+0xac>)
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090f8:	4b1b      	ldr	r3, [pc, #108]	; (8009168 <prvHeapInit+0xac>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	18d3      	adds	r3, r2, r3
 8009104:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009106:	2208      	movs	r2, #8
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	1a9b      	subs	r3, r3, r2
 800910c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2207      	movs	r2, #7
 8009112:	4393      	bics	r3, r2
 8009114:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	4b14      	ldr	r3, [pc, #80]	; (800916c <prvHeapInit+0xb0>)
 800911a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800911c:	4b13      	ldr	r3, [pc, #76]	; (800916c <prvHeapInit+0xb0>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2200      	movs	r2, #0
 8009122:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009124:	4b11      	ldr	r3, [pc, #68]	; (800916c <prvHeapInit+0xb0>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2200      	movs	r2, #0
 800912a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	1ad2      	subs	r2, r2, r3
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800913a:	4b0c      	ldr	r3, [pc, #48]	; (800916c <prvHeapInit+0xb0>)
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	685a      	ldr	r2, [r3, #4]
 8009146:	4b0a      	ldr	r3, [pc, #40]	; (8009170 <prvHeapInit+0xb4>)
 8009148:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	4b09      	ldr	r3, [pc, #36]	; (8009174 <prvHeapInit+0xb8>)
 8009150:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009152:	4b09      	ldr	r3, [pc, #36]	; (8009178 <prvHeapInit+0xbc>)
 8009154:	2280      	movs	r2, #128	; 0x80
 8009156:	0612      	lsls	r2, r2, #24
 8009158:	601a      	str	r2, [r3, #0]
}
 800915a:	46c0      	nop			; (mov r8, r8)
 800915c:	46bd      	mov	sp, r7
 800915e:	b004      	add	sp, #16
 8009160:	bd80      	pop	{r7, pc}
 8009162:	46c0      	nop			; (mov r8, r8)
 8009164:	200006c8 	.word	0x200006c8
 8009168:	200012c8 	.word	0x200012c8
 800916c:	200012d0 	.word	0x200012d0
 8009170:	200012d8 	.word	0x200012d8
 8009174:	200012d4 	.word	0x200012d4
 8009178:	200012dc 	.word	0x200012dc

0800917c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009184:	4b27      	ldr	r3, [pc, #156]	; (8009224 <prvInsertBlockIntoFreeList+0xa8>)
 8009186:	60fb      	str	r3, [r7, #12]
 8009188:	e002      	b.n	8009190 <prvInsertBlockIntoFreeList+0x14>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	60fb      	str	r3, [r7, #12]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	429a      	cmp	r2, r3
 8009198:	d8f7      	bhi.n	800918a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	18d3      	adds	r3, r2, r3
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d108      	bne.n	80091be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	685a      	ldr	r2, [r3, #4]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	18d2      	adds	r2, r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	18d2      	adds	r2, r2, r3
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d118      	bne.n	8009204 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	4b14      	ldr	r3, [pc, #80]	; (8009228 <prvInsertBlockIntoFreeList+0xac>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d00d      	beq.n	80091fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	685a      	ldr	r2, [r3, #4]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	18d2      	adds	r2, r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	601a      	str	r2, [r3, #0]
 80091f8:	e008      	b.n	800920c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091fa:	4b0b      	ldr	r3, [pc, #44]	; (8009228 <prvInsertBlockIntoFreeList+0xac>)
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	e003      	b.n	800920c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	429a      	cmp	r2, r3
 8009212:	d002      	beq.n	800921a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800921a:	46c0      	nop			; (mov r8, r8)
 800921c:	46bd      	mov	sp, r7
 800921e:	b004      	add	sp, #16
 8009220:	bd80      	pop	{r7, pc}
 8009222:	46c0      	nop			; (mov r8, r8)
 8009224:	200012c8 	.word	0x200012c8
 8009228:	200012d0 	.word	0x200012d0

0800922c <__errno>:
 800922c:	4b01      	ldr	r3, [pc, #4]	; (8009234 <__errno+0x8>)
 800922e:	6818      	ldr	r0, [r3, #0]
 8009230:	4770      	bx	lr
 8009232:	46c0      	nop			; (mov r8, r8)
 8009234:	20000010 	.word	0x20000010

08009238 <__libc_init_array>:
 8009238:	b570      	push	{r4, r5, r6, lr}
 800923a:	2600      	movs	r6, #0
 800923c:	4d0c      	ldr	r5, [pc, #48]	; (8009270 <__libc_init_array+0x38>)
 800923e:	4c0d      	ldr	r4, [pc, #52]	; (8009274 <__libc_init_array+0x3c>)
 8009240:	1b64      	subs	r4, r4, r5
 8009242:	10a4      	asrs	r4, r4, #2
 8009244:	42a6      	cmp	r6, r4
 8009246:	d109      	bne.n	800925c <__libc_init_array+0x24>
 8009248:	2600      	movs	r6, #0
 800924a:	f002 f91b 	bl	800b484 <_init>
 800924e:	4d0a      	ldr	r5, [pc, #40]	; (8009278 <__libc_init_array+0x40>)
 8009250:	4c0a      	ldr	r4, [pc, #40]	; (800927c <__libc_init_array+0x44>)
 8009252:	1b64      	subs	r4, r4, r5
 8009254:	10a4      	asrs	r4, r4, #2
 8009256:	42a6      	cmp	r6, r4
 8009258:	d105      	bne.n	8009266 <__libc_init_array+0x2e>
 800925a:	bd70      	pop	{r4, r5, r6, pc}
 800925c:	00b3      	lsls	r3, r6, #2
 800925e:	58eb      	ldr	r3, [r5, r3]
 8009260:	4798      	blx	r3
 8009262:	3601      	adds	r6, #1
 8009264:	e7ee      	b.n	8009244 <__libc_init_array+0xc>
 8009266:	00b3      	lsls	r3, r6, #2
 8009268:	58eb      	ldr	r3, [r5, r3]
 800926a:	4798      	blx	r3
 800926c:	3601      	adds	r6, #1
 800926e:	e7f2      	b.n	8009256 <__libc_init_array+0x1e>
 8009270:	0800bb78 	.word	0x0800bb78
 8009274:	0800bb78 	.word	0x0800bb78
 8009278:	0800bb78 	.word	0x0800bb78
 800927c:	0800bb7c 	.word	0x0800bb7c

08009280 <__itoa>:
 8009280:	1e93      	subs	r3, r2, #2
 8009282:	b510      	push	{r4, lr}
 8009284:	000c      	movs	r4, r1
 8009286:	2b22      	cmp	r3, #34	; 0x22
 8009288:	d904      	bls.n	8009294 <__itoa+0x14>
 800928a:	2300      	movs	r3, #0
 800928c:	001c      	movs	r4, r3
 800928e:	700b      	strb	r3, [r1, #0]
 8009290:	0020      	movs	r0, r4
 8009292:	bd10      	pop	{r4, pc}
 8009294:	2a0a      	cmp	r2, #10
 8009296:	d109      	bne.n	80092ac <__itoa+0x2c>
 8009298:	2800      	cmp	r0, #0
 800929a:	da07      	bge.n	80092ac <__itoa+0x2c>
 800929c:	232d      	movs	r3, #45	; 0x2d
 800929e:	700b      	strb	r3, [r1, #0]
 80092a0:	2101      	movs	r1, #1
 80092a2:	4240      	negs	r0, r0
 80092a4:	1861      	adds	r1, r4, r1
 80092a6:	f000 fcc3 	bl	8009c30 <__utoa>
 80092aa:	e7f1      	b.n	8009290 <__itoa+0x10>
 80092ac:	2100      	movs	r1, #0
 80092ae:	e7f9      	b.n	80092a4 <__itoa+0x24>

080092b0 <itoa>:
 80092b0:	b510      	push	{r4, lr}
 80092b2:	f7ff ffe5 	bl	8009280 <__itoa>
 80092b6:	bd10      	pop	{r4, pc}

080092b8 <memcpy>:
 80092b8:	2300      	movs	r3, #0
 80092ba:	b510      	push	{r4, lr}
 80092bc:	429a      	cmp	r2, r3
 80092be:	d100      	bne.n	80092c2 <memcpy+0xa>
 80092c0:	bd10      	pop	{r4, pc}
 80092c2:	5ccc      	ldrb	r4, [r1, r3]
 80092c4:	54c4      	strb	r4, [r0, r3]
 80092c6:	3301      	adds	r3, #1
 80092c8:	e7f8      	b.n	80092bc <memcpy+0x4>

080092ca <memset>:
 80092ca:	0003      	movs	r3, r0
 80092cc:	1812      	adds	r2, r2, r0
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d100      	bne.n	80092d4 <memset+0xa>
 80092d2:	4770      	bx	lr
 80092d4:	7019      	strb	r1, [r3, #0]
 80092d6:	3301      	adds	r3, #1
 80092d8:	e7f9      	b.n	80092ce <memset+0x4>

080092da <__cvt>:
 80092da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092dc:	b08b      	sub	sp, #44	; 0x2c
 80092de:	0014      	movs	r4, r2
 80092e0:	1e1d      	subs	r5, r3, #0
 80092e2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80092e4:	da53      	bge.n	800938e <__cvt+0xb4>
 80092e6:	2480      	movs	r4, #128	; 0x80
 80092e8:	0624      	lsls	r4, r4, #24
 80092ea:	191b      	adds	r3, r3, r4
 80092ec:	001d      	movs	r5, r3
 80092ee:	0014      	movs	r4, r2
 80092f0:	232d      	movs	r3, #45	; 0x2d
 80092f2:	700b      	strb	r3, [r1, #0]
 80092f4:	2320      	movs	r3, #32
 80092f6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80092f8:	2203      	movs	r2, #3
 80092fa:	439e      	bics	r6, r3
 80092fc:	2e46      	cmp	r6, #70	; 0x46
 80092fe:	d007      	beq.n	8009310 <__cvt+0x36>
 8009300:	0033      	movs	r3, r6
 8009302:	3b45      	subs	r3, #69	; 0x45
 8009304:	4259      	negs	r1, r3
 8009306:	414b      	adcs	r3, r1
 8009308:	9910      	ldr	r1, [sp, #64]	; 0x40
 800930a:	3a01      	subs	r2, #1
 800930c:	18cb      	adds	r3, r1, r3
 800930e:	9310      	str	r3, [sp, #64]	; 0x40
 8009310:	ab09      	add	r3, sp, #36	; 0x24
 8009312:	9304      	str	r3, [sp, #16]
 8009314:	ab08      	add	r3, sp, #32
 8009316:	9303      	str	r3, [sp, #12]
 8009318:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800931a:	9200      	str	r2, [sp, #0]
 800931c:	9302      	str	r3, [sp, #8]
 800931e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009320:	0022      	movs	r2, r4
 8009322:	9301      	str	r3, [sp, #4]
 8009324:	002b      	movs	r3, r5
 8009326:	f000 fd3b 	bl	8009da0 <_dtoa_r>
 800932a:	0007      	movs	r7, r0
 800932c:	2e47      	cmp	r6, #71	; 0x47
 800932e:	d102      	bne.n	8009336 <__cvt+0x5c>
 8009330:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009332:	07db      	lsls	r3, r3, #31
 8009334:	d524      	bpl.n	8009380 <__cvt+0xa6>
 8009336:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009338:	18fb      	adds	r3, r7, r3
 800933a:	9307      	str	r3, [sp, #28]
 800933c:	2e46      	cmp	r6, #70	; 0x46
 800933e:	d114      	bne.n	800936a <__cvt+0x90>
 8009340:	783b      	ldrb	r3, [r7, #0]
 8009342:	2b30      	cmp	r3, #48	; 0x30
 8009344:	d10c      	bne.n	8009360 <__cvt+0x86>
 8009346:	2200      	movs	r2, #0
 8009348:	2300      	movs	r3, #0
 800934a:	0020      	movs	r0, r4
 800934c:	0029      	movs	r1, r5
 800934e:	f7f7 f873 	bl	8000438 <__aeabi_dcmpeq>
 8009352:	2800      	cmp	r0, #0
 8009354:	d104      	bne.n	8009360 <__cvt+0x86>
 8009356:	2301      	movs	r3, #1
 8009358:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800935a:	1a9b      	subs	r3, r3, r2
 800935c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800935e:	6013      	str	r3, [r2, #0]
 8009360:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009362:	9a07      	ldr	r2, [sp, #28]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	18d3      	adds	r3, r2, r3
 8009368:	9307      	str	r3, [sp, #28]
 800936a:	2200      	movs	r2, #0
 800936c:	2300      	movs	r3, #0
 800936e:	0020      	movs	r0, r4
 8009370:	0029      	movs	r1, r5
 8009372:	f7f7 f861 	bl	8000438 <__aeabi_dcmpeq>
 8009376:	2230      	movs	r2, #48	; 0x30
 8009378:	2800      	cmp	r0, #0
 800937a:	d00d      	beq.n	8009398 <__cvt+0xbe>
 800937c:	9b07      	ldr	r3, [sp, #28]
 800937e:	9309      	str	r3, [sp, #36]	; 0x24
 8009380:	0038      	movs	r0, r7
 8009382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009384:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009386:	1bdb      	subs	r3, r3, r7
 8009388:	6013      	str	r3, [r2, #0]
 800938a:	b00b      	add	sp, #44	; 0x2c
 800938c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800938e:	2300      	movs	r3, #0
 8009390:	e7af      	b.n	80092f2 <__cvt+0x18>
 8009392:	1c59      	adds	r1, r3, #1
 8009394:	9109      	str	r1, [sp, #36]	; 0x24
 8009396:	701a      	strb	r2, [r3, #0]
 8009398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800939a:	9907      	ldr	r1, [sp, #28]
 800939c:	428b      	cmp	r3, r1
 800939e:	d3f8      	bcc.n	8009392 <__cvt+0xb8>
 80093a0:	e7ee      	b.n	8009380 <__cvt+0xa6>

080093a2 <__exponent>:
 80093a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093a4:	1c83      	adds	r3, r0, #2
 80093a6:	b085      	sub	sp, #20
 80093a8:	9301      	str	r3, [sp, #4]
 80093aa:	0006      	movs	r6, r0
 80093ac:	000c      	movs	r4, r1
 80093ae:	7002      	strb	r2, [r0, #0]
 80093b0:	232b      	movs	r3, #43	; 0x2b
 80093b2:	2900      	cmp	r1, #0
 80093b4:	da01      	bge.n	80093ba <__exponent+0x18>
 80093b6:	232d      	movs	r3, #45	; 0x2d
 80093b8:	424c      	negs	r4, r1
 80093ba:	7073      	strb	r3, [r6, #1]
 80093bc:	2c09      	cmp	r4, #9
 80093be:	dd22      	ble.n	8009406 <__exponent+0x64>
 80093c0:	ab02      	add	r3, sp, #8
 80093c2:	1ddd      	adds	r5, r3, #7
 80093c4:	0020      	movs	r0, r4
 80093c6:	210a      	movs	r1, #10
 80093c8:	f7f7 f820 	bl	800040c <__aeabi_idivmod>
 80093cc:	1e6f      	subs	r7, r5, #1
 80093ce:	3130      	adds	r1, #48	; 0x30
 80093d0:	7039      	strb	r1, [r7, #0]
 80093d2:	0020      	movs	r0, r4
 80093d4:	210a      	movs	r1, #10
 80093d6:	f7f6 ff33 	bl	8000240 <__divsi3>
 80093da:	0004      	movs	r4, r0
 80093dc:	2809      	cmp	r0, #9
 80093de:	dc0b      	bgt.n	80093f8 <__exponent+0x56>
 80093e0:	3d02      	subs	r5, #2
 80093e2:	3430      	adds	r4, #48	; 0x30
 80093e4:	9b01      	ldr	r3, [sp, #4]
 80093e6:	702c      	strb	r4, [r5, #0]
 80093e8:	aa02      	add	r2, sp, #8
 80093ea:	3207      	adds	r2, #7
 80093ec:	0018      	movs	r0, r3
 80093ee:	42aa      	cmp	r2, r5
 80093f0:	d804      	bhi.n	80093fc <__exponent+0x5a>
 80093f2:	1b80      	subs	r0, r0, r6
 80093f4:	b005      	add	sp, #20
 80093f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093f8:	003d      	movs	r5, r7
 80093fa:	e7e3      	b.n	80093c4 <__exponent+0x22>
 80093fc:	782a      	ldrb	r2, [r5, #0]
 80093fe:	3501      	adds	r5, #1
 8009400:	701a      	strb	r2, [r3, #0]
 8009402:	3301      	adds	r3, #1
 8009404:	e7f0      	b.n	80093e8 <__exponent+0x46>
 8009406:	2330      	movs	r3, #48	; 0x30
 8009408:	18e4      	adds	r4, r4, r3
 800940a:	70b3      	strb	r3, [r6, #2]
 800940c:	1d30      	adds	r0, r6, #4
 800940e:	70f4      	strb	r4, [r6, #3]
 8009410:	e7ef      	b.n	80093f2 <__exponent+0x50>
	...

08009414 <_printf_float>:
 8009414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009416:	b095      	sub	sp, #84	; 0x54
 8009418:	000c      	movs	r4, r1
 800941a:	920a      	str	r2, [sp, #40]	; 0x28
 800941c:	930b      	str	r3, [sp, #44]	; 0x2c
 800941e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009420:	9009      	str	r0, [sp, #36]	; 0x24
 8009422:	f001 fa9d 	bl	800a960 <_localeconv_r>
 8009426:	6803      	ldr	r3, [r0, #0]
 8009428:	0018      	movs	r0, r3
 800942a:	930c      	str	r3, [sp, #48]	; 0x30
 800942c:	f7f6 fe6c 	bl	8000108 <strlen>
 8009430:	2300      	movs	r3, #0
 8009432:	9312      	str	r3, [sp, #72]	; 0x48
 8009434:	6823      	ldr	r3, [r4, #0]
 8009436:	900e      	str	r0, [sp, #56]	; 0x38
 8009438:	930d      	str	r3, [sp, #52]	; 0x34
 800943a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800943c:	7e27      	ldrb	r7, [r4, #24]
 800943e:	682b      	ldr	r3, [r5, #0]
 8009440:	2207      	movs	r2, #7
 8009442:	05c9      	lsls	r1, r1, #23
 8009444:	d545      	bpl.n	80094d2 <_printf_float+0xbe>
 8009446:	189b      	adds	r3, r3, r2
 8009448:	4393      	bics	r3, r2
 800944a:	001a      	movs	r2, r3
 800944c:	3208      	adds	r2, #8
 800944e:	602a      	str	r2, [r5, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	64a2      	str	r2, [r4, #72]	; 0x48
 8009456:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009458:	2201      	movs	r2, #1
 800945a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800945c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 800945e:	006b      	lsls	r3, r5, #1
 8009460:	085b      	lsrs	r3, r3, #1
 8009462:	930f      	str	r3, [sp, #60]	; 0x3c
 8009464:	4252      	negs	r2, r2
 8009466:	4bac      	ldr	r3, [pc, #688]	; (8009718 <_printf_float+0x304>)
 8009468:	0030      	movs	r0, r6
 800946a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800946c:	f7f8 fcf2 	bl	8001e54 <__aeabi_dcmpun>
 8009470:	2800      	cmp	r0, #0
 8009472:	d130      	bne.n	80094d6 <_printf_float+0xc2>
 8009474:	2201      	movs	r2, #1
 8009476:	4ba8      	ldr	r3, [pc, #672]	; (8009718 <_printf_float+0x304>)
 8009478:	4252      	negs	r2, r2
 800947a:	0030      	movs	r0, r6
 800947c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800947e:	f7f6 ffeb 	bl	8000458 <__aeabi_dcmple>
 8009482:	2800      	cmp	r0, #0
 8009484:	d127      	bne.n	80094d6 <_printf_float+0xc2>
 8009486:	2200      	movs	r2, #0
 8009488:	2300      	movs	r3, #0
 800948a:	0030      	movs	r0, r6
 800948c:	0029      	movs	r1, r5
 800948e:	f7f6 ffd9 	bl	8000444 <__aeabi_dcmplt>
 8009492:	2800      	cmp	r0, #0
 8009494:	d003      	beq.n	800949e <_printf_float+0x8a>
 8009496:	0023      	movs	r3, r4
 8009498:	222d      	movs	r2, #45	; 0x2d
 800949a:	3343      	adds	r3, #67	; 0x43
 800949c:	701a      	strb	r2, [r3, #0]
 800949e:	4d9f      	ldr	r5, [pc, #636]	; (800971c <_printf_float+0x308>)
 80094a0:	2f47      	cmp	r7, #71	; 0x47
 80094a2:	d800      	bhi.n	80094a6 <_printf_float+0x92>
 80094a4:	4d9e      	ldr	r5, [pc, #632]	; (8009720 <_printf_float+0x30c>)
 80094a6:	2303      	movs	r3, #3
 80094a8:	2600      	movs	r6, #0
 80094aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094ac:	6123      	str	r3, [r4, #16]
 80094ae:	3301      	adds	r3, #1
 80094b0:	439a      	bics	r2, r3
 80094b2:	6022      	str	r2, [r4, #0]
 80094b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094b6:	aa13      	add	r2, sp, #76	; 0x4c
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	0021      	movs	r1, r4
 80094bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094c0:	f000 f9f4 	bl	80098ac <_printf_common>
 80094c4:	1c43      	adds	r3, r0, #1
 80094c6:	d000      	beq.n	80094ca <_printf_float+0xb6>
 80094c8:	e093      	b.n	80095f2 <_printf_float+0x1de>
 80094ca:	2001      	movs	r0, #1
 80094cc:	4240      	negs	r0, r0
 80094ce:	b015      	add	sp, #84	; 0x54
 80094d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094d2:	3307      	adds	r3, #7
 80094d4:	e7b8      	b.n	8009448 <_printf_float+0x34>
 80094d6:	0032      	movs	r2, r6
 80094d8:	002b      	movs	r3, r5
 80094da:	0030      	movs	r0, r6
 80094dc:	0029      	movs	r1, r5
 80094de:	f7f8 fcb9 	bl	8001e54 <__aeabi_dcmpun>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	d004      	beq.n	80094f0 <_printf_float+0xdc>
 80094e6:	4d8f      	ldr	r5, [pc, #572]	; (8009724 <_printf_float+0x310>)
 80094e8:	2f47      	cmp	r7, #71	; 0x47
 80094ea:	d8dc      	bhi.n	80094a6 <_printf_float+0x92>
 80094ec:	4d8e      	ldr	r5, [pc, #568]	; (8009728 <_printf_float+0x314>)
 80094ee:	e7da      	b.n	80094a6 <_printf_float+0x92>
 80094f0:	2380      	movs	r3, #128	; 0x80
 80094f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80094f4:	6862      	ldr	r2, [r4, #4]
 80094f6:	00db      	lsls	r3, r3, #3
 80094f8:	430b      	orrs	r3, r1
 80094fa:	1c51      	adds	r1, r2, #1
 80094fc:	d143      	bne.n	8009586 <_printf_float+0x172>
 80094fe:	3207      	adds	r2, #7
 8009500:	6062      	str	r2, [r4, #4]
 8009502:	aa12      	add	r2, sp, #72	; 0x48
 8009504:	2100      	movs	r1, #0
 8009506:	9205      	str	r2, [sp, #20]
 8009508:	aa11      	add	r2, sp, #68	; 0x44
 800950a:	9203      	str	r2, [sp, #12]
 800950c:	2223      	movs	r2, #35	; 0x23
 800950e:	6023      	str	r3, [r4, #0]
 8009510:	9106      	str	r1, [sp, #24]
 8009512:	9301      	str	r3, [sp, #4]
 8009514:	a908      	add	r1, sp, #32
 8009516:	6863      	ldr	r3, [r4, #4]
 8009518:	1852      	adds	r2, r2, r1
 800951a:	9202      	str	r2, [sp, #8]
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	0032      	movs	r2, r6
 8009520:	002b      	movs	r3, r5
 8009522:	9704      	str	r7, [sp, #16]
 8009524:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009526:	f7ff fed8 	bl	80092da <__cvt>
 800952a:	2320      	movs	r3, #32
 800952c:	003a      	movs	r2, r7
 800952e:	0005      	movs	r5, r0
 8009530:	439a      	bics	r2, r3
 8009532:	2a47      	cmp	r2, #71	; 0x47
 8009534:	d107      	bne.n	8009546 <_printf_float+0x132>
 8009536:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009538:	1cda      	adds	r2, r3, #3
 800953a:	db02      	blt.n	8009542 <_printf_float+0x12e>
 800953c:	6862      	ldr	r2, [r4, #4]
 800953e:	4293      	cmp	r3, r2
 8009540:	dd45      	ble.n	80095ce <_printf_float+0x1ba>
 8009542:	3f02      	subs	r7, #2
 8009544:	b2ff      	uxtb	r7, r7
 8009546:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009548:	2f65      	cmp	r7, #101	; 0x65
 800954a:	d825      	bhi.n	8009598 <_printf_float+0x184>
 800954c:	0020      	movs	r0, r4
 800954e:	3901      	subs	r1, #1
 8009550:	003a      	movs	r2, r7
 8009552:	3050      	adds	r0, #80	; 0x50
 8009554:	9111      	str	r1, [sp, #68]	; 0x44
 8009556:	f7ff ff24 	bl	80093a2 <__exponent>
 800955a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800955c:	0006      	movs	r6, r0
 800955e:	1813      	adds	r3, r2, r0
 8009560:	6123      	str	r3, [r4, #16]
 8009562:	2a01      	cmp	r2, #1
 8009564:	dc02      	bgt.n	800956c <_printf_float+0x158>
 8009566:	6822      	ldr	r2, [r4, #0]
 8009568:	07d2      	lsls	r2, r2, #31
 800956a:	d501      	bpl.n	8009570 <_printf_float+0x15c>
 800956c:	3301      	adds	r3, #1
 800956e:	6123      	str	r3, [r4, #16]
 8009570:	2323      	movs	r3, #35	; 0x23
 8009572:	aa08      	add	r2, sp, #32
 8009574:	189b      	adds	r3, r3, r2
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d09b      	beq.n	80094b4 <_printf_float+0xa0>
 800957c:	0023      	movs	r3, r4
 800957e:	222d      	movs	r2, #45	; 0x2d
 8009580:	3343      	adds	r3, #67	; 0x43
 8009582:	701a      	strb	r2, [r3, #0]
 8009584:	e796      	b.n	80094b4 <_printf_float+0xa0>
 8009586:	2f67      	cmp	r7, #103	; 0x67
 8009588:	d100      	bne.n	800958c <_printf_float+0x178>
 800958a:	e176      	b.n	800987a <_printf_float+0x466>
 800958c:	2f47      	cmp	r7, #71	; 0x47
 800958e:	d1b8      	bne.n	8009502 <_printf_float+0xee>
 8009590:	2a00      	cmp	r2, #0
 8009592:	d1b6      	bne.n	8009502 <_printf_float+0xee>
 8009594:	2201      	movs	r2, #1
 8009596:	e7b3      	b.n	8009500 <_printf_float+0xec>
 8009598:	2f66      	cmp	r7, #102	; 0x66
 800959a:	d119      	bne.n	80095d0 <_printf_float+0x1bc>
 800959c:	6863      	ldr	r3, [r4, #4]
 800959e:	2900      	cmp	r1, #0
 80095a0:	dd0c      	ble.n	80095bc <_printf_float+0x1a8>
 80095a2:	6121      	str	r1, [r4, #16]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d102      	bne.n	80095ae <_printf_float+0x19a>
 80095a8:	6822      	ldr	r2, [r4, #0]
 80095aa:	07d2      	lsls	r2, r2, #31
 80095ac:	d502      	bpl.n	80095b4 <_printf_float+0x1a0>
 80095ae:	3301      	adds	r3, #1
 80095b0:	185b      	adds	r3, r3, r1
 80095b2:	6123      	str	r3, [r4, #16]
 80095b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095b6:	2600      	movs	r6, #0
 80095b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80095ba:	e7d9      	b.n	8009570 <_printf_float+0x15c>
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d103      	bne.n	80095c8 <_printf_float+0x1b4>
 80095c0:	2201      	movs	r2, #1
 80095c2:	6821      	ldr	r1, [r4, #0]
 80095c4:	4211      	tst	r1, r2
 80095c6:	d000      	beq.n	80095ca <_printf_float+0x1b6>
 80095c8:	1c9a      	adds	r2, r3, #2
 80095ca:	6122      	str	r2, [r4, #16]
 80095cc:	e7f2      	b.n	80095b4 <_printf_float+0x1a0>
 80095ce:	2767      	movs	r7, #103	; 0x67
 80095d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095d4:	4293      	cmp	r3, r2
 80095d6:	db05      	blt.n	80095e4 <_printf_float+0x1d0>
 80095d8:	6822      	ldr	r2, [r4, #0]
 80095da:	6123      	str	r3, [r4, #16]
 80095dc:	07d2      	lsls	r2, r2, #31
 80095de:	d5e9      	bpl.n	80095b4 <_printf_float+0x1a0>
 80095e0:	3301      	adds	r3, #1
 80095e2:	e7e6      	b.n	80095b2 <_printf_float+0x19e>
 80095e4:	2101      	movs	r1, #1
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	dc01      	bgt.n	80095ee <_printf_float+0x1da>
 80095ea:	1849      	adds	r1, r1, r1
 80095ec:	1ac9      	subs	r1, r1, r3
 80095ee:	1852      	adds	r2, r2, r1
 80095f0:	e7eb      	b.n	80095ca <_printf_float+0x1b6>
 80095f2:	6822      	ldr	r2, [r4, #0]
 80095f4:	0553      	lsls	r3, r2, #21
 80095f6:	d408      	bmi.n	800960a <_printf_float+0x1f6>
 80095f8:	6923      	ldr	r3, [r4, #16]
 80095fa:	002a      	movs	r2, r5
 80095fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80095fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009600:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009602:	47a8      	blx	r5
 8009604:	1c43      	adds	r3, r0, #1
 8009606:	d129      	bne.n	800965c <_printf_float+0x248>
 8009608:	e75f      	b.n	80094ca <_printf_float+0xb6>
 800960a:	2f65      	cmp	r7, #101	; 0x65
 800960c:	d800      	bhi.n	8009610 <_printf_float+0x1fc>
 800960e:	e0e0      	b.n	80097d2 <_printf_float+0x3be>
 8009610:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009612:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009614:	2200      	movs	r2, #0
 8009616:	2300      	movs	r3, #0
 8009618:	f7f6 ff0e 	bl	8000438 <__aeabi_dcmpeq>
 800961c:	2800      	cmp	r0, #0
 800961e:	d034      	beq.n	800968a <_printf_float+0x276>
 8009620:	2301      	movs	r3, #1
 8009622:	4a42      	ldr	r2, [pc, #264]	; (800972c <_printf_float+0x318>)
 8009624:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009626:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009628:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800962a:	47a8      	blx	r5
 800962c:	1c43      	adds	r3, r0, #1
 800962e:	d100      	bne.n	8009632 <_printf_float+0x21e>
 8009630:	e74b      	b.n	80094ca <_printf_float+0xb6>
 8009632:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009634:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009636:	4293      	cmp	r3, r2
 8009638:	db02      	blt.n	8009640 <_printf_float+0x22c>
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	07db      	lsls	r3, r3, #31
 800963e:	d50d      	bpl.n	800965c <_printf_float+0x248>
 8009640:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009646:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800964a:	47a8      	blx	r5
 800964c:	2500      	movs	r5, #0
 800964e:	1c43      	adds	r3, r0, #1
 8009650:	d100      	bne.n	8009654 <_printf_float+0x240>
 8009652:	e73a      	b.n	80094ca <_printf_float+0xb6>
 8009654:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009656:	3b01      	subs	r3, #1
 8009658:	42ab      	cmp	r3, r5
 800965a:	dc0a      	bgt.n	8009672 <_printf_float+0x25e>
 800965c:	6823      	ldr	r3, [r4, #0]
 800965e:	079b      	lsls	r3, r3, #30
 8009660:	d500      	bpl.n	8009664 <_printf_float+0x250>
 8009662:	e108      	b.n	8009876 <_printf_float+0x462>
 8009664:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009666:	68e0      	ldr	r0, [r4, #12]
 8009668:	4298      	cmp	r0, r3
 800966a:	db00      	blt.n	800966e <_printf_float+0x25a>
 800966c:	e72f      	b.n	80094ce <_printf_float+0xba>
 800966e:	0018      	movs	r0, r3
 8009670:	e72d      	b.n	80094ce <_printf_float+0xba>
 8009672:	0022      	movs	r2, r4
 8009674:	2301      	movs	r3, #1
 8009676:	321a      	adds	r2, #26
 8009678:	990a      	ldr	r1, [sp, #40]	; 0x28
 800967a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800967c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800967e:	47b0      	blx	r6
 8009680:	1c43      	adds	r3, r0, #1
 8009682:	d100      	bne.n	8009686 <_printf_float+0x272>
 8009684:	e721      	b.n	80094ca <_printf_float+0xb6>
 8009686:	3501      	adds	r5, #1
 8009688:	e7e4      	b.n	8009654 <_printf_float+0x240>
 800968a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800968c:	2b00      	cmp	r3, #0
 800968e:	dc2d      	bgt.n	80096ec <_printf_float+0x2d8>
 8009690:	2301      	movs	r3, #1
 8009692:	4a26      	ldr	r2, [pc, #152]	; (800972c <_printf_float+0x318>)
 8009694:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009696:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009698:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800969a:	47b0      	blx	r6
 800969c:	1c43      	adds	r3, r0, #1
 800969e:	d100      	bne.n	80096a2 <_printf_float+0x28e>
 80096a0:	e713      	b.n	80094ca <_printf_float+0xb6>
 80096a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d105      	bne.n	80096b4 <_printf_float+0x2a0>
 80096a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d102      	bne.n	80096b4 <_printf_float+0x2a0>
 80096ae:	6823      	ldr	r3, [r4, #0]
 80096b0:	07db      	lsls	r3, r3, #31
 80096b2:	d5d3      	bpl.n	800965c <_printf_float+0x248>
 80096b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80096b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096be:	47b0      	blx	r6
 80096c0:	2600      	movs	r6, #0
 80096c2:	1c43      	adds	r3, r0, #1
 80096c4:	d100      	bne.n	80096c8 <_printf_float+0x2b4>
 80096c6:	e700      	b.n	80094ca <_printf_float+0xb6>
 80096c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096ca:	425b      	negs	r3, r3
 80096cc:	42b3      	cmp	r3, r6
 80096ce:	dc01      	bgt.n	80096d4 <_printf_float+0x2c0>
 80096d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096d2:	e792      	b.n	80095fa <_printf_float+0x1e6>
 80096d4:	0022      	movs	r2, r4
 80096d6:	2301      	movs	r3, #1
 80096d8:	321a      	adds	r2, #26
 80096da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096de:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80096e0:	47b8      	blx	r7
 80096e2:	1c43      	adds	r3, r0, #1
 80096e4:	d100      	bne.n	80096e8 <_printf_float+0x2d4>
 80096e6:	e6f0      	b.n	80094ca <_printf_float+0xb6>
 80096e8:	3601      	adds	r6, #1
 80096ea:	e7ed      	b.n	80096c8 <_printf_float+0x2b4>
 80096ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096ee:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80096f0:	429f      	cmp	r7, r3
 80096f2:	dd00      	ble.n	80096f6 <_printf_float+0x2e2>
 80096f4:	001f      	movs	r7, r3
 80096f6:	2f00      	cmp	r7, #0
 80096f8:	dd08      	ble.n	800970c <_printf_float+0x2f8>
 80096fa:	003b      	movs	r3, r7
 80096fc:	002a      	movs	r2, r5
 80096fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009702:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009704:	47b0      	blx	r6
 8009706:	1c43      	adds	r3, r0, #1
 8009708:	d100      	bne.n	800970c <_printf_float+0x2f8>
 800970a:	e6de      	b.n	80094ca <_printf_float+0xb6>
 800970c:	2300      	movs	r3, #0
 800970e:	930d      	str	r3, [sp, #52]	; 0x34
 8009710:	43fb      	mvns	r3, r7
 8009712:	17db      	asrs	r3, r3, #31
 8009714:	930f      	str	r3, [sp, #60]	; 0x3c
 8009716:	e018      	b.n	800974a <_printf_float+0x336>
 8009718:	7fefffff 	.word	0x7fefffff
 800971c:	0800b8f8 	.word	0x0800b8f8
 8009720:	0800b8f4 	.word	0x0800b8f4
 8009724:	0800b900 	.word	0x0800b900
 8009728:	0800b8fc 	.word	0x0800b8fc
 800972c:	0800b904 	.word	0x0800b904
 8009730:	0022      	movs	r2, r4
 8009732:	2301      	movs	r3, #1
 8009734:	321a      	adds	r2, #26
 8009736:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009738:	9809      	ldr	r0, [sp, #36]	; 0x24
 800973a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800973c:	47b0      	blx	r6
 800973e:	1c43      	adds	r3, r0, #1
 8009740:	d100      	bne.n	8009744 <_printf_float+0x330>
 8009742:	e6c2      	b.n	80094ca <_printf_float+0xb6>
 8009744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009746:	3301      	adds	r3, #1
 8009748:	930d      	str	r3, [sp, #52]	; 0x34
 800974a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800974c:	6da6      	ldr	r6, [r4, #88]	; 0x58
 800974e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009750:	403b      	ands	r3, r7
 8009752:	1af3      	subs	r3, r6, r3
 8009754:	4293      	cmp	r3, r2
 8009756:	dceb      	bgt.n	8009730 <_printf_float+0x31c>
 8009758:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800975a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800975c:	19ad      	adds	r5, r5, r6
 800975e:	4293      	cmp	r3, r2
 8009760:	db10      	blt.n	8009784 <_printf_float+0x370>
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	07db      	lsls	r3, r3, #31
 8009766:	d40d      	bmi.n	8009784 <_printf_float+0x370>
 8009768:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800976a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800976c:	1bbe      	subs	r6, r7, r6
 800976e:	1aff      	subs	r7, r7, r3
 8009770:	42b7      	cmp	r7, r6
 8009772:	dd00      	ble.n	8009776 <_printf_float+0x362>
 8009774:	0037      	movs	r7, r6
 8009776:	2f00      	cmp	r7, #0
 8009778:	dc0d      	bgt.n	8009796 <_printf_float+0x382>
 800977a:	43fe      	mvns	r6, r7
 800977c:	17f3      	asrs	r3, r6, #31
 800977e:	2500      	movs	r5, #0
 8009780:	930c      	str	r3, [sp, #48]	; 0x30
 8009782:	e01c      	b.n	80097be <_printf_float+0x3aa>
 8009784:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009786:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009788:	990a      	ldr	r1, [sp, #40]	; 0x28
 800978a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800978c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800978e:	47b8      	blx	r7
 8009790:	1c43      	adds	r3, r0, #1
 8009792:	d1e9      	bne.n	8009768 <_printf_float+0x354>
 8009794:	e699      	b.n	80094ca <_printf_float+0xb6>
 8009796:	003b      	movs	r3, r7
 8009798:	002a      	movs	r2, r5
 800979a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800979c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800979e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80097a0:	47a8      	blx	r5
 80097a2:	1c43      	adds	r3, r0, #1
 80097a4:	d1e9      	bne.n	800977a <_printf_float+0x366>
 80097a6:	e690      	b.n	80094ca <_printf_float+0xb6>
 80097a8:	0022      	movs	r2, r4
 80097aa:	2301      	movs	r3, #1
 80097ac:	321a      	adds	r2, #26
 80097ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80097b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097b2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80097b4:	47b0      	blx	r6
 80097b6:	1c43      	adds	r3, r0, #1
 80097b8:	d100      	bne.n	80097bc <_printf_float+0x3a8>
 80097ba:	e686      	b.n	80094ca <_printf_float+0xb6>
 80097bc:	3501      	adds	r5, #1
 80097be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80097c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80097c4:	1a9b      	subs	r3, r3, r2
 80097c6:	003a      	movs	r2, r7
 80097c8:	400a      	ands	r2, r1
 80097ca:	1a9b      	subs	r3, r3, r2
 80097cc:	42ab      	cmp	r3, r5
 80097ce:	dceb      	bgt.n	80097a8 <_printf_float+0x394>
 80097d0:	e744      	b.n	800965c <_printf_float+0x248>
 80097d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	dc02      	bgt.n	80097de <_printf_float+0x3ca>
 80097d8:	2301      	movs	r3, #1
 80097da:	421a      	tst	r2, r3
 80097dc:	d032      	beq.n	8009844 <_printf_float+0x430>
 80097de:	2301      	movs	r3, #1
 80097e0:	002a      	movs	r2, r5
 80097e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80097e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097e6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80097e8:	47b8      	blx	r7
 80097ea:	1c43      	adds	r3, r0, #1
 80097ec:	d100      	bne.n	80097f0 <_printf_float+0x3dc>
 80097ee:	e66c      	b.n	80094ca <_printf_float+0xb6>
 80097f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80097f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097f8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80097fa:	3501      	adds	r5, #1
 80097fc:	47b8      	blx	r7
 80097fe:	1c43      	adds	r3, r0, #1
 8009800:	d100      	bne.n	8009804 <_printf_float+0x3f0>
 8009802:	e662      	b.n	80094ca <_printf_float+0xb6>
 8009804:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009806:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009808:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800980a:	2200      	movs	r2, #0
 800980c:	1e5f      	subs	r7, r3, #1
 800980e:	2300      	movs	r3, #0
 8009810:	f7f6 fe12 	bl	8000438 <__aeabi_dcmpeq>
 8009814:	003b      	movs	r3, r7
 8009816:	2800      	cmp	r0, #0
 8009818:	d014      	beq.n	8009844 <_printf_float+0x430>
 800981a:	2500      	movs	r5, #0
 800981c:	e00a      	b.n	8009834 <_printf_float+0x420>
 800981e:	0022      	movs	r2, r4
 8009820:	2301      	movs	r3, #1
 8009822:	321a      	adds	r2, #26
 8009824:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009826:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009828:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800982a:	47b8      	blx	r7
 800982c:	1c43      	adds	r3, r0, #1
 800982e:	d100      	bne.n	8009832 <_printf_float+0x41e>
 8009830:	e64b      	b.n	80094ca <_printf_float+0xb6>
 8009832:	3501      	adds	r5, #1
 8009834:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009836:	3b01      	subs	r3, #1
 8009838:	42ab      	cmp	r3, r5
 800983a:	dcf0      	bgt.n	800981e <_printf_float+0x40a>
 800983c:	0022      	movs	r2, r4
 800983e:	0033      	movs	r3, r6
 8009840:	3250      	adds	r2, #80	; 0x50
 8009842:	e6db      	b.n	80095fc <_printf_float+0x1e8>
 8009844:	002a      	movs	r2, r5
 8009846:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009848:	9809      	ldr	r0, [sp, #36]	; 0x24
 800984a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800984c:	47a8      	blx	r5
 800984e:	1c43      	adds	r3, r0, #1
 8009850:	d1f4      	bne.n	800983c <_printf_float+0x428>
 8009852:	e63a      	b.n	80094ca <_printf_float+0xb6>
 8009854:	0022      	movs	r2, r4
 8009856:	2301      	movs	r3, #1
 8009858:	3219      	adds	r2, #25
 800985a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800985c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800985e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009860:	47b0      	blx	r6
 8009862:	1c43      	adds	r3, r0, #1
 8009864:	d100      	bne.n	8009868 <_printf_float+0x454>
 8009866:	e630      	b.n	80094ca <_printf_float+0xb6>
 8009868:	3501      	adds	r5, #1
 800986a:	68e3      	ldr	r3, [r4, #12]
 800986c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800986e:	1a9b      	subs	r3, r3, r2
 8009870:	42ab      	cmp	r3, r5
 8009872:	dcef      	bgt.n	8009854 <_printf_float+0x440>
 8009874:	e6f6      	b.n	8009664 <_printf_float+0x250>
 8009876:	2500      	movs	r5, #0
 8009878:	e7f7      	b.n	800986a <_printf_float+0x456>
 800987a:	2a00      	cmp	r2, #0
 800987c:	d100      	bne.n	8009880 <_printf_float+0x46c>
 800987e:	e689      	b.n	8009594 <_printf_float+0x180>
 8009880:	2100      	movs	r1, #0
 8009882:	9106      	str	r1, [sp, #24]
 8009884:	a912      	add	r1, sp, #72	; 0x48
 8009886:	9105      	str	r1, [sp, #20]
 8009888:	a911      	add	r1, sp, #68	; 0x44
 800988a:	9103      	str	r1, [sp, #12]
 800988c:	2123      	movs	r1, #35	; 0x23
 800988e:	a808      	add	r0, sp, #32
 8009890:	1809      	adds	r1, r1, r0
 8009892:	6023      	str	r3, [r4, #0]
 8009894:	9301      	str	r3, [sp, #4]
 8009896:	9200      	str	r2, [sp, #0]
 8009898:	002b      	movs	r3, r5
 800989a:	9704      	str	r7, [sp, #16]
 800989c:	9102      	str	r1, [sp, #8]
 800989e:	0032      	movs	r2, r6
 80098a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098a2:	f7ff fd1a 	bl	80092da <__cvt>
 80098a6:	0005      	movs	r5, r0
 80098a8:	e645      	b.n	8009536 <_printf_float+0x122>
 80098aa:	46c0      	nop			; (mov r8, r8)

080098ac <_printf_common>:
 80098ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098ae:	0015      	movs	r5, r2
 80098b0:	9301      	str	r3, [sp, #4]
 80098b2:	688a      	ldr	r2, [r1, #8]
 80098b4:	690b      	ldr	r3, [r1, #16]
 80098b6:	9000      	str	r0, [sp, #0]
 80098b8:	000c      	movs	r4, r1
 80098ba:	4293      	cmp	r3, r2
 80098bc:	da00      	bge.n	80098c0 <_printf_common+0x14>
 80098be:	0013      	movs	r3, r2
 80098c0:	0022      	movs	r2, r4
 80098c2:	602b      	str	r3, [r5, #0]
 80098c4:	3243      	adds	r2, #67	; 0x43
 80098c6:	7812      	ldrb	r2, [r2, #0]
 80098c8:	2a00      	cmp	r2, #0
 80098ca:	d001      	beq.n	80098d0 <_printf_common+0x24>
 80098cc:	3301      	adds	r3, #1
 80098ce:	602b      	str	r3, [r5, #0]
 80098d0:	6823      	ldr	r3, [r4, #0]
 80098d2:	069b      	lsls	r3, r3, #26
 80098d4:	d502      	bpl.n	80098dc <_printf_common+0x30>
 80098d6:	682b      	ldr	r3, [r5, #0]
 80098d8:	3302      	adds	r3, #2
 80098da:	602b      	str	r3, [r5, #0]
 80098dc:	2706      	movs	r7, #6
 80098de:	6823      	ldr	r3, [r4, #0]
 80098e0:	401f      	ands	r7, r3
 80098e2:	d027      	beq.n	8009934 <_printf_common+0x88>
 80098e4:	0023      	movs	r3, r4
 80098e6:	3343      	adds	r3, #67	; 0x43
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	1e5a      	subs	r2, r3, #1
 80098ec:	4193      	sbcs	r3, r2
 80098ee:	6822      	ldr	r2, [r4, #0]
 80098f0:	0692      	lsls	r2, r2, #26
 80098f2:	d430      	bmi.n	8009956 <_printf_common+0xaa>
 80098f4:	0022      	movs	r2, r4
 80098f6:	9901      	ldr	r1, [sp, #4]
 80098f8:	3243      	adds	r2, #67	; 0x43
 80098fa:	9800      	ldr	r0, [sp, #0]
 80098fc:	9e08      	ldr	r6, [sp, #32]
 80098fe:	47b0      	blx	r6
 8009900:	1c43      	adds	r3, r0, #1
 8009902:	d025      	beq.n	8009950 <_printf_common+0xa4>
 8009904:	2306      	movs	r3, #6
 8009906:	6820      	ldr	r0, [r4, #0]
 8009908:	682a      	ldr	r2, [r5, #0]
 800990a:	68e1      	ldr	r1, [r4, #12]
 800990c:	4003      	ands	r3, r0
 800990e:	2500      	movs	r5, #0
 8009910:	2b04      	cmp	r3, #4
 8009912:	d103      	bne.n	800991c <_printf_common+0x70>
 8009914:	1a8d      	subs	r5, r1, r2
 8009916:	43eb      	mvns	r3, r5
 8009918:	17db      	asrs	r3, r3, #31
 800991a:	401d      	ands	r5, r3
 800991c:	68a3      	ldr	r3, [r4, #8]
 800991e:	6922      	ldr	r2, [r4, #16]
 8009920:	4293      	cmp	r3, r2
 8009922:	dd01      	ble.n	8009928 <_printf_common+0x7c>
 8009924:	1a9b      	subs	r3, r3, r2
 8009926:	18ed      	adds	r5, r5, r3
 8009928:	2700      	movs	r7, #0
 800992a:	42bd      	cmp	r5, r7
 800992c:	d120      	bne.n	8009970 <_printf_common+0xc4>
 800992e:	2000      	movs	r0, #0
 8009930:	e010      	b.n	8009954 <_printf_common+0xa8>
 8009932:	3701      	adds	r7, #1
 8009934:	68e3      	ldr	r3, [r4, #12]
 8009936:	682a      	ldr	r2, [r5, #0]
 8009938:	1a9b      	subs	r3, r3, r2
 800993a:	42bb      	cmp	r3, r7
 800993c:	ddd2      	ble.n	80098e4 <_printf_common+0x38>
 800993e:	0022      	movs	r2, r4
 8009940:	2301      	movs	r3, #1
 8009942:	3219      	adds	r2, #25
 8009944:	9901      	ldr	r1, [sp, #4]
 8009946:	9800      	ldr	r0, [sp, #0]
 8009948:	9e08      	ldr	r6, [sp, #32]
 800994a:	47b0      	blx	r6
 800994c:	1c43      	adds	r3, r0, #1
 800994e:	d1f0      	bne.n	8009932 <_printf_common+0x86>
 8009950:	2001      	movs	r0, #1
 8009952:	4240      	negs	r0, r0
 8009954:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009956:	2030      	movs	r0, #48	; 0x30
 8009958:	18e1      	adds	r1, r4, r3
 800995a:	3143      	adds	r1, #67	; 0x43
 800995c:	7008      	strb	r0, [r1, #0]
 800995e:	0021      	movs	r1, r4
 8009960:	1c5a      	adds	r2, r3, #1
 8009962:	3145      	adds	r1, #69	; 0x45
 8009964:	7809      	ldrb	r1, [r1, #0]
 8009966:	18a2      	adds	r2, r4, r2
 8009968:	3243      	adds	r2, #67	; 0x43
 800996a:	3302      	adds	r3, #2
 800996c:	7011      	strb	r1, [r2, #0]
 800996e:	e7c1      	b.n	80098f4 <_printf_common+0x48>
 8009970:	0022      	movs	r2, r4
 8009972:	2301      	movs	r3, #1
 8009974:	321a      	adds	r2, #26
 8009976:	9901      	ldr	r1, [sp, #4]
 8009978:	9800      	ldr	r0, [sp, #0]
 800997a:	9e08      	ldr	r6, [sp, #32]
 800997c:	47b0      	blx	r6
 800997e:	1c43      	adds	r3, r0, #1
 8009980:	d0e6      	beq.n	8009950 <_printf_common+0xa4>
 8009982:	3701      	adds	r7, #1
 8009984:	e7d1      	b.n	800992a <_printf_common+0x7e>
	...

08009988 <_printf_i>:
 8009988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800998a:	b089      	sub	sp, #36	; 0x24
 800998c:	9204      	str	r2, [sp, #16]
 800998e:	000a      	movs	r2, r1
 8009990:	3243      	adds	r2, #67	; 0x43
 8009992:	9305      	str	r3, [sp, #20]
 8009994:	9003      	str	r0, [sp, #12]
 8009996:	9202      	str	r2, [sp, #8]
 8009998:	7e0a      	ldrb	r2, [r1, #24]
 800999a:	000c      	movs	r4, r1
 800999c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800999e:	2a6e      	cmp	r2, #110	; 0x6e
 80099a0:	d100      	bne.n	80099a4 <_printf_i+0x1c>
 80099a2:	e086      	b.n	8009ab2 <_printf_i+0x12a>
 80099a4:	d81f      	bhi.n	80099e6 <_printf_i+0x5e>
 80099a6:	2a63      	cmp	r2, #99	; 0x63
 80099a8:	d033      	beq.n	8009a12 <_printf_i+0x8a>
 80099aa:	d808      	bhi.n	80099be <_printf_i+0x36>
 80099ac:	2a00      	cmp	r2, #0
 80099ae:	d100      	bne.n	80099b2 <_printf_i+0x2a>
 80099b0:	e08c      	b.n	8009acc <_printf_i+0x144>
 80099b2:	2a58      	cmp	r2, #88	; 0x58
 80099b4:	d04d      	beq.n	8009a52 <_printf_i+0xca>
 80099b6:	0025      	movs	r5, r4
 80099b8:	3542      	adds	r5, #66	; 0x42
 80099ba:	702a      	strb	r2, [r5, #0]
 80099bc:	e030      	b.n	8009a20 <_printf_i+0x98>
 80099be:	2a64      	cmp	r2, #100	; 0x64
 80099c0:	d001      	beq.n	80099c6 <_printf_i+0x3e>
 80099c2:	2a69      	cmp	r2, #105	; 0x69
 80099c4:	d1f7      	bne.n	80099b6 <_printf_i+0x2e>
 80099c6:	6819      	ldr	r1, [r3, #0]
 80099c8:	6825      	ldr	r5, [r4, #0]
 80099ca:	1d0a      	adds	r2, r1, #4
 80099cc:	0628      	lsls	r0, r5, #24
 80099ce:	d529      	bpl.n	8009a24 <_printf_i+0x9c>
 80099d0:	6808      	ldr	r0, [r1, #0]
 80099d2:	601a      	str	r2, [r3, #0]
 80099d4:	2800      	cmp	r0, #0
 80099d6:	da03      	bge.n	80099e0 <_printf_i+0x58>
 80099d8:	232d      	movs	r3, #45	; 0x2d
 80099da:	9a02      	ldr	r2, [sp, #8]
 80099dc:	4240      	negs	r0, r0
 80099de:	7013      	strb	r3, [r2, #0]
 80099e0:	4e6b      	ldr	r6, [pc, #428]	; (8009b90 <_printf_i+0x208>)
 80099e2:	270a      	movs	r7, #10
 80099e4:	e04f      	b.n	8009a86 <_printf_i+0xfe>
 80099e6:	2a73      	cmp	r2, #115	; 0x73
 80099e8:	d074      	beq.n	8009ad4 <_printf_i+0x14c>
 80099ea:	d808      	bhi.n	80099fe <_printf_i+0x76>
 80099ec:	2a6f      	cmp	r2, #111	; 0x6f
 80099ee:	d01f      	beq.n	8009a30 <_printf_i+0xa8>
 80099f0:	2a70      	cmp	r2, #112	; 0x70
 80099f2:	d1e0      	bne.n	80099b6 <_printf_i+0x2e>
 80099f4:	2220      	movs	r2, #32
 80099f6:	6809      	ldr	r1, [r1, #0]
 80099f8:	430a      	orrs	r2, r1
 80099fa:	6022      	str	r2, [r4, #0]
 80099fc:	e003      	b.n	8009a06 <_printf_i+0x7e>
 80099fe:	2a75      	cmp	r2, #117	; 0x75
 8009a00:	d016      	beq.n	8009a30 <_printf_i+0xa8>
 8009a02:	2a78      	cmp	r2, #120	; 0x78
 8009a04:	d1d7      	bne.n	80099b6 <_printf_i+0x2e>
 8009a06:	0022      	movs	r2, r4
 8009a08:	2178      	movs	r1, #120	; 0x78
 8009a0a:	3245      	adds	r2, #69	; 0x45
 8009a0c:	7011      	strb	r1, [r2, #0]
 8009a0e:	4e61      	ldr	r6, [pc, #388]	; (8009b94 <_printf_i+0x20c>)
 8009a10:	e022      	b.n	8009a58 <_printf_i+0xd0>
 8009a12:	0025      	movs	r5, r4
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	3542      	adds	r5, #66	; 0x42
 8009a18:	1d11      	adds	r1, r2, #4
 8009a1a:	6019      	str	r1, [r3, #0]
 8009a1c:	6813      	ldr	r3, [r2, #0]
 8009a1e:	702b      	strb	r3, [r5, #0]
 8009a20:	2301      	movs	r3, #1
 8009a22:	e065      	b.n	8009af0 <_printf_i+0x168>
 8009a24:	6808      	ldr	r0, [r1, #0]
 8009a26:	601a      	str	r2, [r3, #0]
 8009a28:	0669      	lsls	r1, r5, #25
 8009a2a:	d5d3      	bpl.n	80099d4 <_printf_i+0x4c>
 8009a2c:	b200      	sxth	r0, r0
 8009a2e:	e7d1      	b.n	80099d4 <_printf_i+0x4c>
 8009a30:	6819      	ldr	r1, [r3, #0]
 8009a32:	6825      	ldr	r5, [r4, #0]
 8009a34:	1d08      	adds	r0, r1, #4
 8009a36:	6018      	str	r0, [r3, #0]
 8009a38:	6808      	ldr	r0, [r1, #0]
 8009a3a:	062e      	lsls	r6, r5, #24
 8009a3c:	d505      	bpl.n	8009a4a <_printf_i+0xc2>
 8009a3e:	4e54      	ldr	r6, [pc, #336]	; (8009b90 <_printf_i+0x208>)
 8009a40:	2708      	movs	r7, #8
 8009a42:	2a6f      	cmp	r2, #111	; 0x6f
 8009a44:	d01b      	beq.n	8009a7e <_printf_i+0xf6>
 8009a46:	270a      	movs	r7, #10
 8009a48:	e019      	b.n	8009a7e <_printf_i+0xf6>
 8009a4a:	066d      	lsls	r5, r5, #25
 8009a4c:	d5f7      	bpl.n	8009a3e <_printf_i+0xb6>
 8009a4e:	b280      	uxth	r0, r0
 8009a50:	e7f5      	b.n	8009a3e <_printf_i+0xb6>
 8009a52:	3145      	adds	r1, #69	; 0x45
 8009a54:	4e4e      	ldr	r6, [pc, #312]	; (8009b90 <_printf_i+0x208>)
 8009a56:	700a      	strb	r2, [r1, #0]
 8009a58:	6818      	ldr	r0, [r3, #0]
 8009a5a:	6822      	ldr	r2, [r4, #0]
 8009a5c:	1d01      	adds	r1, r0, #4
 8009a5e:	6800      	ldr	r0, [r0, #0]
 8009a60:	6019      	str	r1, [r3, #0]
 8009a62:	0615      	lsls	r5, r2, #24
 8009a64:	d521      	bpl.n	8009aaa <_printf_i+0x122>
 8009a66:	07d3      	lsls	r3, r2, #31
 8009a68:	d502      	bpl.n	8009a70 <_printf_i+0xe8>
 8009a6a:	2320      	movs	r3, #32
 8009a6c:	431a      	orrs	r2, r3
 8009a6e:	6022      	str	r2, [r4, #0]
 8009a70:	2710      	movs	r7, #16
 8009a72:	2800      	cmp	r0, #0
 8009a74:	d103      	bne.n	8009a7e <_printf_i+0xf6>
 8009a76:	2320      	movs	r3, #32
 8009a78:	6822      	ldr	r2, [r4, #0]
 8009a7a:	439a      	bics	r2, r3
 8009a7c:	6022      	str	r2, [r4, #0]
 8009a7e:	0023      	movs	r3, r4
 8009a80:	2200      	movs	r2, #0
 8009a82:	3343      	adds	r3, #67	; 0x43
 8009a84:	701a      	strb	r2, [r3, #0]
 8009a86:	6863      	ldr	r3, [r4, #4]
 8009a88:	60a3      	str	r3, [r4, #8]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	db58      	blt.n	8009b40 <_printf_i+0x1b8>
 8009a8e:	2204      	movs	r2, #4
 8009a90:	6821      	ldr	r1, [r4, #0]
 8009a92:	4391      	bics	r1, r2
 8009a94:	6021      	str	r1, [r4, #0]
 8009a96:	2800      	cmp	r0, #0
 8009a98:	d154      	bne.n	8009b44 <_printf_i+0x1bc>
 8009a9a:	9d02      	ldr	r5, [sp, #8]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d05a      	beq.n	8009b56 <_printf_i+0x1ce>
 8009aa0:	0025      	movs	r5, r4
 8009aa2:	7833      	ldrb	r3, [r6, #0]
 8009aa4:	3542      	adds	r5, #66	; 0x42
 8009aa6:	702b      	strb	r3, [r5, #0]
 8009aa8:	e055      	b.n	8009b56 <_printf_i+0x1ce>
 8009aaa:	0655      	lsls	r5, r2, #25
 8009aac:	d5db      	bpl.n	8009a66 <_printf_i+0xde>
 8009aae:	b280      	uxth	r0, r0
 8009ab0:	e7d9      	b.n	8009a66 <_printf_i+0xde>
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	680d      	ldr	r5, [r1, #0]
 8009ab6:	1d10      	adds	r0, r2, #4
 8009ab8:	6949      	ldr	r1, [r1, #20]
 8009aba:	6018      	str	r0, [r3, #0]
 8009abc:	6813      	ldr	r3, [r2, #0]
 8009abe:	062e      	lsls	r6, r5, #24
 8009ac0:	d501      	bpl.n	8009ac6 <_printf_i+0x13e>
 8009ac2:	6019      	str	r1, [r3, #0]
 8009ac4:	e002      	b.n	8009acc <_printf_i+0x144>
 8009ac6:	066d      	lsls	r5, r5, #25
 8009ac8:	d5fb      	bpl.n	8009ac2 <_printf_i+0x13a>
 8009aca:	8019      	strh	r1, [r3, #0]
 8009acc:	2300      	movs	r3, #0
 8009ace:	9d02      	ldr	r5, [sp, #8]
 8009ad0:	6123      	str	r3, [r4, #16]
 8009ad2:	e04f      	b.n	8009b74 <_printf_i+0x1ec>
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	1d11      	adds	r1, r2, #4
 8009ad8:	6019      	str	r1, [r3, #0]
 8009ada:	6815      	ldr	r5, [r2, #0]
 8009adc:	2100      	movs	r1, #0
 8009ade:	6862      	ldr	r2, [r4, #4]
 8009ae0:	0028      	movs	r0, r5
 8009ae2:	f000 ff53 	bl	800a98c <memchr>
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	d001      	beq.n	8009aee <_printf_i+0x166>
 8009aea:	1b40      	subs	r0, r0, r5
 8009aec:	6060      	str	r0, [r4, #4]
 8009aee:	6863      	ldr	r3, [r4, #4]
 8009af0:	6123      	str	r3, [r4, #16]
 8009af2:	2300      	movs	r3, #0
 8009af4:	9a02      	ldr	r2, [sp, #8]
 8009af6:	7013      	strb	r3, [r2, #0]
 8009af8:	e03c      	b.n	8009b74 <_printf_i+0x1ec>
 8009afa:	6923      	ldr	r3, [r4, #16]
 8009afc:	002a      	movs	r2, r5
 8009afe:	9904      	ldr	r1, [sp, #16]
 8009b00:	9803      	ldr	r0, [sp, #12]
 8009b02:	9d05      	ldr	r5, [sp, #20]
 8009b04:	47a8      	blx	r5
 8009b06:	1c43      	adds	r3, r0, #1
 8009b08:	d03e      	beq.n	8009b88 <_printf_i+0x200>
 8009b0a:	6823      	ldr	r3, [r4, #0]
 8009b0c:	079b      	lsls	r3, r3, #30
 8009b0e:	d415      	bmi.n	8009b3c <_printf_i+0x1b4>
 8009b10:	9b07      	ldr	r3, [sp, #28]
 8009b12:	68e0      	ldr	r0, [r4, #12]
 8009b14:	4298      	cmp	r0, r3
 8009b16:	da39      	bge.n	8009b8c <_printf_i+0x204>
 8009b18:	0018      	movs	r0, r3
 8009b1a:	e037      	b.n	8009b8c <_printf_i+0x204>
 8009b1c:	0022      	movs	r2, r4
 8009b1e:	2301      	movs	r3, #1
 8009b20:	3219      	adds	r2, #25
 8009b22:	9904      	ldr	r1, [sp, #16]
 8009b24:	9803      	ldr	r0, [sp, #12]
 8009b26:	9e05      	ldr	r6, [sp, #20]
 8009b28:	47b0      	blx	r6
 8009b2a:	1c43      	adds	r3, r0, #1
 8009b2c:	d02c      	beq.n	8009b88 <_printf_i+0x200>
 8009b2e:	3501      	adds	r5, #1
 8009b30:	68e3      	ldr	r3, [r4, #12]
 8009b32:	9a07      	ldr	r2, [sp, #28]
 8009b34:	1a9b      	subs	r3, r3, r2
 8009b36:	42ab      	cmp	r3, r5
 8009b38:	dcf0      	bgt.n	8009b1c <_printf_i+0x194>
 8009b3a:	e7e9      	b.n	8009b10 <_printf_i+0x188>
 8009b3c:	2500      	movs	r5, #0
 8009b3e:	e7f7      	b.n	8009b30 <_printf_i+0x1a8>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d0ad      	beq.n	8009aa0 <_printf_i+0x118>
 8009b44:	9d02      	ldr	r5, [sp, #8]
 8009b46:	0039      	movs	r1, r7
 8009b48:	f7f6 fb76 	bl	8000238 <__aeabi_uidivmod>
 8009b4c:	5c73      	ldrb	r3, [r6, r1]
 8009b4e:	3d01      	subs	r5, #1
 8009b50:	702b      	strb	r3, [r5, #0]
 8009b52:	2800      	cmp	r0, #0
 8009b54:	d1f7      	bne.n	8009b46 <_printf_i+0x1be>
 8009b56:	2f08      	cmp	r7, #8
 8009b58:	d109      	bne.n	8009b6e <_printf_i+0x1e6>
 8009b5a:	6823      	ldr	r3, [r4, #0]
 8009b5c:	07db      	lsls	r3, r3, #31
 8009b5e:	d506      	bpl.n	8009b6e <_printf_i+0x1e6>
 8009b60:	6863      	ldr	r3, [r4, #4]
 8009b62:	6922      	ldr	r2, [r4, #16]
 8009b64:	4293      	cmp	r3, r2
 8009b66:	dc02      	bgt.n	8009b6e <_printf_i+0x1e6>
 8009b68:	2330      	movs	r3, #48	; 0x30
 8009b6a:	3d01      	subs	r5, #1
 8009b6c:	702b      	strb	r3, [r5, #0]
 8009b6e:	9b02      	ldr	r3, [sp, #8]
 8009b70:	1b5b      	subs	r3, r3, r5
 8009b72:	6123      	str	r3, [r4, #16]
 8009b74:	9b05      	ldr	r3, [sp, #20]
 8009b76:	aa07      	add	r2, sp, #28
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	0021      	movs	r1, r4
 8009b7c:	9b04      	ldr	r3, [sp, #16]
 8009b7e:	9803      	ldr	r0, [sp, #12]
 8009b80:	f7ff fe94 	bl	80098ac <_printf_common>
 8009b84:	1c43      	adds	r3, r0, #1
 8009b86:	d1b8      	bne.n	8009afa <_printf_i+0x172>
 8009b88:	2001      	movs	r0, #1
 8009b8a:	4240      	negs	r0, r0
 8009b8c:	b009      	add	sp, #36	; 0x24
 8009b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b90:	0800b906 	.word	0x0800b906
 8009b94:	0800b917 	.word	0x0800b917

08009b98 <sniprintf>:
 8009b98:	b40c      	push	{r2, r3}
 8009b9a:	b530      	push	{r4, r5, lr}
 8009b9c:	4b16      	ldr	r3, [pc, #88]	; (8009bf8 <sniprintf+0x60>)
 8009b9e:	b09d      	sub	sp, #116	; 0x74
 8009ba0:	1e0c      	subs	r4, r1, #0
 8009ba2:	681d      	ldr	r5, [r3, #0]
 8009ba4:	da08      	bge.n	8009bb8 <sniprintf+0x20>
 8009ba6:	238b      	movs	r3, #139	; 0x8b
 8009ba8:	2001      	movs	r0, #1
 8009baa:	602b      	str	r3, [r5, #0]
 8009bac:	4240      	negs	r0, r0
 8009bae:	b01d      	add	sp, #116	; 0x74
 8009bb0:	bc30      	pop	{r4, r5}
 8009bb2:	bc08      	pop	{r3}
 8009bb4:	b002      	add	sp, #8
 8009bb6:	4718      	bx	r3
 8009bb8:	2382      	movs	r3, #130	; 0x82
 8009bba:	a902      	add	r1, sp, #8
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	818b      	strh	r3, [r1, #12]
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	9002      	str	r0, [sp, #8]
 8009bc4:	6108      	str	r0, [r1, #16]
 8009bc6:	429c      	cmp	r4, r3
 8009bc8:	d000      	beq.n	8009bcc <sniprintf+0x34>
 8009bca:	1e63      	subs	r3, r4, #1
 8009bcc:	608b      	str	r3, [r1, #8]
 8009bce:	614b      	str	r3, [r1, #20]
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	425b      	negs	r3, r3
 8009bd4:	81cb      	strh	r3, [r1, #14]
 8009bd6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009bd8:	ab21      	add	r3, sp, #132	; 0x84
 8009bda:	0028      	movs	r0, r5
 8009bdc:	9301      	str	r3, [sp, #4]
 8009bde:	f001 fadf 	bl	800b1a0 <_svfiprintf_r>
 8009be2:	1c43      	adds	r3, r0, #1
 8009be4:	da01      	bge.n	8009bea <sniprintf+0x52>
 8009be6:	238b      	movs	r3, #139	; 0x8b
 8009be8:	602b      	str	r3, [r5, #0]
 8009bea:	2c00      	cmp	r4, #0
 8009bec:	d0df      	beq.n	8009bae <sniprintf+0x16>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	9a02      	ldr	r2, [sp, #8]
 8009bf2:	7013      	strb	r3, [r2, #0]
 8009bf4:	e7db      	b.n	8009bae <sniprintf+0x16>
 8009bf6:	46c0      	nop			; (mov r8, r8)
 8009bf8:	20000010 	.word	0x20000010

08009bfc <strstr>:
 8009bfc:	b510      	push	{r4, lr}
 8009bfe:	7803      	ldrb	r3, [r0, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10f      	bne.n	8009c24 <strstr+0x28>
 8009c04:	780b      	ldrb	r3, [r1, #0]
 8009c06:	425a      	negs	r2, r3
 8009c08:	4153      	adcs	r3, r2
 8009c0a:	425b      	negs	r3, r3
 8009c0c:	4018      	ands	r0, r3
 8009c0e:	bd10      	pop	{r4, pc}
 8009c10:	2300      	movs	r3, #0
 8009c12:	5cca      	ldrb	r2, [r1, r3]
 8009c14:	2a00      	cmp	r2, #0
 8009c16:	d0fa      	beq.n	8009c0e <strstr+0x12>
 8009c18:	5cc4      	ldrb	r4, [r0, r3]
 8009c1a:	4294      	cmp	r4, r2
 8009c1c:	d101      	bne.n	8009c22 <strstr+0x26>
 8009c1e:	3301      	adds	r3, #1
 8009c20:	e7f7      	b.n	8009c12 <strstr+0x16>
 8009c22:	3001      	adds	r0, #1
 8009c24:	7803      	ldrb	r3, [r0, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1f2      	bne.n	8009c10 <strstr+0x14>
 8009c2a:	0018      	movs	r0, r3
 8009c2c:	e7ef      	b.n	8009c0e <strstr+0x12>
	...

08009c30 <__utoa>:
 8009c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c32:	0017      	movs	r7, r2
 8009c34:	b08d      	sub	sp, #52	; 0x34
 8009c36:	2225      	movs	r2, #37	; 0x25
 8009c38:	0006      	movs	r6, r0
 8009c3a:	000d      	movs	r5, r1
 8009c3c:	a802      	add	r0, sp, #8
 8009c3e:	4914      	ldr	r1, [pc, #80]	; (8009c90 <__utoa+0x60>)
 8009c40:	f7ff fb3a 	bl	80092b8 <memcpy>
 8009c44:	aa02      	add	r2, sp, #8
 8009c46:	1ebb      	subs	r3, r7, #2
 8009c48:	2400      	movs	r4, #0
 8009c4a:	9201      	str	r2, [sp, #4]
 8009c4c:	2b22      	cmp	r3, #34	; 0x22
 8009c4e:	d905      	bls.n	8009c5c <__utoa+0x2c>
 8009c50:	702c      	strb	r4, [r5, #0]
 8009c52:	0025      	movs	r5, r4
 8009c54:	0028      	movs	r0, r5
 8009c56:	b00d      	add	sp, #52	; 0x34
 8009c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c5a:	0014      	movs	r4, r2
 8009c5c:	0030      	movs	r0, r6
 8009c5e:	0039      	movs	r1, r7
 8009c60:	f7f6 faea 	bl	8000238 <__aeabi_uidivmod>
 8009c64:	4684      	mov	ip, r0
 8009c66:	9801      	ldr	r0, [sp, #4]
 8009c68:	1c62      	adds	r2, r4, #1
 8009c6a:	18ab      	adds	r3, r5, r2
 8009c6c:	5c41      	ldrb	r1, [r0, r1]
 8009c6e:	1e5e      	subs	r6, r3, #1
 8009c70:	7031      	strb	r1, [r6, #0]
 8009c72:	4666      	mov	r6, ip
 8009c74:	2e00      	cmp	r6, #0
 8009c76:	d1f0      	bne.n	8009c5a <__utoa+0x2a>
 8009c78:	701e      	strb	r6, [r3, #0]
 8009c7a:	002b      	movs	r3, r5
 8009c7c:	1b5a      	subs	r2, r3, r5
 8009c7e:	4294      	cmp	r4, r2
 8009c80:	dde8      	ble.n	8009c54 <__utoa+0x24>
 8009c82:	781a      	ldrb	r2, [r3, #0]
 8009c84:	5d29      	ldrb	r1, [r5, r4]
 8009c86:	7019      	strb	r1, [r3, #0]
 8009c88:	552a      	strb	r2, [r5, r4]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	3c01      	subs	r4, #1
 8009c8e:	e7f5      	b.n	8009c7c <__utoa+0x4c>
 8009c90:	0800b928 	.word	0x0800b928

08009c94 <quorem>:
 8009c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c96:	6903      	ldr	r3, [r0, #16]
 8009c98:	690c      	ldr	r4, [r1, #16]
 8009c9a:	b089      	sub	sp, #36	; 0x24
 8009c9c:	0007      	movs	r7, r0
 8009c9e:	9105      	str	r1, [sp, #20]
 8009ca0:	2600      	movs	r6, #0
 8009ca2:	42a3      	cmp	r3, r4
 8009ca4:	db65      	blt.n	8009d72 <quorem+0xde>
 8009ca6:	000b      	movs	r3, r1
 8009ca8:	3c01      	subs	r4, #1
 8009caa:	3314      	adds	r3, #20
 8009cac:	00a5      	lsls	r5, r4, #2
 8009cae:	9303      	str	r3, [sp, #12]
 8009cb0:	195b      	adds	r3, r3, r5
 8009cb2:	9304      	str	r3, [sp, #16]
 8009cb4:	0003      	movs	r3, r0
 8009cb6:	3314      	adds	r3, #20
 8009cb8:	9302      	str	r3, [sp, #8]
 8009cba:	195d      	adds	r5, r3, r5
 8009cbc:	9b04      	ldr	r3, [sp, #16]
 8009cbe:	6828      	ldr	r0, [r5, #0]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	1c59      	adds	r1, r3, #1
 8009cc4:	9301      	str	r3, [sp, #4]
 8009cc6:	f7f6 fa31 	bl	800012c <__udivsi3>
 8009cca:	9001      	str	r0, [sp, #4]
 8009ccc:	42b0      	cmp	r0, r6
 8009cce:	d029      	beq.n	8009d24 <quorem+0x90>
 8009cd0:	9b03      	ldr	r3, [sp, #12]
 8009cd2:	9802      	ldr	r0, [sp, #8]
 8009cd4:	469c      	mov	ip, r3
 8009cd6:	9606      	str	r6, [sp, #24]
 8009cd8:	4662      	mov	r2, ip
 8009cda:	ca08      	ldmia	r2!, {r3}
 8009cdc:	4694      	mov	ip, r2
 8009cde:	9a01      	ldr	r2, [sp, #4]
 8009ce0:	b299      	uxth	r1, r3
 8009ce2:	4351      	muls	r1, r2
 8009ce4:	0c1b      	lsrs	r3, r3, #16
 8009ce6:	4353      	muls	r3, r2
 8009ce8:	1989      	adds	r1, r1, r6
 8009cea:	0c0a      	lsrs	r2, r1, #16
 8009cec:	189b      	adds	r3, r3, r2
 8009cee:	9307      	str	r3, [sp, #28]
 8009cf0:	0c1e      	lsrs	r6, r3, #16
 8009cf2:	6803      	ldr	r3, [r0, #0]
 8009cf4:	b289      	uxth	r1, r1
 8009cf6:	b29a      	uxth	r2, r3
 8009cf8:	9b06      	ldr	r3, [sp, #24]
 8009cfa:	18d2      	adds	r2, r2, r3
 8009cfc:	6803      	ldr	r3, [r0, #0]
 8009cfe:	1a52      	subs	r2, r2, r1
 8009d00:	0c19      	lsrs	r1, r3, #16
 8009d02:	466b      	mov	r3, sp
 8009d04:	8b9b      	ldrh	r3, [r3, #28]
 8009d06:	1acb      	subs	r3, r1, r3
 8009d08:	1411      	asrs	r1, r2, #16
 8009d0a:	185b      	adds	r3, r3, r1
 8009d0c:	1419      	asrs	r1, r3, #16
 8009d0e:	b292      	uxth	r2, r2
 8009d10:	041b      	lsls	r3, r3, #16
 8009d12:	431a      	orrs	r2, r3
 8009d14:	9b04      	ldr	r3, [sp, #16]
 8009d16:	9106      	str	r1, [sp, #24]
 8009d18:	c004      	stmia	r0!, {r2}
 8009d1a:	4563      	cmp	r3, ip
 8009d1c:	d2dc      	bcs.n	8009cd8 <quorem+0x44>
 8009d1e:	682b      	ldr	r3, [r5, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d02d      	beq.n	8009d80 <quorem+0xec>
 8009d24:	9905      	ldr	r1, [sp, #20]
 8009d26:	0038      	movs	r0, r7
 8009d28:	f001 f850 	bl	800adcc <__mcmp>
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	db1f      	blt.n	8009d70 <quorem+0xdc>
 8009d30:	2500      	movs	r5, #0
 8009d32:	9b01      	ldr	r3, [sp, #4]
 8009d34:	9802      	ldr	r0, [sp, #8]
 8009d36:	3301      	adds	r3, #1
 8009d38:	9903      	ldr	r1, [sp, #12]
 8009d3a:	9301      	str	r3, [sp, #4]
 8009d3c:	6802      	ldr	r2, [r0, #0]
 8009d3e:	c908      	ldmia	r1!, {r3}
 8009d40:	b292      	uxth	r2, r2
 8009d42:	1955      	adds	r5, r2, r5
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	1aaa      	subs	r2, r5, r2
 8009d48:	6805      	ldr	r5, [r0, #0]
 8009d4a:	0c1b      	lsrs	r3, r3, #16
 8009d4c:	0c2d      	lsrs	r5, r5, #16
 8009d4e:	1aeb      	subs	r3, r5, r3
 8009d50:	1415      	asrs	r5, r2, #16
 8009d52:	195b      	adds	r3, r3, r5
 8009d54:	141d      	asrs	r5, r3, #16
 8009d56:	b292      	uxth	r2, r2
 8009d58:	041b      	lsls	r3, r3, #16
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	c008      	stmia	r0!, {r3}
 8009d5e:	9b04      	ldr	r3, [sp, #16]
 8009d60:	428b      	cmp	r3, r1
 8009d62:	d2eb      	bcs.n	8009d3c <quorem+0xa8>
 8009d64:	9a02      	ldr	r2, [sp, #8]
 8009d66:	00a3      	lsls	r3, r4, #2
 8009d68:	18d3      	adds	r3, r2, r3
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	2a00      	cmp	r2, #0
 8009d6e:	d011      	beq.n	8009d94 <quorem+0x100>
 8009d70:	9e01      	ldr	r6, [sp, #4]
 8009d72:	0030      	movs	r0, r6
 8009d74:	b009      	add	sp, #36	; 0x24
 8009d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d78:	682b      	ldr	r3, [r5, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d104      	bne.n	8009d88 <quorem+0xf4>
 8009d7e:	3c01      	subs	r4, #1
 8009d80:	9b02      	ldr	r3, [sp, #8]
 8009d82:	3d04      	subs	r5, #4
 8009d84:	42ab      	cmp	r3, r5
 8009d86:	d3f7      	bcc.n	8009d78 <quorem+0xe4>
 8009d88:	613c      	str	r4, [r7, #16]
 8009d8a:	e7cb      	b.n	8009d24 <quorem+0x90>
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	2a00      	cmp	r2, #0
 8009d90:	d104      	bne.n	8009d9c <quorem+0x108>
 8009d92:	3c01      	subs	r4, #1
 8009d94:	9a02      	ldr	r2, [sp, #8]
 8009d96:	3b04      	subs	r3, #4
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d3f7      	bcc.n	8009d8c <quorem+0xf8>
 8009d9c:	613c      	str	r4, [r7, #16]
 8009d9e:	e7e7      	b.n	8009d70 <quorem+0xdc>

08009da0 <_dtoa_r>:
 8009da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009da2:	0016      	movs	r6, r2
 8009da4:	001f      	movs	r7, r3
 8009da6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009da8:	b09b      	sub	sp, #108	; 0x6c
 8009daa:	9002      	str	r0, [sp, #8]
 8009dac:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8009dae:	9606      	str	r6, [sp, #24]
 8009db0:	9707      	str	r7, [sp, #28]
 8009db2:	2c00      	cmp	r4, #0
 8009db4:	d108      	bne.n	8009dc8 <_dtoa_r+0x28>
 8009db6:	2010      	movs	r0, #16
 8009db8:	f000 fdde 	bl	800a978 <malloc>
 8009dbc:	9b02      	ldr	r3, [sp, #8]
 8009dbe:	6258      	str	r0, [r3, #36]	; 0x24
 8009dc0:	6044      	str	r4, [r0, #4]
 8009dc2:	6084      	str	r4, [r0, #8]
 8009dc4:	6004      	str	r4, [r0, #0]
 8009dc6:	60c4      	str	r4, [r0, #12]
 8009dc8:	9b02      	ldr	r3, [sp, #8]
 8009dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dcc:	6819      	ldr	r1, [r3, #0]
 8009dce:	2900      	cmp	r1, #0
 8009dd0:	d00b      	beq.n	8009dea <_dtoa_r+0x4a>
 8009dd2:	685a      	ldr	r2, [r3, #4]
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	4093      	lsls	r3, r2
 8009dd8:	604a      	str	r2, [r1, #4]
 8009dda:	608b      	str	r3, [r1, #8]
 8009ddc:	9802      	ldr	r0, [sp, #8]
 8009dde:	f000 fe18 	bl	800aa12 <_Bfree>
 8009de2:	2200      	movs	r2, #0
 8009de4:	9b02      	ldr	r3, [sp, #8]
 8009de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de8:	601a      	str	r2, [r3, #0]
 8009dea:	2f00      	cmp	r7, #0
 8009dec:	da20      	bge.n	8009e30 <_dtoa_r+0x90>
 8009dee:	2301      	movs	r3, #1
 8009df0:	602b      	str	r3, [r5, #0]
 8009df2:	007b      	lsls	r3, r7, #1
 8009df4:	085b      	lsrs	r3, r3, #1
 8009df6:	9307      	str	r3, [sp, #28]
 8009df8:	9c07      	ldr	r4, [sp, #28]
 8009dfa:	4bb2      	ldr	r3, [pc, #712]	; (800a0c4 <_dtoa_r+0x324>)
 8009dfc:	0022      	movs	r2, r4
 8009dfe:	9317      	str	r3, [sp, #92]	; 0x5c
 8009e00:	401a      	ands	r2, r3
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d117      	bne.n	8009e36 <_dtoa_r+0x96>
 8009e06:	4bb0      	ldr	r3, [pc, #704]	; (800a0c8 <_dtoa_r+0x328>)
 8009e08:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009e0a:	6013      	str	r3, [r2, #0]
 8009e0c:	9b06      	ldr	r3, [sp, #24]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d103      	bne.n	8009e1a <_dtoa_r+0x7a>
 8009e12:	0324      	lsls	r4, r4, #12
 8009e14:	d101      	bne.n	8009e1a <_dtoa_r+0x7a>
 8009e16:	f000 fd87 	bl	800a928 <_dtoa_r+0xb88>
 8009e1a:	4bac      	ldr	r3, [pc, #688]	; (800a0cc <_dtoa_r+0x32c>)
 8009e1c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009e1e:	9308      	str	r3, [sp, #32]
 8009e20:	2a00      	cmp	r2, #0
 8009e22:	d002      	beq.n	8009e2a <_dtoa_r+0x8a>
 8009e24:	4baa      	ldr	r3, [pc, #680]	; (800a0d0 <_dtoa_r+0x330>)
 8009e26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009e28:	6013      	str	r3, [r2, #0]
 8009e2a:	9808      	ldr	r0, [sp, #32]
 8009e2c:	b01b      	add	sp, #108	; 0x6c
 8009e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e30:	2300      	movs	r3, #0
 8009e32:	602b      	str	r3, [r5, #0]
 8009e34:	e7e0      	b.n	8009df8 <_dtoa_r+0x58>
 8009e36:	9e06      	ldr	r6, [sp, #24]
 8009e38:	9f07      	ldr	r7, [sp, #28]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	0030      	movs	r0, r6
 8009e40:	0039      	movs	r1, r7
 8009e42:	f7f6 faf9 	bl	8000438 <__aeabi_dcmpeq>
 8009e46:	1e05      	subs	r5, r0, #0
 8009e48:	d00b      	beq.n	8009e62 <_dtoa_r+0xc2>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009e4e:	6013      	str	r3, [r2, #0]
 8009e50:	4ba0      	ldr	r3, [pc, #640]	; (800a0d4 <_dtoa_r+0x334>)
 8009e52:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009e54:	9308      	str	r3, [sp, #32]
 8009e56:	2a00      	cmp	r2, #0
 8009e58:	d0e7      	beq.n	8009e2a <_dtoa_r+0x8a>
 8009e5a:	4a9f      	ldr	r2, [pc, #636]	; (800a0d8 <_dtoa_r+0x338>)
 8009e5c:	9924      	ldr	r1, [sp, #144]	; 0x90
 8009e5e:	600a      	str	r2, [r1, #0]
 8009e60:	e7e3      	b.n	8009e2a <_dtoa_r+0x8a>
 8009e62:	ab18      	add	r3, sp, #96	; 0x60
 8009e64:	9301      	str	r3, [sp, #4]
 8009e66:	ab19      	add	r3, sp, #100	; 0x64
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	0032      	movs	r2, r6
 8009e6c:	003b      	movs	r3, r7
 8009e6e:	9802      	ldr	r0, [sp, #8]
 8009e70:	f001 f82a 	bl	800aec8 <__d2b>
 8009e74:	0063      	lsls	r3, r4, #1
 8009e76:	9003      	str	r0, [sp, #12]
 8009e78:	0d5b      	lsrs	r3, r3, #21
 8009e7a:	d074      	beq.n	8009f66 <_dtoa_r+0x1c6>
 8009e7c:	033a      	lsls	r2, r7, #12
 8009e7e:	4c97      	ldr	r4, [pc, #604]	; (800a0dc <_dtoa_r+0x33c>)
 8009e80:	0b12      	lsrs	r2, r2, #12
 8009e82:	4314      	orrs	r4, r2
 8009e84:	0021      	movs	r1, r4
 8009e86:	4a96      	ldr	r2, [pc, #600]	; (800a0e0 <_dtoa_r+0x340>)
 8009e88:	0030      	movs	r0, r6
 8009e8a:	9516      	str	r5, [sp, #88]	; 0x58
 8009e8c:	189e      	adds	r6, r3, r2
 8009e8e:	2200      	movs	r2, #0
 8009e90:	4b94      	ldr	r3, [pc, #592]	; (800a0e4 <_dtoa_r+0x344>)
 8009e92:	f7f7 fc97 	bl	80017c4 <__aeabi_dsub>
 8009e96:	4a94      	ldr	r2, [pc, #592]	; (800a0e8 <_dtoa_r+0x348>)
 8009e98:	4b94      	ldr	r3, [pc, #592]	; (800a0ec <_dtoa_r+0x34c>)
 8009e9a:	f7f7 fa21 	bl	80012e0 <__aeabi_dmul>
 8009e9e:	4a94      	ldr	r2, [pc, #592]	; (800a0f0 <_dtoa_r+0x350>)
 8009ea0:	4b94      	ldr	r3, [pc, #592]	; (800a0f4 <_dtoa_r+0x354>)
 8009ea2:	f7f6 faf7 	bl	8000494 <__aeabi_dadd>
 8009ea6:	0004      	movs	r4, r0
 8009ea8:	0030      	movs	r0, r6
 8009eaa:	000d      	movs	r5, r1
 8009eac:	f7f8 f824 	bl	8001ef8 <__aeabi_i2d>
 8009eb0:	4a91      	ldr	r2, [pc, #580]	; (800a0f8 <_dtoa_r+0x358>)
 8009eb2:	4b92      	ldr	r3, [pc, #584]	; (800a0fc <_dtoa_r+0x35c>)
 8009eb4:	f7f7 fa14 	bl	80012e0 <__aeabi_dmul>
 8009eb8:	0002      	movs	r2, r0
 8009eba:	000b      	movs	r3, r1
 8009ebc:	0020      	movs	r0, r4
 8009ebe:	0029      	movs	r1, r5
 8009ec0:	f7f6 fae8 	bl	8000494 <__aeabi_dadd>
 8009ec4:	0004      	movs	r4, r0
 8009ec6:	000d      	movs	r5, r1
 8009ec8:	f7f7 ffe0 	bl	8001e8c <__aeabi_d2iz>
 8009ecc:	2200      	movs	r2, #0
 8009ece:	0007      	movs	r7, r0
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	0020      	movs	r0, r4
 8009ed4:	0029      	movs	r1, r5
 8009ed6:	f7f6 fab5 	bl	8000444 <__aeabi_dcmplt>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d009      	beq.n	8009ef2 <_dtoa_r+0x152>
 8009ede:	0038      	movs	r0, r7
 8009ee0:	f7f8 f80a 	bl	8001ef8 <__aeabi_i2d>
 8009ee4:	002b      	movs	r3, r5
 8009ee6:	0022      	movs	r2, r4
 8009ee8:	f7f6 faa6 	bl	8000438 <__aeabi_dcmpeq>
 8009eec:	4243      	negs	r3, r0
 8009eee:	4158      	adcs	r0, r3
 8009ef0:	1a3f      	subs	r7, r7, r0
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	9314      	str	r3, [sp, #80]	; 0x50
 8009ef6:	2f16      	cmp	r7, #22
 8009ef8:	d80d      	bhi.n	8009f16 <_dtoa_r+0x176>
 8009efa:	4981      	ldr	r1, [pc, #516]	; (800a100 <_dtoa_r+0x360>)
 8009efc:	00fb      	lsls	r3, r7, #3
 8009efe:	18c9      	adds	r1, r1, r3
 8009f00:	6808      	ldr	r0, [r1, #0]
 8009f02:	6849      	ldr	r1, [r1, #4]
 8009f04:	9a06      	ldr	r2, [sp, #24]
 8009f06:	9b07      	ldr	r3, [sp, #28]
 8009f08:	f7f6 fab0 	bl	800046c <__aeabi_dcmpgt>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	d046      	beq.n	8009f9e <_dtoa_r+0x1fe>
 8009f10:	2300      	movs	r3, #0
 8009f12:	3f01      	subs	r7, #1
 8009f14:	9314      	str	r3, [sp, #80]	; 0x50
 8009f16:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009f18:	1b9e      	subs	r6, r3, r6
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	930a      	str	r3, [sp, #40]	; 0x28
 8009f1e:	0033      	movs	r3, r6
 8009f20:	3b01      	subs	r3, #1
 8009f22:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f24:	d504      	bpl.n	8009f30 <_dtoa_r+0x190>
 8009f26:	2301      	movs	r3, #1
 8009f28:	1b9b      	subs	r3, r3, r6
 8009f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f30:	2f00      	cmp	r7, #0
 8009f32:	db36      	blt.n	8009fa2 <_dtoa_r+0x202>
 8009f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f36:	9711      	str	r7, [sp, #68]	; 0x44
 8009f38:	19db      	adds	r3, r3, r7
 8009f3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	9304      	str	r3, [sp, #16]
 8009f40:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009f42:	2401      	movs	r4, #1
 8009f44:	2b09      	cmp	r3, #9
 8009f46:	d900      	bls.n	8009f4a <_dtoa_r+0x1aa>
 8009f48:	e084      	b.n	800a054 <_dtoa_r+0x2b4>
 8009f4a:	2b05      	cmp	r3, #5
 8009f4c:	dd02      	ble.n	8009f54 <_dtoa_r+0x1b4>
 8009f4e:	2400      	movs	r4, #0
 8009f50:	3b04      	subs	r3, #4
 8009f52:	9320      	str	r3, [sp, #128]	; 0x80
 8009f54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009f56:	1e98      	subs	r0, r3, #2
 8009f58:	2803      	cmp	r0, #3
 8009f5a:	d900      	bls.n	8009f5e <_dtoa_r+0x1be>
 8009f5c:	e084      	b.n	800a068 <_dtoa_r+0x2c8>
 8009f5e:	f7f6 f8db 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009f62:	7775      	.short	0x7775
 8009f64:	6a28      	.short	0x6a28
 8009f66:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009f68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009f6a:	189e      	adds	r6, r3, r2
 8009f6c:	4b65      	ldr	r3, [pc, #404]	; (800a104 <_dtoa_r+0x364>)
 8009f6e:	18f2      	adds	r2, r6, r3
 8009f70:	2a20      	cmp	r2, #32
 8009f72:	dd0f      	ble.n	8009f94 <_dtoa_r+0x1f4>
 8009f74:	2340      	movs	r3, #64	; 0x40
 8009f76:	1a9b      	subs	r3, r3, r2
 8009f78:	409c      	lsls	r4, r3
 8009f7a:	4b63      	ldr	r3, [pc, #396]	; (800a108 <_dtoa_r+0x368>)
 8009f7c:	9806      	ldr	r0, [sp, #24]
 8009f7e:	18f3      	adds	r3, r6, r3
 8009f80:	40d8      	lsrs	r0, r3
 8009f82:	4320      	orrs	r0, r4
 8009f84:	f7f7 fff2 	bl	8001f6c <__aeabi_ui2d>
 8009f88:	2301      	movs	r3, #1
 8009f8a:	4c60      	ldr	r4, [pc, #384]	; (800a10c <_dtoa_r+0x36c>)
 8009f8c:	3e01      	subs	r6, #1
 8009f8e:	1909      	adds	r1, r1, r4
 8009f90:	9316      	str	r3, [sp, #88]	; 0x58
 8009f92:	e77c      	b.n	8009e8e <_dtoa_r+0xee>
 8009f94:	2320      	movs	r3, #32
 8009f96:	9806      	ldr	r0, [sp, #24]
 8009f98:	1a9b      	subs	r3, r3, r2
 8009f9a:	4098      	lsls	r0, r3
 8009f9c:	e7f2      	b.n	8009f84 <_dtoa_r+0x1e4>
 8009f9e:	9014      	str	r0, [sp, #80]	; 0x50
 8009fa0:	e7b9      	b.n	8009f16 <_dtoa_r+0x176>
 8009fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fa4:	1bdb      	subs	r3, r3, r7
 8009fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8009fa8:	427b      	negs	r3, r7
 8009faa:	9304      	str	r3, [sp, #16]
 8009fac:	2300      	movs	r3, #0
 8009fae:	9311      	str	r3, [sp, #68]	; 0x44
 8009fb0:	e7c6      	b.n	8009f40 <_dtoa_r+0x1a0>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	930d      	str	r3, [sp, #52]	; 0x34
 8009fb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	dd59      	ble.n	800a070 <_dtoa_r+0x2d0>
 8009fbc:	930c      	str	r3, [sp, #48]	; 0x30
 8009fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8009fc0:	9a02      	ldr	r2, [sp, #8]
 8009fc2:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	606a      	str	r2, [r5, #4]
 8009fc8:	3204      	adds	r2, #4
 8009fca:	0010      	movs	r0, r2
 8009fcc:	3014      	adds	r0, #20
 8009fce:	6869      	ldr	r1, [r5, #4]
 8009fd0:	4298      	cmp	r0, r3
 8009fd2:	d952      	bls.n	800a07a <_dtoa_r+0x2da>
 8009fd4:	9802      	ldr	r0, [sp, #8]
 8009fd6:	f000 fce4 	bl	800a9a2 <_Balloc>
 8009fda:	9b02      	ldr	r3, [sp, #8]
 8009fdc:	6028      	str	r0, [r5, #0]
 8009fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	9308      	str	r3, [sp, #32]
 8009fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fe6:	2b0e      	cmp	r3, #14
 8009fe8:	d900      	bls.n	8009fec <_dtoa_r+0x24c>
 8009fea:	e10a      	b.n	800a202 <_dtoa_r+0x462>
 8009fec:	2c00      	cmp	r4, #0
 8009fee:	d100      	bne.n	8009ff2 <_dtoa_r+0x252>
 8009ff0:	e107      	b.n	800a202 <_dtoa_r+0x462>
 8009ff2:	9b06      	ldr	r3, [sp, #24]
 8009ff4:	9c07      	ldr	r4, [sp, #28]
 8009ff6:	9312      	str	r3, [sp, #72]	; 0x48
 8009ff8:	9413      	str	r4, [sp, #76]	; 0x4c
 8009ffa:	2f00      	cmp	r7, #0
 8009ffc:	dc00      	bgt.n	800a000 <_dtoa_r+0x260>
 8009ffe:	e089      	b.n	800a114 <_dtoa_r+0x374>
 800a000:	210f      	movs	r1, #15
 800a002:	003a      	movs	r2, r7
 800a004:	4b3e      	ldr	r3, [pc, #248]	; (800a100 <_dtoa_r+0x360>)
 800a006:	400a      	ands	r2, r1
 800a008:	00d2      	lsls	r2, r2, #3
 800a00a:	189b      	adds	r3, r3, r2
 800a00c:	681d      	ldr	r5, [r3, #0]
 800a00e:	685e      	ldr	r6, [r3, #4]
 800a010:	2302      	movs	r3, #2
 800a012:	113c      	asrs	r4, r7, #4
 800a014:	930e      	str	r3, [sp, #56]	; 0x38
 800a016:	06e3      	lsls	r3, r4, #27
 800a018:	d50b      	bpl.n	800a032 <_dtoa_r+0x292>
 800a01a:	4b3d      	ldr	r3, [pc, #244]	; (800a110 <_dtoa_r+0x370>)
 800a01c:	400c      	ands	r4, r1
 800a01e:	6a1a      	ldr	r2, [r3, #32]
 800a020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a022:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a024:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a026:	f7f6 fd51 	bl	8000acc <__aeabi_ddiv>
 800a02a:	2303      	movs	r3, #3
 800a02c:	9006      	str	r0, [sp, #24]
 800a02e:	9107      	str	r1, [sp, #28]
 800a030:	930e      	str	r3, [sp, #56]	; 0x38
 800a032:	2300      	movs	r3, #0
 800a034:	e03a      	b.n	800a0ac <_dtoa_r+0x30c>
 800a036:	2301      	movs	r3, #1
 800a038:	930d      	str	r3, [sp, #52]	; 0x34
 800a03a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a03c:	18fb      	adds	r3, r7, r3
 800a03e:	930c      	str	r3, [sp, #48]	; 0x30
 800a040:	3301      	adds	r3, #1
 800a042:	9309      	str	r3, [sp, #36]	; 0x24
 800a044:	2b00      	cmp	r3, #0
 800a046:	dcbb      	bgt.n	8009fc0 <_dtoa_r+0x220>
 800a048:	2301      	movs	r3, #1
 800a04a:	e7b9      	b.n	8009fc0 <_dtoa_r+0x220>
 800a04c:	2300      	movs	r3, #0
 800a04e:	e7b1      	b.n	8009fb4 <_dtoa_r+0x214>
 800a050:	2300      	movs	r3, #0
 800a052:	e7f1      	b.n	800a038 <_dtoa_r+0x298>
 800a054:	2300      	movs	r3, #0
 800a056:	940d      	str	r4, [sp, #52]	; 0x34
 800a058:	9320      	str	r3, [sp, #128]	; 0x80
 800a05a:	3b01      	subs	r3, #1
 800a05c:	2200      	movs	r2, #0
 800a05e:	930c      	str	r3, [sp, #48]	; 0x30
 800a060:	9309      	str	r3, [sp, #36]	; 0x24
 800a062:	3313      	adds	r3, #19
 800a064:	9221      	str	r2, [sp, #132]	; 0x84
 800a066:	e7ab      	b.n	8009fc0 <_dtoa_r+0x220>
 800a068:	2301      	movs	r3, #1
 800a06a:	930d      	str	r3, [sp, #52]	; 0x34
 800a06c:	3b02      	subs	r3, #2
 800a06e:	e7f5      	b.n	800a05c <_dtoa_r+0x2bc>
 800a070:	2301      	movs	r3, #1
 800a072:	930c      	str	r3, [sp, #48]	; 0x30
 800a074:	9309      	str	r3, [sp, #36]	; 0x24
 800a076:	001a      	movs	r2, r3
 800a078:	e7f4      	b.n	800a064 <_dtoa_r+0x2c4>
 800a07a:	3101      	adds	r1, #1
 800a07c:	6069      	str	r1, [r5, #4]
 800a07e:	0052      	lsls	r2, r2, #1
 800a080:	e7a3      	b.n	8009fca <_dtoa_r+0x22a>
 800a082:	2301      	movs	r3, #1
 800a084:	421c      	tst	r4, r3
 800a086:	d00e      	beq.n	800a0a6 <_dtoa_r+0x306>
 800a088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a08a:	4a21      	ldr	r2, [pc, #132]	; (800a110 <_dtoa_r+0x370>)
 800a08c:	3301      	adds	r3, #1
 800a08e:	930e      	str	r3, [sp, #56]	; 0x38
 800a090:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a092:	0028      	movs	r0, r5
 800a094:	00db      	lsls	r3, r3, #3
 800a096:	189b      	adds	r3, r3, r2
 800a098:	0031      	movs	r1, r6
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	f7f7 f91f 	bl	80012e0 <__aeabi_dmul>
 800a0a2:	0005      	movs	r5, r0
 800a0a4:	000e      	movs	r6, r1
 800a0a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0a8:	1064      	asrs	r4, r4, #1
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	9310      	str	r3, [sp, #64]	; 0x40
 800a0ae:	2c00      	cmp	r4, #0
 800a0b0:	d1e7      	bne.n	800a082 <_dtoa_r+0x2e2>
 800a0b2:	9806      	ldr	r0, [sp, #24]
 800a0b4:	9907      	ldr	r1, [sp, #28]
 800a0b6:	002a      	movs	r2, r5
 800a0b8:	0033      	movs	r3, r6
 800a0ba:	f7f6 fd07 	bl	8000acc <__aeabi_ddiv>
 800a0be:	9006      	str	r0, [sp, #24]
 800a0c0:	9107      	str	r1, [sp, #28]
 800a0c2:	e042      	b.n	800a14a <_dtoa_r+0x3aa>
 800a0c4:	7ff00000 	.word	0x7ff00000
 800a0c8:	0000270f 	.word	0x0000270f
 800a0cc:	0800b956 	.word	0x0800b956
 800a0d0:	0800b959 	.word	0x0800b959
 800a0d4:	0800b904 	.word	0x0800b904
 800a0d8:	0800b905 	.word	0x0800b905
 800a0dc:	3ff00000 	.word	0x3ff00000
 800a0e0:	fffffc01 	.word	0xfffffc01
 800a0e4:	3ff80000 	.word	0x3ff80000
 800a0e8:	636f4361 	.word	0x636f4361
 800a0ec:	3fd287a7 	.word	0x3fd287a7
 800a0f0:	8b60c8b3 	.word	0x8b60c8b3
 800a0f4:	3fc68a28 	.word	0x3fc68a28
 800a0f8:	509f79fb 	.word	0x509f79fb
 800a0fc:	3fd34413 	.word	0x3fd34413
 800a100:	0800b988 	.word	0x0800b988
 800a104:	00000432 	.word	0x00000432
 800a108:	00000412 	.word	0x00000412
 800a10c:	fe100000 	.word	0xfe100000
 800a110:	0800b960 	.word	0x0800b960
 800a114:	2302      	movs	r3, #2
 800a116:	930e      	str	r3, [sp, #56]	; 0x38
 800a118:	2f00      	cmp	r7, #0
 800a11a:	d016      	beq.n	800a14a <_dtoa_r+0x3aa>
 800a11c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a11e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a120:	427c      	negs	r4, r7
 800a122:	330d      	adds	r3, #13
 800a124:	4023      	ands	r3, r4
 800a126:	4ace      	ldr	r2, [pc, #824]	; (800a460 <_dtoa_r+0x6c0>)
 800a128:	00db      	lsls	r3, r3, #3
 800a12a:	18d3      	adds	r3, r2, r3
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	f7f7 f8d6 	bl	80012e0 <__aeabi_dmul>
 800a134:	2300      	movs	r3, #0
 800a136:	2601      	movs	r6, #1
 800a138:	001d      	movs	r5, r3
 800a13a:	9006      	str	r0, [sp, #24]
 800a13c:	9107      	str	r1, [sp, #28]
 800a13e:	1124      	asrs	r4, r4, #4
 800a140:	2c00      	cmp	r4, #0
 800a142:	d000      	beq.n	800a146 <_dtoa_r+0x3a6>
 800a144:	e08c      	b.n	800a260 <_dtoa_r+0x4c0>
 800a146:	2b00      	cmp	r3, #0
 800a148:	d1b9      	bne.n	800a0be <_dtoa_r+0x31e>
 800a14a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d100      	bne.n	800a152 <_dtoa_r+0x3b2>
 800a150:	e096      	b.n	800a280 <_dtoa_r+0x4e0>
 800a152:	9c06      	ldr	r4, [sp, #24]
 800a154:	9d07      	ldr	r5, [sp, #28]
 800a156:	2200      	movs	r2, #0
 800a158:	4bc2      	ldr	r3, [pc, #776]	; (800a464 <_dtoa_r+0x6c4>)
 800a15a:	0020      	movs	r0, r4
 800a15c:	0029      	movs	r1, r5
 800a15e:	f7f6 f971 	bl	8000444 <__aeabi_dcmplt>
 800a162:	2800      	cmp	r0, #0
 800a164:	d100      	bne.n	800a168 <_dtoa_r+0x3c8>
 800a166:	e08b      	b.n	800a280 <_dtoa_r+0x4e0>
 800a168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d100      	bne.n	800a170 <_dtoa_r+0x3d0>
 800a16e:	e087      	b.n	800a280 <_dtoa_r+0x4e0>
 800a170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a172:	2b00      	cmp	r3, #0
 800a174:	dd41      	ble.n	800a1fa <_dtoa_r+0x45a>
 800a176:	4bbc      	ldr	r3, [pc, #752]	; (800a468 <_dtoa_r+0x6c8>)
 800a178:	2200      	movs	r2, #0
 800a17a:	0020      	movs	r0, r4
 800a17c:	0029      	movs	r1, r5
 800a17e:	f7f7 f8af 	bl	80012e0 <__aeabi_dmul>
 800a182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a184:	9006      	str	r0, [sp, #24]
 800a186:	9107      	str	r1, [sp, #28]
 800a188:	3301      	adds	r3, #1
 800a18a:	930e      	str	r3, [sp, #56]	; 0x38
 800a18c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a18e:	1e7e      	subs	r6, r7, #1
 800a190:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a192:	9310      	str	r3, [sp, #64]	; 0x40
 800a194:	f7f7 feb0 	bl	8001ef8 <__aeabi_i2d>
 800a198:	9a06      	ldr	r2, [sp, #24]
 800a19a:	9b07      	ldr	r3, [sp, #28]
 800a19c:	f7f7 f8a0 	bl	80012e0 <__aeabi_dmul>
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	4bb2      	ldr	r3, [pc, #712]	; (800a46c <_dtoa_r+0x6cc>)
 800a1a4:	f7f6 f976 	bl	8000494 <__aeabi_dadd>
 800a1a8:	4ab1      	ldr	r2, [pc, #708]	; (800a470 <_dtoa_r+0x6d0>)
 800a1aa:	900e      	str	r0, [sp, #56]	; 0x38
 800a1ac:	910f      	str	r1, [sp, #60]	; 0x3c
 800a1ae:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800a1b0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a1b2:	4694      	mov	ip, r2
 800a1b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1b6:	4463      	add	r3, ip
 800a1b8:	9315      	str	r3, [sp, #84]	; 0x54
 800a1ba:	001d      	movs	r5, r3
 800a1bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d161      	bne.n	800a286 <_dtoa_r+0x4e6>
 800a1c2:	9806      	ldr	r0, [sp, #24]
 800a1c4:	9907      	ldr	r1, [sp, #28]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	4baa      	ldr	r3, [pc, #680]	; (800a474 <_dtoa_r+0x6d4>)
 800a1ca:	f7f7 fafb 	bl	80017c4 <__aeabi_dsub>
 800a1ce:	0022      	movs	r2, r4
 800a1d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1d2:	9006      	str	r0, [sp, #24]
 800a1d4:	9107      	str	r1, [sp, #28]
 800a1d6:	f7f6 f949 	bl	800046c <__aeabi_dcmpgt>
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	d000      	beq.n	800a1e0 <_dtoa_r+0x440>
 800a1de:	e2a8      	b.n	800a732 <_dtoa_r+0x992>
 800a1e0:	48a5      	ldr	r0, [pc, #660]	; (800a478 <_dtoa_r+0x6d8>)
 800a1e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a1e4:	4684      	mov	ip, r0
 800a1e6:	4461      	add	r1, ip
 800a1e8:	000b      	movs	r3, r1
 800a1ea:	9806      	ldr	r0, [sp, #24]
 800a1ec:	9907      	ldr	r1, [sp, #28]
 800a1ee:	0022      	movs	r2, r4
 800a1f0:	f7f6 f928 	bl	8000444 <__aeabi_dcmplt>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	d000      	beq.n	800a1fa <_dtoa_r+0x45a>
 800a1f8:	e295      	b.n	800a726 <_dtoa_r+0x986>
 800a1fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1fc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a1fe:	9306      	str	r3, [sp, #24]
 800a200:	9407      	str	r4, [sp, #28]
 800a202:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a204:	2b00      	cmp	r3, #0
 800a206:	da00      	bge.n	800a20a <_dtoa_r+0x46a>
 800a208:	e15c      	b.n	800a4c4 <_dtoa_r+0x724>
 800a20a:	2f0e      	cmp	r7, #14
 800a20c:	dd00      	ble.n	800a210 <_dtoa_r+0x470>
 800a20e:	e159      	b.n	800a4c4 <_dtoa_r+0x724>
 800a210:	4b93      	ldr	r3, [pc, #588]	; (800a460 <_dtoa_r+0x6c0>)
 800a212:	00fa      	lsls	r2, r7, #3
 800a214:	189b      	adds	r3, r3, r2
 800a216:	685c      	ldr	r4, [r3, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	9304      	str	r3, [sp, #16]
 800a21c:	9405      	str	r4, [sp, #20]
 800a21e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a220:	2b00      	cmp	r3, #0
 800a222:	db00      	blt.n	800a226 <_dtoa_r+0x486>
 800a224:	e0d8      	b.n	800a3d8 <_dtoa_r+0x638>
 800a226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a228:	2b00      	cmp	r3, #0
 800a22a:	dd00      	ble.n	800a22e <_dtoa_r+0x48e>
 800a22c:	e0d4      	b.n	800a3d8 <_dtoa_r+0x638>
 800a22e:	d000      	beq.n	800a232 <_dtoa_r+0x492>
 800a230:	e27d      	b.n	800a72e <_dtoa_r+0x98e>
 800a232:	9804      	ldr	r0, [sp, #16]
 800a234:	9905      	ldr	r1, [sp, #20]
 800a236:	2200      	movs	r2, #0
 800a238:	4b8e      	ldr	r3, [pc, #568]	; (800a474 <_dtoa_r+0x6d4>)
 800a23a:	f7f7 f851 	bl	80012e0 <__aeabi_dmul>
 800a23e:	9a06      	ldr	r2, [sp, #24]
 800a240:	9b07      	ldr	r3, [sp, #28]
 800a242:	f7f6 f91d 	bl	8000480 <__aeabi_dcmpge>
 800a246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a248:	9304      	str	r3, [sp, #16]
 800a24a:	001e      	movs	r6, r3
 800a24c:	2800      	cmp	r0, #0
 800a24e:	d000      	beq.n	800a252 <_dtoa_r+0x4b2>
 800a250:	e24f      	b.n	800a6f2 <_dtoa_r+0x952>
 800a252:	9b08      	ldr	r3, [sp, #32]
 800a254:	9a08      	ldr	r2, [sp, #32]
 800a256:	1c5d      	adds	r5, r3, #1
 800a258:	2331      	movs	r3, #49	; 0x31
 800a25a:	3701      	adds	r7, #1
 800a25c:	7013      	strb	r3, [r2, #0]
 800a25e:	e24b      	b.n	800a6f8 <_dtoa_r+0x958>
 800a260:	4234      	tst	r4, r6
 800a262:	d00a      	beq.n	800a27a <_dtoa_r+0x4da>
 800a264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a266:	4a85      	ldr	r2, [pc, #532]	; (800a47c <_dtoa_r+0x6dc>)
 800a268:	3301      	adds	r3, #1
 800a26a:	930e      	str	r3, [sp, #56]	; 0x38
 800a26c:	00eb      	lsls	r3, r5, #3
 800a26e:	189b      	adds	r3, r3, r2
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	f7f7 f834 	bl	80012e0 <__aeabi_dmul>
 800a278:	0033      	movs	r3, r6
 800a27a:	1064      	asrs	r4, r4, #1
 800a27c:	3501      	adds	r5, #1
 800a27e:	e75f      	b.n	800a140 <_dtoa_r+0x3a0>
 800a280:	003e      	movs	r6, r7
 800a282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a284:	e784      	b.n	800a190 <_dtoa_r+0x3f0>
 800a286:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a288:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a28a:	1e5a      	subs	r2, r3, #1
 800a28c:	4b74      	ldr	r3, [pc, #464]	; (800a460 <_dtoa_r+0x6c0>)
 800a28e:	00d2      	lsls	r2, r2, #3
 800a290:	189b      	adds	r3, r3, r2
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	2900      	cmp	r1, #0
 800a298:	d049      	beq.n	800a32e <_dtoa_r+0x58e>
 800a29a:	2000      	movs	r0, #0
 800a29c:	4978      	ldr	r1, [pc, #480]	; (800a480 <_dtoa_r+0x6e0>)
 800a29e:	f7f6 fc15 	bl	8000acc <__aeabi_ddiv>
 800a2a2:	002b      	movs	r3, r5
 800a2a4:	0022      	movs	r2, r4
 800a2a6:	f7f7 fa8d 	bl	80017c4 <__aeabi_dsub>
 800a2aa:	9b08      	ldr	r3, [sp, #32]
 800a2ac:	900e      	str	r0, [sp, #56]	; 0x38
 800a2ae:	910f      	str	r1, [sp, #60]	; 0x3c
 800a2b0:	9315      	str	r3, [sp, #84]	; 0x54
 800a2b2:	9806      	ldr	r0, [sp, #24]
 800a2b4:	9907      	ldr	r1, [sp, #28]
 800a2b6:	f7f7 fde9 	bl	8001e8c <__aeabi_d2iz>
 800a2ba:	0004      	movs	r4, r0
 800a2bc:	f7f7 fe1c 	bl	8001ef8 <__aeabi_i2d>
 800a2c0:	0002      	movs	r2, r0
 800a2c2:	000b      	movs	r3, r1
 800a2c4:	9806      	ldr	r0, [sp, #24]
 800a2c6:	9907      	ldr	r1, [sp, #28]
 800a2c8:	f7f7 fa7c 	bl	80017c4 <__aeabi_dsub>
 800a2cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2ce:	3430      	adds	r4, #48	; 0x30
 800a2d0:	1c5d      	adds	r5, r3, #1
 800a2d2:	701c      	strb	r4, [r3, #0]
 800a2d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2d8:	9006      	str	r0, [sp, #24]
 800a2da:	9107      	str	r1, [sp, #28]
 800a2dc:	f7f6 f8b2 	bl	8000444 <__aeabi_dcmplt>
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	d16c      	bne.n	800a3be <_dtoa_r+0x61e>
 800a2e4:	9a06      	ldr	r2, [sp, #24]
 800a2e6:	9b07      	ldr	r3, [sp, #28]
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	495e      	ldr	r1, [pc, #376]	; (800a464 <_dtoa_r+0x6c4>)
 800a2ec:	f7f7 fa6a 	bl	80017c4 <__aeabi_dsub>
 800a2f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2f4:	f7f6 f8a6 	bl	8000444 <__aeabi_dcmplt>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d000      	beq.n	800a2fe <_dtoa_r+0x55e>
 800a2fc:	e0c3      	b.n	800a486 <_dtoa_r+0x6e6>
 800a2fe:	9b08      	ldr	r3, [sp, #32]
 800a300:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a302:	1aeb      	subs	r3, r5, r3
 800a304:	429a      	cmp	r2, r3
 800a306:	dc00      	bgt.n	800a30a <_dtoa_r+0x56a>
 800a308:	e777      	b.n	800a1fa <_dtoa_r+0x45a>
 800a30a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a30c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a30e:	2200      	movs	r2, #0
 800a310:	4b55      	ldr	r3, [pc, #340]	; (800a468 <_dtoa_r+0x6c8>)
 800a312:	f7f6 ffe5 	bl	80012e0 <__aeabi_dmul>
 800a316:	2200      	movs	r2, #0
 800a318:	900e      	str	r0, [sp, #56]	; 0x38
 800a31a:	910f      	str	r1, [sp, #60]	; 0x3c
 800a31c:	9806      	ldr	r0, [sp, #24]
 800a31e:	9907      	ldr	r1, [sp, #28]
 800a320:	4b51      	ldr	r3, [pc, #324]	; (800a468 <_dtoa_r+0x6c8>)
 800a322:	f7f6 ffdd 	bl	80012e0 <__aeabi_dmul>
 800a326:	9515      	str	r5, [sp, #84]	; 0x54
 800a328:	9006      	str	r0, [sp, #24]
 800a32a:	9107      	str	r1, [sp, #28]
 800a32c:	e7c1      	b.n	800a2b2 <_dtoa_r+0x512>
 800a32e:	0020      	movs	r0, r4
 800a330:	0029      	movs	r1, r5
 800a332:	f7f6 ffd5 	bl	80012e0 <__aeabi_dmul>
 800a336:	9c08      	ldr	r4, [sp, #32]
 800a338:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a33a:	0023      	movs	r3, r4
 800a33c:	4694      	mov	ip, r2
 800a33e:	900e      	str	r0, [sp, #56]	; 0x38
 800a340:	910f      	str	r1, [sp, #60]	; 0x3c
 800a342:	4463      	add	r3, ip
 800a344:	9315      	str	r3, [sp, #84]	; 0x54
 800a346:	9806      	ldr	r0, [sp, #24]
 800a348:	9907      	ldr	r1, [sp, #28]
 800a34a:	f7f7 fd9f 	bl	8001e8c <__aeabi_d2iz>
 800a34e:	0005      	movs	r5, r0
 800a350:	f7f7 fdd2 	bl	8001ef8 <__aeabi_i2d>
 800a354:	000b      	movs	r3, r1
 800a356:	0002      	movs	r2, r0
 800a358:	9806      	ldr	r0, [sp, #24]
 800a35a:	9907      	ldr	r1, [sp, #28]
 800a35c:	f7f7 fa32 	bl	80017c4 <__aeabi_dsub>
 800a360:	3530      	adds	r5, #48	; 0x30
 800a362:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a364:	7025      	strb	r5, [r4, #0]
 800a366:	3401      	adds	r4, #1
 800a368:	9006      	str	r0, [sp, #24]
 800a36a:	9107      	str	r1, [sp, #28]
 800a36c:	42a3      	cmp	r3, r4
 800a36e:	d12a      	bne.n	800a3c6 <_dtoa_r+0x626>
 800a370:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a372:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a374:	9a08      	ldr	r2, [sp, #32]
 800a376:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a378:	4694      	mov	ip, r2
 800a37a:	4463      	add	r3, ip
 800a37c:	2200      	movs	r2, #0
 800a37e:	001d      	movs	r5, r3
 800a380:	4b3f      	ldr	r3, [pc, #252]	; (800a480 <_dtoa_r+0x6e0>)
 800a382:	f7f6 f887 	bl	8000494 <__aeabi_dadd>
 800a386:	0002      	movs	r2, r0
 800a388:	000b      	movs	r3, r1
 800a38a:	9806      	ldr	r0, [sp, #24]
 800a38c:	9907      	ldr	r1, [sp, #28]
 800a38e:	f7f6 f86d 	bl	800046c <__aeabi_dcmpgt>
 800a392:	2800      	cmp	r0, #0
 800a394:	d000      	beq.n	800a398 <_dtoa_r+0x5f8>
 800a396:	e076      	b.n	800a486 <_dtoa_r+0x6e6>
 800a398:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a39a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a39c:	2000      	movs	r0, #0
 800a39e:	4938      	ldr	r1, [pc, #224]	; (800a480 <_dtoa_r+0x6e0>)
 800a3a0:	f7f7 fa10 	bl	80017c4 <__aeabi_dsub>
 800a3a4:	0002      	movs	r2, r0
 800a3a6:	000b      	movs	r3, r1
 800a3a8:	9806      	ldr	r0, [sp, #24]
 800a3aa:	9907      	ldr	r1, [sp, #28]
 800a3ac:	f7f6 f84a 	bl	8000444 <__aeabi_dcmplt>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	d100      	bne.n	800a3b6 <_dtoa_r+0x616>
 800a3b4:	e721      	b.n	800a1fa <_dtoa_r+0x45a>
 800a3b6:	1e6b      	subs	r3, r5, #1
 800a3b8:	781a      	ldrb	r2, [r3, #0]
 800a3ba:	2a30      	cmp	r2, #48	; 0x30
 800a3bc:	d001      	beq.n	800a3c2 <_dtoa_r+0x622>
 800a3be:	0037      	movs	r7, r6
 800a3c0:	e03f      	b.n	800a442 <_dtoa_r+0x6a2>
 800a3c2:	001d      	movs	r5, r3
 800a3c4:	e7f7      	b.n	800a3b6 <_dtoa_r+0x616>
 800a3c6:	9806      	ldr	r0, [sp, #24]
 800a3c8:	9907      	ldr	r1, [sp, #28]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	4b26      	ldr	r3, [pc, #152]	; (800a468 <_dtoa_r+0x6c8>)
 800a3ce:	f7f6 ff87 	bl	80012e0 <__aeabi_dmul>
 800a3d2:	9006      	str	r0, [sp, #24]
 800a3d4:	9107      	str	r1, [sp, #28]
 800a3d6:	e7b6      	b.n	800a346 <_dtoa_r+0x5a6>
 800a3d8:	9e08      	ldr	r6, [sp, #32]
 800a3da:	9a04      	ldr	r2, [sp, #16]
 800a3dc:	9b05      	ldr	r3, [sp, #20]
 800a3de:	9806      	ldr	r0, [sp, #24]
 800a3e0:	9907      	ldr	r1, [sp, #28]
 800a3e2:	f7f6 fb73 	bl	8000acc <__aeabi_ddiv>
 800a3e6:	f7f7 fd51 	bl	8001e8c <__aeabi_d2iz>
 800a3ea:	0004      	movs	r4, r0
 800a3ec:	f7f7 fd84 	bl	8001ef8 <__aeabi_i2d>
 800a3f0:	9a04      	ldr	r2, [sp, #16]
 800a3f2:	9b05      	ldr	r3, [sp, #20]
 800a3f4:	f7f6 ff74 	bl	80012e0 <__aeabi_dmul>
 800a3f8:	0002      	movs	r2, r0
 800a3fa:	000b      	movs	r3, r1
 800a3fc:	9806      	ldr	r0, [sp, #24]
 800a3fe:	9907      	ldr	r1, [sp, #28]
 800a400:	f7f7 f9e0 	bl	80017c4 <__aeabi_dsub>
 800a404:	0023      	movs	r3, r4
 800a406:	3330      	adds	r3, #48	; 0x30
 800a408:	7033      	strb	r3, [r6, #0]
 800a40a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a40c:	9b08      	ldr	r3, [sp, #32]
 800a40e:	1c75      	adds	r5, r6, #1
 800a410:	1aeb      	subs	r3, r5, r3
 800a412:	429a      	cmp	r2, r3
 800a414:	d148      	bne.n	800a4a8 <_dtoa_r+0x708>
 800a416:	0002      	movs	r2, r0
 800a418:	000b      	movs	r3, r1
 800a41a:	f7f6 f83b 	bl	8000494 <__aeabi_dadd>
 800a41e:	9a04      	ldr	r2, [sp, #16]
 800a420:	9b05      	ldr	r3, [sp, #20]
 800a422:	9006      	str	r0, [sp, #24]
 800a424:	9107      	str	r1, [sp, #28]
 800a426:	f7f6 f821 	bl	800046c <__aeabi_dcmpgt>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d12a      	bne.n	800a484 <_dtoa_r+0x6e4>
 800a42e:	9a04      	ldr	r2, [sp, #16]
 800a430:	9b05      	ldr	r3, [sp, #20]
 800a432:	9806      	ldr	r0, [sp, #24]
 800a434:	9907      	ldr	r1, [sp, #28]
 800a436:	f7f5 ffff 	bl	8000438 <__aeabi_dcmpeq>
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d001      	beq.n	800a442 <_dtoa_r+0x6a2>
 800a43e:	07e3      	lsls	r3, r4, #31
 800a440:	d420      	bmi.n	800a484 <_dtoa_r+0x6e4>
 800a442:	9903      	ldr	r1, [sp, #12]
 800a444:	9802      	ldr	r0, [sp, #8]
 800a446:	f000 fae4 	bl	800aa12 <_Bfree>
 800a44a:	2300      	movs	r3, #0
 800a44c:	702b      	strb	r3, [r5, #0]
 800a44e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a450:	3701      	adds	r7, #1
 800a452:	601f      	str	r7, [r3, #0]
 800a454:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a456:	2b00      	cmp	r3, #0
 800a458:	d100      	bne.n	800a45c <_dtoa_r+0x6bc>
 800a45a:	e4e6      	b.n	8009e2a <_dtoa_r+0x8a>
 800a45c:	601d      	str	r5, [r3, #0]
 800a45e:	e4e4      	b.n	8009e2a <_dtoa_r+0x8a>
 800a460:	0800b988 	.word	0x0800b988
 800a464:	3ff00000 	.word	0x3ff00000
 800a468:	40240000 	.word	0x40240000
 800a46c:	401c0000 	.word	0x401c0000
 800a470:	fcc00000 	.word	0xfcc00000
 800a474:	40140000 	.word	0x40140000
 800a478:	7cc00000 	.word	0x7cc00000
 800a47c:	0800b960 	.word	0x0800b960
 800a480:	3fe00000 	.word	0x3fe00000
 800a484:	003e      	movs	r6, r7
 800a486:	1e6b      	subs	r3, r5, #1
 800a488:	781a      	ldrb	r2, [r3, #0]
 800a48a:	2a39      	cmp	r2, #57	; 0x39
 800a48c:	d106      	bne.n	800a49c <_dtoa_r+0x6fc>
 800a48e:	9a08      	ldr	r2, [sp, #32]
 800a490:	429a      	cmp	r2, r3
 800a492:	d107      	bne.n	800a4a4 <_dtoa_r+0x704>
 800a494:	2330      	movs	r3, #48	; 0x30
 800a496:	7013      	strb	r3, [r2, #0]
 800a498:	0013      	movs	r3, r2
 800a49a:	3601      	adds	r6, #1
 800a49c:	781a      	ldrb	r2, [r3, #0]
 800a49e:	3201      	adds	r2, #1
 800a4a0:	701a      	strb	r2, [r3, #0]
 800a4a2:	e78c      	b.n	800a3be <_dtoa_r+0x61e>
 800a4a4:	001d      	movs	r5, r3
 800a4a6:	e7ee      	b.n	800a486 <_dtoa_r+0x6e6>
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	4ba4      	ldr	r3, [pc, #656]	; (800a73c <_dtoa_r+0x99c>)
 800a4ac:	f7f6 ff18 	bl	80012e0 <__aeabi_dmul>
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	9006      	str	r0, [sp, #24]
 800a4b6:	9107      	str	r1, [sp, #28]
 800a4b8:	002e      	movs	r6, r5
 800a4ba:	f7f5 ffbd 	bl	8000438 <__aeabi_dcmpeq>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d08b      	beq.n	800a3da <_dtoa_r+0x63a>
 800a4c2:	e7be      	b.n	800a442 <_dtoa_r+0x6a2>
 800a4c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4c6:	2a00      	cmp	r2, #0
 800a4c8:	d100      	bne.n	800a4cc <_dtoa_r+0x72c>
 800a4ca:	e0da      	b.n	800a682 <_dtoa_r+0x8e2>
 800a4cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a4ce:	2a01      	cmp	r2, #1
 800a4d0:	dd00      	ble.n	800a4d4 <_dtoa_r+0x734>
 800a4d2:	e0bd      	b.n	800a650 <_dtoa_r+0x8b0>
 800a4d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a4d6:	2a00      	cmp	r2, #0
 800a4d8:	d100      	bne.n	800a4dc <_dtoa_r+0x73c>
 800a4da:	e0b5      	b.n	800a648 <_dtoa_r+0x8a8>
 800a4dc:	4a98      	ldr	r2, [pc, #608]	; (800a740 <_dtoa_r+0x9a0>)
 800a4de:	189b      	adds	r3, r3, r2
 800a4e0:	9d04      	ldr	r5, [sp, #16]
 800a4e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a4e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4e6:	2101      	movs	r1, #1
 800a4e8:	18d2      	adds	r2, r2, r3
 800a4ea:	920a      	str	r2, [sp, #40]	; 0x28
 800a4ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4ee:	9802      	ldr	r0, [sp, #8]
 800a4f0:	18d3      	adds	r3, r2, r3
 800a4f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4f4:	f000 fb2d 	bl	800ab52 <__i2b>
 800a4f8:	0006      	movs	r6, r0
 800a4fa:	2c00      	cmp	r4, #0
 800a4fc:	dd0e      	ble.n	800a51c <_dtoa_r+0x77c>
 800a4fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a500:	2b00      	cmp	r3, #0
 800a502:	dd0b      	ble.n	800a51c <_dtoa_r+0x77c>
 800a504:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a506:	0023      	movs	r3, r4
 800a508:	4294      	cmp	r4, r2
 800a50a:	dd00      	ble.n	800a50e <_dtoa_r+0x76e>
 800a50c:	0013      	movs	r3, r2
 800a50e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a510:	1ae4      	subs	r4, r4, r3
 800a512:	1ad2      	subs	r2, r2, r3
 800a514:	920a      	str	r2, [sp, #40]	; 0x28
 800a516:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a51c:	9b04      	ldr	r3, [sp, #16]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d01f      	beq.n	800a562 <_dtoa_r+0x7c2>
 800a522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a524:	2b00      	cmp	r3, #0
 800a526:	d100      	bne.n	800a52a <_dtoa_r+0x78a>
 800a528:	e0af      	b.n	800a68a <_dtoa_r+0x8ea>
 800a52a:	2d00      	cmp	r5, #0
 800a52c:	d011      	beq.n	800a552 <_dtoa_r+0x7b2>
 800a52e:	0031      	movs	r1, r6
 800a530:	002a      	movs	r2, r5
 800a532:	9802      	ldr	r0, [sp, #8]
 800a534:	f000 fba6 	bl	800ac84 <__pow5mult>
 800a538:	9a03      	ldr	r2, [sp, #12]
 800a53a:	0001      	movs	r1, r0
 800a53c:	0006      	movs	r6, r0
 800a53e:	9802      	ldr	r0, [sp, #8]
 800a540:	f000 fb10 	bl	800ab64 <__multiply>
 800a544:	9903      	ldr	r1, [sp, #12]
 800a546:	9010      	str	r0, [sp, #64]	; 0x40
 800a548:	9802      	ldr	r0, [sp, #8]
 800a54a:	f000 fa62 	bl	800aa12 <_Bfree>
 800a54e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a550:	9303      	str	r3, [sp, #12]
 800a552:	9b04      	ldr	r3, [sp, #16]
 800a554:	1b5a      	subs	r2, r3, r5
 800a556:	d004      	beq.n	800a562 <_dtoa_r+0x7c2>
 800a558:	9903      	ldr	r1, [sp, #12]
 800a55a:	9802      	ldr	r0, [sp, #8]
 800a55c:	f000 fb92 	bl	800ac84 <__pow5mult>
 800a560:	9003      	str	r0, [sp, #12]
 800a562:	2101      	movs	r1, #1
 800a564:	9802      	ldr	r0, [sp, #8]
 800a566:	f000 faf4 	bl	800ab52 <__i2b>
 800a56a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a56c:	9004      	str	r0, [sp, #16]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d100      	bne.n	800a574 <_dtoa_r+0x7d4>
 800a572:	e1e3      	b.n	800a93c <_dtoa_r+0xb9c>
 800a574:	001a      	movs	r2, r3
 800a576:	0001      	movs	r1, r0
 800a578:	9802      	ldr	r0, [sp, #8]
 800a57a:	f000 fb83 	bl	800ac84 <__pow5mult>
 800a57e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a580:	9004      	str	r0, [sp, #16]
 800a582:	2b01      	cmp	r3, #1
 800a584:	dd00      	ble.n	800a588 <_dtoa_r+0x7e8>
 800a586:	e082      	b.n	800a68e <_dtoa_r+0x8ee>
 800a588:	2500      	movs	r5, #0
 800a58a:	9b06      	ldr	r3, [sp, #24]
 800a58c:	42ab      	cmp	r3, r5
 800a58e:	d10e      	bne.n	800a5ae <_dtoa_r+0x80e>
 800a590:	9b07      	ldr	r3, [sp, #28]
 800a592:	031b      	lsls	r3, r3, #12
 800a594:	42ab      	cmp	r3, r5
 800a596:	d10a      	bne.n	800a5ae <_dtoa_r+0x80e>
 800a598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a59a:	9a07      	ldr	r2, [sp, #28]
 800a59c:	4213      	tst	r3, r2
 800a59e:	d006      	beq.n	800a5ae <_dtoa_r+0x80e>
 800a5a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5a2:	3501      	adds	r5, #1
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a5a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5b0:	2001      	movs	r0, #1
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d16c      	bne.n	800a690 <_dtoa_r+0x8f0>
 800a5b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5b8:	1818      	adds	r0, r3, r0
 800a5ba:	231f      	movs	r3, #31
 800a5bc:	4018      	ands	r0, r3
 800a5be:	d07e      	beq.n	800a6be <_dtoa_r+0x91e>
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	1a1b      	subs	r3, r3, r0
 800a5c4:	2b04      	cmp	r3, #4
 800a5c6:	dd70      	ble.n	800a6aa <_dtoa_r+0x90a>
 800a5c8:	231c      	movs	r3, #28
 800a5ca:	1a18      	subs	r0, r3, r0
 800a5cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ce:	1824      	adds	r4, r4, r0
 800a5d0:	181b      	adds	r3, r3, r0
 800a5d2:	930a      	str	r3, [sp, #40]	; 0x28
 800a5d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5d6:	181b      	adds	r3, r3, r0
 800a5d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	dd05      	ble.n	800a5ec <_dtoa_r+0x84c>
 800a5e0:	001a      	movs	r2, r3
 800a5e2:	9903      	ldr	r1, [sp, #12]
 800a5e4:	9802      	ldr	r0, [sp, #8]
 800a5e6:	f000 fb9f 	bl	800ad28 <__lshift>
 800a5ea:	9003      	str	r0, [sp, #12]
 800a5ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	dd05      	ble.n	800a5fe <_dtoa_r+0x85e>
 800a5f2:	001a      	movs	r2, r3
 800a5f4:	9904      	ldr	r1, [sp, #16]
 800a5f6:	9802      	ldr	r0, [sp, #8]
 800a5f8:	f000 fb96 	bl	800ad28 <__lshift>
 800a5fc:	9004      	str	r0, [sp, #16]
 800a5fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a600:	2b00      	cmp	r3, #0
 800a602:	d05e      	beq.n	800a6c2 <_dtoa_r+0x922>
 800a604:	9904      	ldr	r1, [sp, #16]
 800a606:	9803      	ldr	r0, [sp, #12]
 800a608:	f000 fbe0 	bl	800adcc <__mcmp>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	da58      	bge.n	800a6c2 <_dtoa_r+0x922>
 800a610:	2300      	movs	r3, #0
 800a612:	220a      	movs	r2, #10
 800a614:	9903      	ldr	r1, [sp, #12]
 800a616:	9802      	ldr	r0, [sp, #8]
 800a618:	f000 fa14 	bl	800aa44 <__multadd>
 800a61c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a61e:	3f01      	subs	r7, #1
 800a620:	9003      	str	r0, [sp, #12]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d100      	bne.n	800a628 <_dtoa_r+0x888>
 800a626:	e190      	b.n	800a94a <_dtoa_r+0xbaa>
 800a628:	2300      	movs	r3, #0
 800a62a:	0031      	movs	r1, r6
 800a62c:	220a      	movs	r2, #10
 800a62e:	9802      	ldr	r0, [sp, #8]
 800a630:	f000 fa08 	bl	800aa44 <__multadd>
 800a634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a636:	0006      	movs	r6, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	dd00      	ble.n	800a63e <_dtoa_r+0x89e>
 800a63c:	e088      	b.n	800a750 <_dtoa_r+0x9b0>
 800a63e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a640:	2b02      	cmp	r3, #2
 800a642:	dc00      	bgt.n	800a646 <_dtoa_r+0x8a6>
 800a644:	e084      	b.n	800a750 <_dtoa_r+0x9b0>
 800a646:	e044      	b.n	800a6d2 <_dtoa_r+0x932>
 800a648:	2336      	movs	r3, #54	; 0x36
 800a64a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a64c:	1a9b      	subs	r3, r3, r2
 800a64e:	e747      	b.n	800a4e0 <_dtoa_r+0x740>
 800a650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a652:	1e5d      	subs	r5, r3, #1
 800a654:	9b04      	ldr	r3, [sp, #16]
 800a656:	42ab      	cmp	r3, r5
 800a658:	db08      	blt.n	800a66c <_dtoa_r+0x8cc>
 800a65a:	1b5d      	subs	r5, r3, r5
 800a65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a65e:	2b00      	cmp	r3, #0
 800a660:	da0c      	bge.n	800a67c <_dtoa_r+0x8dc>
 800a662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a664:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a666:	1a9c      	subs	r4, r3, r2
 800a668:	2300      	movs	r3, #0
 800a66a:	e73b      	b.n	800a4e4 <_dtoa_r+0x744>
 800a66c:	9b04      	ldr	r3, [sp, #16]
 800a66e:	9504      	str	r5, [sp, #16]
 800a670:	1aea      	subs	r2, r5, r3
 800a672:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a674:	2500      	movs	r5, #0
 800a676:	189b      	adds	r3, r3, r2
 800a678:	9311      	str	r3, [sp, #68]	; 0x44
 800a67a:	e7ef      	b.n	800a65c <_dtoa_r+0x8bc>
 800a67c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a680:	e730      	b.n	800a4e4 <_dtoa_r+0x744>
 800a682:	9d04      	ldr	r5, [sp, #16]
 800a684:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a686:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800a688:	e737      	b.n	800a4fa <_dtoa_r+0x75a>
 800a68a:	9a04      	ldr	r2, [sp, #16]
 800a68c:	e764      	b.n	800a558 <_dtoa_r+0x7b8>
 800a68e:	2500      	movs	r5, #0
 800a690:	9b04      	ldr	r3, [sp, #16]
 800a692:	9a04      	ldr	r2, [sp, #16]
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	9310      	str	r3, [sp, #64]	; 0x40
 800a698:	3303      	adds	r3, #3
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	18d3      	adds	r3, r2, r3
 800a69e:	6858      	ldr	r0, [r3, #4]
 800a6a0:	f000 fa0e 	bl	800aac0 <__hi0bits>
 800a6a4:	2320      	movs	r3, #32
 800a6a6:	1a18      	subs	r0, r3, r0
 800a6a8:	e785      	b.n	800a5b6 <_dtoa_r+0x816>
 800a6aa:	2b04      	cmp	r3, #4
 800a6ac:	d095      	beq.n	800a5da <_dtoa_r+0x83a>
 800a6ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6b0:	331c      	adds	r3, #28
 800a6b2:	18d2      	adds	r2, r2, r3
 800a6b4:	920a      	str	r2, [sp, #40]	; 0x28
 800a6b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6b8:	18e4      	adds	r4, r4, r3
 800a6ba:	18d3      	adds	r3, r2, r3
 800a6bc:	e78c      	b.n	800a5d8 <_dtoa_r+0x838>
 800a6be:	0003      	movs	r3, r0
 800a6c0:	e7f5      	b.n	800a6ae <_dtoa_r+0x90e>
 800a6c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	dc3d      	bgt.n	800a744 <_dtoa_r+0x9a4>
 800a6c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	dd3a      	ble.n	800a744 <_dtoa_r+0x9a4>
 800a6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d0:	930c      	str	r3, [sp, #48]	; 0x30
 800a6d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10c      	bne.n	800a6f2 <_dtoa_r+0x952>
 800a6d8:	9904      	ldr	r1, [sp, #16]
 800a6da:	2205      	movs	r2, #5
 800a6dc:	9802      	ldr	r0, [sp, #8]
 800a6de:	f000 f9b1 	bl	800aa44 <__multadd>
 800a6e2:	9004      	str	r0, [sp, #16]
 800a6e4:	0001      	movs	r1, r0
 800a6e6:	9803      	ldr	r0, [sp, #12]
 800a6e8:	f000 fb70 	bl	800adcc <__mcmp>
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	dd00      	ble.n	800a6f2 <_dtoa_r+0x952>
 800a6f0:	e5af      	b.n	800a252 <_dtoa_r+0x4b2>
 800a6f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6f4:	9d08      	ldr	r5, [sp, #32]
 800a6f6:	43df      	mvns	r7, r3
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a6fc:	9904      	ldr	r1, [sp, #16]
 800a6fe:	9802      	ldr	r0, [sp, #8]
 800a700:	f000 f987 	bl	800aa12 <_Bfree>
 800a704:	2e00      	cmp	r6, #0
 800a706:	d100      	bne.n	800a70a <_dtoa_r+0x96a>
 800a708:	e69b      	b.n	800a442 <_dtoa_r+0x6a2>
 800a70a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d005      	beq.n	800a71c <_dtoa_r+0x97c>
 800a710:	42b3      	cmp	r3, r6
 800a712:	d003      	beq.n	800a71c <_dtoa_r+0x97c>
 800a714:	0019      	movs	r1, r3
 800a716:	9802      	ldr	r0, [sp, #8]
 800a718:	f000 f97b 	bl	800aa12 <_Bfree>
 800a71c:	0031      	movs	r1, r6
 800a71e:	9802      	ldr	r0, [sp, #8]
 800a720:	f000 f977 	bl	800aa12 <_Bfree>
 800a724:	e68d      	b.n	800a442 <_dtoa_r+0x6a2>
 800a726:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a728:	9304      	str	r3, [sp, #16]
 800a72a:	001e      	movs	r6, r3
 800a72c:	e7e1      	b.n	800a6f2 <_dtoa_r+0x952>
 800a72e:	2300      	movs	r3, #0
 800a730:	e7fa      	b.n	800a728 <_dtoa_r+0x988>
 800a732:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a734:	0037      	movs	r7, r6
 800a736:	9304      	str	r3, [sp, #16]
 800a738:	001e      	movs	r6, r3
 800a73a:	e58a      	b.n	800a252 <_dtoa_r+0x4b2>
 800a73c:	40240000 	.word	0x40240000
 800a740:	00000433 	.word	0x00000433
 800a744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a746:	2b00      	cmp	r3, #0
 800a748:	d100      	bne.n	800a74c <_dtoa_r+0x9ac>
 800a74a:	e0b2      	b.n	800a8b2 <_dtoa_r+0xb12>
 800a74c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a74e:	930c      	str	r3, [sp, #48]	; 0x30
 800a750:	2c00      	cmp	r4, #0
 800a752:	dd05      	ble.n	800a760 <_dtoa_r+0x9c0>
 800a754:	0031      	movs	r1, r6
 800a756:	0022      	movs	r2, r4
 800a758:	9802      	ldr	r0, [sp, #8]
 800a75a:	f000 fae5 	bl	800ad28 <__lshift>
 800a75e:	0006      	movs	r6, r0
 800a760:	0030      	movs	r0, r6
 800a762:	2d00      	cmp	r5, #0
 800a764:	d011      	beq.n	800a78a <_dtoa_r+0x9ea>
 800a766:	6871      	ldr	r1, [r6, #4]
 800a768:	9802      	ldr	r0, [sp, #8]
 800a76a:	f000 f91a 	bl	800a9a2 <_Balloc>
 800a76e:	0031      	movs	r1, r6
 800a770:	0004      	movs	r4, r0
 800a772:	6933      	ldr	r3, [r6, #16]
 800a774:	310c      	adds	r1, #12
 800a776:	1c9a      	adds	r2, r3, #2
 800a778:	0092      	lsls	r2, r2, #2
 800a77a:	300c      	adds	r0, #12
 800a77c:	f7fe fd9c 	bl	80092b8 <memcpy>
 800a780:	2201      	movs	r2, #1
 800a782:	0021      	movs	r1, r4
 800a784:	9802      	ldr	r0, [sp, #8]
 800a786:	f000 facf 	bl	800ad28 <__lshift>
 800a78a:	9609      	str	r6, [sp, #36]	; 0x24
 800a78c:	0006      	movs	r6, r0
 800a78e:	9b08      	ldr	r3, [sp, #32]
 800a790:	930a      	str	r3, [sp, #40]	; 0x28
 800a792:	9904      	ldr	r1, [sp, #16]
 800a794:	9803      	ldr	r0, [sp, #12]
 800a796:	f7ff fa7d 	bl	8009c94 <quorem>
 800a79a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a79c:	900d      	str	r0, [sp, #52]	; 0x34
 800a79e:	0004      	movs	r4, r0
 800a7a0:	9803      	ldr	r0, [sp, #12]
 800a7a2:	f000 fb13 	bl	800adcc <__mcmp>
 800a7a6:	0032      	movs	r2, r6
 800a7a8:	9010      	str	r0, [sp, #64]	; 0x40
 800a7aa:	9904      	ldr	r1, [sp, #16]
 800a7ac:	9802      	ldr	r0, [sp, #8]
 800a7ae:	f000 fb27 	bl	800ae00 <__mdiff>
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7b6:	68c3      	ldr	r3, [r0, #12]
 800a7b8:	3430      	adds	r4, #48	; 0x30
 800a7ba:	0005      	movs	r5, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d104      	bne.n	800a7ca <_dtoa_r+0xa2a>
 800a7c0:	0001      	movs	r1, r0
 800a7c2:	9803      	ldr	r0, [sp, #12]
 800a7c4:	f000 fb02 	bl	800adcc <__mcmp>
 800a7c8:	900b      	str	r0, [sp, #44]	; 0x2c
 800a7ca:	0029      	movs	r1, r5
 800a7cc:	9802      	ldr	r0, [sp, #8]
 800a7ce:	f000 f920 	bl	800aa12 <_Bfree>
 800a7d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	d10e      	bne.n	800a7f8 <_dtoa_r+0xa58>
 800a7da:	9a06      	ldr	r2, [sp, #24]
 800a7dc:	3301      	adds	r3, #1
 800a7de:	4213      	tst	r3, r2
 800a7e0:	d10a      	bne.n	800a7f8 <_dtoa_r+0xa58>
 800a7e2:	2c39      	cmp	r4, #57	; 0x39
 800a7e4:	d026      	beq.n	800a834 <_dtoa_r+0xa94>
 800a7e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	dd01      	ble.n	800a7f0 <_dtoa_r+0xa50>
 800a7ec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a7ee:	3431      	adds	r4, #49	; 0x31
 800a7f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7f2:	1c5d      	adds	r5, r3, #1
 800a7f4:	701c      	strb	r4, [r3, #0]
 800a7f6:	e781      	b.n	800a6fc <_dtoa_r+0x95c>
 800a7f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	db07      	blt.n	800a80e <_dtoa_r+0xa6e>
 800a7fe:	001d      	movs	r5, r3
 800a800:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a802:	431d      	orrs	r5, r3
 800a804:	d122      	bne.n	800a84c <_dtoa_r+0xaac>
 800a806:	2301      	movs	r3, #1
 800a808:	9a06      	ldr	r2, [sp, #24]
 800a80a:	4213      	tst	r3, r2
 800a80c:	d11e      	bne.n	800a84c <_dtoa_r+0xaac>
 800a80e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a810:	2b00      	cmp	r3, #0
 800a812:	dded      	ble.n	800a7f0 <_dtoa_r+0xa50>
 800a814:	9903      	ldr	r1, [sp, #12]
 800a816:	2201      	movs	r2, #1
 800a818:	9802      	ldr	r0, [sp, #8]
 800a81a:	f000 fa85 	bl	800ad28 <__lshift>
 800a81e:	9904      	ldr	r1, [sp, #16]
 800a820:	9003      	str	r0, [sp, #12]
 800a822:	f000 fad3 	bl	800adcc <__mcmp>
 800a826:	2800      	cmp	r0, #0
 800a828:	dc02      	bgt.n	800a830 <_dtoa_r+0xa90>
 800a82a:	d1e1      	bne.n	800a7f0 <_dtoa_r+0xa50>
 800a82c:	07e3      	lsls	r3, r4, #31
 800a82e:	d5df      	bpl.n	800a7f0 <_dtoa_r+0xa50>
 800a830:	2c39      	cmp	r4, #57	; 0x39
 800a832:	d1db      	bne.n	800a7ec <_dtoa_r+0xa4c>
 800a834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a836:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a838:	1c5d      	adds	r5, r3, #1
 800a83a:	2339      	movs	r3, #57	; 0x39
 800a83c:	7013      	strb	r3, [r2, #0]
 800a83e:	1e6b      	subs	r3, r5, #1
 800a840:	781a      	ldrb	r2, [r3, #0]
 800a842:	2a39      	cmp	r2, #57	; 0x39
 800a844:	d067      	beq.n	800a916 <_dtoa_r+0xb76>
 800a846:	3201      	adds	r2, #1
 800a848:	701a      	strb	r2, [r3, #0]
 800a84a:	e757      	b.n	800a6fc <_dtoa_r+0x95c>
 800a84c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a84e:	1c5d      	adds	r5, r3, #1
 800a850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a852:	2b00      	cmp	r3, #0
 800a854:	dd04      	ble.n	800a860 <_dtoa_r+0xac0>
 800a856:	2c39      	cmp	r4, #57	; 0x39
 800a858:	d0ec      	beq.n	800a834 <_dtoa_r+0xa94>
 800a85a:	3401      	adds	r4, #1
 800a85c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a85e:	e7c9      	b.n	800a7f4 <_dtoa_r+0xa54>
 800a860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a862:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a864:	701c      	strb	r4, [r3, #0]
 800a866:	9b08      	ldr	r3, [sp, #32]
 800a868:	1aeb      	subs	r3, r5, r3
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d03e      	beq.n	800a8ec <_dtoa_r+0xb4c>
 800a86e:	2300      	movs	r3, #0
 800a870:	220a      	movs	r2, #10
 800a872:	9903      	ldr	r1, [sp, #12]
 800a874:	9802      	ldr	r0, [sp, #8]
 800a876:	f000 f8e5 	bl	800aa44 <__multadd>
 800a87a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a87c:	9003      	str	r0, [sp, #12]
 800a87e:	42b3      	cmp	r3, r6
 800a880:	d109      	bne.n	800a896 <_dtoa_r+0xaf6>
 800a882:	2300      	movs	r3, #0
 800a884:	220a      	movs	r2, #10
 800a886:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a888:	9802      	ldr	r0, [sp, #8]
 800a88a:	f000 f8db 	bl	800aa44 <__multadd>
 800a88e:	9009      	str	r0, [sp, #36]	; 0x24
 800a890:	0006      	movs	r6, r0
 800a892:	950a      	str	r5, [sp, #40]	; 0x28
 800a894:	e77d      	b.n	800a792 <_dtoa_r+0x9f2>
 800a896:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a898:	2300      	movs	r3, #0
 800a89a:	220a      	movs	r2, #10
 800a89c:	9802      	ldr	r0, [sp, #8]
 800a89e:	f000 f8d1 	bl	800aa44 <__multadd>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	9009      	str	r0, [sp, #36]	; 0x24
 800a8a6:	220a      	movs	r2, #10
 800a8a8:	0031      	movs	r1, r6
 800a8aa:	9802      	ldr	r0, [sp, #8]
 800a8ac:	f000 f8ca 	bl	800aa44 <__multadd>
 800a8b0:	e7ee      	b.n	800a890 <_dtoa_r+0xaf0>
 800a8b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8b4:	930c      	str	r3, [sp, #48]	; 0x30
 800a8b6:	9b08      	ldr	r3, [sp, #32]
 800a8b8:	9306      	str	r3, [sp, #24]
 800a8ba:	9904      	ldr	r1, [sp, #16]
 800a8bc:	9803      	ldr	r0, [sp, #12]
 800a8be:	f7ff f9e9 	bl	8009c94 <quorem>
 800a8c2:	9b06      	ldr	r3, [sp, #24]
 800a8c4:	3030      	adds	r0, #48	; 0x30
 800a8c6:	1c5d      	adds	r5, r3, #1
 800a8c8:	7018      	strb	r0, [r3, #0]
 800a8ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8cc:	9b08      	ldr	r3, [sp, #32]
 800a8ce:	0004      	movs	r4, r0
 800a8d0:	1aeb      	subs	r3, r5, r3
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	dd08      	ble.n	800a8e8 <_dtoa_r+0xb48>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	220a      	movs	r2, #10
 800a8da:	9903      	ldr	r1, [sp, #12]
 800a8dc:	9802      	ldr	r0, [sp, #8]
 800a8de:	f000 f8b1 	bl	800aa44 <__multadd>
 800a8e2:	9506      	str	r5, [sp, #24]
 800a8e4:	9003      	str	r0, [sp, #12]
 800a8e6:	e7e8      	b.n	800a8ba <_dtoa_r+0xb1a>
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ec:	9903      	ldr	r1, [sp, #12]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	9802      	ldr	r0, [sp, #8]
 800a8f2:	f000 fa19 	bl	800ad28 <__lshift>
 800a8f6:	9904      	ldr	r1, [sp, #16]
 800a8f8:	9003      	str	r0, [sp, #12]
 800a8fa:	f000 fa67 	bl	800adcc <__mcmp>
 800a8fe:	2800      	cmp	r0, #0
 800a900:	dc9d      	bgt.n	800a83e <_dtoa_r+0xa9e>
 800a902:	d101      	bne.n	800a908 <_dtoa_r+0xb68>
 800a904:	07e3      	lsls	r3, r4, #31
 800a906:	d49a      	bmi.n	800a83e <_dtoa_r+0xa9e>
 800a908:	1e6b      	subs	r3, r5, #1
 800a90a:	781a      	ldrb	r2, [r3, #0]
 800a90c:	2a30      	cmp	r2, #48	; 0x30
 800a90e:	d000      	beq.n	800a912 <_dtoa_r+0xb72>
 800a910:	e6f4      	b.n	800a6fc <_dtoa_r+0x95c>
 800a912:	001d      	movs	r5, r3
 800a914:	e7f8      	b.n	800a908 <_dtoa_r+0xb68>
 800a916:	9a08      	ldr	r2, [sp, #32]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d103      	bne.n	800a924 <_dtoa_r+0xb84>
 800a91c:	2331      	movs	r3, #49	; 0x31
 800a91e:	3701      	adds	r7, #1
 800a920:	7013      	strb	r3, [r2, #0]
 800a922:	e6eb      	b.n	800a6fc <_dtoa_r+0x95c>
 800a924:	001d      	movs	r5, r3
 800a926:	e78a      	b.n	800a83e <_dtoa_r+0xa9e>
 800a928:	4b0b      	ldr	r3, [pc, #44]	; (800a958 <_dtoa_r+0xbb8>)
 800a92a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a92c:	9308      	str	r3, [sp, #32]
 800a92e:	4b0b      	ldr	r3, [pc, #44]	; (800a95c <_dtoa_r+0xbbc>)
 800a930:	2a00      	cmp	r2, #0
 800a932:	d001      	beq.n	800a938 <_dtoa_r+0xb98>
 800a934:	f7ff fa77 	bl	8009e26 <_dtoa_r+0x86>
 800a938:	f7ff fa77 	bl	8009e2a <_dtoa_r+0x8a>
 800a93c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a93e:	2b01      	cmp	r3, #1
 800a940:	dc00      	bgt.n	800a944 <_dtoa_r+0xba4>
 800a942:	e621      	b.n	800a588 <_dtoa_r+0x7e8>
 800a944:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800a946:	2001      	movs	r0, #1
 800a948:	e635      	b.n	800a5b6 <_dtoa_r+0x816>
 800a94a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	dcb2      	bgt.n	800a8b6 <_dtoa_r+0xb16>
 800a950:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a952:	2b02      	cmp	r3, #2
 800a954:	ddaf      	ble.n	800a8b6 <_dtoa_r+0xb16>
 800a956:	e6bc      	b.n	800a6d2 <_dtoa_r+0x932>
 800a958:	0800b94d 	.word	0x0800b94d
 800a95c:	0800b955 	.word	0x0800b955

0800a960 <_localeconv_r>:
 800a960:	4b03      	ldr	r3, [pc, #12]	; (800a970 <_localeconv_r+0x10>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	6a18      	ldr	r0, [r3, #32]
 800a966:	2800      	cmp	r0, #0
 800a968:	d100      	bne.n	800a96c <_localeconv_r+0xc>
 800a96a:	4802      	ldr	r0, [pc, #8]	; (800a974 <_localeconv_r+0x14>)
 800a96c:	30f0      	adds	r0, #240	; 0xf0
 800a96e:	4770      	bx	lr
 800a970:	20000010 	.word	0x20000010
 800a974:	20000074 	.word	0x20000074

0800a978 <malloc>:
 800a978:	b510      	push	{r4, lr}
 800a97a:	4b03      	ldr	r3, [pc, #12]	; (800a988 <malloc+0x10>)
 800a97c:	0001      	movs	r1, r0
 800a97e:	6818      	ldr	r0, [r3, #0]
 800a980:	f000 fb4e 	bl	800b020 <_malloc_r>
 800a984:	bd10      	pop	{r4, pc}
 800a986:	46c0      	nop			; (mov r8, r8)
 800a988:	20000010 	.word	0x20000010

0800a98c <memchr>:
 800a98c:	b2c9      	uxtb	r1, r1
 800a98e:	1882      	adds	r2, r0, r2
 800a990:	4290      	cmp	r0, r2
 800a992:	d101      	bne.n	800a998 <memchr+0xc>
 800a994:	2000      	movs	r0, #0
 800a996:	4770      	bx	lr
 800a998:	7803      	ldrb	r3, [r0, #0]
 800a99a:	428b      	cmp	r3, r1
 800a99c:	d0fb      	beq.n	800a996 <memchr+0xa>
 800a99e:	3001      	adds	r0, #1
 800a9a0:	e7f6      	b.n	800a990 <memchr+0x4>

0800a9a2 <_Balloc>:
 800a9a2:	b570      	push	{r4, r5, r6, lr}
 800a9a4:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a9a6:	0004      	movs	r4, r0
 800a9a8:	000d      	movs	r5, r1
 800a9aa:	2e00      	cmp	r6, #0
 800a9ac:	d107      	bne.n	800a9be <_Balloc+0x1c>
 800a9ae:	2010      	movs	r0, #16
 800a9b0:	f7ff ffe2 	bl	800a978 <malloc>
 800a9b4:	6260      	str	r0, [r4, #36]	; 0x24
 800a9b6:	6046      	str	r6, [r0, #4]
 800a9b8:	6086      	str	r6, [r0, #8]
 800a9ba:	6006      	str	r6, [r0, #0]
 800a9bc:	60c6      	str	r6, [r0, #12]
 800a9be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a9c0:	68f3      	ldr	r3, [r6, #12]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d013      	beq.n	800a9ee <_Balloc+0x4c>
 800a9c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9c8:	00aa      	lsls	r2, r5, #2
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	189b      	adds	r3, r3, r2
 800a9ce:	6818      	ldr	r0, [r3, #0]
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	d118      	bne.n	800aa06 <_Balloc+0x64>
 800a9d4:	2101      	movs	r1, #1
 800a9d6:	000e      	movs	r6, r1
 800a9d8:	40ae      	lsls	r6, r5
 800a9da:	1d72      	adds	r2, r6, #5
 800a9dc:	0092      	lsls	r2, r2, #2
 800a9de:	0020      	movs	r0, r4
 800a9e0:	f000 fac6 	bl	800af70 <_calloc_r>
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	d00c      	beq.n	800aa02 <_Balloc+0x60>
 800a9e8:	6045      	str	r5, [r0, #4]
 800a9ea:	6086      	str	r6, [r0, #8]
 800a9ec:	e00d      	b.n	800aa0a <_Balloc+0x68>
 800a9ee:	2221      	movs	r2, #33	; 0x21
 800a9f0:	2104      	movs	r1, #4
 800a9f2:	0020      	movs	r0, r4
 800a9f4:	f000 fabc 	bl	800af70 <_calloc_r>
 800a9f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9fa:	60f0      	str	r0, [r6, #12]
 800a9fc:	68db      	ldr	r3, [r3, #12]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d1e1      	bne.n	800a9c6 <_Balloc+0x24>
 800aa02:	2000      	movs	r0, #0
 800aa04:	bd70      	pop	{r4, r5, r6, pc}
 800aa06:	6802      	ldr	r2, [r0, #0]
 800aa08:	601a      	str	r2, [r3, #0]
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	6103      	str	r3, [r0, #16]
 800aa0e:	60c3      	str	r3, [r0, #12]
 800aa10:	e7f8      	b.n	800aa04 <_Balloc+0x62>

0800aa12 <_Bfree>:
 800aa12:	b570      	push	{r4, r5, r6, lr}
 800aa14:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aa16:	0006      	movs	r6, r0
 800aa18:	000d      	movs	r5, r1
 800aa1a:	2c00      	cmp	r4, #0
 800aa1c:	d107      	bne.n	800aa2e <_Bfree+0x1c>
 800aa1e:	2010      	movs	r0, #16
 800aa20:	f7ff ffaa 	bl	800a978 <malloc>
 800aa24:	6270      	str	r0, [r6, #36]	; 0x24
 800aa26:	6044      	str	r4, [r0, #4]
 800aa28:	6084      	str	r4, [r0, #8]
 800aa2a:	6004      	str	r4, [r0, #0]
 800aa2c:	60c4      	str	r4, [r0, #12]
 800aa2e:	2d00      	cmp	r5, #0
 800aa30:	d007      	beq.n	800aa42 <_Bfree+0x30>
 800aa32:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800aa34:	686a      	ldr	r2, [r5, #4]
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	0092      	lsls	r2, r2, #2
 800aa3a:	189b      	adds	r3, r3, r2
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	602a      	str	r2, [r5, #0]
 800aa40:	601d      	str	r5, [r3, #0]
 800aa42:	bd70      	pop	{r4, r5, r6, pc}

0800aa44 <__multadd>:
 800aa44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa46:	001e      	movs	r6, r3
 800aa48:	2314      	movs	r3, #20
 800aa4a:	469c      	mov	ip, r3
 800aa4c:	0007      	movs	r7, r0
 800aa4e:	000c      	movs	r4, r1
 800aa50:	2000      	movs	r0, #0
 800aa52:	690d      	ldr	r5, [r1, #16]
 800aa54:	448c      	add	ip, r1
 800aa56:	4663      	mov	r3, ip
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	3001      	adds	r0, #1
 800aa5c:	b299      	uxth	r1, r3
 800aa5e:	4663      	mov	r3, ip
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4351      	muls	r1, r2
 800aa64:	0c1b      	lsrs	r3, r3, #16
 800aa66:	4353      	muls	r3, r2
 800aa68:	1989      	adds	r1, r1, r6
 800aa6a:	0c0e      	lsrs	r6, r1, #16
 800aa6c:	199b      	adds	r3, r3, r6
 800aa6e:	b289      	uxth	r1, r1
 800aa70:	0c1e      	lsrs	r6, r3, #16
 800aa72:	041b      	lsls	r3, r3, #16
 800aa74:	185b      	adds	r3, r3, r1
 800aa76:	4661      	mov	r1, ip
 800aa78:	c108      	stmia	r1!, {r3}
 800aa7a:	468c      	mov	ip, r1
 800aa7c:	4285      	cmp	r5, r0
 800aa7e:	dcea      	bgt.n	800aa56 <__multadd+0x12>
 800aa80:	2e00      	cmp	r6, #0
 800aa82:	d01b      	beq.n	800aabc <__multadd+0x78>
 800aa84:	68a3      	ldr	r3, [r4, #8]
 800aa86:	42ab      	cmp	r3, r5
 800aa88:	dc12      	bgt.n	800aab0 <__multadd+0x6c>
 800aa8a:	6863      	ldr	r3, [r4, #4]
 800aa8c:	0038      	movs	r0, r7
 800aa8e:	1c59      	adds	r1, r3, #1
 800aa90:	f7ff ff87 	bl	800a9a2 <_Balloc>
 800aa94:	0021      	movs	r1, r4
 800aa96:	6923      	ldr	r3, [r4, #16]
 800aa98:	9001      	str	r0, [sp, #4]
 800aa9a:	1c9a      	adds	r2, r3, #2
 800aa9c:	0092      	lsls	r2, r2, #2
 800aa9e:	310c      	adds	r1, #12
 800aaa0:	300c      	adds	r0, #12
 800aaa2:	f7fe fc09 	bl	80092b8 <memcpy>
 800aaa6:	0021      	movs	r1, r4
 800aaa8:	0038      	movs	r0, r7
 800aaaa:	f7ff ffb2 	bl	800aa12 <_Bfree>
 800aaae:	9c01      	ldr	r4, [sp, #4]
 800aab0:	1d2b      	adds	r3, r5, #4
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	18e3      	adds	r3, r4, r3
 800aab6:	3501      	adds	r5, #1
 800aab8:	605e      	str	r6, [r3, #4]
 800aaba:	6125      	str	r5, [r4, #16]
 800aabc:	0020      	movs	r0, r4
 800aabe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800aac0 <__hi0bits>:
 800aac0:	0003      	movs	r3, r0
 800aac2:	0c02      	lsrs	r2, r0, #16
 800aac4:	2000      	movs	r0, #0
 800aac6:	4282      	cmp	r2, r0
 800aac8:	d101      	bne.n	800aace <__hi0bits+0xe>
 800aaca:	041b      	lsls	r3, r3, #16
 800aacc:	3010      	adds	r0, #16
 800aace:	0e1a      	lsrs	r2, r3, #24
 800aad0:	d101      	bne.n	800aad6 <__hi0bits+0x16>
 800aad2:	3008      	adds	r0, #8
 800aad4:	021b      	lsls	r3, r3, #8
 800aad6:	0f1a      	lsrs	r2, r3, #28
 800aad8:	d101      	bne.n	800aade <__hi0bits+0x1e>
 800aada:	3004      	adds	r0, #4
 800aadc:	011b      	lsls	r3, r3, #4
 800aade:	0f9a      	lsrs	r2, r3, #30
 800aae0:	d101      	bne.n	800aae6 <__hi0bits+0x26>
 800aae2:	3002      	adds	r0, #2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	db03      	blt.n	800aaf2 <__hi0bits+0x32>
 800aaea:	3001      	adds	r0, #1
 800aaec:	005b      	lsls	r3, r3, #1
 800aaee:	d400      	bmi.n	800aaf2 <__hi0bits+0x32>
 800aaf0:	2020      	movs	r0, #32
 800aaf2:	4770      	bx	lr

0800aaf4 <__lo0bits>:
 800aaf4:	2207      	movs	r2, #7
 800aaf6:	6803      	ldr	r3, [r0, #0]
 800aaf8:	b510      	push	{r4, lr}
 800aafa:	0001      	movs	r1, r0
 800aafc:	401a      	ands	r2, r3
 800aafe:	d00d      	beq.n	800ab1c <__lo0bits+0x28>
 800ab00:	2401      	movs	r4, #1
 800ab02:	2000      	movs	r0, #0
 800ab04:	4223      	tst	r3, r4
 800ab06:	d105      	bne.n	800ab14 <__lo0bits+0x20>
 800ab08:	3002      	adds	r0, #2
 800ab0a:	4203      	tst	r3, r0
 800ab0c:	d003      	beq.n	800ab16 <__lo0bits+0x22>
 800ab0e:	40e3      	lsrs	r3, r4
 800ab10:	0020      	movs	r0, r4
 800ab12:	600b      	str	r3, [r1, #0]
 800ab14:	bd10      	pop	{r4, pc}
 800ab16:	089b      	lsrs	r3, r3, #2
 800ab18:	600b      	str	r3, [r1, #0]
 800ab1a:	e7fb      	b.n	800ab14 <__lo0bits+0x20>
 800ab1c:	b29c      	uxth	r4, r3
 800ab1e:	0010      	movs	r0, r2
 800ab20:	2c00      	cmp	r4, #0
 800ab22:	d101      	bne.n	800ab28 <__lo0bits+0x34>
 800ab24:	2010      	movs	r0, #16
 800ab26:	0c1b      	lsrs	r3, r3, #16
 800ab28:	b2da      	uxtb	r2, r3
 800ab2a:	2a00      	cmp	r2, #0
 800ab2c:	d101      	bne.n	800ab32 <__lo0bits+0x3e>
 800ab2e:	3008      	adds	r0, #8
 800ab30:	0a1b      	lsrs	r3, r3, #8
 800ab32:	071a      	lsls	r2, r3, #28
 800ab34:	d101      	bne.n	800ab3a <__lo0bits+0x46>
 800ab36:	3004      	adds	r0, #4
 800ab38:	091b      	lsrs	r3, r3, #4
 800ab3a:	079a      	lsls	r2, r3, #30
 800ab3c:	d101      	bne.n	800ab42 <__lo0bits+0x4e>
 800ab3e:	3002      	adds	r0, #2
 800ab40:	089b      	lsrs	r3, r3, #2
 800ab42:	07da      	lsls	r2, r3, #31
 800ab44:	d4e8      	bmi.n	800ab18 <__lo0bits+0x24>
 800ab46:	085b      	lsrs	r3, r3, #1
 800ab48:	d001      	beq.n	800ab4e <__lo0bits+0x5a>
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	e7e4      	b.n	800ab18 <__lo0bits+0x24>
 800ab4e:	2020      	movs	r0, #32
 800ab50:	e7e0      	b.n	800ab14 <__lo0bits+0x20>

0800ab52 <__i2b>:
 800ab52:	b510      	push	{r4, lr}
 800ab54:	000c      	movs	r4, r1
 800ab56:	2101      	movs	r1, #1
 800ab58:	f7ff ff23 	bl	800a9a2 <_Balloc>
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	6144      	str	r4, [r0, #20]
 800ab60:	6103      	str	r3, [r0, #16]
 800ab62:	bd10      	pop	{r4, pc}

0800ab64 <__multiply>:
 800ab64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab66:	690b      	ldr	r3, [r1, #16]
 800ab68:	0014      	movs	r4, r2
 800ab6a:	6912      	ldr	r2, [r2, #16]
 800ab6c:	b089      	sub	sp, #36	; 0x24
 800ab6e:	000d      	movs	r5, r1
 800ab70:	4293      	cmp	r3, r2
 800ab72:	da01      	bge.n	800ab78 <__multiply+0x14>
 800ab74:	0025      	movs	r5, r4
 800ab76:	000c      	movs	r4, r1
 800ab78:	692f      	ldr	r7, [r5, #16]
 800ab7a:	6926      	ldr	r6, [r4, #16]
 800ab7c:	6869      	ldr	r1, [r5, #4]
 800ab7e:	19bb      	adds	r3, r7, r6
 800ab80:	9302      	str	r3, [sp, #8]
 800ab82:	68ab      	ldr	r3, [r5, #8]
 800ab84:	19ba      	adds	r2, r7, r6
 800ab86:	4293      	cmp	r3, r2
 800ab88:	da00      	bge.n	800ab8c <__multiply+0x28>
 800ab8a:	3101      	adds	r1, #1
 800ab8c:	f7ff ff09 	bl	800a9a2 <_Balloc>
 800ab90:	0002      	movs	r2, r0
 800ab92:	19bb      	adds	r3, r7, r6
 800ab94:	3214      	adds	r2, #20
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	18d3      	adds	r3, r2, r3
 800ab9a:	469c      	mov	ip, r3
 800ab9c:	2100      	movs	r1, #0
 800ab9e:	0013      	movs	r3, r2
 800aba0:	9004      	str	r0, [sp, #16]
 800aba2:	4563      	cmp	r3, ip
 800aba4:	d31d      	bcc.n	800abe2 <__multiply+0x7e>
 800aba6:	3514      	adds	r5, #20
 800aba8:	00bf      	lsls	r7, r7, #2
 800abaa:	19eb      	adds	r3, r5, r7
 800abac:	3414      	adds	r4, #20
 800abae:	00b6      	lsls	r6, r6, #2
 800abb0:	9305      	str	r3, [sp, #20]
 800abb2:	19a3      	adds	r3, r4, r6
 800abb4:	9503      	str	r5, [sp, #12]
 800abb6:	9401      	str	r4, [sp, #4]
 800abb8:	9307      	str	r3, [sp, #28]
 800abba:	9b07      	ldr	r3, [sp, #28]
 800abbc:	9901      	ldr	r1, [sp, #4]
 800abbe:	4299      	cmp	r1, r3
 800abc0:	d311      	bcc.n	800abe6 <__multiply+0x82>
 800abc2:	9b02      	ldr	r3, [sp, #8]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	dd06      	ble.n	800abd6 <__multiply+0x72>
 800abc8:	2304      	movs	r3, #4
 800abca:	425b      	negs	r3, r3
 800abcc:	449c      	add	ip, r3
 800abce:	4663      	mov	r3, ip
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d051      	beq.n	800ac7a <__multiply+0x116>
 800abd6:	9b04      	ldr	r3, [sp, #16]
 800abd8:	9a02      	ldr	r2, [sp, #8]
 800abda:	0018      	movs	r0, r3
 800abdc:	611a      	str	r2, [r3, #16]
 800abde:	b009      	add	sp, #36	; 0x24
 800abe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abe2:	c302      	stmia	r3!, {r1}
 800abe4:	e7dd      	b.n	800aba2 <__multiply+0x3e>
 800abe6:	9b01      	ldr	r3, [sp, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	b298      	uxth	r0, r3
 800abec:	2800      	cmp	r0, #0
 800abee:	d01c      	beq.n	800ac2a <__multiply+0xc6>
 800abf0:	0015      	movs	r5, r2
 800abf2:	2600      	movs	r6, #0
 800abf4:	9f03      	ldr	r7, [sp, #12]
 800abf6:	cf02      	ldmia	r7!, {r1}
 800abf8:	682c      	ldr	r4, [r5, #0]
 800abfa:	b28b      	uxth	r3, r1
 800abfc:	4343      	muls	r3, r0
 800abfe:	0c09      	lsrs	r1, r1, #16
 800ac00:	4341      	muls	r1, r0
 800ac02:	b2a4      	uxth	r4, r4
 800ac04:	191b      	adds	r3, r3, r4
 800ac06:	199b      	adds	r3, r3, r6
 800ac08:	000e      	movs	r6, r1
 800ac0a:	6829      	ldr	r1, [r5, #0]
 800ac0c:	9506      	str	r5, [sp, #24]
 800ac0e:	0c09      	lsrs	r1, r1, #16
 800ac10:	1871      	adds	r1, r6, r1
 800ac12:	0c1e      	lsrs	r6, r3, #16
 800ac14:	1989      	adds	r1, r1, r6
 800ac16:	0c0e      	lsrs	r6, r1, #16
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	0409      	lsls	r1, r1, #16
 800ac1c:	430b      	orrs	r3, r1
 800ac1e:	c508      	stmia	r5!, {r3}
 800ac20:	9b05      	ldr	r3, [sp, #20]
 800ac22:	42bb      	cmp	r3, r7
 800ac24:	d8e7      	bhi.n	800abf6 <__multiply+0x92>
 800ac26:	9b06      	ldr	r3, [sp, #24]
 800ac28:	605e      	str	r6, [r3, #4]
 800ac2a:	9b01      	ldr	r3, [sp, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	0c1d      	lsrs	r5, r3, #16
 800ac30:	d01e      	beq.n	800ac70 <__multiply+0x10c>
 800ac32:	0010      	movs	r0, r2
 800ac34:	2700      	movs	r7, #0
 800ac36:	6813      	ldr	r3, [r2, #0]
 800ac38:	9e03      	ldr	r6, [sp, #12]
 800ac3a:	6831      	ldr	r1, [r6, #0]
 800ac3c:	6804      	ldr	r4, [r0, #0]
 800ac3e:	b289      	uxth	r1, r1
 800ac40:	4369      	muls	r1, r5
 800ac42:	0c24      	lsrs	r4, r4, #16
 800ac44:	1909      	adds	r1, r1, r4
 800ac46:	19c9      	adds	r1, r1, r7
 800ac48:	040f      	lsls	r7, r1, #16
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	433b      	orrs	r3, r7
 800ac4e:	6003      	str	r3, [r0, #0]
 800ac50:	ce80      	ldmia	r6!, {r7}
 800ac52:	6843      	ldr	r3, [r0, #4]
 800ac54:	0c3f      	lsrs	r7, r7, #16
 800ac56:	436f      	muls	r7, r5
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	18fb      	adds	r3, r7, r3
 800ac5c:	0c09      	lsrs	r1, r1, #16
 800ac5e:	185b      	adds	r3, r3, r1
 800ac60:	9905      	ldr	r1, [sp, #20]
 800ac62:	9006      	str	r0, [sp, #24]
 800ac64:	0c1f      	lsrs	r7, r3, #16
 800ac66:	3004      	adds	r0, #4
 800ac68:	42b1      	cmp	r1, r6
 800ac6a:	d8e6      	bhi.n	800ac3a <__multiply+0xd6>
 800ac6c:	9906      	ldr	r1, [sp, #24]
 800ac6e:	604b      	str	r3, [r1, #4]
 800ac70:	9b01      	ldr	r3, [sp, #4]
 800ac72:	3204      	adds	r2, #4
 800ac74:	3304      	adds	r3, #4
 800ac76:	9301      	str	r3, [sp, #4]
 800ac78:	e79f      	b.n	800abba <__multiply+0x56>
 800ac7a:	9b02      	ldr	r3, [sp, #8]
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	9302      	str	r3, [sp, #8]
 800ac80:	e79f      	b.n	800abc2 <__multiply+0x5e>
	...

0800ac84 <__pow5mult>:
 800ac84:	2303      	movs	r3, #3
 800ac86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac88:	4013      	ands	r3, r2
 800ac8a:	0005      	movs	r5, r0
 800ac8c:	000e      	movs	r6, r1
 800ac8e:	0014      	movs	r4, r2
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d008      	beq.n	800aca6 <__pow5mult+0x22>
 800ac94:	4922      	ldr	r1, [pc, #136]	; (800ad20 <__pow5mult+0x9c>)
 800ac96:	3b01      	subs	r3, #1
 800ac98:	009a      	lsls	r2, r3, #2
 800ac9a:	5852      	ldr	r2, [r2, r1]
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	0031      	movs	r1, r6
 800aca0:	f7ff fed0 	bl	800aa44 <__multadd>
 800aca4:	0006      	movs	r6, r0
 800aca6:	10a3      	asrs	r3, r4, #2
 800aca8:	9301      	str	r3, [sp, #4]
 800acaa:	d036      	beq.n	800ad1a <__pow5mult+0x96>
 800acac:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800acae:	2c00      	cmp	r4, #0
 800acb0:	d107      	bne.n	800acc2 <__pow5mult+0x3e>
 800acb2:	2010      	movs	r0, #16
 800acb4:	f7ff fe60 	bl	800a978 <malloc>
 800acb8:	6268      	str	r0, [r5, #36]	; 0x24
 800acba:	6044      	str	r4, [r0, #4]
 800acbc:	6084      	str	r4, [r0, #8]
 800acbe:	6004      	str	r4, [r0, #0]
 800acc0:	60c4      	str	r4, [r0, #12]
 800acc2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800acc4:	68bc      	ldr	r4, [r7, #8]
 800acc6:	2c00      	cmp	r4, #0
 800acc8:	d107      	bne.n	800acda <__pow5mult+0x56>
 800acca:	4916      	ldr	r1, [pc, #88]	; (800ad24 <__pow5mult+0xa0>)
 800accc:	0028      	movs	r0, r5
 800acce:	f7ff ff40 	bl	800ab52 <__i2b>
 800acd2:	2300      	movs	r3, #0
 800acd4:	0004      	movs	r4, r0
 800acd6:	60b8      	str	r0, [r7, #8]
 800acd8:	6003      	str	r3, [r0, #0]
 800acda:	2201      	movs	r2, #1
 800acdc:	9b01      	ldr	r3, [sp, #4]
 800acde:	4213      	tst	r3, r2
 800ace0:	d00a      	beq.n	800acf8 <__pow5mult+0x74>
 800ace2:	0031      	movs	r1, r6
 800ace4:	0022      	movs	r2, r4
 800ace6:	0028      	movs	r0, r5
 800ace8:	f7ff ff3c 	bl	800ab64 <__multiply>
 800acec:	0007      	movs	r7, r0
 800acee:	0031      	movs	r1, r6
 800acf0:	0028      	movs	r0, r5
 800acf2:	f7ff fe8e 	bl	800aa12 <_Bfree>
 800acf6:	003e      	movs	r6, r7
 800acf8:	9b01      	ldr	r3, [sp, #4]
 800acfa:	105b      	asrs	r3, r3, #1
 800acfc:	9301      	str	r3, [sp, #4]
 800acfe:	d00c      	beq.n	800ad1a <__pow5mult+0x96>
 800ad00:	6820      	ldr	r0, [r4, #0]
 800ad02:	2800      	cmp	r0, #0
 800ad04:	d107      	bne.n	800ad16 <__pow5mult+0x92>
 800ad06:	0022      	movs	r2, r4
 800ad08:	0021      	movs	r1, r4
 800ad0a:	0028      	movs	r0, r5
 800ad0c:	f7ff ff2a 	bl	800ab64 <__multiply>
 800ad10:	2300      	movs	r3, #0
 800ad12:	6020      	str	r0, [r4, #0]
 800ad14:	6003      	str	r3, [r0, #0]
 800ad16:	0004      	movs	r4, r0
 800ad18:	e7df      	b.n	800acda <__pow5mult+0x56>
 800ad1a:	0030      	movs	r0, r6
 800ad1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad1e:	46c0      	nop			; (mov r8, r8)
 800ad20:	0800ba50 	.word	0x0800ba50
 800ad24:	00000271 	.word	0x00000271

0800ad28 <__lshift>:
 800ad28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad2a:	000d      	movs	r5, r1
 800ad2c:	0017      	movs	r7, r2
 800ad2e:	692b      	ldr	r3, [r5, #16]
 800ad30:	1154      	asrs	r4, r2, #5
 800ad32:	b085      	sub	sp, #20
 800ad34:	18e3      	adds	r3, r4, r3
 800ad36:	9301      	str	r3, [sp, #4]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	6849      	ldr	r1, [r1, #4]
 800ad3e:	68ab      	ldr	r3, [r5, #8]
 800ad40:	9002      	str	r0, [sp, #8]
 800ad42:	9a00      	ldr	r2, [sp, #0]
 800ad44:	4293      	cmp	r3, r2
 800ad46:	db35      	blt.n	800adb4 <__lshift+0x8c>
 800ad48:	9802      	ldr	r0, [sp, #8]
 800ad4a:	f7ff fe2a 	bl	800a9a2 <_Balloc>
 800ad4e:	2300      	movs	r3, #0
 800ad50:	0002      	movs	r2, r0
 800ad52:	0006      	movs	r6, r0
 800ad54:	0019      	movs	r1, r3
 800ad56:	3214      	adds	r2, #20
 800ad58:	42a3      	cmp	r3, r4
 800ad5a:	db2e      	blt.n	800adba <__lshift+0x92>
 800ad5c:	43e3      	mvns	r3, r4
 800ad5e:	17db      	asrs	r3, r3, #31
 800ad60:	401c      	ands	r4, r3
 800ad62:	002b      	movs	r3, r5
 800ad64:	00a4      	lsls	r4, r4, #2
 800ad66:	1914      	adds	r4, r2, r4
 800ad68:	692a      	ldr	r2, [r5, #16]
 800ad6a:	3314      	adds	r3, #20
 800ad6c:	0092      	lsls	r2, r2, #2
 800ad6e:	189a      	adds	r2, r3, r2
 800ad70:	4694      	mov	ip, r2
 800ad72:	221f      	movs	r2, #31
 800ad74:	4017      	ands	r7, r2
 800ad76:	d024      	beq.n	800adc2 <__lshift+0x9a>
 800ad78:	3201      	adds	r2, #1
 800ad7a:	1bd2      	subs	r2, r2, r7
 800ad7c:	9203      	str	r2, [sp, #12]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	6819      	ldr	r1, [r3, #0]
 800ad82:	0020      	movs	r0, r4
 800ad84:	40b9      	lsls	r1, r7
 800ad86:	430a      	orrs	r2, r1
 800ad88:	c404      	stmia	r4!, {r2}
 800ad8a:	cb04      	ldmia	r3!, {r2}
 800ad8c:	9903      	ldr	r1, [sp, #12]
 800ad8e:	40ca      	lsrs	r2, r1
 800ad90:	459c      	cmp	ip, r3
 800ad92:	d8f5      	bhi.n	800ad80 <__lshift+0x58>
 800ad94:	6042      	str	r2, [r0, #4]
 800ad96:	2a00      	cmp	r2, #0
 800ad98:	d002      	beq.n	800ada0 <__lshift+0x78>
 800ad9a:	9b01      	ldr	r3, [sp, #4]
 800ad9c:	3302      	adds	r3, #2
 800ad9e:	9300      	str	r3, [sp, #0]
 800ada0:	9b00      	ldr	r3, [sp, #0]
 800ada2:	9802      	ldr	r0, [sp, #8]
 800ada4:	3b01      	subs	r3, #1
 800ada6:	6133      	str	r3, [r6, #16]
 800ada8:	0029      	movs	r1, r5
 800adaa:	f7ff fe32 	bl	800aa12 <_Bfree>
 800adae:	0030      	movs	r0, r6
 800adb0:	b005      	add	sp, #20
 800adb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adb4:	3101      	adds	r1, #1
 800adb6:	005b      	lsls	r3, r3, #1
 800adb8:	e7c3      	b.n	800ad42 <__lshift+0x1a>
 800adba:	0098      	lsls	r0, r3, #2
 800adbc:	5011      	str	r1, [r2, r0]
 800adbe:	3301      	adds	r3, #1
 800adc0:	e7ca      	b.n	800ad58 <__lshift+0x30>
 800adc2:	cb04      	ldmia	r3!, {r2}
 800adc4:	c404      	stmia	r4!, {r2}
 800adc6:	459c      	cmp	ip, r3
 800adc8:	d8fb      	bhi.n	800adc2 <__lshift+0x9a>
 800adca:	e7e9      	b.n	800ada0 <__lshift+0x78>

0800adcc <__mcmp>:
 800adcc:	690a      	ldr	r2, [r1, #16]
 800adce:	6903      	ldr	r3, [r0, #16]
 800add0:	b530      	push	{r4, r5, lr}
 800add2:	1a9b      	subs	r3, r3, r2
 800add4:	d10d      	bne.n	800adf2 <__mcmp+0x26>
 800add6:	0092      	lsls	r2, r2, #2
 800add8:	3014      	adds	r0, #20
 800adda:	3114      	adds	r1, #20
 800addc:	1884      	adds	r4, r0, r2
 800adde:	1889      	adds	r1, r1, r2
 800ade0:	3c04      	subs	r4, #4
 800ade2:	3904      	subs	r1, #4
 800ade4:	6825      	ldr	r5, [r4, #0]
 800ade6:	680a      	ldr	r2, [r1, #0]
 800ade8:	4295      	cmp	r5, r2
 800adea:	d004      	beq.n	800adf6 <__mcmp+0x2a>
 800adec:	2301      	movs	r3, #1
 800adee:	4295      	cmp	r5, r2
 800adf0:	d304      	bcc.n	800adfc <__mcmp+0x30>
 800adf2:	0018      	movs	r0, r3
 800adf4:	bd30      	pop	{r4, r5, pc}
 800adf6:	42a0      	cmp	r0, r4
 800adf8:	d3f2      	bcc.n	800ade0 <__mcmp+0x14>
 800adfa:	e7fa      	b.n	800adf2 <__mcmp+0x26>
 800adfc:	425b      	negs	r3, r3
 800adfe:	e7f8      	b.n	800adf2 <__mcmp+0x26>

0800ae00 <__mdiff>:
 800ae00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae02:	000d      	movs	r5, r1
 800ae04:	b085      	sub	sp, #20
 800ae06:	0007      	movs	r7, r0
 800ae08:	0011      	movs	r1, r2
 800ae0a:	0028      	movs	r0, r5
 800ae0c:	0014      	movs	r4, r2
 800ae0e:	f7ff ffdd 	bl	800adcc <__mcmp>
 800ae12:	1e06      	subs	r6, r0, #0
 800ae14:	d108      	bne.n	800ae28 <__mdiff+0x28>
 800ae16:	0001      	movs	r1, r0
 800ae18:	0038      	movs	r0, r7
 800ae1a:	f7ff fdc2 	bl	800a9a2 <_Balloc>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	6146      	str	r6, [r0, #20]
 800ae22:	6103      	str	r3, [r0, #16]
 800ae24:	b005      	add	sp, #20
 800ae26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae28:	2301      	movs	r3, #1
 800ae2a:	9301      	str	r3, [sp, #4]
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	db04      	blt.n	800ae3a <__mdiff+0x3a>
 800ae30:	0023      	movs	r3, r4
 800ae32:	002c      	movs	r4, r5
 800ae34:	001d      	movs	r5, r3
 800ae36:	2300      	movs	r3, #0
 800ae38:	9301      	str	r3, [sp, #4]
 800ae3a:	6861      	ldr	r1, [r4, #4]
 800ae3c:	0038      	movs	r0, r7
 800ae3e:	f7ff fdb0 	bl	800a9a2 <_Balloc>
 800ae42:	002f      	movs	r7, r5
 800ae44:	2200      	movs	r2, #0
 800ae46:	9b01      	ldr	r3, [sp, #4]
 800ae48:	6926      	ldr	r6, [r4, #16]
 800ae4a:	60c3      	str	r3, [r0, #12]
 800ae4c:	3414      	adds	r4, #20
 800ae4e:	00b3      	lsls	r3, r6, #2
 800ae50:	18e3      	adds	r3, r4, r3
 800ae52:	9302      	str	r3, [sp, #8]
 800ae54:	692b      	ldr	r3, [r5, #16]
 800ae56:	3714      	adds	r7, #20
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	18fb      	adds	r3, r7, r3
 800ae5c:	9303      	str	r3, [sp, #12]
 800ae5e:	0003      	movs	r3, r0
 800ae60:	4694      	mov	ip, r2
 800ae62:	3314      	adds	r3, #20
 800ae64:	cc20      	ldmia	r4!, {r5}
 800ae66:	cf04      	ldmia	r7!, {r2}
 800ae68:	9201      	str	r2, [sp, #4]
 800ae6a:	b2aa      	uxth	r2, r5
 800ae6c:	4494      	add	ip, r2
 800ae6e:	466a      	mov	r2, sp
 800ae70:	4661      	mov	r1, ip
 800ae72:	8892      	ldrh	r2, [r2, #4]
 800ae74:	0c2d      	lsrs	r5, r5, #16
 800ae76:	1a8a      	subs	r2, r1, r2
 800ae78:	9901      	ldr	r1, [sp, #4]
 800ae7a:	0c09      	lsrs	r1, r1, #16
 800ae7c:	1a69      	subs	r1, r5, r1
 800ae7e:	1415      	asrs	r5, r2, #16
 800ae80:	1949      	adds	r1, r1, r5
 800ae82:	140d      	asrs	r5, r1, #16
 800ae84:	b292      	uxth	r2, r2
 800ae86:	0409      	lsls	r1, r1, #16
 800ae88:	430a      	orrs	r2, r1
 800ae8a:	601a      	str	r2, [r3, #0]
 800ae8c:	9a03      	ldr	r2, [sp, #12]
 800ae8e:	46ac      	mov	ip, r5
 800ae90:	3304      	adds	r3, #4
 800ae92:	42ba      	cmp	r2, r7
 800ae94:	d8e6      	bhi.n	800ae64 <__mdiff+0x64>
 800ae96:	9902      	ldr	r1, [sp, #8]
 800ae98:	001a      	movs	r2, r3
 800ae9a:	428c      	cmp	r4, r1
 800ae9c:	d305      	bcc.n	800aeaa <__mdiff+0xaa>
 800ae9e:	3a04      	subs	r2, #4
 800aea0:	6813      	ldr	r3, [r2, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00e      	beq.n	800aec4 <__mdiff+0xc4>
 800aea6:	6106      	str	r6, [r0, #16]
 800aea8:	e7bc      	b.n	800ae24 <__mdiff+0x24>
 800aeaa:	cc04      	ldmia	r4!, {r2}
 800aeac:	b291      	uxth	r1, r2
 800aeae:	4461      	add	r1, ip
 800aeb0:	140d      	asrs	r5, r1, #16
 800aeb2:	0c12      	lsrs	r2, r2, #16
 800aeb4:	1952      	adds	r2, r2, r5
 800aeb6:	1415      	asrs	r5, r2, #16
 800aeb8:	b289      	uxth	r1, r1
 800aeba:	0412      	lsls	r2, r2, #16
 800aebc:	430a      	orrs	r2, r1
 800aebe:	46ac      	mov	ip, r5
 800aec0:	c304      	stmia	r3!, {r2}
 800aec2:	e7e8      	b.n	800ae96 <__mdiff+0x96>
 800aec4:	3e01      	subs	r6, #1
 800aec6:	e7ea      	b.n	800ae9e <__mdiff+0x9e>

0800aec8 <__d2b>:
 800aec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeca:	001d      	movs	r5, r3
 800aecc:	2101      	movs	r1, #1
 800aece:	0014      	movs	r4, r2
 800aed0:	9f08      	ldr	r7, [sp, #32]
 800aed2:	f7ff fd66 	bl	800a9a2 <_Balloc>
 800aed6:	032b      	lsls	r3, r5, #12
 800aed8:	006d      	lsls	r5, r5, #1
 800aeda:	0006      	movs	r6, r0
 800aedc:	0b1b      	lsrs	r3, r3, #12
 800aede:	0d6d      	lsrs	r5, r5, #21
 800aee0:	d124      	bne.n	800af2c <__d2b+0x64>
 800aee2:	9301      	str	r3, [sp, #4]
 800aee4:	2c00      	cmp	r4, #0
 800aee6:	d027      	beq.n	800af38 <__d2b+0x70>
 800aee8:	4668      	mov	r0, sp
 800aeea:	9400      	str	r4, [sp, #0]
 800aeec:	f7ff fe02 	bl	800aaf4 <__lo0bits>
 800aef0:	9c00      	ldr	r4, [sp, #0]
 800aef2:	2800      	cmp	r0, #0
 800aef4:	d01e      	beq.n	800af34 <__d2b+0x6c>
 800aef6:	9b01      	ldr	r3, [sp, #4]
 800aef8:	2120      	movs	r1, #32
 800aefa:	001a      	movs	r2, r3
 800aefc:	1a09      	subs	r1, r1, r0
 800aefe:	408a      	lsls	r2, r1
 800af00:	40c3      	lsrs	r3, r0
 800af02:	4322      	orrs	r2, r4
 800af04:	6172      	str	r2, [r6, #20]
 800af06:	9301      	str	r3, [sp, #4]
 800af08:	9c01      	ldr	r4, [sp, #4]
 800af0a:	61b4      	str	r4, [r6, #24]
 800af0c:	1e63      	subs	r3, r4, #1
 800af0e:	419c      	sbcs	r4, r3
 800af10:	3401      	adds	r4, #1
 800af12:	6134      	str	r4, [r6, #16]
 800af14:	2d00      	cmp	r5, #0
 800af16:	d018      	beq.n	800af4a <__d2b+0x82>
 800af18:	4b12      	ldr	r3, [pc, #72]	; (800af64 <__d2b+0x9c>)
 800af1a:	18ed      	adds	r5, r5, r3
 800af1c:	2335      	movs	r3, #53	; 0x35
 800af1e:	182d      	adds	r5, r5, r0
 800af20:	603d      	str	r5, [r7, #0]
 800af22:	1a18      	subs	r0, r3, r0
 800af24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af26:	6018      	str	r0, [r3, #0]
 800af28:	0030      	movs	r0, r6
 800af2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af2c:	2280      	movs	r2, #128	; 0x80
 800af2e:	0352      	lsls	r2, r2, #13
 800af30:	4313      	orrs	r3, r2
 800af32:	e7d6      	b.n	800aee2 <__d2b+0x1a>
 800af34:	6174      	str	r4, [r6, #20]
 800af36:	e7e7      	b.n	800af08 <__d2b+0x40>
 800af38:	a801      	add	r0, sp, #4
 800af3a:	f7ff fddb 	bl	800aaf4 <__lo0bits>
 800af3e:	2401      	movs	r4, #1
 800af40:	9b01      	ldr	r3, [sp, #4]
 800af42:	6134      	str	r4, [r6, #16]
 800af44:	6173      	str	r3, [r6, #20]
 800af46:	3020      	adds	r0, #32
 800af48:	e7e4      	b.n	800af14 <__d2b+0x4c>
 800af4a:	4b07      	ldr	r3, [pc, #28]	; (800af68 <__d2b+0xa0>)
 800af4c:	18c0      	adds	r0, r0, r3
 800af4e:	4b07      	ldr	r3, [pc, #28]	; (800af6c <__d2b+0xa4>)
 800af50:	6038      	str	r0, [r7, #0]
 800af52:	18e3      	adds	r3, r4, r3
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	18f3      	adds	r3, r6, r3
 800af58:	6958      	ldr	r0, [r3, #20]
 800af5a:	f7ff fdb1 	bl	800aac0 <__hi0bits>
 800af5e:	0164      	lsls	r4, r4, #5
 800af60:	1a20      	subs	r0, r4, r0
 800af62:	e7df      	b.n	800af24 <__d2b+0x5c>
 800af64:	fffffbcd 	.word	0xfffffbcd
 800af68:	fffffbce 	.word	0xfffffbce
 800af6c:	3fffffff 	.word	0x3fffffff

0800af70 <_calloc_r>:
 800af70:	434a      	muls	r2, r1
 800af72:	b570      	push	{r4, r5, r6, lr}
 800af74:	0011      	movs	r1, r2
 800af76:	0014      	movs	r4, r2
 800af78:	f000 f852 	bl	800b020 <_malloc_r>
 800af7c:	1e05      	subs	r5, r0, #0
 800af7e:	d003      	beq.n	800af88 <_calloc_r+0x18>
 800af80:	0022      	movs	r2, r4
 800af82:	2100      	movs	r1, #0
 800af84:	f7fe f9a1 	bl	80092ca <memset>
 800af88:	0028      	movs	r0, r5
 800af8a:	bd70      	pop	{r4, r5, r6, pc}

0800af8c <_free_r>:
 800af8c:	b570      	push	{r4, r5, r6, lr}
 800af8e:	0005      	movs	r5, r0
 800af90:	2900      	cmp	r1, #0
 800af92:	d010      	beq.n	800afb6 <_free_r+0x2a>
 800af94:	1f0c      	subs	r4, r1, #4
 800af96:	6823      	ldr	r3, [r4, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	da00      	bge.n	800af9e <_free_r+0x12>
 800af9c:	18e4      	adds	r4, r4, r3
 800af9e:	0028      	movs	r0, r5
 800afa0:	f000 fa33 	bl	800b40a <__malloc_lock>
 800afa4:	4a1d      	ldr	r2, [pc, #116]	; (800b01c <_free_r+0x90>)
 800afa6:	6813      	ldr	r3, [r2, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d105      	bne.n	800afb8 <_free_r+0x2c>
 800afac:	6063      	str	r3, [r4, #4]
 800afae:	6014      	str	r4, [r2, #0]
 800afb0:	0028      	movs	r0, r5
 800afb2:	f000 fa2b 	bl	800b40c <__malloc_unlock>
 800afb6:	bd70      	pop	{r4, r5, r6, pc}
 800afb8:	42a3      	cmp	r3, r4
 800afba:	d909      	bls.n	800afd0 <_free_r+0x44>
 800afbc:	6821      	ldr	r1, [r4, #0]
 800afbe:	1860      	adds	r0, r4, r1
 800afc0:	4283      	cmp	r3, r0
 800afc2:	d1f3      	bne.n	800afac <_free_r+0x20>
 800afc4:	6818      	ldr	r0, [r3, #0]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	1841      	adds	r1, r0, r1
 800afca:	6021      	str	r1, [r4, #0]
 800afcc:	e7ee      	b.n	800afac <_free_r+0x20>
 800afce:	0013      	movs	r3, r2
 800afd0:	685a      	ldr	r2, [r3, #4]
 800afd2:	2a00      	cmp	r2, #0
 800afd4:	d001      	beq.n	800afda <_free_r+0x4e>
 800afd6:	42a2      	cmp	r2, r4
 800afd8:	d9f9      	bls.n	800afce <_free_r+0x42>
 800afda:	6819      	ldr	r1, [r3, #0]
 800afdc:	1858      	adds	r0, r3, r1
 800afde:	42a0      	cmp	r0, r4
 800afe0:	d10b      	bne.n	800affa <_free_r+0x6e>
 800afe2:	6820      	ldr	r0, [r4, #0]
 800afe4:	1809      	adds	r1, r1, r0
 800afe6:	1858      	adds	r0, r3, r1
 800afe8:	6019      	str	r1, [r3, #0]
 800afea:	4282      	cmp	r2, r0
 800afec:	d1e0      	bne.n	800afb0 <_free_r+0x24>
 800afee:	6810      	ldr	r0, [r2, #0]
 800aff0:	6852      	ldr	r2, [r2, #4]
 800aff2:	1841      	adds	r1, r0, r1
 800aff4:	6019      	str	r1, [r3, #0]
 800aff6:	605a      	str	r2, [r3, #4]
 800aff8:	e7da      	b.n	800afb0 <_free_r+0x24>
 800affa:	42a0      	cmp	r0, r4
 800affc:	d902      	bls.n	800b004 <_free_r+0x78>
 800affe:	230c      	movs	r3, #12
 800b000:	602b      	str	r3, [r5, #0]
 800b002:	e7d5      	b.n	800afb0 <_free_r+0x24>
 800b004:	6821      	ldr	r1, [r4, #0]
 800b006:	1860      	adds	r0, r4, r1
 800b008:	4282      	cmp	r2, r0
 800b00a:	d103      	bne.n	800b014 <_free_r+0x88>
 800b00c:	6810      	ldr	r0, [r2, #0]
 800b00e:	6852      	ldr	r2, [r2, #4]
 800b010:	1841      	adds	r1, r0, r1
 800b012:	6021      	str	r1, [r4, #0]
 800b014:	6062      	str	r2, [r4, #4]
 800b016:	605c      	str	r4, [r3, #4]
 800b018:	e7ca      	b.n	800afb0 <_free_r+0x24>
 800b01a:	46c0      	nop			; (mov r8, r8)
 800b01c:	200012e0 	.word	0x200012e0

0800b020 <_malloc_r>:
 800b020:	2303      	movs	r3, #3
 800b022:	b570      	push	{r4, r5, r6, lr}
 800b024:	1ccd      	adds	r5, r1, #3
 800b026:	439d      	bics	r5, r3
 800b028:	3508      	adds	r5, #8
 800b02a:	0006      	movs	r6, r0
 800b02c:	2d0c      	cmp	r5, #12
 800b02e:	d21e      	bcs.n	800b06e <_malloc_r+0x4e>
 800b030:	250c      	movs	r5, #12
 800b032:	42a9      	cmp	r1, r5
 800b034:	d81d      	bhi.n	800b072 <_malloc_r+0x52>
 800b036:	0030      	movs	r0, r6
 800b038:	f000 f9e7 	bl	800b40a <__malloc_lock>
 800b03c:	4a25      	ldr	r2, [pc, #148]	; (800b0d4 <_malloc_r+0xb4>)
 800b03e:	6814      	ldr	r4, [r2, #0]
 800b040:	0021      	movs	r1, r4
 800b042:	2900      	cmp	r1, #0
 800b044:	d119      	bne.n	800b07a <_malloc_r+0x5a>
 800b046:	4c24      	ldr	r4, [pc, #144]	; (800b0d8 <_malloc_r+0xb8>)
 800b048:	6823      	ldr	r3, [r4, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d103      	bne.n	800b056 <_malloc_r+0x36>
 800b04e:	0030      	movs	r0, r6
 800b050:	f000 f9a4 	bl	800b39c <_sbrk_r>
 800b054:	6020      	str	r0, [r4, #0]
 800b056:	0029      	movs	r1, r5
 800b058:	0030      	movs	r0, r6
 800b05a:	f000 f99f 	bl	800b39c <_sbrk_r>
 800b05e:	1c43      	adds	r3, r0, #1
 800b060:	d12b      	bne.n	800b0ba <_malloc_r+0x9a>
 800b062:	230c      	movs	r3, #12
 800b064:	0030      	movs	r0, r6
 800b066:	6033      	str	r3, [r6, #0]
 800b068:	f000 f9d0 	bl	800b40c <__malloc_unlock>
 800b06c:	e003      	b.n	800b076 <_malloc_r+0x56>
 800b06e:	2d00      	cmp	r5, #0
 800b070:	dadf      	bge.n	800b032 <_malloc_r+0x12>
 800b072:	230c      	movs	r3, #12
 800b074:	6033      	str	r3, [r6, #0]
 800b076:	2000      	movs	r0, #0
 800b078:	bd70      	pop	{r4, r5, r6, pc}
 800b07a:	680b      	ldr	r3, [r1, #0]
 800b07c:	1b5b      	subs	r3, r3, r5
 800b07e:	d419      	bmi.n	800b0b4 <_malloc_r+0x94>
 800b080:	2b0b      	cmp	r3, #11
 800b082:	d903      	bls.n	800b08c <_malloc_r+0x6c>
 800b084:	600b      	str	r3, [r1, #0]
 800b086:	18cc      	adds	r4, r1, r3
 800b088:	6025      	str	r5, [r4, #0]
 800b08a:	e003      	b.n	800b094 <_malloc_r+0x74>
 800b08c:	684b      	ldr	r3, [r1, #4]
 800b08e:	428c      	cmp	r4, r1
 800b090:	d10d      	bne.n	800b0ae <_malloc_r+0x8e>
 800b092:	6013      	str	r3, [r2, #0]
 800b094:	0030      	movs	r0, r6
 800b096:	f000 f9b9 	bl	800b40c <__malloc_unlock>
 800b09a:	0020      	movs	r0, r4
 800b09c:	2207      	movs	r2, #7
 800b09e:	300b      	adds	r0, #11
 800b0a0:	1d23      	adds	r3, r4, #4
 800b0a2:	4390      	bics	r0, r2
 800b0a4:	1ac3      	subs	r3, r0, r3
 800b0a6:	d0e7      	beq.n	800b078 <_malloc_r+0x58>
 800b0a8:	425a      	negs	r2, r3
 800b0aa:	50e2      	str	r2, [r4, r3]
 800b0ac:	e7e4      	b.n	800b078 <_malloc_r+0x58>
 800b0ae:	6063      	str	r3, [r4, #4]
 800b0b0:	000c      	movs	r4, r1
 800b0b2:	e7ef      	b.n	800b094 <_malloc_r+0x74>
 800b0b4:	000c      	movs	r4, r1
 800b0b6:	6849      	ldr	r1, [r1, #4]
 800b0b8:	e7c3      	b.n	800b042 <_malloc_r+0x22>
 800b0ba:	2303      	movs	r3, #3
 800b0bc:	1cc4      	adds	r4, r0, #3
 800b0be:	439c      	bics	r4, r3
 800b0c0:	42a0      	cmp	r0, r4
 800b0c2:	d0e1      	beq.n	800b088 <_malloc_r+0x68>
 800b0c4:	1a21      	subs	r1, r4, r0
 800b0c6:	0030      	movs	r0, r6
 800b0c8:	f000 f968 	bl	800b39c <_sbrk_r>
 800b0cc:	1c43      	adds	r3, r0, #1
 800b0ce:	d1db      	bne.n	800b088 <_malloc_r+0x68>
 800b0d0:	e7c7      	b.n	800b062 <_malloc_r+0x42>
 800b0d2:	46c0      	nop			; (mov r8, r8)
 800b0d4:	200012e0 	.word	0x200012e0
 800b0d8:	200012e4 	.word	0x200012e4

0800b0dc <__ssputs_r>:
 800b0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0de:	688e      	ldr	r6, [r1, #8]
 800b0e0:	b085      	sub	sp, #20
 800b0e2:	0007      	movs	r7, r0
 800b0e4:	000c      	movs	r4, r1
 800b0e6:	9203      	str	r2, [sp, #12]
 800b0e8:	9301      	str	r3, [sp, #4]
 800b0ea:	429e      	cmp	r6, r3
 800b0ec:	d83c      	bhi.n	800b168 <__ssputs_r+0x8c>
 800b0ee:	2390      	movs	r3, #144	; 0x90
 800b0f0:	898a      	ldrh	r2, [r1, #12]
 800b0f2:	00db      	lsls	r3, r3, #3
 800b0f4:	421a      	tst	r2, r3
 800b0f6:	d034      	beq.n	800b162 <__ssputs_r+0x86>
 800b0f8:	2503      	movs	r5, #3
 800b0fa:	6909      	ldr	r1, [r1, #16]
 800b0fc:	6823      	ldr	r3, [r4, #0]
 800b0fe:	1a5b      	subs	r3, r3, r1
 800b100:	9302      	str	r3, [sp, #8]
 800b102:	6963      	ldr	r3, [r4, #20]
 800b104:	9802      	ldr	r0, [sp, #8]
 800b106:	435d      	muls	r5, r3
 800b108:	0feb      	lsrs	r3, r5, #31
 800b10a:	195d      	adds	r5, r3, r5
 800b10c:	9b01      	ldr	r3, [sp, #4]
 800b10e:	106d      	asrs	r5, r5, #1
 800b110:	3301      	adds	r3, #1
 800b112:	181b      	adds	r3, r3, r0
 800b114:	42ab      	cmp	r3, r5
 800b116:	d900      	bls.n	800b11a <__ssputs_r+0x3e>
 800b118:	001d      	movs	r5, r3
 800b11a:	0553      	lsls	r3, r2, #21
 800b11c:	d532      	bpl.n	800b184 <__ssputs_r+0xa8>
 800b11e:	0029      	movs	r1, r5
 800b120:	0038      	movs	r0, r7
 800b122:	f7ff ff7d 	bl	800b020 <_malloc_r>
 800b126:	1e06      	subs	r6, r0, #0
 800b128:	d109      	bne.n	800b13e <__ssputs_r+0x62>
 800b12a:	230c      	movs	r3, #12
 800b12c:	603b      	str	r3, [r7, #0]
 800b12e:	2340      	movs	r3, #64	; 0x40
 800b130:	2001      	movs	r0, #1
 800b132:	89a2      	ldrh	r2, [r4, #12]
 800b134:	4240      	negs	r0, r0
 800b136:	4313      	orrs	r3, r2
 800b138:	81a3      	strh	r3, [r4, #12]
 800b13a:	b005      	add	sp, #20
 800b13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b13e:	9a02      	ldr	r2, [sp, #8]
 800b140:	6921      	ldr	r1, [r4, #16]
 800b142:	f7fe f8b9 	bl	80092b8 <memcpy>
 800b146:	89a3      	ldrh	r3, [r4, #12]
 800b148:	4a14      	ldr	r2, [pc, #80]	; (800b19c <__ssputs_r+0xc0>)
 800b14a:	401a      	ands	r2, r3
 800b14c:	2380      	movs	r3, #128	; 0x80
 800b14e:	4313      	orrs	r3, r2
 800b150:	81a3      	strh	r3, [r4, #12]
 800b152:	9b02      	ldr	r3, [sp, #8]
 800b154:	6126      	str	r6, [r4, #16]
 800b156:	18f6      	adds	r6, r6, r3
 800b158:	6026      	str	r6, [r4, #0]
 800b15a:	6165      	str	r5, [r4, #20]
 800b15c:	9e01      	ldr	r6, [sp, #4]
 800b15e:	1aed      	subs	r5, r5, r3
 800b160:	60a5      	str	r5, [r4, #8]
 800b162:	9b01      	ldr	r3, [sp, #4]
 800b164:	429e      	cmp	r6, r3
 800b166:	d900      	bls.n	800b16a <__ssputs_r+0x8e>
 800b168:	9e01      	ldr	r6, [sp, #4]
 800b16a:	0032      	movs	r2, r6
 800b16c:	9903      	ldr	r1, [sp, #12]
 800b16e:	6820      	ldr	r0, [r4, #0]
 800b170:	f000 f938 	bl	800b3e4 <memmove>
 800b174:	68a3      	ldr	r3, [r4, #8]
 800b176:	2000      	movs	r0, #0
 800b178:	1b9b      	subs	r3, r3, r6
 800b17a:	60a3      	str	r3, [r4, #8]
 800b17c:	6823      	ldr	r3, [r4, #0]
 800b17e:	199e      	adds	r6, r3, r6
 800b180:	6026      	str	r6, [r4, #0]
 800b182:	e7da      	b.n	800b13a <__ssputs_r+0x5e>
 800b184:	002a      	movs	r2, r5
 800b186:	0038      	movs	r0, r7
 800b188:	f000 f941 	bl	800b40e <_realloc_r>
 800b18c:	1e06      	subs	r6, r0, #0
 800b18e:	d1e0      	bne.n	800b152 <__ssputs_r+0x76>
 800b190:	6921      	ldr	r1, [r4, #16]
 800b192:	0038      	movs	r0, r7
 800b194:	f7ff fefa 	bl	800af8c <_free_r>
 800b198:	e7c7      	b.n	800b12a <__ssputs_r+0x4e>
 800b19a:	46c0      	nop			; (mov r8, r8)
 800b19c:	fffffb7f 	.word	0xfffffb7f

0800b1a0 <_svfiprintf_r>:
 800b1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1a2:	b0a1      	sub	sp, #132	; 0x84
 800b1a4:	9003      	str	r0, [sp, #12]
 800b1a6:	001d      	movs	r5, r3
 800b1a8:	898b      	ldrh	r3, [r1, #12]
 800b1aa:	000f      	movs	r7, r1
 800b1ac:	0016      	movs	r6, r2
 800b1ae:	061b      	lsls	r3, r3, #24
 800b1b0:	d511      	bpl.n	800b1d6 <_svfiprintf_r+0x36>
 800b1b2:	690b      	ldr	r3, [r1, #16]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d10e      	bne.n	800b1d6 <_svfiprintf_r+0x36>
 800b1b8:	2140      	movs	r1, #64	; 0x40
 800b1ba:	f7ff ff31 	bl	800b020 <_malloc_r>
 800b1be:	6038      	str	r0, [r7, #0]
 800b1c0:	6138      	str	r0, [r7, #16]
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	d105      	bne.n	800b1d2 <_svfiprintf_r+0x32>
 800b1c6:	230c      	movs	r3, #12
 800b1c8:	9a03      	ldr	r2, [sp, #12]
 800b1ca:	3801      	subs	r0, #1
 800b1cc:	6013      	str	r3, [r2, #0]
 800b1ce:	b021      	add	sp, #132	; 0x84
 800b1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1d2:	2340      	movs	r3, #64	; 0x40
 800b1d4:	617b      	str	r3, [r7, #20]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	ac08      	add	r4, sp, #32
 800b1da:	6163      	str	r3, [r4, #20]
 800b1dc:	3320      	adds	r3, #32
 800b1de:	7663      	strb	r3, [r4, #25]
 800b1e0:	3310      	adds	r3, #16
 800b1e2:	76a3      	strb	r3, [r4, #26]
 800b1e4:	9507      	str	r5, [sp, #28]
 800b1e6:	0035      	movs	r5, r6
 800b1e8:	782b      	ldrb	r3, [r5, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d001      	beq.n	800b1f2 <_svfiprintf_r+0x52>
 800b1ee:	2b25      	cmp	r3, #37	; 0x25
 800b1f0:	d146      	bne.n	800b280 <_svfiprintf_r+0xe0>
 800b1f2:	1bab      	subs	r3, r5, r6
 800b1f4:	9305      	str	r3, [sp, #20]
 800b1f6:	d00c      	beq.n	800b212 <_svfiprintf_r+0x72>
 800b1f8:	0032      	movs	r2, r6
 800b1fa:	0039      	movs	r1, r7
 800b1fc:	9803      	ldr	r0, [sp, #12]
 800b1fe:	f7ff ff6d 	bl	800b0dc <__ssputs_r>
 800b202:	1c43      	adds	r3, r0, #1
 800b204:	d100      	bne.n	800b208 <_svfiprintf_r+0x68>
 800b206:	e0ae      	b.n	800b366 <_svfiprintf_r+0x1c6>
 800b208:	6962      	ldr	r2, [r4, #20]
 800b20a:	9b05      	ldr	r3, [sp, #20]
 800b20c:	4694      	mov	ip, r2
 800b20e:	4463      	add	r3, ip
 800b210:	6163      	str	r3, [r4, #20]
 800b212:	782b      	ldrb	r3, [r5, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d100      	bne.n	800b21a <_svfiprintf_r+0x7a>
 800b218:	e0a5      	b.n	800b366 <_svfiprintf_r+0x1c6>
 800b21a:	2201      	movs	r2, #1
 800b21c:	2300      	movs	r3, #0
 800b21e:	4252      	negs	r2, r2
 800b220:	6062      	str	r2, [r4, #4]
 800b222:	a904      	add	r1, sp, #16
 800b224:	3254      	adds	r2, #84	; 0x54
 800b226:	1852      	adds	r2, r2, r1
 800b228:	1c6e      	adds	r6, r5, #1
 800b22a:	6023      	str	r3, [r4, #0]
 800b22c:	60e3      	str	r3, [r4, #12]
 800b22e:	60a3      	str	r3, [r4, #8]
 800b230:	7013      	strb	r3, [r2, #0]
 800b232:	65a3      	str	r3, [r4, #88]	; 0x58
 800b234:	7831      	ldrb	r1, [r6, #0]
 800b236:	2205      	movs	r2, #5
 800b238:	4853      	ldr	r0, [pc, #332]	; (800b388 <_svfiprintf_r+0x1e8>)
 800b23a:	f7ff fba7 	bl	800a98c <memchr>
 800b23e:	1c75      	adds	r5, r6, #1
 800b240:	2800      	cmp	r0, #0
 800b242:	d11f      	bne.n	800b284 <_svfiprintf_r+0xe4>
 800b244:	6822      	ldr	r2, [r4, #0]
 800b246:	06d3      	lsls	r3, r2, #27
 800b248:	d504      	bpl.n	800b254 <_svfiprintf_r+0xb4>
 800b24a:	2353      	movs	r3, #83	; 0x53
 800b24c:	a904      	add	r1, sp, #16
 800b24e:	185b      	adds	r3, r3, r1
 800b250:	2120      	movs	r1, #32
 800b252:	7019      	strb	r1, [r3, #0]
 800b254:	0713      	lsls	r3, r2, #28
 800b256:	d504      	bpl.n	800b262 <_svfiprintf_r+0xc2>
 800b258:	2353      	movs	r3, #83	; 0x53
 800b25a:	a904      	add	r1, sp, #16
 800b25c:	185b      	adds	r3, r3, r1
 800b25e:	212b      	movs	r1, #43	; 0x2b
 800b260:	7019      	strb	r1, [r3, #0]
 800b262:	7833      	ldrb	r3, [r6, #0]
 800b264:	2b2a      	cmp	r3, #42	; 0x2a
 800b266:	d016      	beq.n	800b296 <_svfiprintf_r+0xf6>
 800b268:	0035      	movs	r5, r6
 800b26a:	2100      	movs	r1, #0
 800b26c:	200a      	movs	r0, #10
 800b26e:	68e3      	ldr	r3, [r4, #12]
 800b270:	782a      	ldrb	r2, [r5, #0]
 800b272:	1c6e      	adds	r6, r5, #1
 800b274:	3a30      	subs	r2, #48	; 0x30
 800b276:	2a09      	cmp	r2, #9
 800b278:	d94e      	bls.n	800b318 <_svfiprintf_r+0x178>
 800b27a:	2900      	cmp	r1, #0
 800b27c:	d018      	beq.n	800b2b0 <_svfiprintf_r+0x110>
 800b27e:	e010      	b.n	800b2a2 <_svfiprintf_r+0x102>
 800b280:	3501      	adds	r5, #1
 800b282:	e7b1      	b.n	800b1e8 <_svfiprintf_r+0x48>
 800b284:	4b40      	ldr	r3, [pc, #256]	; (800b388 <_svfiprintf_r+0x1e8>)
 800b286:	6822      	ldr	r2, [r4, #0]
 800b288:	1ac0      	subs	r0, r0, r3
 800b28a:	2301      	movs	r3, #1
 800b28c:	4083      	lsls	r3, r0
 800b28e:	4313      	orrs	r3, r2
 800b290:	6023      	str	r3, [r4, #0]
 800b292:	002e      	movs	r6, r5
 800b294:	e7ce      	b.n	800b234 <_svfiprintf_r+0x94>
 800b296:	9b07      	ldr	r3, [sp, #28]
 800b298:	1d19      	adds	r1, r3, #4
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	9107      	str	r1, [sp, #28]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	db01      	blt.n	800b2a6 <_svfiprintf_r+0x106>
 800b2a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2a4:	e004      	b.n	800b2b0 <_svfiprintf_r+0x110>
 800b2a6:	425b      	negs	r3, r3
 800b2a8:	60e3      	str	r3, [r4, #12]
 800b2aa:	2302      	movs	r3, #2
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	6023      	str	r3, [r4, #0]
 800b2b0:	782b      	ldrb	r3, [r5, #0]
 800b2b2:	2b2e      	cmp	r3, #46	; 0x2e
 800b2b4:	d10a      	bne.n	800b2cc <_svfiprintf_r+0x12c>
 800b2b6:	786b      	ldrb	r3, [r5, #1]
 800b2b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b2ba:	d135      	bne.n	800b328 <_svfiprintf_r+0x188>
 800b2bc:	9b07      	ldr	r3, [sp, #28]
 800b2be:	3502      	adds	r5, #2
 800b2c0:	1d1a      	adds	r2, r3, #4
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	9207      	str	r2, [sp, #28]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	db2b      	blt.n	800b322 <_svfiprintf_r+0x182>
 800b2ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b2cc:	4e2f      	ldr	r6, [pc, #188]	; (800b38c <_svfiprintf_r+0x1ec>)
 800b2ce:	7829      	ldrb	r1, [r5, #0]
 800b2d0:	2203      	movs	r2, #3
 800b2d2:	0030      	movs	r0, r6
 800b2d4:	f7ff fb5a 	bl	800a98c <memchr>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	d006      	beq.n	800b2ea <_svfiprintf_r+0x14a>
 800b2dc:	2340      	movs	r3, #64	; 0x40
 800b2de:	1b80      	subs	r0, r0, r6
 800b2e0:	4083      	lsls	r3, r0
 800b2e2:	6822      	ldr	r2, [r4, #0]
 800b2e4:	3501      	adds	r5, #1
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	6023      	str	r3, [r4, #0]
 800b2ea:	7829      	ldrb	r1, [r5, #0]
 800b2ec:	2206      	movs	r2, #6
 800b2ee:	4828      	ldr	r0, [pc, #160]	; (800b390 <_svfiprintf_r+0x1f0>)
 800b2f0:	1c6e      	adds	r6, r5, #1
 800b2f2:	7621      	strb	r1, [r4, #24]
 800b2f4:	f7ff fb4a 	bl	800a98c <memchr>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d03c      	beq.n	800b376 <_svfiprintf_r+0x1d6>
 800b2fc:	4b25      	ldr	r3, [pc, #148]	; (800b394 <_svfiprintf_r+0x1f4>)
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d125      	bne.n	800b34e <_svfiprintf_r+0x1ae>
 800b302:	2207      	movs	r2, #7
 800b304:	9b07      	ldr	r3, [sp, #28]
 800b306:	3307      	adds	r3, #7
 800b308:	4393      	bics	r3, r2
 800b30a:	3308      	adds	r3, #8
 800b30c:	9307      	str	r3, [sp, #28]
 800b30e:	6963      	ldr	r3, [r4, #20]
 800b310:	9a04      	ldr	r2, [sp, #16]
 800b312:	189b      	adds	r3, r3, r2
 800b314:	6163      	str	r3, [r4, #20]
 800b316:	e766      	b.n	800b1e6 <_svfiprintf_r+0x46>
 800b318:	4343      	muls	r3, r0
 800b31a:	2101      	movs	r1, #1
 800b31c:	189b      	adds	r3, r3, r2
 800b31e:	0035      	movs	r5, r6
 800b320:	e7a6      	b.n	800b270 <_svfiprintf_r+0xd0>
 800b322:	2301      	movs	r3, #1
 800b324:	425b      	negs	r3, r3
 800b326:	e7d0      	b.n	800b2ca <_svfiprintf_r+0x12a>
 800b328:	2300      	movs	r3, #0
 800b32a:	200a      	movs	r0, #10
 800b32c:	001a      	movs	r2, r3
 800b32e:	3501      	adds	r5, #1
 800b330:	6063      	str	r3, [r4, #4]
 800b332:	7829      	ldrb	r1, [r5, #0]
 800b334:	1c6e      	adds	r6, r5, #1
 800b336:	3930      	subs	r1, #48	; 0x30
 800b338:	2909      	cmp	r1, #9
 800b33a:	d903      	bls.n	800b344 <_svfiprintf_r+0x1a4>
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d0c5      	beq.n	800b2cc <_svfiprintf_r+0x12c>
 800b340:	9209      	str	r2, [sp, #36]	; 0x24
 800b342:	e7c3      	b.n	800b2cc <_svfiprintf_r+0x12c>
 800b344:	4342      	muls	r2, r0
 800b346:	2301      	movs	r3, #1
 800b348:	1852      	adds	r2, r2, r1
 800b34a:	0035      	movs	r5, r6
 800b34c:	e7f1      	b.n	800b332 <_svfiprintf_r+0x192>
 800b34e:	ab07      	add	r3, sp, #28
 800b350:	9300      	str	r3, [sp, #0]
 800b352:	003a      	movs	r2, r7
 800b354:	4b10      	ldr	r3, [pc, #64]	; (800b398 <_svfiprintf_r+0x1f8>)
 800b356:	0021      	movs	r1, r4
 800b358:	9803      	ldr	r0, [sp, #12]
 800b35a:	f7fe f85b 	bl	8009414 <_printf_float>
 800b35e:	9004      	str	r0, [sp, #16]
 800b360:	9b04      	ldr	r3, [sp, #16]
 800b362:	3301      	adds	r3, #1
 800b364:	d1d3      	bne.n	800b30e <_svfiprintf_r+0x16e>
 800b366:	89bb      	ldrh	r3, [r7, #12]
 800b368:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b36a:	065b      	lsls	r3, r3, #25
 800b36c:	d400      	bmi.n	800b370 <_svfiprintf_r+0x1d0>
 800b36e:	e72e      	b.n	800b1ce <_svfiprintf_r+0x2e>
 800b370:	2001      	movs	r0, #1
 800b372:	4240      	negs	r0, r0
 800b374:	e72b      	b.n	800b1ce <_svfiprintf_r+0x2e>
 800b376:	ab07      	add	r3, sp, #28
 800b378:	9300      	str	r3, [sp, #0]
 800b37a:	003a      	movs	r2, r7
 800b37c:	4b06      	ldr	r3, [pc, #24]	; (800b398 <_svfiprintf_r+0x1f8>)
 800b37e:	0021      	movs	r1, r4
 800b380:	9803      	ldr	r0, [sp, #12]
 800b382:	f7fe fb01 	bl	8009988 <_printf_i>
 800b386:	e7ea      	b.n	800b35e <_svfiprintf_r+0x1be>
 800b388:	0800ba5c 	.word	0x0800ba5c
 800b38c:	0800ba62 	.word	0x0800ba62
 800b390:	0800ba66 	.word	0x0800ba66
 800b394:	08009415 	.word	0x08009415
 800b398:	0800b0dd 	.word	0x0800b0dd

0800b39c <_sbrk_r>:
 800b39c:	2300      	movs	r3, #0
 800b39e:	b570      	push	{r4, r5, r6, lr}
 800b3a0:	4c06      	ldr	r4, [pc, #24]	; (800b3bc <_sbrk_r+0x20>)
 800b3a2:	0005      	movs	r5, r0
 800b3a4:	0008      	movs	r0, r1
 800b3a6:	6023      	str	r3, [r4, #0]
 800b3a8:	f7f8 ff34 	bl	8004214 <_sbrk>
 800b3ac:	1c43      	adds	r3, r0, #1
 800b3ae:	d103      	bne.n	800b3b8 <_sbrk_r+0x1c>
 800b3b0:	6823      	ldr	r3, [r4, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d000      	beq.n	800b3b8 <_sbrk_r+0x1c>
 800b3b6:	602b      	str	r3, [r5, #0]
 800b3b8:	bd70      	pop	{r4, r5, r6, pc}
 800b3ba:	46c0      	nop			; (mov r8, r8)
 800b3bc:	20001688 	.word	0x20001688

0800b3c0 <__ascii_mbtowc>:
 800b3c0:	b082      	sub	sp, #8
 800b3c2:	2900      	cmp	r1, #0
 800b3c4:	d100      	bne.n	800b3c8 <__ascii_mbtowc+0x8>
 800b3c6:	a901      	add	r1, sp, #4
 800b3c8:	1e10      	subs	r0, r2, #0
 800b3ca:	d006      	beq.n	800b3da <__ascii_mbtowc+0x1a>
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d006      	beq.n	800b3de <__ascii_mbtowc+0x1e>
 800b3d0:	7813      	ldrb	r3, [r2, #0]
 800b3d2:	600b      	str	r3, [r1, #0]
 800b3d4:	7810      	ldrb	r0, [r2, #0]
 800b3d6:	1e43      	subs	r3, r0, #1
 800b3d8:	4198      	sbcs	r0, r3
 800b3da:	b002      	add	sp, #8
 800b3dc:	4770      	bx	lr
 800b3de:	2002      	movs	r0, #2
 800b3e0:	4240      	negs	r0, r0
 800b3e2:	e7fa      	b.n	800b3da <__ascii_mbtowc+0x1a>

0800b3e4 <memmove>:
 800b3e4:	b510      	push	{r4, lr}
 800b3e6:	4288      	cmp	r0, r1
 800b3e8:	d902      	bls.n	800b3f0 <memmove+0xc>
 800b3ea:	188b      	adds	r3, r1, r2
 800b3ec:	4298      	cmp	r0, r3
 800b3ee:	d303      	bcc.n	800b3f8 <memmove+0x14>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	e007      	b.n	800b404 <memmove+0x20>
 800b3f4:	5c8b      	ldrb	r3, [r1, r2]
 800b3f6:	5483      	strb	r3, [r0, r2]
 800b3f8:	3a01      	subs	r2, #1
 800b3fa:	d2fb      	bcs.n	800b3f4 <memmove+0x10>
 800b3fc:	bd10      	pop	{r4, pc}
 800b3fe:	5ccc      	ldrb	r4, [r1, r3]
 800b400:	54c4      	strb	r4, [r0, r3]
 800b402:	3301      	adds	r3, #1
 800b404:	429a      	cmp	r2, r3
 800b406:	d1fa      	bne.n	800b3fe <memmove+0x1a>
 800b408:	e7f8      	b.n	800b3fc <memmove+0x18>

0800b40a <__malloc_lock>:
 800b40a:	4770      	bx	lr

0800b40c <__malloc_unlock>:
 800b40c:	4770      	bx	lr

0800b40e <_realloc_r>:
 800b40e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b410:	0007      	movs	r7, r0
 800b412:	000d      	movs	r5, r1
 800b414:	0016      	movs	r6, r2
 800b416:	2900      	cmp	r1, #0
 800b418:	d105      	bne.n	800b426 <_realloc_r+0x18>
 800b41a:	0011      	movs	r1, r2
 800b41c:	f7ff fe00 	bl	800b020 <_malloc_r>
 800b420:	0004      	movs	r4, r0
 800b422:	0020      	movs	r0, r4
 800b424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b426:	2a00      	cmp	r2, #0
 800b428:	d103      	bne.n	800b432 <_realloc_r+0x24>
 800b42a:	f7ff fdaf 	bl	800af8c <_free_r>
 800b42e:	0034      	movs	r4, r6
 800b430:	e7f7      	b.n	800b422 <_realloc_r+0x14>
 800b432:	f000 f81e 	bl	800b472 <_malloc_usable_size_r>
 800b436:	002c      	movs	r4, r5
 800b438:	42b0      	cmp	r0, r6
 800b43a:	d2f2      	bcs.n	800b422 <_realloc_r+0x14>
 800b43c:	0031      	movs	r1, r6
 800b43e:	0038      	movs	r0, r7
 800b440:	f7ff fdee 	bl	800b020 <_malloc_r>
 800b444:	1e04      	subs	r4, r0, #0
 800b446:	d0ec      	beq.n	800b422 <_realloc_r+0x14>
 800b448:	0029      	movs	r1, r5
 800b44a:	0032      	movs	r2, r6
 800b44c:	f7fd ff34 	bl	80092b8 <memcpy>
 800b450:	0029      	movs	r1, r5
 800b452:	0038      	movs	r0, r7
 800b454:	f7ff fd9a 	bl	800af8c <_free_r>
 800b458:	e7e3      	b.n	800b422 <_realloc_r+0x14>

0800b45a <__ascii_wctomb>:
 800b45a:	1e0b      	subs	r3, r1, #0
 800b45c:	d004      	beq.n	800b468 <__ascii_wctomb+0xe>
 800b45e:	2aff      	cmp	r2, #255	; 0xff
 800b460:	d904      	bls.n	800b46c <__ascii_wctomb+0x12>
 800b462:	238a      	movs	r3, #138	; 0x8a
 800b464:	6003      	str	r3, [r0, #0]
 800b466:	3b8b      	subs	r3, #139	; 0x8b
 800b468:	0018      	movs	r0, r3
 800b46a:	4770      	bx	lr
 800b46c:	700a      	strb	r2, [r1, #0]
 800b46e:	2301      	movs	r3, #1
 800b470:	e7fa      	b.n	800b468 <__ascii_wctomb+0xe>

0800b472 <_malloc_usable_size_r>:
 800b472:	1f0b      	subs	r3, r1, #4
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	1f18      	subs	r0, r3, #4
 800b478:	2b00      	cmp	r3, #0
 800b47a:	da01      	bge.n	800b480 <_malloc_usable_size_r+0xe>
 800b47c:	580b      	ldr	r3, [r1, r0]
 800b47e:	18c0      	adds	r0, r0, r3
 800b480:	4770      	bx	lr
	...

0800b484 <_init>:
 800b484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b486:	46c0      	nop			; (mov r8, r8)
 800b488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b48a:	bc08      	pop	{r3}
 800b48c:	469e      	mov	lr, r3
 800b48e:	4770      	bx	lr

0800b490 <_fini>:
 800b490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b492:	46c0      	nop			; (mov r8, r8)
 800b494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b496:	bc08      	pop	{r3}
 800b498:	469e      	mov	lr, r3
 800b49a:	4770      	bx	lr
